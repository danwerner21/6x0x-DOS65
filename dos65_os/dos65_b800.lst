ca65 V2.19 - Git 128b15a71
Main file   : dos65.asm
Current file: dos65.asm

000000r 1               ;sysgen
000000r 1               ;version 2.15-a
000000r 1               ;released:	30 november 1985 (2.10)
000000r 1               ;last revised:	2 may 1996 (2.11)
000000r 1               ;			eliminated word mode for 1024 blocks
000000r 1               ;			made extent a single byte
000000r 1               ;		3 may 1996 (2.12)
000000r 1               ;			added initial exm related code
000000r 1               ;		11 may 1996 (2.13)
000000r 1               ;			added use of exm in getblk
000000r 1               ;			added code to set exm & cexm1f
000000r 1               ;			corrected errors
000000r 1               ;		19 may 1996 (2.14)
000000r 1               ;			changed ccm ren to "to from" syntax
000000r 1               ;			allowed _ in file names
000000r 1               ;		13 march 2008 (2.15)
000000r 1               ;			reformatted for TASM & ASM210+
000000r 1               ;			eliminated dependence on "IBM" format
000000r 1               ;			  by reading first sector # using SIM+51
000000r 1               ;			  TRANSLATE code. If translate
000000r 1               ;			  does not have first physical sector in first
000000r 1               ;			  position this approach may not work.
000000r 1               ;			  SIM can also perform no translation at all.
000000r 1               ;			  Also assumes BOOT & SIM both know correct
000000r 1               ;			  starting sector for cold & warm boot. It
000000r 1               ;			  should work regardless of physical sector
000000r 1               ;			  size as long as existing SIM is configured
000000r 1               ;			  correctly for destination drive. BOOT
000000r 1               ;			  must correctly handle sectors > 128 bytes
000000r 1               ;			  as must WARM BOOT in SIM.
000000r 1               ;			  In any case BOOT and WARM BOOT must
000000r 1               ;			  read sectors in sequential order, i.e.,
000000r 1               ;			  no interleave.
000000r 1               ;this program contains the complete dos/65 operating
000000r 1               ;system except for the boot and sim.
000000r 1               ;when used by the system operator this program
000000r 1               ;provides the capability to construct a new
000000r 1               ;operating system including the users boot and sim.
000000r 1               ;the system is relocated to fit the memory size
000000r 1               ;specified by the user and is written onto
000000r 1               ;the system tracks of the specified drive.
000000r 1               ;improvements over version 2.0 include:
000000r 1               ;	use of "from to" syntax for ren
000000r 1               ;	addition of go command
000000r 1               ;	addition of load command
000000r 1               ;	ability to enter numbers as decimal or hex
000000r 1               ;	address parameter added to save
000000r 1               ;	error checking in sysgen (write)
000000r 1               ;	write type for deblocking added
000000r 1               ;	page zero 0 & 1 not used
000000r 1               ;	allow _ in file names
000000r 1               
000000r 1                       .INCLUDE "DOSDEFN.ASM"  ; base addresses and definitions
000000r 2               ;________________________________________________________________________________________________________________________________
000000r 2               ;
000000r 2               ;	DOS/65 base addresses and definitions
000000r 2               ;
000000r 2               ;  DWERNER 04/24/2022 	Initial
000000r 2               ;________________________________________________________________________________________________________________________________
000000r 2               
000000r 2               ;base addresses and definitions
000000r 2               btejmp          = $0100         ; warm boot jump
000000r 2               pemjmp          = $0103         ; jump to pem
000000r 2               iostat          = $0106         ; i/o status
000000r 2               dflfcb          = $0107         ; default fcb
000000r 2               dflbuf          = $0128         ; default buffer
000000r 2               memmovr         = $0200         ; 0200-02ff subr to move data from ram/rom disks
000000r 2               MD_PAGERA       = $0200         ; PAGE DRIVER ADDRESS
000000r 2               IO              = $0300         ; 0300-03FF Memory mapped IO
000000r 2               MPCL_ROM        = $037C         ; ROM MAPPER
000000r 2               MPCL_RAM        = $0378         ; RAM MAPPER
000000r 2               hstbuf          = $0400         ; 0400-05ff host buffer
000000r 2               ;
000000r 2               ; DRIVER WORKING STORAGE
000000r 2               ;
000000r 2               
000000r 2               
000000r 2               DSKY_BUF        = $0600         ; Eight Bytes DSKY display buffer
000000r 2               DSKY_BUFLEN     = 8             ;
000000r 2               DSKY_HEXBUF     = $0608         ; Four Bytes DSKY hex buffer
000000r 2               DSKY_HEXBUFLEN  = 4             ;
000000r 2               sektrk          = $060C         ; seek track number
000000r 2               seksec          = $060E         ; seek sector number
000000r 2               debcyll         = $0610         ; DEBLOCKED CYLINDER LSB
000000r 2               debcylm         = $0611         ; DEBLOCKED CYLINDER MSB
000000r 2               debsehd         = $0612         ; DEBLOCKED SECTOR AND HEAD (HS)
000000r 2               sekdsk          = $0616         ; seek disk number
000000r 2               dskcfg          = $0617         ; 16 bytes disk configuration table
000000r 2               DSKUNIT         = $0628         ; seek disk number
000000r 2               slicetmp        = $0631         ; (word)
000000r 2               STACKA          = $0635
000000r 2               nmsstr          = $0636
000000r 2               FLRETRY         = $0637         ;
000000r 2               FLRETRY1        = $0638         ;
000000r 2               ST0             = $0639         ;
000000r 2               FLERR           = $063A         ;
000000r 2               FCMD            = $063B         ;
000000r 2               PPIDEINDEX      = $063C
000000r 2               CURRENT_IDE_DRIVE = $063D
000000r 2               DSKY_X_STORAGE  = $063E
000000r 2               DSKY_Y_STORAGE  = $063F
000000r 2               DSKY_TEMP_VAL   = $0640
000000r 2               DSKY_PPIX_VAL   = $0641
000000r 2               FLOPPY_DETCT    = $0642
000000r 2               DSKY_PRESENT    = $0643
000000r 2               Cdebcyll        = $0644         ; DEBLOCKED CYLINDER LSB (IN CACHE)
000000r 2               Cdebcylm        = $0645         ; DEBLOCKED CYLINDER MSB (IN CACHE)
000000r 2               Cdebsehd        = $0646         ; DEBLOCKED SECTOR AND HEAD (HS)  (IN CACHE)
000000r 2               
000000r 2               tea             = $800          ;tea start
000000r 2               
000000r 2               ;zero page for setup
000000r 2               addinp          = $02           ;initialized to a,y
000000r 2               bufadd          = $04           ;buffer address
000000r 2               alcpnt          = $06           ;allocation map pointer
000000r 2               chkpnt          = $08           ;checksum map pointer
000000r 2               numvar          = 8             ;eight bytes
000000r 2               
000000r 2               
000000r 2               msgptr          = chkpnt+2      ;message pointer
000000r 2               movptr          = msgptr        ;and move pointer
000000r 2               dcbloc          = msgptr+2      ;pointer to dcb
000000r 2               
000000r 2               dcbpc           = $2C           ;pointer to DCB table
000000r 2               dskcfpc         = $2E           ;pointer to disk configuration table
000000r 2               cmdlnp          = $30           ;pointer to command line buffer
000000r 2               farfunct        = $32           ; function to call in driver area
000000r 2               farpointer      = $33           ;
000000r 2               IRQVECTOR       = $35           ; VECTOR FOR USER IRQ RTN
000000r 2               NMIVECTOR       = $37           ; VECTOR FOR USER NMI RTN
000000r 2               CONSOLE         = $3A
000000r 2               TEMPWORD        = $3B           ;
000000r 2               TEMPWORD1       = $3D           ;
000000r 2               TEMPWORD2       = $3F           ;
000000r 2               STRPTR          = $41           ;
000000r 2               DSKYMODE        = $43           ; DSKY MODE (0=NONE, 1=DSKY, 2=DSKY NG
000000r 2               
000000r 2               
000000r 2               DO_FARCALL      = $FFF0
000000r 2               
000000r 2               ;page zero and system ram assignments
000000r 2               DEST            = $EC           ;pointer for OutMsg
000000r 2               SRC             = $EE           ;pointer for OutMsg
000000r 2               OUTMSG_W        = $F0           ;pointer for OutMsg
000000r 2               dmaadr          = $f4           ;pointer for r/w
000000r 2               
000000r 2               
000000r 2               ;pem constants on entry to write
000000r 2               wrall           = 0             ;write to allocated
000000r 2               wrdir           = 1             ;write to directory
000000r 2               wrual           = 2             ;write to unallocated
000000r 2               
000000r 2               ;fixed parameters
000000r 2               lf              = $a            ;linefeeed
000000r 2               cr              = $d            ;return
000000r 2               eof             = $1a           ;end of file
000000r 2               null            = 0             ;null
000000r 2               ctlc            = 3             ;abort
000000r 2               ctle            = 5             ;physical cr lf
000000r 2               ctli            = 9             ;tab character
000000r 2               ctlp            = $10           ;toggle printer
000000r 2               ctlr            = $12           ;repeat line
000000r 2               ctls            = $13           ;freeze
000000r 2               ctlx            = $18           ;cancel
000000r 2               semico          = $3b           ;semicolon
000000r 2               delete          = $08           ;delete character
000000r 2               numcmd          = 36            ;number commands
000000r 2               DEFDRV          = 0             ; SET TO DEFAULT DRIVE LETTER
000000r 2               
000000r 2                       .DEFINE COMSUFFIX "COM"
000000r 2               DEBUG           = 0
000000r 2               BANKED_DRIVER_DISPATCHER=$8800
000000r 2               
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "OS"
000000r 1                       .ORG    DOSBEGIN
00B800  1                       .INCLUDE "ccm215.asm"
00B800  2               ;________________________________________________________________________________________________________________________________
00B800  2               ;
00B800  2               ;	DOS/65 console command module (ccm)
00B800  2               ;
00B800  2               ;________________________________________________________________________________________________________________________________
00B800  2               
00B800  2               ;ccm unique definitions
00B800  2               nbuilt          = 7             ;number built in commands
00B800  2               ;main program
00B800  2               ; warm boot vector
00B800  2  4C 35 CD             JMP     boot
00B803  2               ccm:
00B803  2  D8                   CLD                     ;set binary mode
00B804  2  48                   PHA                     ;save drive number
00B805  2  20 FC BB             JSR     rstdsk          ;initialize system
00B808  2  68                   PLA                     ;restore drive num
00B809  2  20 00 BC             JSR     slctds          ;select drive
00B80C  2  AD 1C CC             LDA     sysdef+6        ;get line length
00B80F  2  4A                   LSR     a               ;divide
00B810  2  4A                   LSR     a               ;by
00B811  2  4A                   LSR     a               ;16
00B812  2  4A                   LSR     a               ;for dir
00B813  2  8D F6 BF             STA     sixten          ;and save
00B816  2  AD 43 BF             LDA     cnslng          ;get buffer length
00B819  2  D0 3C                BNE     mrecmd          ;if more handle it
00B81B  2               ccmlpe:
00B81B  2  A2 FF                LDX     #$ff            ;set
00B81D  2  9A                   TXS                     ;stack
00B81E  2  D8                   CLD                     ;set binary mode
00B81F  2  A9 11                LDA     #17             ; SEND A XON
00B821  2  20 F0 BB             JSR     chrout          ; ----------
00B824  2  20 69 BC             JSR     hdrout          ;send header
00B827  2  A9 3E                LDA     #'>'            ;then print
00B829  2  20 F0 BB             JSR     chrout          ;prompt
00B82C  2  AD 8B BE             LDA     cnsbvc          ;point to start
00B82F  2  AC 8C BE             LDY     cnsbvc+1        ;of buffer
00B832  2  20 F4 BB             JSR     rdebuf          ;do buffer read
00B835  2  A0 00                LDY     #0              ;clear index
00B837  2  AE 43 BF             LDX     cnslng          ;get length
00B83A  2  F0 DF                BEQ     ccmlpe          ;loop if empty
00B83C  2               lwrupr:
00B83C  2  B9 44 BF             LDA     cnstxt,y        ;else get char
00B83F  2  C9 61                CMP     #'a'            ;if less than a
00B841  2  90 09                BCC     nxtchg          ;skip convert
00B843  2  C9 7B                CMP     #'z'+1          ;if over z
00B845  2  B0 05                BCS     nxtchg          ;skip convert
00B847  2  29 5F                AND     #%01011111      ;else convert
00B849  2  99 44 BF             STA     cnstxt,y        ;put back in buffer
00B84C  2               nxtchg:
00B84C  2  C8                   INY                     ;bump index
00B84D  2  CA                   DEX                     ;count down
00B84E  2  D0 EC                BNE     lwrupr          ;loop if more
00B850  2  8A                   TXA                     ;set a to zero
00B851  2  99 44 BF             STA     cnstxt,y        ;insert stopper
00B854  2  8D E7 BF             STA     cnbfpt          ;initialize pointer
00B857  2               mrecmd:
00B857  2  20 A4 BD             JSR     stdflb          ;set default buffer
00B85A  2  20 2B BC             JSR     intdsk          ;get drive number
00B85D  2  8D E8 BF             STA     dfldsk          ;store as default
00B860  2  20 A5 BC             JSR     prslin          ;parse command
00B863  2  D0 64                BNE     cmderr          ;error if afn
00B865  2  AD E9 BF             LDA     tmpdsk          ;get temporary
00B868  2  F0 04                BEQ     nodrch          ;if zero ok
00B86A  2  A9 15                LDA     #nbuilt*3       ;else set and
00B86C  2  D0 2E                BNE     dotrns          ;do transient
00B86E  2               nodrch:
00B86E  2  A9 00                LDA     #0              ;clear
00B870  2  AA                   TAX                     ;table index
00B871  2  8D EC BF             STA     ccmcount        ;and count
00B874  2               tsnxfn:
00B874  2  A0 01                LDY     #1              ;set fcb index
00B876  2               tsnxch:
00B876  2  BD 1D BF             LDA     fnctbl,x        ;get table entry
00B879  2  F0 1A                BEQ     gotcmd          ;if zero got it
00B87B  2  D9 C3 BF             CMP     fcbone,y        ;else test
00B87E  2  D0 04                BNE     nocmpr          ;no good if not =
00B880  2  E8                   INX                     ;bump
00B881  2  C8                   INY                     ;pointers
00B882  2  D0 F2                BNE     tsnxch          ;and loop
00B884  2               nocmpr:
00B884  2  E8                   INX                     ;go to end
00B885  2  BD 1D BF             LDA     fnctbl,x        ;of table
00B888  2  D0 FA                BNE     nocmpr          ;entry
00B88A  2  E8                   INX                     ;point to next
00B88B  2  EE EC BF             INC     ccmcount        ;bump count
00B88E  2  AD EC BF             LDA     ccmcount        ;and if not
00B891  2  C9 07                CMP     #nbuilt         ;limit then
00B893  2  D0 DF                BNE     tsnxfn          ;try next
00B895  2               gotcmd:
00B895  2  AD EC BF             LDA     ccmcount        ;get count
00B898  2  0A                   ASL     a               ;multiply by two
00B899  2  6D EC BF             ADC     ccmcount        ;then add for x3
00B89C  2               dotrns:
00B89C  2  AA                   TAX                     ;use as index
00B89D  2  E8                   INX                     ;bump to pass jmp
00B89E  2  BD 96 BE             LDA     xqfntb,x        ;to get
00B8A1  2  BC 97 BE             LDY     xqfntb+1,x      ;entry address
00B8A4  2  8D EA BF             STA     vector          ;then set
00B8A7  2  8C EB BF             STY     vector+1        ;vector
00B8AA  2  AD 8F BE             LDA     extcvc+1        ;save
00B8AD  2  48                   PHA                     ;return
00B8AE  2  AD 8E BE             LDA     extcvc          ;address
00B8B1  2  48                   PHA                     ;on stack
00B8B2  2  6C EA BF             JMP     (vector)        ;execute
00B8B5  2               extcmd:
00B8B5  2  20 34 BC             JSR     rstddr          ;restore default
00B8B8  2               extwod:
00B8B8  2  20 A5 BC             JSR     prslin          ;parse more
00B8BB  2  AD C4 BF             LDA     fcbone+1        ;if first
00B8BE  2  38                   SEC                     ;character
00B8BF  2  E9 20                SBC     #' '            ;not a space
00B8C1  2  0D E9 BF             ORA     tmpdsk          ;or if temporary
00B8C4  2  D0 03                BNE     cmderr          ;then an error
00B8C6  2  4C 1B B8             JMP     ccmlpe          ;else loop
00B8C9  2               ;command error syntax handler
00B8C9  2               cmderr:
00B8C9  2  20 E1 BB             JSR     ccrlf           ;do a cr lf
00B8CC  2  AC ED BF             LDY     curpnt          ;get command pointer
00B8CF  2               cmerlp:
00B8CF  2  B9 44 BF             LDA     cnstxt,y        ;get char
00B8D2  2  F0 0A                BEQ     cmerex          ;if null then done
00B8D4  2  C9 20                CMP     #' '            ;if space
00B8D6  2  F0 06                BEQ     cmerex          ;then done
00B8D8  2  20 72 BC             JSR     cotsxy          ;output with save
00B8DB  2  C8                   INY                     ;point to next
00B8DC  2  D0 F1                BNE     cmerlp          ;and loop
00B8DE  2               cmerex:
00B8DE  2  A9 3F                LDA     #'?'            ;send a
00B8E0  2  20 F0 BB             JSR     chrout          ;question mark
00B8E3  2  4C 1B B8             JMP     ccmlpe          ;and start over
00B8E6  2               ;execute dir command
00B8E6  2               ; dir <afn>
00B8E6  2               dir:
00B8E6  2  20 A5 BC             JSR     prslin          ;find object file
00B8E9  2  20 AB BD             JSR     clrslt          ;clear auto and select
00B8EC  2  A9 20                LDA     #' '            ;if name
00B8EE  2  CD C4 BF             CMP     fcbone+1        ;and
00B8F1  2  D0 0F                BNE     findfr          ;type are
00B8F3  2  CD CC BF             CMP     fcbone+9        ;not empty
00B8F6  2  D0 0A                BNE     findfr          ;then use it
00B8F8  2  A9 3F                LDA     #'?'            ;else
00B8FA  2  A0 0B                LDY     #11             ;fill
00B8FC  2               fillqu:
00B8FC  2  99 C3 BF             STA     fcbone,y        ;fcb
00B8FF  2  88                   DEY                     ;with
00B900  2  D0 FA                BNE     fillqu          ;question marks
00B902  2               findfr:
00B902  2  20 5F BC             JSR     srchf1          ;search for first match
00B905  2  30 58                BMI     notfnd          ;error if none
00B907  2               fnddir:
00B907  2  AD F6 BF             LDA     sixten          ;set across
00B90A  2  8D F5 BF             STA     across          ;to four
00B90D  2  20 E1 BB             JSR     ccrlf           ;do a crlf
00B910  2               dirl:
00B910  2  20 6C BC             JSR     hdr             ;do header
00B913  2  A9 3A                LDA     #':'            ;then a
00B915  2  20 F0 BB             JSR     chrout          ;colon
00B918  2  AD EE BF             LDA     diradd          ;get number
00B91B  2  0A                   ASL     a               ;and
00B91C  2  0A                   ASL     a               ;multiply
00B91D  2  0A                   ASL     a               ;by
00B91E  2  0A                   ASL     a               ;thirty two
00B91F  2  0A                   ASL     a               ;then
00B920  2  29 60                AND     #%01100000      ;mask out insignificant
00B922  2  A8                   TAY                     ;make a pointer
00B923  2  C8                   INY                     ;and bump
00B924  2  A2 01                LDX     #1              ;set counter
00B926  2               nmelpe:
00B926  2  B9 28 01             LDA     dflbuf,y        ;get name
00B929  2  29 7F                AND     #$7F            ;mask out read only bit
00B92B  2  20 72 BC             JSR     cotsxy          ;else send to console
00B92E  2               noname:
00B92E  2  C8                   INY                     ;bump index
00B92F  2  E8                   INX                     ;and count
00B930  2  E0 0C                CPX     #12             ;if count is 12
00B932  2  F0 0C                BEQ     endnme          ;then done
00B934  2  E0 09                CPX     #9              ;or if not 9
00B936  2  D0 EE                BNE     nmelpe          ;then loop
00B938  2  A9 2E                LDA     #'.'            ;else send
00B93A  2  20 72 BC             JSR     cotsxy          ;a period
00B93D  2  4C 26 B9             JMP     nmelpe          ;and loop
00B940  2               endnme:
00B940  2  20 F8 BB             JSR     chkcst          ;check console status
00B943  2  D0 19                BNE     extdir          ;if key down quit
00B945  2  20 97 BC             JSR     setone          ;else point to fcb
00B948  2  20 10 BC             JSR     srchnx          ;else search for next
00B94B  2  8D EE BF             STA     diradd          ;save number
00B94E  2  30 0E                BMI     extdir          ;quit if not found
00B950  2  CE F5 BF             DEC     across          ;drop count
00B953  2  F0 B2                BEQ     fnddir          ;new line if 0
00B955  2  20 EE BB             JSR     spcout          ;send
00B958  2  20 EE BB             JSR     spcout          ;two spaces
00B95B  2  4C 10 B9             JMP     dirl            ;and stay
00B95E  2               extdir:
00B95E  2  60                   RTS                     ;else done
00B95F  2               ;not found error handler
00B95F  2               notfnd:
00B95F  2  A0 34                LDY     #ntfnms         ;point to message
00B961  2  4C C0 BD             JMP     sndmsg          ;send and exit
00B964  2               ;execute ren command
00B964  2               ; ren <ufn> <ufn>
00B964  2               ;where first ufn is from name and second is to name
00B964  2               ren:
00B964  2  20 A5 BC             JSR     prslin          ;get old name
00B967  2  D0 57                BNE     renerr          ;error if afn
00B969  2  20 9E BC             JSR     tmpold          ;save drive
00B96C  2  20 AB BD             JSR     clrslt          ;clear auto and select
00B96F  2  20 5F BC             JSR     srchf1          ;if file does not exist
00B972  2  30 4F                BMI     fntfnd          ;then an error
00B974  2  20 E0 BD             JSR     frssec          ;move name to second half
00B977  2  AC E7 BF             LDY     cnbfpt          ;get pointer
00B97A  2  B9 44 BF             LDA     cnstxt,y        ;and then char
00B97D  2  C9 20                CMP     #' '            ;if not a space
00B97F  2  D0 3C                BNE     rensyn          ;then error
00B981  2  20 A5 BC             JSR     prslin          ;get new name
00B984  2  D0 37                BNE     rensyn          ;error if afn
00B986  2  AD E9 BF             LDA     tmpdsk          ;get new drive
00B989  2  F0 12                BEQ     nonwdr          ;if zero ok
00B98B  2  CD F2 BF             CMP     oldtmp          ;compare to old
00B98E  2  F0 0D                BEQ     nonwdr          ;ok if same
00B990  2  38                   SEC                     ;drop for default check
00B991  2  E9 01                SBC     #1
00B993  2  CD E8 BF             CMP     dfldsk          ;if not default
00B996  2  D0 25                BNE     rensyn          ;is error
00B998  2  AD F2 BF             LDA     oldtmp          ;and then if from not
00B99B  2  D0 20                BNE     rensyn          ;default is error
00B99D  2               nonwdr:
00B99D  2  AD F2 BF             LDA     oldtmp          ;else get old
00B9A0  2  8D E9 BF             STA     tmpdsk          ;and save
00B9A3  2  A9 00                LDA     #0              ;clear
00B9A5  2  8D D3 BF             STA     fcbone+16
00B9A8  2  20 AB BD             JSR     clrslt          ;reselect
00B9AB  2  20 5F BC             JSR     srchf1          ;search for old
00B9AE  2  10 09                BPL     filexs          ;error if found
00B9B0  2  20 E0 BD             JSR     frssec          ;swap names
00B9B3  2  20 97 BC             JSR     setone          ;point to fcb
00B9B6  2  4C 27 BC             JMP     renmfl          ;and do it
00B9B9  2               ;ren file exists error handler
00B9B9  2               filexs:
00B9B9  2  A0 3E                LDY     #flexms         ;point to
00B9BB  2  D0 08                BNE     remsg           ;and send
00B9BD  2               ;ren syntax error handler
00B9BD  2               rensyn:
00B9BD  2  20 34 BC             JSR     rstddr          ;restore default
00B9C0  2               renerr:
00B9C0  2  4C C9 B8             JMP     cmderr          ;do error
00B9C3  2               ;ren source file not found error handler
00B9C3  2               fntfnd:
00B9C3  2  A0 34                LDY     #ntfnms         ;point to
00B9C5  2               remsg:
00B9C5  2  4C C0 BD             JMP     sndmsg          ;and send
00B9C8  2               ;execute save command
00B9C8  2               ; save <length> <drive:>ufn (<address>)
00B9C8  2               save:
00B9C8  2  A9 00                LDA     #<tea           ;set start address to tea start
00B9CA  2  A0 08                LDY     #>tea
00B9CC  2  8D FC BF             STA     sadr
00B9CF  2  8C FD BF             STY     sadr+1
00B9D2  2  20 05 BE             JSR     bldnum          ;calculate length
00B9D5  2  D0 7A                BNE     saverr          ;error if > 255 pages
00B9D7  2  8D F1 BF             STA     length          ;else save low
00B9DA  2  0D F1 BF             ORA     length          ;test for zero length
00B9DD  2  F0 72                BEQ     saverr          ;error if is
00B9DF  2  20 A5 BC             JSR     prslin          ;get file name
00B9E2  2  D0 6D                BNE     saverr          ;error if afn
00B9E4  2  20 E0 BD             JSR     frssec          ;move name to second half
00B9E7  2  20 9E BC             JSR     tmpold          ;save drive
00B9EA  2  20 05 BE             JSR     bldnum          ;it is so find value
00B9ED  2  AE C4 BF             LDX     fcbone+1        ;see if there
00B9F0  2  E0 20                CPX     #' '
00B9F2  2  F0 0A                BEQ     nosadr          ;it is not
00B9F4  2  8D FC BF             STA     sadr            ;and set address
00B9F7  2  8C FD BF             STY     sadr+1
00B9FA  2  C0 02                CPY     #2              ;make sure is high enough
00B9FC  2  90 53                BCC     saverr          ;error if not
00B9FE  2               nosadr:
00B9FE  2  20 F3 BD             JSR     secfrs          ;move name back
00BA01  2  20 AB BD             JSR     clrslt          ;clear auto and select
00BA04  2  20 14 BC             JSR     dlt1            ;delete
00BA07  2  20 97 BC             JSR     setone          ;then create
00BA0A  2  20 23 BC             JSR     cratfl          ;new file
00BA0D  2  30 45                BMI     noroom          ;say no room if error
00BA0F  2  20 4A BC             JSR     open1           ;open file
00BA12  2  30 44                BMI     noopen          ;if error
00BA14  2  18                   CLC                     ;now find end page
00BA15  2  AD FD BF             LDA     sadr+1
00BA18  2  6D F1 BF             ADC     length
00BA1B  2  8D F1 BF             STA     length
00BA1E  2  AD FC BF             LDA     sadr            ;get start address
00BA21  2  AC FD BF             LDY     sadr+1
00BA24  2               wrtmre:
00BA24  2  8D F3 BF             STA     dskbuf          ;set
00BA27  2  8C F4 BF             STY     dskbuf+1        ;buffer
00BA2A  2  20 C5 CA             JSR     mv128           ;move data to buffer
00BA2D  2  20 97 BC             JSR     setone          ;point to fcb
00BA30  2  20 1F BC             JSR     wrrcrd          ;write record
00BA33  2  D0 27                BNE     wrterr          ;exit if error
00BA35  2  18                   CLC                     ;else
00BA36  2  AD F3 BF             LDA     dskbuf          ;get old
00BA39  2  AC F4 BF             LDY     dskbuf+1        ;buffer
00BA3C  2  69 80                ADC     #128            ;add 128
00BA3E  2  90 03                BCC     donotc          ;if carry
00BA40  2  C8                   INY                     ;bump upper
00BA41  2  F0 05                BEQ     clssav          ;done if page zero
00BA43  2               donotc:
00BA43  2  CC F1 BF             CPY     length          ;loop if upper
00BA46  2  D0 DC                BNE     wrtmre          ;not at limit
00BA48  2               clssav:
00BA48  2  20 97 BC             JSR     setone          ;else point to
00BA4B  2  20 08 BC             JSR     clsefl          ;and close file
00BA4E  2  30 10                BMI     cantcl          ;say so if error
00BA50  2               extera:
00BA50  2  60                   RTS
00BA51  2               ;save error handler
00BA51  2               saverr:
00BA51  2  4C C9 B8             JMP     cmderr          ;do error
00BA54  2               ;save no room error handler
00BA54  2               noroom:
00BA54  2  A0 01                LDY     #nospms         ;point to
00BA56  2  D0 0A                BNE     semsg           ;and send
00BA58  2               ;save can not open error handler
00BA58  2               noopen:
00BA58  2  A0 55                LDY     #cnnoms         ;point to
00BA5A  2  D0 06                BNE     semsg           ;and send
00BA5C  2               ;save write error handler
00BA5C  2               wrterr:
00BA5C  2  A0 62                LDY     #wrerms         ;point
00BA5E  2  D0 02                BNE     semsg           ;to and send
00BA60  2               ;save can not close error
00BA60  2               cantcl:
00BA60  2  A0 0A                LDY     #ntclms         ;point to
00BA62  2               semsg:
00BA62  2  4C C0 BD             JMP     sndmsg          ;and send
00BA65  2               ;execute era command
00BA65  2               ; era <afn>
00BA65  2               era:
00BA65  2  20 A5 BC             JSR     prslin          ;get file name
00BA68  2  C9 0B                CMP     #11             ;if not all ?
00BA6A  2  D0 13                BNE     nteral          ;then skip verify
00BA6C  2  A0 18                LDY     #alflms         ;else point to
00BA6E  2  20 C0 BD             JSR     sndmsg          ;and send all files
00BA71  2  20 EA BB             JSR     cnsrde          ;get an input
00BA74  2  48                   PHA                     ;and save
00BA75  2  20 E1 BB             JSR     ccrlf           ;do a cr lf
00BA78  2  68                   PLA                     ;restore char
00BA79  2  29 5F                AND     #$5f            ;convert to upper case
00BA7B  2  C9 59                CMP     #'Y'            ;if not y
00BA7D  2  D0 D1                BNE     extera          ;then quit
00BA7F  2               nteral:
00BA7F  2  20 AB BD             JSR     clrslt          ;clear auto and select
00BA82  2  4C 14 BC             JMP     dlt1            ;delete first
00BA85  2               ;execute type command
00BA85  2               ; type d:ufn
00BA85  2               type:
00BA85  2  20 A5 BC             JSR     prslin          ;get file
00BA88  2  D0 30                BNE     typafn          ;error if afn
00BA8A  2  20 47 BC             JSR     casdo1          ;clear - select - open file 1
00BA8D  2  30 32                BMI     notype          ;error if not found
00BA8F  2  20 E1 BB             JSR     ccrlf           ;else do cr lf
00BA92  2               typmre:
00BA92  2  20 59 BC             JSR     read1           ;read record
00BA95  2  F0 04                BEQ     okread          ;if ok continue
00BA97  2  10 20                BPL     exttyp          ;exit if just end
00BA99  2  30 22                BMI     typerr          ;else error
00BA9B  2               okread:
00BA9B  2  A2 00                LDX     #0              ;clear index
00BA9D  2               typlpe:
00BA9D  2  BD 28 01             LDA     dflbuf,x        ;get char
00BAA0  2  C9 1A                CMP     #eof            ;if eof
00BAA2  2  F0 15                BEQ     exttyp          ;then exit
00BAA4  2  20 72 BC             JSR     cotsxy          ;else send
00BAA7  2  20 F8 BB             JSR     chkcst          ;if key down
00BAAA  2  D0 08                BNE     exttok          ;then exit
00BAAC  2  AE EF BF             LDX     savx            ;else get index
00BAAF  2  E8                   INX                     ;bump it
00BAB0  2  10 EB                BPL     typlpe          ;and loop if < 128
00BAB2  2  30 DE                BMI     typmre          ;else read more
00BAB4  2               exttok:
00BAB4  2  A2 06                LDX     #6              ;clear console
00BAB6  2  20 03 01             JSR     pemjmp          ;with no echo
00BAB9  2               exttyp:
00BAB9  2  60                   RTS
00BABA  2               ;type syntax error handler
00BABA  2               typafn:
00BABA  2  4C C9 B8             JMP     cmderr          ;error return
00BABD  2               ;type read error handler
00BABD  2               typerr:
00BABD  2  A0 29                LDY     #rderms         ;point to
00BABF  2  D0 02                BNE     temsg           ;and send
00BAC1  2               ;type not found error handler
00BAC1  2               notype:
00BAC1  2  A0 34                LDY     #ntfnms         ;point to
00BAC3  2               temsg:
00BAC3  2  4C C0 BD             JMP     sndmsg          ;and send
00BAC6  2               ;execute load command
00BAC6  2               ; load <ufn> (<address>)
00BAC6  2               load:
00BAC6  2  20 D5 BD             JSR     setddb          ;set load start to tea start
00BAC9  2  20 A5 BC             JSR     prslin          ;build fcb
00BACC  2  D0 EC                BNE     typafn          ;error if afn
00BACE  2  20 E0 BD             JSR     frssec          ;save in second half
00BAD1  2  20 9E BC             JSR     tmpold          ;save file
00BAD4  2  20 05 BE             JSR     bldnum          ;find start address
00BAD7  2  AE C4 BF             LDX     fcbone+1        ;see if number
00BADA  2  E0 20                CPX     #' '
00BADC  2  F0 03                BEQ     usedfl          ;if none use default
00BADE  2  20 D9 BD             JSR     setdb           ;and set
00BAE1  2               usedfl:
00BAE1  2  20 F3 BD             JSR     secfrs          ;move name back
00BAE4  2  20 47 BC             JSR     casdo1          ;clear - select - open file 1
00BAE7  2  30 D8                BMI     notype          ;exit if not found
00BAE9  2  AD F3 BF             LDA     dskbuf          ;get load start
00BAEC  2  AC F4 BF             LDY     dskbuf+1
00BAEF  2               lcmdlp:
00BAEF  2  20 2F BC             JSR     setbuf          ;set as disk buffer
00BAF2  2  20 59 BC             JSR     read1           ;read record
00BAF5  2  D0 06                BNE     loadnd          ;done if not zero
00BAF7  2  20 B2 CA             JSR     adjdb           ;bump address
00BAFA  2  4C EF BA             JMP     lcmdlp          ;and loop
00BAFD  2               loadnd:
00BAFD  2  30 BE                BMI     typerr          ;if error say so
00BAFF  2  4C A4 BD             JMP     stdflb          ;back to default buffer
00BB02  2               ;execute go command
00BB02  2               ; go (<address>)
00BB02  2               go:
00BB02  2  20 05 BE             JSR     bldnum          ;get address
00BB05  2  AE C4 BF             LDX     fcbone+1        ;get first char
00BB08  2  E0 20                CPX     #' '            ;see if nothing
00BB0A  2  F0 03                BEQ     nolnum          ;nothing so use tea
00BB0C  2  4C 76 BB             JMP     godoit          ;then execute
00BB0F  2               nolnum:
00BB0F  2  4C 72 BB             JMP     gotea
00BB12  2               ;execute trns (transient) command
00BB12  2               ; <ufn> (<fn>) (<fn>)
00BB12  2               trns:
00BB12  2  AD C4 BF             LDA     fcbone+1        ;get first char
00BB15  2  C9 20                CMP     #' '            ;if not space
00BB17  2  D0 11                BNE     chktyp          ;check type
00BB19  2  AD E9 BF             LDA     tmpdsk          ;else test temp
00BB1C  2  F0 09                BEQ     skpdrv          ;if none skip
00BB1E  2  38                   SEC                     ;else convert
00BB1F  2  E9 01                SBC     #1              ;to number
00BB21  2  8D E8 BF             STA     dfldsk          ;set default
00BB24  2  20 00 BC             JSR     slctds          ;and select
00BB27  2               skpdrv:
00BB27  2  4C B8 B8             JMP     extwod          ;return
00BB2A  2               chktyp:
00BB2A  2  AD CC BF             LDA     fcbone+9        ;get type
00BB2D  2  C9 20                CMP     #' '            ;if space
00BB2F  2  F0 03                BEQ     typemp          ;then ok
00BB31  2  4C D9 BB             JMP     trnerr          ;else error
00BB34  2               typemp:
00BB34  2  A2 02                LDX     #2              ;make
00BB36  2               setcom:
00BB36  2  BD E4 BF             LDA     typcom,x        ;type
00BB39  2  9D CC BF             STA     fcbone+9,x      ;com
00BB3C  2  CA                   DEX                     ;then
00BB3D  2  10 F7                BPL     setcom          ;continue
00BB3F  2  20 47 BC             JSR     casdo1          ;clear - select - open file one
00BB42  2  10 03                BPL     gottrn          ;jump if ok
00BB44  2  4C D6 BB             JMP     topner          ;else do error
00BB47  2               gottrn:
00BB47  2  20 D5 BD             JSR     setddb          ;set start to tea
00BB4A  2               nxtrcr:
00BB4A  2  20 2F BC             JSR     setbuf          ;set address
00BB4D  2  20 59 BC             JSR     read1           ;read fcb 1
00BB50  2  D0 1E                BNE     endlde          ;branch if error or eof
00BB52  2  20 B2 CA             JSR     adjdb           ;adjust address up by 128
00BB55  2  CD 91 BE             CMP     ccmvc           ;if new low
00BB58  2  90 07                BCC     tryhig          ;ok try high
00BB5A  2  CC 92 BE             CPY     ccmvc+1         ;else if high
00BB5D  2  90 EB                BCC     nxtrcr          ;ok do more
00BB5F  2  B0 07                BCS     chklnd          ;else check for end
00BB61  2               tryhig:
00BB61  2  CC 92 BE             CPY     ccmvc+1         ;if high less
00BB64  2  90 E4                BCC     nxtrcr          ;then ok
00BB66  2  F0 E2                BEQ     nxtrcr          ;or ok if same
00BB68  2               chklnd:
00BB68  2  20 A4 BD             JSR     stdflb          ;set buffer to default
00BB6B  2  20 59 BC             JSR     read1           ;read (should be eof)
00BB6E  2  F0 6C                BEQ     tlderr          ;error if more
00BB70  2               endlde:
00BB70  2  30 6A                BMI     tlderr          ;do error
00BB72  2               gotea:
00BB72  2  A9 00                LDA     #<tea           ;set go address to tea start
00BB74  2  A0 08                LDY     #>tea
00BB76  2               godoit:
00BB76  2  8D CB BB             STA     do+1            ;set to ay
00BB79  2  8C CC BB             STY     do+2
00BB7C  2  20 34 BC             JSR     rstddr          ;else restore default
00BB7F  2  20 A5 BC             JSR     prslin          ;parse file
00BB82  2  AD E9 BF             LDA     tmpdsk          ;set auto
00BB85  2  8D C3 BF             STA     fcbone          ;select position
00BB88  2  A2 10                LDX     #16             ;do a second
00BB8A  2  20 A7 BC             JSR     prsmre          ;fcb if there
00BB8D  2  AD E9 BF             LDA     tmpdsk          ;set auto select
00BB90  2  8D D3 BF             STA     fcbone+16       ;again
00BB93  2  A0 00                LDY     #0              ;clear record
00BB95  2  8C E3 BF             STY     fcbone+32       ;counter
00BB98  2  A2 20                LDX     #32             ;move
00BB9A  2               movfcb:
00BB9A  2  BD C3 BF             LDA     fcbone,x        ;all
00BB9D  2  9D 07 01             STA     dflfcb,x        ;to
00BBA0  2  CA                   DEX                     ;default
00BBA1  2  10 F7                BPL     movfcb          ;fcb
00BBA3  2  E8                   INX                     ;set x to zero
00BBA4  2               tstbuf:
00BBA4  2  B9 44 BF             LDA     cnstxt,y        ;get char
00BBA7  2  F0 07                BEQ     isnull          ;if null jump
00BBA9  2  C9 20                CMP     #' '            ;or if space
00BBAB  2  F0 03                BEQ     isnull          ;jump
00BBAD  2  C8                   INY                     ;else bump pointer
00BBAE  2  D0 F4                BNE     tstbuf          ;and loop
00BBB0  2               isnull:
00BBB0  2  A9 00                LDA     #0              ;clear
00BBB2  2  8D 28 01             STA     dflbuf          ;count
00BBB5  2               movbuf:
00BBB5  2  B9 44 BF             LDA     cnstxt,y        ;get char
00BBB8  2  9D 29 01             STA     dflbuf+1,x      ;and move
00BBBB  2  F0 07                BEQ     fillov          ;exit if null
00BBBD  2  E8                   INX                     ;increment
00BBBE  2  C8                   INY                     ;counters
00BBBF  2  EE 28 01             INC     dflbuf          ;and length
00BBC2  2  D0 F1                BNE     movbuf          ;and loop
00BBC4  2               fillov:
00BBC4  2  20 E1 BB             JSR     ccrlf           ;do a cr lf
00BBC7  2  20 A4 BD             JSR     stdflb          ;set default
00BBCA  2               do:
00BBCA  2  20 00 08             JSR     tea             ;execute
00BBCD  2  AD E8 BF             LDA     dfldsk          ;get default
00BBD0  2  20 00 BC             JSR     slctds          ;and set
00BBD3  2  4C 1B B8             JMP     ccmlpe          ;then loop
00BBD6  2               ;trns syntax error handler
00BBD6  2               topner:
00BBD6  2  20 34 BC             JSR     rstddr          ;restore default
00BBD9  2               trnerr:
00BBD9  2  4C C9 B8             JMP     cmderr          ;do error
00BBDC  2               ;trns load error
00BBDC  2               tlderr:
00BBDC  2  A0 4A                LDY     #lderms         ;point to
00BBDE  2  4C C0 BD             JMP     sndmsg          ;and send
00BBE1  2               ;carriage return and linefeed
00BBE1  2               ccrlf:
00BBE1  2  A9 0D                LDA     #cr             ;get a cr
00BBE3  2  20 F0 BB             JSR     chrout          ;send
00BBE6  2  A9 0A                LDA     #lf             ;get a lf
00BBE8  2  D0 06                BNE     chrout          ;and send
00BBEA  2               ;pem entry routines
00BBEA  2               cnsrde:
00BBEA  2  A2 01                LDX     #1              ;console read
00BBEC  2  D0 43                BNE     pemgo
00BBEE  2               spcout:
00BBEE  2  A9 20                LDA     #' '            ;output space
00BBF0  2               chrout:
00BBF0  2  A2 02                LDX     #2              ;console output
00BBF2  2  D0 3D                BNE     pemgo
00BBF4  2               rdebuf:
00BBF4  2  A2 0A                LDX     #10             ;buffered input
00BBF6  2  D0 39                BNE     pemgo
00BBF8  2               chkcst:
00BBF8  2  A2 0B                LDX     #11             ;check console
00BBFA  2  D0 35                BNE     pemgo
00BBFC  2               rstdsk:
00BBFC  2  A2 0D                LDX     #13             ;initialize system
00BBFE  2  D0 31                BNE     pemgo
00BC00  2               slctds:
00BC00  2  A2 0E                LDX     #14             ;select drive
00BC02  2  D0 2D                BNE     pemgo
00BC04  2               openfl:
00BC04  2  A2 0F                LDX     #15             ;open file
00BC06  2  D0 29                BNE     pemgo
00BC08  2               clsefl:
00BC08  2  A2 10                LDX     #16             ;close file
00BC0A  2  D0 25                BNE     pemgo
00BC0C  2               srchfr:
00BC0C  2  A2 11                LDX     #17             ;first match
00BC0E  2  D0 21                BNE     pemgo
00BC10  2               srchnx:
00BC10  2  A2 12                LDX     #18             ;next match
00BC12  2  D0 1D                BNE     pemgo
00BC14  2               ;delete file one
00BC14  2               dlt1:
00BC14  2  20 97 BC             JSR     setone          ;point to fcb
00BC17  2               dltfil:
00BC17  2  A2 13                LDX     #19             ;delete file
00BC19  2  D0 16                BNE     pemgo
00BC1B  2               rdrcrd:
00BC1B  2  A2 14                LDX     #20             ;read record
00BC1D  2  D0 12                BNE     pemgo
00BC1F  2               wrrcrd:
00BC1F  2  A2 15                LDX     #21             ;write record
00BC21  2  D0 0E                BNE     pemgo
00BC23  2               cratfl:
00BC23  2  A2 16                LDX     #22             ;create file
00BC25  2  D0 0A                BNE     pemgo
00BC27  2               renmfl:
00BC27  2  A2 17                LDX     #23             ;rename file
00BC29  2  D0 06                BNE     pemgo
00BC2B  2               intdsk:
00BC2B  2  A2 19                LDX     #25             ;read drive num
00BC2D  2  D0 02                BNE     pemgo
00BC2F  2               setbuf:
00BC2F  2  A2 1A                LDX     #26             ;set buffer add
00BC31  2               pemgo:
00BC31  2  4C 03 01             JMP     pemjmp          ;go to pem
00BC34  2               ;restore default drive
00BC34  2               rstddr:
00BC34  2  AD E9 BF             LDA     tmpdsk          ;if temp drive
00BC37  2  F0 1F                BEQ     extddr          ;zero then exit
00BC39  2  38                   SEC                     ;else
00BC3A  2  E9 01                SBC     #1              ;subtract one
00BC3C  2  CD E8 BF             CMP     dfldsk          ;compare to default
00BC3F  2  F0 17                BEQ     extddr          ;exit if same
00BC41  2               seldfl:
00BC41  2  AD E8 BF             LDA     dfldsk          ;else get default
00BC44  2  4C 00 BC             JMP     slctds          ;select
00BC47  2               ;clear auto - select disk - open file at fcbone
00BC47  2               casdo1:
00BC47  2  20 AB BD             JSR     clrslt          ;clear auto and select
00BC4A  2               ;open file one
00BC4A  2               ; returns:n=1 if not found
00BC4A  2               open1:
00BC4A  2  A9 00                LDA     #0              ;clear
00BC4C  2  8D E3 BF             STA     fcbone+32       ;record number
00BC4F  2  20 97 BC             JSR     setone          ;point to fcb
00BC52  2  20 04 BC             JSR     openfl          ;open it
00BC55  2  8D EE BF             STA     diradd          ;save number
00BC58  2               extddr:
00BC58  2  60                   RTS
00BC59  2               ;read file one
00BC59  2               read1:
00BC59  2  20 97 BC             JSR     setone          ;point to fcb
00BC5C  2  4C 1B BC             JMP     rdrcrd          ;do read
00BC5F  2               ;search for first file one
00BC5F  2               ; returns:n=1 if not found
00BC5F  2               srchf1:
00BC5F  2  20 97 BC             JSR     setone          ;point to fcb
00BC62  2  20 0C BC             JSR     srchfr          ;search for first
00BC65  2  8D EE BF             STA     diradd          ;save number
00BC68  2  60                   RTS
00BC69  2               ;header output
00BC69  2               hdrout:
00BC69  2  20 E1 BB             JSR     ccrlf           ;do cr lf
00BC6C  2               hdr:
00BC6C  2  20 2B BC             JSR     intdsk          ;get drive number
00BC6F  2  18                   CLC                     ;make
00BC70  2  69 41                ADC     #'A'            ;a letter
00BC72  2               ;output with save of x and y
00BC72  2               ;this routine calls the pem resident routine
00BC72  2               ;tstchr to see if a char is a printing char.
00BC72  2               ;if it is then c=1 upon return from tstchr.
00BC72  2               cotsxy:
00BC72  2  8E EF BF             STX     savx            ;save x
00BC75  2  8C F0 BF             STY     savy            ;and y
00BC78  2  20 BC C8             JSR     tstchr          ;see if printing
00BC7B  2  B0 10                BCS     isprnt          ;jump if is
00BC7D  2  48                   PHA                     ;else save
00BC7E  2  AD 1A CC             LDA     sysdef+4        ;get invert
00BC81  2  20 F0 BB             JSR     chrout          ;send it
00BC84  2  68                   PLA                     ;get char
00BC85  2  09 40                ORA     #'@'            ;make printing
00BC87  2  20 F0 BB             JSR     chrout          ;send it
00BC8A  2  AD 19 CC             LDA     sysdef+3        ;get normal
00BC8D  2               isprnt:
00BC8D  2  20 F0 BB             JSR     chrout          ;do output
00BC90  2  AC F0 BF             LDY     savy            ;get y
00BC93  2  AE EF BF             LDX     savx            ;and x
00BC96  2  60                   RTS
00BC97  2               ;set up fcb one pointer
00BC97  2               setone:
00BC97  2  AD 94 BE             LDA     fcb1vc          ;low
00BC9A  2  AC 95 BE             LDY     fcb1vc+1        ;and high
00BC9D  2  60                   RTS
00BC9E  2               ;save tmpdsk in oldtmp
00BC9E  2               tmpold:
00BC9E  2  AD E9 BF             LDA     tmpdsk
00BCA1  2  8D F2 BF             STA     oldtmp
00BCA4  2  60                   RTS
00BCA5  2               ;parse command line
00BCA5  2               prslin:
00BCA5  2  A2 00                LDX     #0              ;clear index
00BCA7  2               prsmre:
00BCA7  2  8A                   TXA                     ;save
00BCA8  2  48                   PHA                     ;index
00BCA9  2  A9 00                LDA     #0              ;clear temp
00BCAB  2  8D E9 BF             STA     tmpdsk          ;drive flag
00BCAE  2  AC E7 BF             LDY     cnbfpt          ;get buffer pointer
00BCB1  2  20 72 BD             JSR     skpspc          ;find first non-space
00BCB4  2  8C ED BF             STY     curpnt          ;save index
00BCB7  2  F0 0D                BEQ     nulchr          ;jump if null
00BCB9  2  29 0F                AND     #%00001111      ;else look at 4 lsbs
00BCBB  2  48                   PHA                     ;and save
00BCBC  2  C8                   INY                     ;point to next char
00BCBD  2  B9 44 BF             LDA     cnstxt,y        ;and get it
00BCC0  2  C9 3A                CMP     #':'            ;if a colon
00BCC2  2  F0 0A                BEQ     drvinp          ;jump and set drive
00BCC4  2  68                   PLA                     ;else clear stack
00BCC5  2  88                   DEY                     ;backup index
00BCC6  2               nulchr:
00BCC6  2  AD E8 BF             LDA     dfldsk          ;set automatic
00BCC9  2  9D C3 BF             STA     fcbone,x        ;to default
00BCCC  2  10 08                BPL     trynme          ;then parse name
00BCCE  2               drvinp:
00BCCE  2  68                   PLA                     ;get number
00BCCF  2  8D E9 BF             STA     tmpdsk          ;set temp flag
00BCD2  2  9D C3 BF             STA     fcbone,x        ;and fcb
00BCD5  2  C8                   INY                     ;point past colon
00BCD6  2               trynme:
00BCD6  2  A9 08                LDA     #8              ;set name count
00BCD8  2  8D EC BF             STA     ccmcount        ;to eight
00BCDB  2               tstnme:
00BCDB  2  20 7F BD             JSR     tstlgl          ;test for illegal
00BCDE  2  F0 1D                BEQ     flnmsp          ;if illegal jump
00BCE0  2  E8                   INX                     ;bump pointer
00BCE1  2  C9 2A                CMP     #'*'            ;if not *
00BCE3  2  D0 07                BNE     notafn          ;skip ? fill
00BCE5  2  A9 3F                LDA     #'?'            ;get a ?
00BCE7  2  9D C3 BF             STA     fcbone,x        ;store
00BCEA  2  D0 04                BNE     nxtout          ;and jump
00BCEC  2               notafn:
00BCEC  2  9D C3 BF             STA     fcbone,x        ;store char
00BCEF  2  C8                   INY                     ;bump source
00BCF0  2               nxtout:
00BCF0  2  CE EC BF             DEC     ccmcount        ;drop counter down
00BCF3  2  D0 E6                BNE     tstnme          ;and loop
00BCF5  2               skpmre:
00BCF5  2  20 7F BD             JSR     tstlgl          ;if illegal
00BCF8  2  F0 11                BEQ     trytyp          ;try type
00BCFA  2  C8                   INY                     ;else bump index
00BCFB  2  D0 F8                BNE     skpmre          ;and loop
00BCFD  2               flnmsp:
00BCFD  2  E8                   INX                     ;next position
00BCFE  2  A9 20                LDA     #' '            ;get a space
00BD00  2  9D C3 BF             STA     fcbone,x        ;store
00BD03  2  CE EC BF             DEC     ccmcount        ;count down
00BD06  2  D0 F5                BNE     flnmsp          ;and loop
00BD08  2  B9 44 BF             LDA     cnstxt,y        ;get char again
00BD0B  2               trytyp:
00BD0B  2  48                   PHA                     ;save char
00BD0C  2  A9 03                LDA     #3              ;set count
00BD0E  2  8D EC BF             STA     ccmcount        ;to three
00BD11  2  68                   PLA                     ;get char
00BD12  2  C9 2E                CMP     #'.'            ;if not .
00BD14  2  D0 23                BNE     fltysp          ;then fill spaces
00BD16  2  C8                   INY                     ;else bump source
00BD17  2               tsttyp:
00BD17  2  20 7F BD             JSR     tstlgl          ;if not legal
00BD1A  2  F0 1D                BEQ     fltysp          ;then fill spaces
00BD1C  2  E8                   INX                     ;else bump index
00BD1D  2  C9 2A                CMP     #'*'            ;if not *
00BD1F  2  D0 07                BNE     notaft          ;then skip fill
00BD21  2  A9 3F                LDA     #'?'            ;else get ?
00BD23  2  9D C3 BF             STA     fcbone,x        ;move to fcb
00BD26  2  D0 04                BNE     mrtyfl          ;and loop
00BD28  2               notaft:
00BD28  2  9D C3 BF             STA     fcbone,x        ;move char to fcb
00BD2B  2  C8                   INY                     ;bump source
00BD2C  2               mrtyfl:
00BD2C  2  CE EC BF             DEC     ccmcount        ;count down
00BD2F  2  D0 E6                BNE     tsttyp          ;and loop
00BD31  2               nttype:
00BD31  2  20 7F BD             JSR     tstlgl          ;if illegal
00BD34  2  F0 0E                BEQ     filnul          ;fill out nulls
00BD36  2  C8                   INY                     ;else bump source
00BD37  2  D0 F8                BNE     nttype          ;and loop
00BD39  2               fltysp:
00BD39  2  E8                   INX                     ;bump fcb pointer
00BD3A  2  A9 20                LDA     #' '            ;get space
00BD3C  2  9D C3 BF             STA     fcbone,x        ;put in fcb
00BD3F  2  CE EC BF             DEC     ccmcount        ;count down
00BD42  2  D0 F5                BNE     fltysp          ;and continue
00BD44  2               filnul:
00BD44  2  A9 03                LDA     #3              ;clear
00BD46  2  8D EC BF             STA     ccmcount        ;three
00BD49  2               mrnlty:
00BD49  2  E8                   INX                     ;bump fcb pointer
00BD4A  2  A9 00                LDA     #0              ;get a zero
00BD4C  2  9D C3 BF             STA     fcbone,x        ;move to fcb
00BD4F  2  CE EC BF             DEC     ccmcount        ;count down
00BD52  2  D0 F5                BNE     mrnlty          ;loop until done
00BD54  2  8C E7 BF             STY     cnbfpt          ;update start pointer
00BD57  2  A9 00                LDA     #0              ;clear
00BD59  2  8D EC BF             STA     ccmcount        ;count
00BD5C  2  68                   PLA                     ;restore stack
00BD5D  2  A8                   TAY                     ;move to index
00BD5E  2  A2 0B                LDX     #11             ;counter to 11
00BD60  2               tstqus:
00BD60  2  C8                   INY                     ;point to
00BD61  2  B9 C3 BF             LDA     fcbone,y        ;and get char
00BD64  2  C9 3F                CMP     #'?'            ;if not a ?
00BD66  2  D0 03                BNE     nxtqus          ;then jump
00BD68  2  EE EC BF             INC     ccmcount        ;else bump count
00BD6B  2               nxtqus:
00BD6B  2  CA                   DEX                     ;loop until
00BD6C  2  D0 F2                BNE     tstqus          ;11 tested
00BD6E  2  AD EC BF             LDA     ccmcount        ;get count
00BD71  2  60                   RTS                     ;and return
00BD72  2               ;skip space
00BD72  2               skpspc:
00BD72  2  B9 44 BF             LDA     cnstxt,y        ;get char
00BD75  2  F0 07                BEQ     extskp          ;jump if null
00BD77  2  C9 20                CMP     #' '            ;if not space
00BD79  2  D0 03                BNE     extskp          ;then exit
00BD7B  2  C8                   INY                     ;else go to next
00BD7C  2  D0 F4                BNE     skpspc          ;and test
00BD7E  2               extskp:
00BD7E  2  60                   RTS
00BD7F  2               ;test legal
00BD7F  2               tstlgl:
00BD7F  2  B9 44 BF             LDA     cnstxt,y        ;get char
00BD82  2  F0 1C                BEQ     extlgl
00BD84  2  C9 20                CMP     #' '            ;if space
00BD86  2  90 19                BCC     badinp          ;ok - less is error
00BD88  2  F0 16                BEQ     extlgl
00BD8A  2  C9 3D                CMP     #'='
00BD8C  2  F0 12                BEQ     extlgl
00BD8E  2  C9 2E                CMP     #'.'
00BD90  2  F0 0E                BEQ     extlgl
00BD92  2  C9 3A                CMP     #':'
00BD94  2  F0 0A                BEQ     extlgl
00BD96  2  C9 3B                CMP     #semico
00BD98  2  F0 06                BEQ     extlgl
00BD9A  2  C9 3C                CMP     #'<'
00BD9C  2  F0 02                BEQ     extlgl
00BD9E  2  C9 3E                CMP     #'>'
00BDA0  2               extlgl:
00BDA0  2  60                   RTS
00BDA1  2               badinp:
00BDA1  2  4C C9 B8             JMP     cmderr
00BDA4  2               ;set default buffer address
00BDA4  2               stdflb:
00BDA4  2  A9 28                LDA     #<dflbuf        ;point to
00BDA6  2  A0 01                LDY     #>dflbuf        ;location
00BDA8  2  4C 2F BC             JMP     setbuf          ;and set
00BDAB  2               ;clear automatic and select
00BDAB  2               clrslt:
00BDAB  2  A9 00                LDA     #0              ;clear auto
00BDAD  2  8D C3 BF             STA     fcbone          ;select
00BDB0  2               slttmp:
00BDB0  2  AD E9 BF             LDA     tmpdsk          ;get temp
00BDB3  2  F0 1F                BEQ     extsnd          ;if zero exit
00BDB5  2  38                   SEC                     ;else subtract
00BDB6  2  E9 01                SBC     #1              ;one
00BDB8  2  CD E8 BF             CMP     dfldsk          ;if same as default
00BDBB  2  F0 17                BEQ     extsnd          ;then quit
00BDBD  2  4C 00 BC             JMP     slctds          ;else set
00BDC0  2               ;send message
00BDC0  2               sndmsg:
00BDC0  2  8C F0 BF             STY     savy            ;save index
00BDC3  2  20 E1 BB             JSR     ccrlf           ;do cr and lf
00BDC6  2  AC F0 BF             LDY     savy            ;get index
00BDC9  2               lpesnd:
00BDC9  2  B9 AF BE             LDA     msgtbl,y        ;get char
00BDCC  2  F0 06                BEQ     extsnd          ;if null quit
00BDCE  2  20 72 BC             JSR     cotsxy          ;else send
00BDD1  2  C8                   INY                     ;point to next
00BDD2  2  D0 F5                BNE     lpesnd          ;and loop
00BDD4  2               extsnd:
00BDD4  2  60                   RTS
00BDD5  2               ;set load start address
00BDD5  2               setddb:
00BDD5  2  A9 00                LDA     #<tea           ;to tea start
00BDD7  2  A0 08                LDY     #>tea
00BDD9  2               setdb:
00BDD9  2  8D F3 BF             STA     dskbuf          ;to ay
00BDDC  2  8C F4 BF             STY     dskbuf+1
00BDDF  2  60                   RTS
00BDE0  2               ;move first part of fcb to second half
00BDE0  2               ;and move second part to first part.
00BDE0  2               ;only ren depends upon this routine to actually
00BDE0  2               ;swap fcb halves.
00BDE0  2               ;alters:a,x,p
00BDE0  2               ;returns:x=$ff
00BDE0  2               frssec:
00BDE0  2  A2 0F                LDX     #15             ;set index to last
00BDE2  2               frsclp:
00BDE2  2  BD C3 BF             LDA     fcbone,x        ;get byte
00BDE5  2  BC D3 BF             LDY     fcbone+16,x
00BDE8  2  9D D3 BF             STA     fcbone+16,x     ;move it
00BDEB  2  98                   TYA
00BDEC  2  9D C3 BF             STA     fcbone,x
00BDEF  2  CA                   DEX
00BDF0  2  10 F0                BPL     frsclp          ;until 16 moved
00BDF2  2  60                   RTS
00BDF3  2               ;move second part of fcb to first half
00BDF3  2               ;restore tmpdsk from save location
00BDF3  2               ;alters:a,x,p
00BDF3  2               ;returns:x=$ff
00BDF3  2               secfrs:
00BDF3  2  A2 0F                LDX     #15             ;set index to last
00BDF5  2               scfrlp:
00BDF5  2  BD D3 BF             LDA     fcbone+16,x     ;get byte
00BDF8  2  9D C3 BF             STA     fcbone,x        ;move it
00BDFB  2  CA                   DEX
00BDFC  2  10 F7                BPL     scfrlp          ;loop until done
00BDFE  2  AD F2 BF             LDA     oldtmp          ;get old flag
00BE01  2  8D E9 BF             STA     tmpdsk          ;and set
00BE04  2  60                   RTS
00BE05  2               ;build a number from command line and leave in num
00BE05  2               ;will handle either decimal (e.g., 578) or hexadecimal (e.g., $3f2)
00BE05  2               ;move parse index past number
00BE05  2               ;modifies:all
00BE05  2               ;returns:a,y set to low and high of number
00BE05  2               ;	 flags set according to y which is high part of number
00BE05  2               bldnum:
00BE05  2  A9 09                LDA     #9              ;preset to decimal
00BE07  2  8D F7 BF             STA     moduls
00BE0A  2  20 A5 BC             JSR     prslin          ;put in fcb
00BE0D  2  AD E9 BF             LDA     tmpdsk          ;if temp
00BE10  2  D0 67                BNE     numerr          ;is error
00BE12  2  8D F8 BF             STA     num             ;else clear num
00BE15  2  8D F9 BF             STA     num+1
00BE18  2  A8                   TAY                     ;and index
00BE19  2  B9 C4 BF             LDA     fcbone+1,y      ;get first char
00BE1C  2  C9 24                CMP     #'$'            ;see if hex signal
00BE1E  2  D0 06                BNE     bnumlp          ;skip if not
00BE20  2  A9 0F                LDA     #15             ;set for modulus
00BE22  2  8D F7 BF             STA     moduls
00BE25  2  C8                   INY                     ;bump past $
00BE26  2               bnumlp:
00BE26  2  C8                   INY                     ;next char
00BE27  2  B9 C3 BF             LDA     fcbone,y        ;get digit
00BE2A  2  C9 20                CMP     #' '            ;see if space
00BE2C  2  F0 4E                BEQ     endnlp          ;done if is
00BE2E  2  20 9C CA             JSR     tstdec          ;see if decimal
00BE31  2  90 0E                BCC     usedig          ;use if is
00BE33  2  20 A6 CA             JSR     tsthex          ;see if hex
00BE36  2  B0 41                BCS     numerr          ;error if not
00BE38  2  E9 06                SBC     #6              ;remove offset
00BE3A  2  A2 0F                LDX     #15             ;test for hex modulus
00BE3C  2  EC F7 BF             CPX     moduls
00BE3F  2  D0 38                BNE     numerr          ;error if not
00BE41  2               usedig:
00BE41  2  29 0F                AND     #%00001111      ;eliminate ascii bias
00BE43  2  48                   PHA                     ;save result
00BE44  2  AD F8 BF             LDA     num             ;move number to temp
00BE47  2  8D FA BF             STA     tnum
00BE4A  2  AD F9 BF             LDA     num+1
00BE4D  2  8D FB BF             STA     tnum+1
00BE50  2  AE F7 BF             LDX     moduls          ;get modulus
00BE53  2  18                   CLC
00BE54  2               addlpe:
00BE54  2  AD F8 BF             LDA     num             ;add number to itself
00BE57  2  6D FA BF             ADC     tnum
00BE5A  2  8D F8 BF             STA     num
00BE5D  2  AD F9 BF             LDA     num+1           ;modulus times
00BE60  2  6D FB BF             ADC     tnum+1
00BE63  2  8D F9 BF             STA     num+1
00BE66  2  B0 11                BCS     numerr          ;error if carry out
00BE68  2  CA                   DEX
00BE69  2  D0 E9                BNE     addlpe          ;loop if more
00BE6B  2  68                   PLA                     ;get input back
00BE6C  2  6D F8 BF             ADC     num             ;add in
00BE6F  2  8D F8 BF             STA     num
00BE72  2  90 B2                BCC     bnumlp          ;loop if no carry
00BE74  2  EE F9 BF             INC     num+1           ;else bump high
00BE77  2  D0 AD                BNE     bnumlp          ;and loop for more
00BE79  2               ;error in bldnum - handle and quit
00BE79  2               numerr:
00BE79  2  4C C9 B8             JMP     cmderr          ;do general error
00BE7C  2               ;end of use of name part - check type
00BE7C  2               endnlp:
00BE7C  2  AD CC BF             LDA     fcbone+9        ;get first
00BE7F  2  C9 20                CMP     #' '            ;see if space
00BE81  2  D0 F6                BNE     numerr          ;error if not
00BE83  2  AD F8 BF             LDA     num             ;return with result
00BE86  2  AC F9 BF             LDY     num+1
00BE89  2  60                   RTS
00BE8A  2               ;relocatable vectors
00BE8A  2  4C                   .BYTE   $4c
00BE8B  2               cnsbvc:
00BE8B  2  42 BF                .WORD   cnsbuf
00BE8D  2  4C                   .BYTE   $4c
00BE8E  2               extcvc:
00BE8E  2  B4 B8                .WORD   extcmd-1
00BE90  2  4C                   .BYTE   $4c
00BE91  2               ccmvc:
00BE91  2  03 B8                .WORD   ccm
00BE93  2  4C                   .BYTE   $4c
00BE94  2               fcb1vc:
00BE94  2  C3 BF                .WORD   fcbone
00BE96  2               ;function entry vector
00BE96  2               xqfntb:
00BE96  2  4C E6 B8             JMP     dir
00BE99  2  4C C8 B9             JMP     save
00BE9C  2  4C 65 BA             JMP     era
00BE9F  2  4C 85 BA             JMP     type
00BEA2  2  4C 64 B9             JMP     ren
00BEA5  2  4C 02 BB             JMP     go
00BEA8  2  4C C6 BA             JMP     load
00BEAB  2  4C 12 BB             JMP     trns
00BEAE  2               ;terminator for relocation
00BEAE  2  FF                   .BYTE   $ff
00BEAF  2               ;messages
00BEAF  2               msgtbl:
00BEAF  2  00                   .BYTE   0
00BEB0  2               nospms          = *-msgtbl
00BEB0  2  4E 4F 20 53          .BYTE   "NO SPACE",0
00BEB4  2  50 41 43 45  
00BEB8  2  00           
00BEB9  2               ntclms          = *-msgtbl
00BEB9  2  43 41 4E 20          .BYTE   "CAN NOT CLOSE",0
00BEBD  2  4E 4F 54 20  
00BEC1  2  43 4C 4F 53  
00BEC7  2               alflms          = *-msgtbl
00BEC7  2  41 4C 4C 20          .BYTE   "ALL FILES (Y/N)?",0
00BECB  2  46 49 4C 45  
00BECF  2  53 20 28 59  
00BED8  2               rderms          = *-msgtbl
00BED8  2  52 45 41 44          .BYTE   "READ ERROR",0
00BEDC  2  20 45 52 52  
00BEE0  2  4F 52 00     
00BEE3  2               ntfnms          = *-msgtbl
00BEE3  2  4E 4F 54 20          .BYTE   "NOT FOUND",0
00BEE7  2  46 4F 55 4E  
00BEEB  2  44 00        
00BEED  2               flexms          = *-msgtbl
00BEED  2  46 49 4C 45          .BYTE   "FILE EXISTS",0
00BEF1  2  20 45 58 49  
00BEF5  2  53 54 53 00  
00BEF9  2               lderms          = *-msgtbl
00BEF9  2  4C 4F 41 44          .BYTE   "LOAD ERROR",0
00BEFD  2  20 45 52 52  
00BF01  2  4F 52 00     
00BF04  2               cnnoms          = *-msgtbl
00BF04  2  43 41 4E 20          .BYTE   "CAN NOT OPEN",0
00BF08  2  4E 4F 54 20  
00BF0C  2  4F 50 45 4E  
00BF11  2               wrerms          = *-msgtbl
00BF11  2  57 52 49 54          .BYTE   "WRITE ERROR",0
00BF15  2  45 20 45 52  
00BF19  2  52 4F 52 00  
00BF1D  2               ;function name table
00BF1D  2               fnctbl:
00BF1D  2  44 49 52 20          .BYTE   "DIR ",0
00BF21  2  00           
00BF22  2  53 41 56 45          .BYTE   "SAVE ",0
00BF26  2  20 00        
00BF28  2  45 52 41 20          .BYTE   "ERA ",0
00BF2C  2  00           
00BF2D  2  54 59 50 45          .BYTE   "TYPE ",0
00BF31  2  20 00        
00BF33  2  52 45 4E 20          .BYTE   "REN ",0
00BF37  2  00           
00BF38  2  47 4F 20 00          .BYTE   "GO ",0
00BF3C  2  4C 4F 41 44          .BYTE   "LOAD ",0
00BF40  2  20 00        
00BF42  2               ;input buffer
00BF42  2               cnsbuf:
00BF42  2               cnsmax:
00BF42  2  7F                   .BYTE   127
00BF43  2               cnslng:
00BF43  2  00                   .BYTE   0
00BF44  2               cnstxt:
00BF44  2  xx xx xx xx          .RES    127
00BF48  2  xx xx xx xx  
00BF4C  2  xx xx xx xx  
00BFC3  2               ;fcb one
00BFC3  2               fcbone:
00BFC3  2  xx xx xx xx          .RES    33
00BFC7  2  xx xx xx xx  
00BFCB  2  xx xx xx xx  
00BFE4  2               ;com type field
00BFE4  2               
00BFE4  2               typcom:
00BFE4  2  43 4F 4D             .BYTE   COMSUFFIX
00BFE7  2               
00BFE7  2               ;variable storage
00BFE7  2               cnbfpt:
00BFE7  2  00                   .BYTE   0               ;buffer index
00BFE8  2               dfldsk:
00BFE8  2  00                   .BYTE   0               ;default drive
00BFE9  2               tmpdsk:
00BFE9  2  00                   .BYTE   0               ;temporary dvive
00BFEA  2               ;align vector on word boundary
00BFEA  2                       .ALIGN  2
00BFEA  2               vector:
00BFEA  2  00 00                .WORD   0               ;execution vector
00BFEC  2               ccmcount:
00BFEC  2  00                   .BYTE   0               ;counter
00BFED  2               curpnt:
00BFED  2  00                   .BYTE   0               ;input parse start
00BFEE  2               diradd:
00BFEE  2  00                   .BYTE   0               ;directory number
00BFEF  2               savx:
00BFEF  2  00                   .BYTE   0               ;save x location
00BFF0  2               savy:
00BFF0  2  00                   .BYTE   0               ;save y location
00BFF1  2               length:
00BFF1  2  00                   .BYTE   0               ;number tages to save
00BFF2  2               oldtmp:
00BFF2  2  00                   .BYTE   0               ;temp drive in ren
00BFF3  2               dskbuf:
00BFF3  2  00 08                .WORD   tea             ;disk buffer start
00BFF5  2               across:
00BFF5  2  00                   .BYTE   0               ;dir count on line
00BFF6  2               sixten:
00BFF6  2  00                   .BYTE   0               ;line length div 16
00BFF7  2               moduls:
00BFF7  2  09                   .BYTE   9               ;modulus-1 for number input
00BFF8  2               num:
00BFF8  2  00 00                .WORD   0               ;input number
00BFFA  2               tnum:
00BFFA  2  00 00                .WORD   0               ;temp in bldnum
00BFFC  2               sadr:
00BFFC  2  00 08                .WORD   tea             ;save start address
00BFFE  2               
00BFFE  1                       .INCLUDE "pemrbc.asm"
00BFFE  2               ;________________________________________________________________________________________________________________________________
00BFFE  2               ;
00BFFE  2               ;	DOS/65 primitive execution module (pem)
00BFFE  2               ;
00BFFE  2               ;
00BFFE  2               ;________________________________________________________________________________________________________________________________
00BFFE  2               
00BFFE  2               ;main program
00BFFE  2               ; input:x=command,a=value,a&y=address
00BFFE  2               ; returns:a=value,a&y=address
00BFFE  2               ; alters:all
00BFFE  2               
00BFFE  2               pem:
00BFFE  2  D8                   CLD                     ;set binary mode
00BFFF  2  8D 93 CB             STA     bytinp          ;save input
00C002  2  8D D8 CB             STA     lowin           ;value and
00C005  2  8C 94 CB             STY     bytinp+1        ;save high
00C008  2  8C D9 CB             STY     lowin+1         ;address
00C00B  2  8E 95 CB             STX     cmdinp          ;and command
00C00E  2  E0 24                CPX     #numcmd         ;if invalid
00C010  2  B0 50                BCS     extpem          ;then exit
00C012  2  BD 4F CB             LDA     swctbl,x        ;if flag zero
00C015  2  F0 08                BEQ     noswin          ;skip switch
00C017  2  A9 FF                LDA     #255            ;else set
00C019  2  8D 92 CB             STA     swcflg          ;memory switch flag
00C01C  2  20 E9 C2             JSR     switch          ;move data to page zero
00C01F  2               noswin:
00C01F  2  A9 00                LDA     #0              ;clear drive
00C021  2  8D 9A CB             STA     tmpdrv          ;switch flag
00C024  2  AD 95 CB             LDA     cmdinp          ;get command
00C027  2  0A                   ASL     a               ;multiply by two
00C028  2  6D 95 CB             ADC     cmdinp          ;then add to get x3
00C02B  2  AA                   TAX                     ;and make a pointer
00C02C  2  E8                   INX                     ;bump to pass jmp
00C02D  2  BD 76 C0             LDA     cmdtbl,x        ;get command
00C030  2  BC 77 C0             LDY     cmdtbl+1,x      ;address
00C033  2  8D 9C CB             STA     xqtvec          ;and put
00C036  2  8C 9D CB             STY     xqtvec+1        ;in vector
00C039  2  AD DF CA             LDA     extevc+1        ;get return
00C03C  2  48                   PHA                     ;address
00C03D  2  AD DE CA             LDA     extevc          ;and push
00C040  2  48                   PHA                     ;as return
00C041  2  AD 93 CB             LDA     bytinp          ;get input value
00C044  2  AC 94 CB             LDY     bytinp+1
00C047  2  6C 9C CB             JMP     (xqtvec)        ;then execute
00C04A  2               extexq:
00C04A  2  8D 96 CB             STA     bytout          ;save value
00C04D  2  8C 97 CB             STY     addout+1        ;and address
00C050  2  AD 9A CB             LDA     tmpdrv          ;get temp drive
00C053  2  F0 0D                BEQ     extpem          ;if zero skip switch
00C055  2  A0 00                LDY     #0              ;else
00C057  2  91 02                STA     (addinp),y      ;put back in fcb
00C059  2  AD A5 CB             LDA     olddrv          ;get old drive number
00C05C  2  8D 93 CB             STA     bytinp          ;set input value
00C05F  2  20 04 C3             JSR     chgdrv          ;then switch back
00C062  2               extpem:
00C062  2  2C 92 CB             BIT     swcflg          ;test memory switch
00C065  2  10 08                BPL     noswot          ;if not set skip
00C067  2  20 E9 C2             JSR     switch          ;else do memory switch
00C06A  2  A9 00                LDA     #0              ;clear
00C06C  2  8D 92 CB             STA     swcflg          ;flag
00C06F  2               noswot:
00C06F  2  AC 97 CB             LDY     addout+1        ;get address
00C072  2  AD 96 CB             LDA     bytout          ;and value (address low)
00C075  2  60                   RTS
00C076  2               ;command vector table
00C076  2               cmdtbl:
00C076  2  4C EA C0             JMP     xwboot          ;warm boot
00C079  2  4C DB C2             JMP     xcnsin          ;console input with echo
00C07C  2  4C 14 C9             JMP     sndchr          ;console output
00C07F  2  4C F5 CB             JMP     sim+21          ;tape reader
00C082  2  4C F2 CB             JMP     sim+18          ;tape punch
00C085  2  4C EF CB             JMP     sim+15          ;printer output
00C088  2  4C 86 C8             JMP     getcon          ;console input w/o echo
00C08B  2  4C 1F C1             JMP     xgtios          ;read i/o status
00C08E  2  4C 2A C1             JMP     xstios          ;set i/o status
00C091  2  4C CB C8             JMP     sndstr          ;print buffer
00C094  2  4C 80 C9             JMP     bufinp          ;read buffer
00C097  2  4C 96 C8             JMP     kbdsts          ;test console ready
00C09A  2  4C 0D CC             JMP     sim+45          ;read list status
00C09D  2  4C 32 C3             JMP     xintds          ;initialize system
00C0A0  2  4C 04 C3             JMP     chgdrv          ;log in drive
00C0A3  2  4C AF C5             JMP     xopen           ;open file
00C0A6  2  4C EA C5             JMP     xclose          ;close file
00C0A9  2  4C 0E C6             JMP     xfndfr          ;find first match
00C0AC  2  4C 3A C1             JMP     xfndnx          ;find next match
00C0AF  2  4C A2 C1             JMP     xdltfl          ;delete file
00C0B2  2  4C 42 C1             JMP     xread           ;read record
00C0B5  2  4C C7 C1             JMP     xwrite          ;write record
00C0B8  2  4C B1 C6             JMP     xmake           ;create file
00C0BB  2  4C 80 C1             JMP     xrenme          ;rename file
00C0BE  2  4C 32 C1             JMP     xintlg          ;interrogate log in status
00C0C1  2  4C 2E C1             JMP     xintdr          ;interrogate current drive
00C0C4  2  4C F9 C2             JMP     chgdma          ;set buffer address
00C0C7  2  4C 23 C1             JMP     xrdalv          ;read allocation map start
00C0CA  2  4C 6D C5             JMP     setron          ;set r/w status
00C0CD  2  4C 36 C1             JMP     xrdros          ;read r/w status
00C0D0  2  4C E2 C0             JMP     setlst          ;set list echo status
00C0D3  2  4C E6 C0             JMP     lststs          ;read list echo status
00C0D6  2  4C FA C0             JMP     xrtclo          ;read low clock
00C0D9  2  4C 0E C1             JMP     xrtchi          ;read high clock
00C0DC  2  4C 18 C1             JMP     xrddcb          ;read dcb address
00C0DF  2  4C 13 CC             JMP     sim+51          ;translate sector
00C0E2  2               ;set list echo status
00C0E2  2               setlst:
00C0E2  2  8D 90 CB             STA     lstflg          ;set flag
00C0E5  2  60                   RTS
00C0E6  2               ;read list echo status
00C0E6  2               lststs:
00C0E6  2  AD 90 CB             LDA     lstflg          ;read flag
00C0E9  2  60                   RTS
00C0EA  2               ;execute warm boot
00C0EA  2               ; ***this command does not return to pem***
00C0EA  2               ; ***instead it jumps to sim, resets	***
00C0EA  2               ; ***system and stack and jumps to ccm. ***
00C0EA  2               xwboot:
00C0EA  2  2C 92 CB             BIT     swcflg          ;test memory switch flag
00C0ED  2  10 08                BPL     dowmbt          ;if clear do not
00C0EF  2  20 E9 C2             JSR     switch          ;switch memory
00C0F2  2  A9 00                LDA     #0              ;clear
00C0F4  2  8D 92 CB             STA     swcflg          ;flag
00C0F7  2               dowmbt:
00C0F7  2  4C E3 CB             JMP     sim+3           ;go to sim
00C0FA  2               
00C0FA  2               ;execute read real time clock
00C0FA  2               xrtclo:
00C0FA  2  20 10 CC             JSR     sim+48          ;read clock
00C0FD  2               
00C0FD  2  8D C1 CB             STA     rtclk           ;save low
00C100  2  8C C2 CB             STY     rtclk+1         ;middle
00C103  2  8E C3 CB             STX     rtclk+2         ;high
00C106  2  8A                   TXA
00C107  2  29 80                AND     #%10000000      ;test for valid
00C109  2  A8                   TAY
00C10A  2  AD C1 CB             LDA     rtclk           ;get low
00C10D  2  60                   RTS
00C10E  2               ;execute read real time clock high
00C10E  2               xrtchi:
00C10E  2  AD C3 CB             LDA     rtclk+2         ;get high
00C111  2  29 7F                AND     #%01111111      ;clear status
00C113  2  A8                   TAY
00C114  2  AD C2 CB             LDA     rtclk+1         ;get middle
00C117  2  60                   RTS
00C118  2               ;execute read dcb address
00C118  2               xrddcb:
00C118  2  AD 6C C3             LDA     cptdcb+1        ;get address
00C11B  2  AC 6D C3             LDY     cptdcb+2
00C11E  2  60                   RTS
00C11F  2               ;execute read i/o status
00C11F  2               xgtios:
00C11F  2  AD 06 01             LDA     iostat          ;get status byte
00C122  2  60                   RTS
00C123  2               ;execute read allocation map starting address
00C123  2               xrdalv:
00C123  2  AD D0 CB             LDA     alcmap          ;get
00C126  2  AC D1 CB             LDY     alcmap+1        ;starting address
00C129  2  60                   RTS                     ;then return
00C12A  2               ;execute set i/o status
00C12A  2               xstios:
00C12A  2  8D 06 01             STA     iostat          ;set status
00C12D  2  60                   RTS
00C12E  2               ;execute interrogate current drive
00C12E  2               xintdr:
00C12E  2  AD A6 CB             LDA     curdrv          ;get number
00C131  2  60                   RTS
00C132  2               ;execute read log in status
00C132  2               xintlg:
00C132  2  AD A7 CB             LDA     lginvc          ;get status
00C135  2  60                   RTS
00C136  2               ;execute read read/write status
00C136  2               xrdros:
00C136  2  AD A8 CB             LDA     ronlst          ;get status
00C139  2  60                   RTS
00C13A  2               ;execute find next match
00C13A  2               xfndnx:
00C13A  2  20 12 C3             JSR     autodr          ;auto drive select
00C13D  2  A9 0D                LDA     #13             ;match including
00C13F  2  4C 1B C6             JMP     search          ;extent
00C142  2               ;execute read next record
00C142  2               xread:
00C142  2  20 12 C3             JSR     autodr          ;auto drive select
00C145  2  20 8F C5             JSR     inrcct          ;initialize record counters
00C148  2  AD B1 CB             LDA     nxtrec          ;if next record less
00C14B  2  CD B2 CB             CMP     numrec          ;then number records
00C14E  2  90 13                BCC     tryrde          ;then try to read
00C150  2  C9 80                CMP     #128            ;but if not and
00C152  2  F0 03                BEQ     tryext          ;is max try to extend
00C154  2               rdeeof:
00C154  2  A9 01                LDA     #1              ;else set eof
00C156  2  60                   RTS                     ;code and return
00C157  2               tryext:
00C157  2  A2 01                LDX     #1              ;try for a read
00C159  2  20 ED C6             JSR     extend          ;file extension
00C15C  2  C9 00                CMP     #0              ;if not ok exit eof
00C15E  2  D0 F4                BNE     rdeeof          ;with jump back
00C160  2  8D B1 CB             STA     nxtrec          ;clear next record
00C163  2               tryrde:
00C163  2  20 7F C7             JSR     getblk          ;and get block
00C166  2  AD AC CB             LDA     blknum          ;if block not zero
00C169  2  0D AD CB             ORA     blknum+1
00C16C  2  D0 03                BNE     dorde           ;do the read
00C16E  2  A9 02                LDA     #2              ;else set unwritten
00C170  2  60                   RTS                     ;code and exit
00C171  2               dorde:
00C171  2  20 60 C6             JSR     calrcn          ;calculate record number
00C174  2  20 AC C4             JSR     sttrsc          ;set track and sector
00C177  2  20 38 C8             JSR     rdesec          ;do sector read
00C17A  2  20 9E C5             JSR     updtrc          ;update counters
00C17D  2  A9 00                LDA     #0              ;return w/o error
00C17F  2               extrde:
00C17F  2  60                   RTS
00C180  2               ;execute file rename
00C180  2               xrenme:
00C180  2  20 12 C3             JSR     autodr          ;automatic drive select
00C183  2  20 15 C8             JSR     tstron          ;test for r/o
00C186  2  A9 0C                LDA     #12             ;match name
00C188  2  20 13 C6             JSR     frstsr          ;and type
00C18B  2  30 14                BMI     extren          ;exit if not found
00C18D  2               doren:
00C18D  2  A9 00                LDA     #0              ;clear drive select
00C18F  2  A0 10                LDY     #16             ;in new name
00C191  2  91 02                STA     (addinp),y      ;part of fcb
00C193  2  A9 0C                LDA     #12             ;then move
00C195  2  A2 10                LDX     #16             ;new name
00C197  2  20 80 C6             JSR     dirchg          ;to directory
00C19A  2  A9 0C                LDA     #12             ;see if
00C19C  2  20 1B C6             JSR     search          ;another match
00C19F  2  10 EC                BPL     doren           ;loop if found
00C1A1  2               extren:
00C1A1  2  60                   RTS                     ;number
00C1A2  2               ;execute delete file
00C1A2  2               xdltfl:
00C1A2  2  20 12 C3             JSR     autodr          ;automatic drive select
00C1A5  2  20 15 C8             JSR     tstron          ;test for r/o
00C1A8  2  A9 0C                LDA     #12             ;match name
00C1AA  2  20 13 C6             JSR     frstsr          ;and type
00C1AD  2  30 17                BMI     extdlt          ;done if not found
00C1AF  2               dodlt:
00C1AF  2  A2 00                LDX     #0              ;else do a
00C1B1  2  20 E5 C7             JSR     mapdir          ;delete
00C1B4  2  AC AB CB             LDY     subrec          ;then change
00C1B7  2  AD 4E CB             LDA     empty           ;byte zero to
00C1BA  2  91 04                STA     (bufadd),y      ;empty code
00C1BC  2  20 3E C8             JSR     updtck          ;then update directory
00C1BF  2  A9 0C                LDA     #12             ;search
00C1C1  2  20 1B C6             JSR     search          ;for next
00C1C4  2  10 E9                BPL     dodlt           ;loop if found
00C1C6  2               extdlt:
00C1C6  2  60                   RTS                     ;exit
00C1C7  2               ;execute write next record
00C1C7  2               xwrite:
00C1C7  2  20 12 C3             JSR     autodr          ;automatic drive select
00C1CA  2  20 15 C8             JSR     tstron          ;test for r/o
00C1CD  2  20 8F C5             JSR     inrcct          ;initialize counters
00C1D0  2  AD B1 CB             LDA     nxtrec          ;get next record
00C1D3  2  C9 80                CMP     #128            ;compare to max
00C1D5  2  90 03                BCC     ntexte          ;continue if less
00C1D7  2  A9 01                LDA     #1              ;else flag as extend
00C1D9  2  60                   RTS                     ;error and exit
00C1DA  2               ntexte:
00C1DA  2  20 7F C7             JSR     getblk          ;calculate block num
00C1DD  2  A9 00                LDA     #0              ;say normal write
00C1DF  2  8D D5 CB             STA     pemwrtype       ;for now
00C1E2  2  AD AC CB             LDA     blknum          ;get it and if
00C1E5  2  0D AD CB             ORA     blknum+1
00C1E8  2  F0 03                BEQ     *+5             ;zero then get number
00C1EA  2  4C AA C2             JMP     blkopn          ;else go write
00C1ED  2  A9 02                LDA     #2              ;say unalloc write
00C1EF  2  8D D5 CB             STA     pemwrtype
00C1F2  2  AD 8C CB             LDA     fcbind          ;get index from prior
00C1F5  2  48                   PHA                     ;and save
00C1F6  2  C9 10                CMP     #16             ;if first block
00C1F8  2  F0 1A                BEQ     isfrst          ;then don't change
00C1FA  2  A8                   TAY                     ;else make an index
00C1FB  2  88                   DEY                     ;point to last
00C1FC  2  2C BC CB             BIT     blmode          ;test mode
00C1FF  2  10 01                BPL     *+3             ;done if byte
00C201  2  88                   DEY                     ;else drop for word
00C202  2  B1 02                LDA     (addinp),y      ;and get that number
00C204  2  8D AC CB             STA     blknum          ;store as starting
00C207  2  C8                   INY                     ;bump for word
00C208  2  A9 00                LDA     #0              ;preset for byte
00C20A  2  2C BC CB             BIT     blmode          ;test mode
00C20D  2  10 02                BPL     *+4             ;done if byte
00C20F  2  B1 02                LDA     (addinp),y      ;else get high
00C211  2  8D AD CB             STA     blknum+1        ;then set high
00C214  2               isfrst:
00C214  2  AD AC CB             LDA     blknum          ;get block
00C217  2  8D A1 CB             STA     lkdown          ;set lower and
00C21A  2  8D A3 CB             STA     lookup          ;upper pointers
00C21D  2  AD AD CB             LDA     blknum+1        ;now set high part
00C220  2  8D A2 CB             STA     lkdown+1
00C223  2  8D A4 CB             STA     lookup+1
00C226  2               srblag:
00C226  2  AD A3 CB             LDA     lookup          ;if upper pointer
00C229  2  CD C7 CB             CMP     maxblk          ;not at max
00C22C  2  D0 08                BNE     upnemx          ;then keep going
00C22E  2  AC A4 CB             LDY     lookup+1        ;now check high
00C231  2  CC C8 CB             CPY     maxblk+1
00C234  2  F0 12                BEQ     tstdwn          ;go test down
00C236  2               upnemx:
00C236  2  EE A3 CB             INC     lookup          ;else bump upper
00C239  2  D0 03                BNE     *+5
00C23B  2  EE A4 CB             INC     lookup+1
00C23E  2  AD A1 CB             LDA     lkdown          ;then if lower
00C241  2  0D A2 CB             ORA     lkdown+1
00C244  2  F0 18                BEQ     dotest          ;is zero start test
00C246  2  D0 0B                BNE     dcdown          ;else drop lower
00C248  2               tstdwn:
00C248  2  AD A1 CB             LDA     lkdown          ;if upper & lower at
00C24B  2  0D A2 CB             ORA     lkdown+1
00C24E  2  D0 03                BNE     dcdown          ;drop if not zero
00C250  2  A8                   TAY                     ;also set y
00C251  2  F0 30                BEQ     extsbl          ;then exit
00C253  2               dcdown:
00C253  2  AD A1 CB             LDA     lkdown          ;drop lower
00C256  2  D0 03                BNE     *+5
00C258  2  CE A2 CB             DEC     lkdown+1
00C25B  2  CE A1 CB             DEC     lkdown
00C25E  2               dotest:
00C25E  2  AD A1 CB             LDA     lkdown          ;get lower
00C261  2  AC A2 CB             LDY     lkdown+1
00C264  2  20 51 C5             JSR     tstblk          ;and test
00C267  2  D0 09                BNE     trylup          ;if full try upper
00C269  2  AD A1 CB             LDA     lkdown          ;else use lower
00C26C  2  AC A2 CB             LDY     lkdown+1
00C26F  2  4C 83 C2             JMP     extsbl          ;as result
00C272  2               trylup:
00C272  2  AD A3 CB             LDA     lookup          ;get upper
00C275  2  AC A4 CB             LDY     lookup+1
00C278  2  20 51 C5             JSR     tstblk          ;if full
00C27B  2  D0 A9                BNE     srblag          ;then loop
00C27D  2  AD A3 CB             LDA     lookup          ;else use upper
00C280  2  AC A4 CB             LDY     lookup+1
00C283  2               extsbl:
00C283  2  8D AC CB             STA     blknum          ;then save number
00C286  2  8C AD CB             STY     blknum+1
00C289  2  0D AD CB             ORA     blknum+1        ;see if zero
00C28C  2  D0 04                BNE     gtgood          ;then proceed
00C28E  2  68                   PLA                     ;clear stack
00C28F  2  A9 02                LDA     #2              ;set end
00C291  2  60                   RTS                     ;of data return
00C292  2               gtgood:
00C292  2  AD AC CB             LDA     blknum          ;get low again
00C295  2  20 65 C5             JSR     setblk          ;set allocation map
00C298  2  68                   PLA                     ;get block
00C299  2  A8                   TAY                     ;pointer back
00C29A  2  AD AC CB             LDA     blknum          ;get number
00C29D  2  91 02                STA     (addinp),y      ;and put in fcb
00C29F  2  AD AD CB             LDA     blknum+1        ;get high
00C2A2  2  C8                   INY
00C2A3  2  2C BC CB             BIT     blmode          ;test mode
00C2A6  2  10 02                BPL     *+4             ;done if byte
00C2A8  2  91 02                STA     (addinp),y      ;else set high
00C2AA  2               blkopn:
00C2AA  2  20 60 C6             JSR     calrcn          ;calculate record num
00C2AD  2  20 AC C4             JSR     sttrsc          ;set track and sector
00C2B0  2  20 44 C8             JSR     wrtsec          ;do write
00C2B3  2  AE B1 CB             LDX     nxtrec          ;get next record
00C2B6  2  EC B2 CB             CPX     numrec          ;if less than max
00C2B9  2  90 05                BCC     notful          ;then ok
00C2BB  2  E8                   INX                     ;else bump count
00C2BC  2  8E B2 CB             STX     numrec          ;and save
00C2BF  2  CA                   DEX                     ;back down
00C2C0  2               notful:
00C2C0  2  E0 7F                CPX     #127            ;if not at max
00C2C2  2  D0 11                BNE     noawex          ;skip extending
00C2C4  2  20 9E C5             JSR     updtrc          ;update record counters
00C2C7  2  A2 00                LDX     #0              ;do write
00C2C9  2  20 ED C6             JSR     extend          ;file extension
00C2CC  2  C9 00                CMP     #0              ;if not ok
00C2CE  2  D0 0A                BNE     extwrt          ;exit
00C2D0  2  A9 FF                LDA     #255            ;else start counter
00C2D2  2  8D B1 CB             STA     nxtrec          ;at one short
00C2D5  2               noawex:
00C2D5  2  20 9E C5             JSR     updtrc          ;then update counters
00C2D8  2  A9 00                LDA     #0              ;good return
00C2DA  2               extwrt:
00C2DA  2  60                   RTS                     ;exit
00C2DB  2               ;execute console input
00C2DB  2               xcnsin:
00C2DB  2  20 86 C8             JSR     getcon          ;get input
00C2DE  2  20 BC C8             JSR     tstchr          ;test it and
00C2E1  2  90 05                BCC     extxci          ;if control exit
00C2E3  2  48                   PHA                     ;else save
00C2E4  2  20 14 C9             JSR     sndchr          ;echo
00C2E7  2  68                   PLA                     ;restore
00C2E8  2               extxci:
00C2E8  2  60                   RTS                     ;return
00C2E9  2               ;switch memory
00C2E9  2               ;page zero block begins at $02 and is numvar bytes long.
00C2E9  2               switch:
00C2E9  2  A2 07                LDX     #numvar-1       ;get number to switch
00C2EB  2               nxtswh:
00C2EB  2  B5 02                LDA     2,x             ;get zero page
00C2ED  2  BC D8 CB             LDY     varblk,x        ;and save area
00C2F0  2  9D D8 CB             STA     varblk,x        ;save zero
00C2F3  2  94 02                STY     2,x             ;and high
00C2F5  2  CA                   DEX                     ;count down
00C2F6  2  10 F3                BPL     nxtswh          ;and loop until done
00C2F8  2               drvsme:
00C2F8  2  60                   RTS                     ;then return
00C2F9  2               ;change dma address
00C2F9  2               ; input:addinp=address
00C2F9  2               ; returns:none
00C2F9  2               ; alters:all
00C2F9  2               chgdma:
00C2F9  2  A5 02                LDA     addinp          ;get low
00C2FB  2  A4 03                LDY     addinp+1        ;and high address
00C2FD  2  85 04                STA     bufadd          ;then store
00C2FF  2  84 05                STY     bufadd+1        ;in address
00C301  2  4C 04 CC             JMP     sim+36          ;then go to sim
00C304  2               
00C304  2               ;change drive
00C304  2               ; input:bytinp
00C304  2               ; returns:none
00C304  2               ; alters:all
00C304  2               chgdrv:
00C304  2  AD 93 CB             LDA     bytinp          ;get input
00C307  2  CD A6 CB             CMP     curdrv          ;if same as current
00C30A  2  F0 EC                BEQ     drvsme          ;do nothing
00C30C  2  8D A6 CB             STA     curdrv          ;else change current
00C30F  2  4C 45 C3             JMP     mapdrv          ;then log it in
00C312  2               ;automatic drive select
00C312  2               ; input:(addinp) 0=no change
00C312  2               ; 1-8 or 'A'-'H' = change
00C312  2               ; returns:none
00C312  2               ; alters:all
00C312  2               autodr:
00C312  2  A0 00                LDY     #0              ;get
00C314  2  B1 02                LDA     (addinp),y      ;first byte of fcb
00C316  2  F0 19                BEQ     qtatdr          ;if zero quit
00C318  2  38                   SEC                     ;set carry for
00C319  2  E9 01                SBC     #1              ;subtract one
00C31B  2  29 07                AND     #%00000111      ;look at three lsbs
00C31D  2  8D 93 CB             STA     bytinp          ;make parameter
00C320  2  AD A6 CB             LDA     curdrv          ;get current
00C323  2  8D A5 CB             STA     olddrv          ;and save
00C326  2  B1 02                LDA     (addinp),y      ;get fcb entry
00C328  2  8D 9A CB             STA     tmpdrv          ;and save as flag
00C32B  2  98                   TYA                     ;set a to 0
00C32C  2  91 02                STA     (addinp),y      ;clear byte zero in fcb
00C32E  2  20 04 C3             JSR     chgdrv          ;then select new drive
00C331  2               qtatdr:
00C331  2  60                   RTS                     ;and return
00C332  2               ;execute initialize system
00C332  2               ; input:none
00C332  2               ; returns:none
00C332  2               ; alters:all,curdrv,lginvc,bufadd
00C332  2               xintds:
00C332  2  A9 00                LDA     #DEFDRV         ;set current
00C334  2  8D A6 CB             STA     curdrv          ;drive to a
00C337  2  8D A7 CB             STA     lginvc          ;clear log in status
00C33A  2  A9 28                LDA     #<dflbuf        ;get default buffer
00C33C  2  A0 01                LDY     #>dflbuf        ;address
00C33E  2  85 02                STA     addinp          ;and set up
00C340  2  84 03                STY     addinp+1        ;parameters
00C342  2  20 F9 C2             JSR     chgdma          ;change address
00C345  2               
00C345  2               ;log in drive and set pointers and maps
00C345  2               ; input:curdrv
00C345  2               ; returns:none
00C345  2               ; alters:all
00C345  2               mapdrv:
00C345  2  AD A6 CB             LDA     curdrv          ;if current drive
00C348  2  C9 08                CMP     #8              ;is 0 to 7
00C34A  2  90 0F                BCC     vlddrv          ;then log it in
00C34C  2               drserr:
00C34C  2  20 67 C8             JSR     errout          ;send error message
00C34F  2  AD E1 CA             LDA     sltmvc          ;point to
00C352  2  AC E2 CA             LDY     sltmvc+1        ;select message
00C355  2  20 CB C8             JSR     sndstr          ;and send it
00C358  2               
00C358  2  4C EA C0             JMP     xwboot          ;and abort
00C35B  2               
00C35B  2               vlddrv:
00C35B  2  20 FB CB             JSR     sim+27          ;go to sim to set
00C35E  2  8D 6C C3             STA     cptdcb+1        ;save
00C361  2  8C 6D C3             STY     cptdcb+2
00C364  2  0D 6D C3             ORA     cptdcb+2        ;see if invalid
00C367  2  F0 E3                BEQ     drserr          ;error if is
00C369  2               ;capture dcb
00C369  2  A0 0D                LDY     #14-1           ;do 14 bytes
00C36B  2               cptdcb:
00C36B  2  B9 FF FF             LDA     $ffff,y         ;get value from sim
00C36E  2  99 C7 CB             STA     dcb,y           ;store it
00C371  2  88                   DEY
00C372  2  10 F7                BPL     cptdcb          ;loop for more
00C374  2  AD CD CB             LDA     blkscd          ;get block size code
00C377  2  A8                   TAY                     ;save in y
00C378  2  18                   CLC
00C379  2  69 03                ADC     #3              ;convert to sxb
00C37B  2  8D C0 CB             STA     sxb             ;and save
00C37E  2  B9 86 CB             LDA     sabtbl,y        ;get sab
00C381  2  8D BF CB             STA     sab             ;and set
00C384  2  AD CE CB             LDA     maxdir          ;get max dir
00C387  2  8D BD CB             STA     maxdrc          ;set max dir record
00C38A  2  AD CF CB             LDA     maxdir+1
00C38D  2  4A                   LSR     a               ;divide by 4
00C38E  2  6E BD CB             ROR     maxdrc
00C391  2  4A                   LSR     a
00C392  2  6E BD CB             ROR     maxdrc
00C395  2  8D BE CB             STA     maxdrc+1        ;then save high
00C398  2  A9 00                LDA     #0              ;set mode to byte
00C39A  2  8D BC CB             STA     blmode
00C39D  2  AD C8 CB             LDA     maxblk+1        ;branch if max block
00C3A0  2  F0 05                BEQ     ntm255          ;not over 255
00C3A2  2               ;if y=0 when the following line is executed it means
00C3A2  2               ;that the user has put an illegal combination into
00C3A2  2               ;the disk definition table. may want to consider
00C3A2  2               ;putting some error checking here in the future if
00C3A2  2               ;there is space in pem.
00C3A2  2  88                   DEY                     ;back up index
00C3A3  2  38                   SEC                     ;else set mode to word
00C3A4  2  6E BC CB             ROR     blmode
00C3A7  2               ntm255:
00C3A7  2  B9 83 CB             LDA     exmtbl,y        ;get extent mask
00C3AA  2  8D D6 CB             STA     exm
00C3AD  2               
00C3AD  2  38                   SEC                     ;now calculate cexm1f
00C3AE  2  A9 1F                LDA     #31
00C3B0  2  F9 83 CB             SBC     exmtbl,y
00C3B3  2  8D D7 CB             STA     cexm1f
00C3B6  2  AE A6 CB             LDX     curdrv          ;get drive as pointer
00C3B9  2  BD 7B CB             LDA     bitmap,x        ;get bit
00C3BC  2  2D A7 CB             AND     lginvc          ;if logged in
00C3BF  2  D0 0C                BNE     extstm          ;then exit
00C3C1  2  BD 7B CB             LDA     bitmap,x        ;get bit back
00C3C4  2  0D A7 CB             ORA     lginvc          ;set in log-in
00C3C7  2  8D A7 CB             STA     lginvc          ;and update
00C3CA  2  4C CE C3             JMP     flinal          ;then fill in maps
00C3CD  2               
00C3CD  2               extstm:
00C3CD  2  60                   RTS                     ;and return
00C3CE  2               ;fill in allocation map
00C3CE  2               flinal:
00C3CE  2  20 29 C8             JSR     setrw           ;set to read/write
00C3D1  2  AD C7 CB             LDA     maxblk          ;divide max block by
00C3D4  2  8D C4 CB             STA     gpcnt           ;eight to get max
00C3D7  2  AD C8 CB             LDA     maxblk+1
00C3DA  2  A2 03                LDX     #3
00C3DC  2               clcnab:
00C3DC  2  4A                   LSR     a               ;use a for speed
00C3DD  2  6E C4 CB             ROR     gpcnt
00C3E0  2  CA                   DEX
00C3E1  2  D0 F9                BNE     clcnab          ;loop if more
00C3E3  2  8D C5 CB             STA     gpcnt+1         ;save high
00C3E6  2  EE C4 CB             INC     gpcnt           ;bump by one
00C3E9  2  D0 03                BNE     *+5
00C3EB  2  EE C5 CB             INC     gpcnt+1         ;with carry
00C3EE  2  AD D0 CB             LDA     alcmap          ;get map start
00C3F1  2  AC D1 CB             LDY     alcmap+1
00C3F4  2  85 06                STA     alcpnt          ;set pointer to start
00C3F6  2  84 07                STY     alcpnt+1
00C3F8  2  A0 00                LDY     #0              ;clear index
00C3FA  2               clraml:
00C3FA  2  A9 00                LDA     #0              ;clear byte
00C3FC  2  91 06                STA     (alcpnt),y      ;put in map
00C3FE  2  E6 06                INC     alcpnt          ;bump pointer
00C400  2  D0 02                BNE     *+4
00C402  2  E6 07                INC     alcpnt+1        ;with carry
00C404  2  AD C4 CB             LDA     gpcnt           ;get low of count
00C407  2  D0 03                BNE     *+5             ;skip if not zero
00C409  2  CE C5 CB             DEC     gpcnt+1         ;else drop high
00C40C  2  CE C4 CB             DEC     gpcnt           ;always drop low
00C40F  2  AD C4 CB             LDA     gpcnt           ;test for zero
00C412  2  0D C5 CB             ORA     gpcnt+1
00C415  2  D0 E3                BNE     clraml          ;loop if more
00C417  2               ;at this point complete map is cleared
00C417  2  AD BD CB             LDA     maxdrc          ;get low of max dir record
00C41A  2  8D C4 CB             STA     gpcnt
00C41D  2  AD BE CB             LDA     maxdrc+1        ;high in a
00C420  2  AE C0 CB             LDX     sxb             ;set x according to block size
00C423  2               clcmdb:
00C423  2  4A                   LSR     a               ;do division
00C424  2  6E C4 CB             ROR     gpcnt
00C427  2  CA                   DEX
00C428  2  D0 F9                BNE     clcmdb          ;until x is zero
00C42A  2  8D C5 CB             STA     gpcnt+1         ;set high
00C42D  2  EE C4 CB             INC     gpcnt           ;then bump by one
00C430  2  D0 03                BNE     *+5
00C432  2  EE C5 CB             INC     gpcnt+1
00C435  2  8E AC CB             STX     blknum          ;clear block number
00C438  2  8E AD CB             STX     blknum+1
00C43B  2               fildal:
00C43B  2  AD AC CB             LDA     blknum          ;get block number
00C43E  2  AC AD CB             LDY     blknum+1
00C441  2  20 65 C5             JSR     setblk          ;set bit
00C444  2  EE AC CB             INC     blknum          ;bump block number
00C447  2  D0 03                BNE     *+5
00C449  2  EE AD CB             INC     blknum+1
00C44C  2  AD C4 CB             LDA     gpcnt           ;get low of count
00C44F  2  D0 03                BNE     *+5             ;skip if not zero
00C451  2  CE C5 CB             DEC     gpcnt+1         ;else drop high
00C454  2  CE C4 CB             DEC     gpcnt           ;always do low
00C457  2  AD C4 CB             LDA     gpcnt           ;test for zero
00C45A  2  0D C5 CB             ORA     gpcnt+1
00C45D  2  D0 DC                BNE     fildal          ;loop if more
00C45F  2               ;at this point directory space is mapped
00C45F  2  20 7E C4             JSR     intdrv          ;initialize drive
00C462  2  20 D9 C7             JSR     cldrnm          ;clear directory number
00C465  2               fillpe:
00C465  2  A2 01                LDX     #1              ;parameter for fill
00C467  2  20 20 C7             JSR     nxtdir          ;execute for next directory
00C46A  2  30 11                BMI     extfil          ;done if invalid
00C46C  2  AC AB CB             LDY     subrec          ;get offset
00C46F  2  B1 04                LDA     (bufadd),y      ;get empty/valid flag
00C471  2  C9 E5                CMP     #$e5            ;if empty
00C473  2  F0 F0                BEQ     fillpe          ;try next
00C475  2  A2 01                LDX     #1              ;parameter for fill in
00C477  2  20 E5 C7             JSR     mapdir          ;do directory map
00C47A  2  4C 65 C4             JMP     fillpe          ;then loop
00C47D  2               extfil:
00C47D  2  60                   RTS                     ;return
00C47E  2               ;initialize drive
00C47E  2               ; input:nsystr
00C47E  2               ; returns:none
00C47E  2               ; alters:all
00C47E  2               intdrv:
00C47E  2  20 F8 CB             JSR     sim+24          ;home then
00C481  2               
00C481  2  AD CB CB             LDA     nsystr          ;get number of system tracks
00C484  2  AC CC CB             LDY     nsystr+1
00C487  2  4C FE CB             JMP     sim+30          ;and set in sim
00C48A  2               
00C48A  2               ;directory record set up
00C48A  2               ; input:dirnum
00C48A  2               ; returns:none
00C48A  2               ; alters:all,recnum,dirrec
00C48A  2               drrcsu:
00C48A  2  AD AA CB             LDA     dirnum+1        ;move high dir number
00C48D  2  8D AD CB             STA     recnum+1        ;to record number
00C490  2  AD A9 CB             LDA     dirnum          ;divide
00C493  2  4E AD CB             LSR     recnum+1        ;directory by four
00C496  2  6A                   ROR     a
00C497  2  4E AD CB             LSR     recnum+1
00C49A  2  6A                   ROR     a
00C49B  2  8D B3 CB             STA     dirrec          ;and save
00C49E  2  8D AC CB             STA     recnum          ;set low record number
00C4A1  2  AD AD CB             LDA     recnum+1        ;get high
00C4A4  2  8D B4 CB             STA     dirrec+1        ;and set
00C4A7  2  A9 00                LDA     #0              ;clear top byte
00C4A9  2  8D AE CB             STA     recnum+2
00C4AC  2               ;set track and sector
00C4AC  2               ; input:recnum
00C4AC  2               ; returns:none
00C4AC  2               ; alters:all,countr,trkctr
00C4AC  2               sttrsc:
00C4AC  2  A2 00                LDX     #0              ;clear track counter
00C4AE  2  8E C6 CB             STX     trkctr
00C4B1  2  8E 9E CB             STX     countr          ;and record
00C4B4  2  8E 9F CB             STX     countr+1        ;counter
00C4B7  2  8E A0 CB             STX     countr+2
00C4BA  2               trnxtr:
00C4BA  2  AD AC CB             LDA     recnum          ;from
00C4BD  2  CD 9E CB             CMP     countr          ;record number
00C4C0  2  AD AD CB             LDA     recnum+1        ;and if a
00C4C3  2  ED 9F CB             SBC     countr+1        ;borrow then
00C4C6  2  AD AE CB             LDA     recnum+2
00C4C9  2  ED A0 CB             SBC     countr+2
00C4CC  2  90 21                BCC     higher          ;gone too far
00C4CE  2  18                   CLC                     ;else
00C4CF  2  AD 9E CB             LDA     countr          ;get counter
00C4D2  2  6D C9 CB             ADC     sectrk          ;add sectors per track
00C4D5  2  8D 9E CB             STA     countr          ;sectors per track
00C4D8  2  AD 9F CB             LDA     countr+1
00C4DB  2  6D CA CB             ADC     sectrk+1
00C4DE  2  8D 9F CB             STA     countr+1
00C4E1  2  90 03                BCC     bumptr          ;done if no carry
00C4E3  2  EE A0 CB             INC     countr+2        ;else bump high
00C4E6  2               bumptr:
00C4E6  2  E8                   INX                     ;increase track count
00C4E7  2  D0 D1                BNE     trnxtr          ;with carry
00C4E9  2  EE C6 CB             INC     trkctr
00C4EC  2  4C BA C4             JMP     trnxtr          ;then loop
00C4EF  2               higher:
00C4EF  2  CA                   DEX                     ;back up track
00C4F0  2  E0 FF                CPX     #$ff            ;see if wrap around
00C4F2  2  D0 03                BNE     *+5             ;wasn't
00C4F4  2  CE C6 CB             DEC     trkctr          ;else drop high
00C4F7  2  8A                   TXA                     ;move to a
00C4F8  2  18                   CLC                     ;add starting track
00C4F9  2  6D CB CB             ADC     nsystr
00C4FC  2  AA                   TAX                     ;save in x
00C4FD  2  AD C6 CB             LDA     trkctr
00C500  2  6D CC CB             ADC     nsystr+1
00C503  2  A8                   TAY                     ;move to correct registers
00C504  2  8A                   TXA
00C505  2  20 FE CB             JSR     sim+30          ;then set in sim
00C508  2               
00C508  2  38                   SEC                     ;back
00C509  2  AD 9E CB             LDA     countr          ;counter down
00C50C  2  ED C9 CB             SBC     sectrk          ;by sectors per track
00C50F  2  8D 9E CB             STA     countr          ;and save
00C512  2  AD 9F CB             LDA     countr+1
00C515  2  ED CA CB             SBC     sectrk+1
00C518  2  8D 9F CB             STA     countr+1
00C51B  2  38                   SEC                     ;now
00C51C  2  AD AC CB             LDA     recnum          ;find difference
00C51F  2  ED 9E CB             SBC     countr          ;as sector
00C522  2  AA                   TAX                     ;save in x
00C523  2  AD AD CB             LDA     recnum+1
00C526  2  ED 9F CB             SBC     countr+1
00C529  2  A8                   TAY                     ;move to correct registers
00C52A  2  8A                   TXA
00C52B  2  20 13 CC             JSR     sim+51          ;translate
00C52E  2               
00C52E  2  4C 01 CC             JMP     sim+33          ;and set through sim
00C531  2               
00C531  2               ;get block bit mask and index
00C531  2               ; input:a&y=block number
00C531  2               ; returns:a=bit mask and y=0
00C531  2               ; alters:all and alcpnt
00C531  2               blkmsk:
00C531  2  48                   PHA                     ;save block number
00C532  2  84 07                STY     alcpnt+1        ;including high
00C534  2  A0 03                LDY     #3              ;divide by eight
00C536  2               blkmlp:
00C536  2  46 07                LSR     alcpnt+1        ;shift high
00C538  2  6A                   ROR     a
00C539  2  88                   DEY                     ;loop until done
00C53A  2  D0 FA                BNE     blkmlp
00C53C  2  18                   CLC                     ;now add map start
00C53D  2  6D D0 CB             ADC     alcmap
00C540  2  85 06                STA     alcpnt
00C542  2  A5 07                LDA     alcpnt+1
00C544  2  6D D1 CB             ADC     alcmap+1
00C547  2  85 07                STA     alcpnt+1
00C549  2  68                   PLA                     ;get number back
00C54A  2  29 07                AND     #%00000111      ;look at 3 lsbs
00C54C  2  AA                   TAX                     ;get
00C54D  2  BD 73 CB             LDA     bitmsk,x        ;mask
00C550  2  60                   RTS                     ;and return
00C551  2               ;test block
00C551  2               ; input:a&y=block number
00C551  2               ; returns:z=1 if unassigned
00C551  2               ; 	   =0 if assigned and bit in a is set
00C551  2               ; alters:all
00C551  2               tstblk:
00C551  2  20 31 C5             JSR     blkmsk          ;get mask and index
00C554  2  31 06                AND     (alcpnt),y      ;mask with map entry
00C556  2  60                   RTS                     ;then return
00C557  2               ;alter block status
00C557  2               ; input:a&y=block number,x=1 if set
00C557  2               ;		   	  =0 if reset
00C557  2               ; returns:none
00C557  2               ; alters:all and allocation map
00C557  2               altalc:
00C557  2  E0 01                CPX     #1              ;if set
00C559  2  F0 0A                BEQ     setblk          ;go do it
00C55B  2               clrblk:
00C55B  2  20 31 C5             JSR     blkmsk          ;else get mask
00C55E  2  49 FF                EOR     #$ff            ;and complement
00C560  2  31 06                AND     (alcpnt),y      ;preserve others
00C562  2  91 06                STA     (alcpnt),y      ;and save
00C564  2  60                   RTS                     ;then return
00C565  2               setblk:
00C565  2  20 31 C5             JSR     blkmsk          ;get mask
00C568  2  11 06                ORA     (alcpnt),y      ;set bit
00C56A  2  91 06                STA     (alcpnt),y      ;and put back
00C56C  2  60                   RTS                     ;then return
00C56D  2               ;set current drive to read only
00C56D  2               ; input:curdrv,ronlst,bitmap
00C56D  2               ; returns:none
00C56D  2               ; alters:a,x,p and ronlst
00C56D  2               setron:
00C56D  2  AE A6 CB             LDX     curdrv          ;get number
00C570  2  BD 7B CB             LDA     bitmap,x        ;and get mask
00C573  2  0D A8 CB             ORA     ronlst          ;or with status
00C576  2  8D A8 CB             STA     ronlst          ;and put back
00C579  2  60                   RTS                     ;then return
00C57A  2               ;calculate checksum of buffer @ bufadd
00C57A  2               ; input: buffer@(bufadd)
00C57A  2               ; returns:a=checksum
00C57A  2               ; alters:a,y,p
00C57A  2               clcchk:
00C57A  2  A9 00                LDA     #0              ;clear accumulator
00C57C  2  A0 7F                LDY     #127            ;start at end
00C57E  2               chkmre:
00C57E  2  18                   CLC                     ;no carry
00C57F  2  71 04                ADC     (bufadd),y      ;add byte
00C581  2  88                   DEY                     ;count down
00C582  2  10 FA                BPL     chkmre          ;and loop until done
00C584  2  60                   RTS                     ;then return
00C585  2               ;check read/write status
00C585  2               ; input:curdrv,ronlst
00C585  2               ; returns:z=0 if r/o or z=1 if r/w
00C585  2               ; alters:a,x,p
00C585  2               chkron:
00C585  2  AE A6 CB             LDX     curdrv          ;get current drive
00C588  2  BD 7B CB             LDA     bitmap,x        ;get mask
00C58B  2  2D A8 CB             AND     ronlst          ;and test status
00C58E  2  60                   RTS
00C58F  2               ;initialize record counters from fcb
00C58F  2               ; input:fcb@(addinp)
00C58F  2               ; returns:none
00C58F  2               ; alters:a,y,p,nxtrec,numrec
00C58F  2               inrcct:
00C58F  2  A0 20                LDY     #32             ;next record offset
00C591  2  B1 02                LDA     (addinp),y      ;get next record
00C593  2  8D B1 CB             STA     nxtrec          ;and save
00C596  2  A0 0F                LDY     #15             ;number records offset
00C598  2  B1 02                LDA     (addinp),y      ;get number
00C59A  2  8D B2 CB             STA     numrec          ;and save
00C59D  2  60                   RTS                     ;and return
00C59E  2               ;update record counters in fcb
00C59E  2               ; input:nxtrec,numrec
00C59E  2               ; returns:none
00C59E  2               ; alters:all,fcb@(addinp)
00C59E  2               updtrc:
00C59E  2  AE B1 CB             LDX     nxtrec          ;get next record
00C5A1  2  E8                   INX                     ;bump it
00C5A2  2  8A                   TXA                     ;transfer
00C5A3  2  A0 20                LDY     #32             ;set offset
00C5A5  2  91 02                STA     (addinp),y      ;and store in fcb
00C5A7  2  AD B2 CB             LDA     numrec          ;get number
00C5AA  2  A0 0F                LDY     #15             ;and its offset
00C5AC  2  91 02                STA     (addinp),y      ;and store
00C5AE  2  60                   RTS                     ;then return
00C5AF  2               ;execute open file
00C5AF  2               xopen:
00C5AF  2  20 12 C3             JSR     autodr          ;auto drive select
00C5B2  2               ;open file
00C5B2  2               ; input:fcb @ (addinp)
00C5B2  2               ; returns:n=1 if not found,a=dirmod (255 if not found)
00C5B2  2               ; alters:all
00C5B2  2               opnfle:
00C5B2  2  20 11 C6             JSR     fndf13          ;match all including extent
00C5B5  2  30 32                BMI     extopn          ;done if not found
00C5B7  2  A9 0C                LDA     #12             ;point to first char
00C5B9  2  0D AB CB             ORA     subrec          ;add offset
00C5BC  2  A8                   TAY                     ;make it a pointer
00C5BD  2               nxopmv:
00C5BD  2  B1 04                LDA     (bufadd),y      ;get buffer contents
00C5BF  2  AA                   TAX                     ;and save
00C5C0  2  98                   TYA                     ;save index
00C5C1  2  29 1F                AND     #%00011111      ;remove offset
00C5C3  2  A8                   TAY                     ;back to index
00C5C4  2  8A                   TXA                     ;get byte back
00C5C5  2  91 02                STA     (addinp),y      ;and store in fcb
00C5C7  2  98                   TYA                     ;get index
00C5C8  2  0D AB CB             ORA     subrec          ;add offset back
00C5CB  2  A8                   TAY                     ;and make index again
00C5CC  2  C8                   INY                     ;next position
00C5CD  2  98                   TYA                     ;if index
00C5CE  2  29 1F                AND     #%00011111      ;not gone past
00C5D0  2  D0 EB                BNE     nxopmv          ;end then loop
00C5D2  2               ;now correct extent and max records
00C5D2  2  A0 0C                LDY     #12             ;point at extent in fcb
00C5D4  2  AD 8D CB             LDA     savext          ;get save from search
00C5D7  2  D1 02                CMP     (addinp),y      ;compare
00C5D9  2  F0 0B                BEQ     extsme          ;jump ahead if same
00C5DB  2  91 02                STA     (addinp),y      ;else change extent
00C5DD  2  A9 80                LDA     #128            ;assume fcb ext < dir ext
00C5DF  2  90 01                BCC     fcbxls          ;jump ahead if true
00C5E1  2  0A                   ASL     a               ;clear a
00C5E2  2               fcbxls:
00C5E2  2  A0 0F                LDY     #15             ;point to max
00C5E4  2  91 02                STA     (addinp),y      ;and set
00C5E6  2               extsme:
00C5E6  2  AD B5 CB             LDA     dirmod          ;else get number
00C5E9  2               extopn:
00C5E9  2  60                   RTS                     ;and return
00C5EA  2               ;execute close file
00C5EA  2               xclose:
00C5EA  2  20 12 C3             JSR     autodr          ;auto drive select
00C5ED  2               ;close file
00C5ED  2               ;if file is r/o then no actual close
00C5ED  2               ;operation is performed.
00C5ED  2               ; input:fcb @ (addinp)
00C5ED  2               ; returns:n=1 if not valid,a=dirmod (255 if invalid)
00C5ED  2               ; alters:all
00C5ED  2               clsfle:
00C5ED  2  20 11 C6             JSR     fndf13          ;match including extent
00C5F0  2  30 1B                BMI     extcls          ;exit if not found
00C5F2  2  20 85 C5             JSR     chkron          ;see if r/o
00C5F5  2  D0 13                BNE     noclse          ;branch if is
00C5F7  2               ;now set flag to ensure directory extent and number of
00C5F7  2               ;records fields are only changed if necessary.
00C5F7  2               ;The decision to change is determined by whether or
00C5F7  2               ;not the system is closing an extent less than the
00C5F7  2               ;maximum extent in the directory entry. If that is
00C5F7  2               ;the case, the directory extent and number of record
00C5F7  2               ;fields are not changed.
00C5F7  2  A0 0C                LDY     #12             ;get extent
00C5F9  2  B1 02                LDA     (addinp),y
00C5FB  2  48                   PHA                     ;save it
00C5FC  2  98                   TYA                     ;now look in directory
00C5FD  2  0D AB CB             ORA     subrec
00C600  2  A8                   TAY
00C601  2  68                   PLA                     ;get extent back
00C602  2  D1 04                CMP     (bufadd),y
00C604  2  6E 8B CB             ROR     skpdir          ;save result
00C607  2               ;now go do it
00C607  2  20 7C C6             JSR     updtdr          ;update directory
00C60A  2               noclse:
00C60A  2  AD B5 CB             LDA     dirmod          ;get directory number
00C60D  2               extcls:
00C60D  2  60                   RTS                     ;and return
00C60E  2               ;execute find first match
00C60E  2               xfndfr:
00C60E  2  20 12 C3             JSR     autodr          ;auto drive select
00C611  2               fndf13:
00C611  2  A9 0D                LDA     #13             ;match including extent
00C613  2               ;search for first match
00C613  2               ; input:a=number char to match
00C613  2               ; returns:n=1 if invalid,a=dirmod (255 if invalid)
00C613  2               ; alters:all
00C613  2               frstsr:
00C613  2  48                   PHA                     ;save number to match
00C614  2  20 D9 C7             JSR     cldrnm          ;clear directory number to -1
00C617  2  20 7E C4             JSR     intdrv          ;and drive
00C61A  2  68                   PLA                     ;get number to match
00C61B  2               ;search for directory match
00C61B  2               ; input:a=number char to match
00C61B  2               ; returns:n=1 if not found,a=dirmod (255 if invalid)
00C61B  2               ; alters:all
00C61B  2               search:
00C61B  2  8D AF CB             STA     chrcnt          ;save number
00C61E  2               newtry:
00C61E  2  A2 00                LDX     #0              ;set for search
00C620  2  8E B0 CB             STX     cmppnt          ;clear pointer
00C623  2  20 20 C7             JSR     nxtdir          ;get next entry
00C626  2  30 37                BMI     exitsr          ;exit if not found
00C628  2  AE AF CB             LDX     chrcnt          ;get count
00C62B  2               mremch:
00C62B  2  AC B0 CB             LDY     cmppnt          ;get pointer
00C62E  2  EE B0 CB             INC     cmppnt          ;and bump
00C631  2  B1 02                LDA     (addinp),y      ;get fcb entry
00C633  2  C0 0C                CPY     #12             ;see if at extent
00C635  2  D0 13                BNE     notaex          ;jump if not
00C637  2  8D 8D CB             STA     savext          ;save for later use
00C63A  2  48                   PHA                     ;save extent
00C63B  2  98                   TYA                     ;change to directory
00C63C  2  0D AB CB             ORA     subrec          ;coordinates
00C63F  2  A8                   TAY
00C640  2  68                   PLA                     ;get extent back
00C641  2  51 04                EOR     (bufadd),y      ;exclusive or with dir
00C643  2  2D D7 CB             AND     cexm1f          ;and with exm complement + 1f
00C646  2  F0 11                BEQ     trynxt          ;ok if zero
00C648  2  D0 D4                BNE     newtry          ;else get next directory
00C64A  2               notaex:
00C64A  2  C9 3F                CMP     #'?'            ;if a ? then
00C64C  2  F0 0B                BEQ     trynxt          ;is a match
00C64E  2  48                   PHA                     ;save char
00C64F  2  98                   TYA                     ;then add
00C650  2  0D AB CB             ORA     subrec          ;offset to
00C653  2  A8                   TAY                     ;make pointer
00C654  2  68                   PLA                     ;get char back
00C655  2               ;        sta     savex
00C655  2               ;        lda	(bufadd),y	;if not same
00C655  2               ;        and     #$7F            ; strip off high bit for ROMWBW Read only filesystem
00C655  2               ;	cmp	savex	        ;if not same
00C655  2  D1 04                CMP     (bufadd),y      ;if not same
00C657  2  D0 C5                BNE     newtry          ;try next directory
00C659  2               trynxt:
00C659  2  CA                   DEX                     ;else count number down
00C65A  2  D0 CF                BNE     mremch          ;and loop if more
00C65C  2  AD B5 CB             LDA     dirmod          ;return with directory
00C65F  2               exitsr:
00C65F  2  60                   RTS                     ;number mod 4
00C660  2               ;calculate logical record number
00C660  2               ; input:blknum
00C660  2               ; returns:none
00C660  2               ; alters:a,x,p,recnum
00C660  2               calrcn:
00C660  2  AE C0 CB             LDX     sxb             ;set x according to blkscd
00C663  2               mulmre:
00C663  2  0E AC CB             ASL     blknum          ;multiply block
00C666  2  2E AD CB             ROL     blknum+1        ;number
00C669  2  2E AE CB             ROL     blknum+2
00C66C  2  CA                   DEX                     ;by code
00C66D  2  D0 F4                BNE     mulmre
00C66F  2  AD BF CB             LDA     sab             ;set mask in a
00C672  2  2D B1 CB             AND     nxtrec          ;and with next record
00C675  2  0D AC CB             ORA     recnum          ;or with number
00C678  2  8D AC CB             STA     recnum          ;and save
00C67B  2  60                   RTS
00C67C  2               ;update directory
00C67C  2               updtdr:
00C67C  2  A9 20                LDA     #32             ;change all
00C67E  2  A2 00                LDX     #0              ;from start
00C680  2               ;change directory entry
00C680  2               ; input:a=number char to change,x=starting position,fcb@(addinp)
00C680  2               ; returns:none
00C680  2               ; alters:all,directory,checksums
00C680  2               dirchg:
00C680  2  8D AF CB             STA     chrcnt          ;save count
00C683  2  CE AF CB             DEC     chrcnt          ;back up
00C686  2               mrechg:
00C686  2  18                   CLC                     ;clear carry
00C687  2  8A                   TXA                     ;get offset
00C688  2  6D AF CB             ADC     chrcnt          ;compute index
00C68B  2  A8                   TAY                     ;and set
00C68C  2  C0 0C                CPY     #12             ;see if at extent
00C68E  2  F0 04                BEQ     docare          ;if so do special
00C690  2  C0 0F                CPY     #15             ;see if at number rec
00C692  2  D0 05                BNE     dntcar          ;if not skip
00C694  2               docare:
00C694  2  2C 8B CB             BIT     skpdir          ;check flag
00C697  2  10 0D                BPL     nochng          ;skip if ok
00C699  2               dntcar:
00C699  2  B1 02                LDA     (addinp),y      ;get char
00C69B  2  48                   PHA                     ;save it
00C69C  2  AD AF CB             LDA     chrcnt          ;get count
00C69F  2  0D AB CB             ORA     subrec          ;add offset
00C6A2  2  A8                   TAY                     ;make an index
00C6A3  2  68                   PLA                     ;get char back
00C6A4  2  91 04                STA     (bufadd),y      ;and put in buffer
00C6A6  2               nochng:
00C6A6  2  CE AF CB             DEC     chrcnt          ;count down
00C6A9  2  10 DB                BPL     mrechg          ;and loop
00C6AB  2  20 8A C4             JSR     drrcsu          ;set it up
00C6AE  2  4C 3E C8             JMP     updtck          ;and do change
00C6B1  2               ;execute create file
00C6B1  2               xmake:
00C6B1  2  20 12 C3             JSR     autodr          ;auto drive select
00C6B4  2               ;create file
00C6B4  2               ; input:fcb@(addinp)
00C6B4  2               ; returns:n=1 if not valid,a=dirmod (255 if not valid)
00C6B4  2               ; alters:dirnum,dirmod,fcb@(addinp)
00C6B4  2               mkefle:
00C6B4  2  20 15 C8             JSR     tstron          ;test for r/o
00C6B7  2  A5 02                LDA     addinp          ;save fcb
00C6B9  2  48                   PHA                     ;address
00C6BA  2  A5 03                LDA     addinp+1        ;on
00C6BC  2  48                   PHA                     ;stack
00C6BD  2  AD E4 CA             LDA     empdvc          ;then point
00C6C0  2  AC E5 CA             LDY     empdvc+1        ;to empty
00C6C3  2  85 02                STA     addinp          ;dummy
00C6C5  2  84 03                STY     addinp+1        ;fcb
00C6C7  2  A9 01                LDA     #1              ;match only
00C6C9  2  20 13 C6             JSR     frstsr          ;first char
00C6CC  2  68                   PLA                     ;restore
00C6CD  2  85 03                STA     addinp+1        ;fcb
00C6CF  2  68                   PLA                     ;address
00C6D0  2  85 02                STA     addinp          ;from stack
00C6D2  2  AD B5 CB             LDA     dirmod          ;get number mod 4
00C6D5  2  30 15                BMI     extmke          ;quit if not found
00C6D7  2  A0 0D                LDY     #13             ;else set up
00C6D9  2  A9 00                LDA     #0              ;to clear
00C6DB  2               mkeagn:
00C6DB  2  91 02                STA     (addinp),y      ;rest of
00C6DD  2  C8                   INY                     ;fcb
00C6DE  2  C0 21                CPY     #33             ;including next
00C6E0  2  D0 F9                BNE     mkeagn          ;record
00C6E2  2               ;the next two lines ensure that the extent and
00C6E2  2               ;number of records fields are updated
00C6E2  2  38                   SEC
00C6E3  2  6E 8B CB             ROR     skpdir
00C6E6  2  20 7C C6             JSR     updtdr          ;update directory
00C6E9  2  AD B5 CB             LDA     dirmod          ;get number
00C6EC  2               extmke:
00C6EC  2  60                   RTS                     ;and quit
00C6ED  2               ;extend file
00C6ED  2               ; input:fcb@(addinp), x=1 read
00C6ED  2               ;		        0 write
00C6ED  2               extend:
00C6ED  2  8E 99 CB             STX     exrwfl          ;save parameter
00C6F0  2  20 ED C5             JSR     clsfle          ;close current extent
00C6F3  2  30 2A                BMI     extext          ;exit if not found
00C6F5  2  A0 0C                LDY     #12             ;else
00C6F7  2  B1 02                LDA     (addinp),y      ;get extent
00C6F9  2  18                   CLC                     ;and
00C6FA  2  69 01                ADC     #1              ;add one
00C6FC  2  29 1F                AND     #%00011111      ;see if overflow
00C6FE  2  F0 17                BEQ     exteof          ;eof if so
00C700  2  91 02                STA     (addinp),y      ;and save
00C702  2  20 11 C6             JSR     fndf13          ;see if next extent exists
00C705  2  10 0B                BPL     opnext          ;if so open
00C707  2  AD 99 CB             LDA     exrwfl          ;if not and is write then create
00C70A  2  D0 13                BNE     extext          ;else return as eof
00C70C  2               dwrtex:
00C70C  2  20 B4 C6             JSR     mkefle          ;create file
00C70F  2  4C 15 C7             JMP     tstext          ;and test
00C712  2               opnext:
00C712  2  20 B2 C5             JSR     opnfle          ;open
00C715  2               tstext:
00C715  2  10 03                BPL     extnok          ;continue if ok
00C717  2               exteof:
00C717  2  A9 01                LDA     #1              ;else set eof
00C719  2  60                   RTS                     ;and return
00C71A  2               extnok:
00C71A  2  20 8F C5             JSR     inrcct          ;initialize counters
00C71D  2  A9 00                LDA     #0              ;good
00C71F  2               extext:
00C71F  2  60                   RTS                     ;return
00C720  2               ;set up next directory block
00C720  2               ; input:dirnum,x=1 for update checksum
00C720  2               ; returns:a=dirmod (255 if invalid),n=1 if invalid
00C720  2               ; alters:alll,dirnum,dirmod
00C720  2               nxtdir:
00C720  2  8A                   TXA                     ;save operation
00C721  2  48                   PHA                     ;on stack
00C722  2  EE A9 CB             INC     dirnum          ;bump directory
00C725  2  D0 03                BNE     *+5
00C727  2  EE AA CB             INC     dirnum+1
00C72A  2               
00C72A  2  AD CE CB             LDA     maxdir          ;if not at limit continue
00C72D  2  CD A9 CB             CMP     dirnum
00C730  2  AD CF CB             LDA     maxdir+1
00C733  2  ED AA CB             SBC     dirnum+1
00C736  2  B0 05                BCS     gtnxdr          ;then continue
00C738  2  68                   PLA                     ;else clear stack
00C739  2  AA                   TAX                     ;and set x
00C73A  2  4C D9 C7             JMP     cldrnm          ;set to invalid
00C73D  2               gtnxdr:
00C73D  2  AD A9 CB             LDA     dirnum          ;get low again
00C740  2  29 03                AND     #%00000011      ;look at 2 lsbs
00C742  2  8D B5 CB             STA     dirmod          ;save mod 4
00C745  2  0A                   ASL     a               ;multiply
00C746  2  0A                   ASL     a               ;by
00C747  2  0A                   ASL     a               ;32 to
00C748  2  0A                   ASL     a               ;get pointer
00C749  2  0A                   ASL     a               ;offset
00C74A  2  8D AB CB             STA     subrec          ;and save
00C74D  2  F0 05                BEQ     getdir          ;if zero read new
00C74F  2  68                   PLA                     ;else clear stack
00C750  2  AA                   TAX                     ;set x
00C751  2  4C 5C C7             JMP     gotdir          ;and exit
00C754  2               getdir:
00C754  2  20 8A C4             JSR     drrcsu          ;set up to read
00C757  2  20 38 C8             JSR     rdesec          ;do read
00C75A  2  68                   PLA                     ;get operation
00C75B  2  AA                   TAX                     ;code
00C75C  2               ;;;;;;	jsr	chksop		;do it
00C75C  2               gotdir:
00C75C  2  AD B5 CB             LDA     dirmod          ;and return
00C75F  2               exnxdr:
00C75F  2  60                   RTS                     ;with number
00C760  2               ;checksum operation
00C760  2               ;this routine assumes calling routine has checked for
00C760  2               ;valid dirnum and hence valid dirrec
00C760  2               ; input:chkflg,dirrec,x (1=update else check)
00C760  2               ; returns:none
00C760  2               ; alters:map@(chkmap)
00C760  2               chksop:
00C760  2  60                   rts
00C761  2  2C D2 CB             BIT     chkflg          ;check flag
00C764  2  30 F9                BMI     exnxdr          ;done if set
00C766  2  CA                   DEX                     ;dec code
00C767  2  D0 09                BNE     tstchk          ;if not zero test
00C769  2  20 7A C5             JSR     clcchk          ;else calculate
00C76C  2  20 C3 C7             JSR     clcckp          ;calculate pointer
00C76F  2  91 08                STA     (chkpnt),y      ;and save
00C771  2  60                   RTS                     ;then return
00C772  2               tstchk:
00C772  2  20 7A C5             JSR     clcchk          ;do calculation
00C775  2  20 C3 C7             JSR     clcckp          ;calculate pointer
00C778  2  D1 08                CMP     (chkpnt),y      ;compare to old
00C77A  2  F0 E3                BEQ     exnxdr          ;if equal ok
00C77C  2  4C 6D C5             JMP     setron          ;else set to r/o
00C77F  2               ;get block number
00C77F  2               ; input:nxtrec,blmode,fcb@(addinp),sxb,exm
00C77F  2               ; returns:none
00C77F  2               ; alters:all,blknum
00C77F  2               getblk:
00C77F  2  AE C0 CB             LDX     sxb             ;set x according to blkscd
00C782  2  AD B1 CB             LDA     nxtrec          ;get next record
00C785  2               gblp:
00C785  2  4A                   LSR     a               ;divide by 2 x times
00C786  2  CA                   DEX
00C787  2  D0 FC                BNE     gblp
00C789  2  8D AC CB             STA     blknum          ;save previous as temp
00C78C  2               ;use extent as offset but first use sxb to create param
00C78C  2  38                   SEC
00C78D  2  A9 08                LDA     #8
00C78F  2  ED C0 CB             SBC     sxb
00C792  2  AA                   TAX
00C793  2               ;now get extent from fcb
00C793  2  A0 0C                LDY     #12
00C795  2  B1 02                LDA     (addinp),y
00C797  2  2D D6 CB             AND     exm             ;and with mask
00C79A  2  4A                   LSR     a               ;shift with lsb to c
00C79B  2               gbxlp:
00C79B  2  2A                   ROL     a               ;now go other way
00C79C  2  CA                   DEX
00C79D  2  D0 FC                BNE     gbxlp
00C79F  2  18                   CLC                     ;now add saved value
00C7A0  2  6D AC CB             ADC     blknum          ;back
00C7A3  2  2C BC CB             BIT     blmode          ;test mode
00C7A6  2  10 01                BPL     *+3             ;skip if byte
00C7A8  2  0A                   ASL     a               ;else times two
00C7A9  2  18                   CLC                     ;then add
00C7AA  2  69 10                ADC     #16             ;offset into fcb
00C7AC  2  8D 8C CB             STA     fcbind          ;save for later
00C7AF  2  A8                   TAY                     ;set index
00C7B0  2  B1 02                LDA     (addinp),y      ;get number
00C7B2  2  8D AC CB             STA     blknum          ;store
00C7B5  2  C8                   INY
00C7B6  2  A9 00                LDA     #0              ;clear
00C7B8  2  2C BC CB             BIT     blmode          ;test mode
00C7BB  2  10 02                BPL     *+4             ;skip if byte
00C7BD  2  B1 02                LDA     (addinp),y      ;else get high
00C7BF  2  8D AD CB             STA     blknum+1        ;high byte
00C7C2  2  60                   RTS                     ;and return
00C7C3  2               ;calculate chkpnt as function of dirrec and chkmap
00C7C3  2               ; input:dirrec,chkmap
00C7C3  2               ; returns:y=0
00C7C3  2               ; alters:y,p,chkpnt
00C7C3  2               clcckp:
00C7C3  2  48                   PHA                     ;save a
00C7C4  2  18                   CLC
00C7C5  2  AD B3 CB             LDA     dirrec          ;add record number
00C7C8  2  6D D3 CB             ADC     chkmap          ;to start
00C7CB  2  85 08                STA     chkpnt
00C7CD  2  AD B4 CB             LDA     dirrec+1
00C7D0  2  6D D4 CB             ADC     chkmap+1
00C7D3  2  85 09                STA     chkpnt+1
00C7D5  2  A0 00                LDY     #0
00C7D7  2  68                   PLA                     ;get a back
00C7D8  2  60                   RTS
00C7D9  2               ;clear directory number to $ffff
00C7D9  2               ; input:none
00C7D9  2               ; returns:a=$ff,n=1,z=0
00C7D9  2               ; alters:a,p,dirnum,dirmod
00C7D9  2               cldrnm:
00C7D9  2  A9 FF                LDA     #$ff            ;set to $ff
00C7DB  2  8D A9 CB             STA     dirnum
00C7DE  2  8D AA CB             STA     dirnum+1
00C7E1  2  8D B5 CB             STA     dirmod
00C7E4  2  60                   RTS
00C7E5  2               ;change allocation map
00C7E5  2               ; input:subrec,directory record @ (bufadd)
00C7E5  2               ; returns:none
00C7E5  2               ; alters:all,allocation map
00C7E5  2               mapdir:
00C7E5  2  18                   CLC                     ;add 16 to
00C7E6  2  AD AB CB             LDA     subrec          ;to subrec to point
00C7E9  2  69 10                ADC     #16             ;to block number field
00C7EB  2  A8                   TAY                     ;make index
00C7EC  2               lpmpdr:
00C7EC  2  8C BA CB             STY     mpdrsy          ;save index
00C7EF  2  8A                   TXA                     ;save x
00C7F0  2  48                   PHA                     ;operation
00C7F1  2  B1 04                LDA     (bufadd),y      ;get block number
00C7F3  2  8D BB CB             STA     mpdrtm          ;save in temp
00C7F6  2  C8                   INY                     ;bump index for word
00C7F7  2  20 79 C8             JSR     gthibn          ;get high part of number
00C7FA  2               mpdrnw:
00C7FA  2  0D BB CB             ORA     mpdrtm          ;see if zero
00C7FD  2  F0 0A                BEQ     skpedr          ;skip if zero
00C7FF  2  20 79 C8             JSR     gthibn          ;get high again
00C802  2  A8                   TAY                     ;move to y
00C803  2  AD BB CB             LDA     mpdrtm          ;get low again
00C806  2  20 57 C5             JSR     altalc          ;else alter map
00C809  2               skpedr:
00C809  2  68                   PLA                     ;get operation
00C80A  2  AA                   TAX                     ;back
00C80B  2  AC BA CB             LDY     mpdrsy          ;get index back
00C80E  2  C8                   INY                     ;bump it
00C80F  2  98                   TYA                     ;if still
00C810  2  29 0F                AND     #%00001111      ;in field
00C812  2  D0 D8                BNE     lpmpdr          ;then loop
00C814  2  60                   RTS                     ;else quit
00C815  2               ;test r/w status
00C815  2               ;does warm boot if r/o
00C815  2               ; input:curdrv,ronlst
00C815  2               ; returns:none
00C815  2               ; alters:a,x,p
00C815  2               tstron:
00C815  2  20 85 C5             JSR     chkron          ;test bit
00C818  2  F0 1D                BEQ     exttro          ;exit if r/w
00C81A  2  20 67 C8             JSR     errout          ;else send error
00C81D  2  AD E7 CA             LDA     rommvc          ;point to r/o
00C820  2  AC E8 CA             LDY     rommvc+1        ;message
00C823  2  20 CB C8             JSR     sndstr          ;send it
00C826  2  4C EA C0             JMP     xwboot          ;then abort
00C829  2               ;set current drive to r/w
00C829  2               ; input:curdrv,ronlst
00C829  2               ; returns:ronlst
00C829  2               ; alters:a,x,p,ronlst
00C829  2               setrw:
00C829  2  AE A6 CB             LDX     curdrv          ;get drive
00C82C  2  BD 7B CB             LDA     bitmap,x        ;and mask
00C82F  2  49 FF                EOR     #$ff            ;complement
00C831  2  2D A8 CB             AND     ronlst          ;and with status
00C834  2  8D A8 CB             STA     ronlst          ;save
00C837  2               exttro:
00C837  2  60                   RTS                     ;return
00C838  2               ;read sector
00C838  2               rdesec:
00C838  2  20 07 CC             JSR     sim+39          ;do read
00C83B  2               
00C83B  2  4C 4A C8             JMP     chkrwe          ;check for error
00C83E  2               ;update checksum and directory
00C83E  2               updtck:
00C83E  2  A2 01                LDX     #1              ;set for update
00C840  2               ;;;;;	jsr	chksop		;do it
00C840  2  A9 01                LDA     #1              ;say is directory op
00C842  2  D0 03                BNE     secwrt          ;do it
00C844  2               ;write sector
00C844  2               wrtsec:
00C844  2  AD D5 CB             LDA     pemwrtype       ;get write type
00C847  2               secwrt:
00C847  2  20 0A CC             JSR     sim+42          ;do write
00C84A  2               
00C84A  2               chkrwe:
00C84A  2  C9 00                CMP     #0              ;if not ok
00C84C  2  F0 E9                BEQ     exttro          ;done if zero
00C84E  2               ;read/write error
00C84E  2               rwerrt:
00C84E  2  20 67 C8             JSR     errout          ;send error message
00C851  2  AD EA CA             LDA     bdsmvc          ;point to
00C854  2  AC EB CA             LDY     bdsmvc+1        ;bad sector message
00C857  2  20 CB C8             JSR     sndstr          ;and send
00C85A  2  20 86 C8             JSR     getcon          ;get input
00C85D  2  C9 0D                CMP     #cr             ;if a cr
00C85F  2  F0 03                BEQ     ignerr          ;then continue
00C861  2  4C EA C0             JMP     xwboot          ;else abort
00C864  2               ignerr:
00C864  2  4C 62 CA             JMP     pcrlf           ;crlf and return
00C867  2               ;error output routine
00C867  2               ; input:curdrv,pemmvc
00C867  2               ; returns:none
00C867  2               ; alters:all
00C867  2               errout:
00C867  2  AD ED CA             LDA     pemmvc          ;point to
00C86A  2  AC EE CA             LDY     pemmvc+1        ;error message
00C86D  2  20 CB C8             JSR     sndstr          ;send it
00C870  2  AD A6 CB             LDA     curdrv          ;get drive number
00C873  2  18                   CLC                     ;add
00C874  2  69 41                ADC     #'A'            ;ascii a
00C876  2  4C 14 C9             JMP     sndchr          ;and send it
00C879  2               ;get high part of block number if word (zero if byte)
00C879  2               ; input:y=index to high,blmode,directory@(bufadd)+subrec
00C879  2               ; returns:a=high part of block number
00C879  2               ; alters:a,p,mpdrsy iff word
00C879  2               gthibn:
00C879  2  A9 00                LDA     #0              ;preset for byte
00C87B  2  2C BC CB             BIT     blmode          ;test mode
00C87E  2  10 05                BPL     gthiex          ;done if byte
00C880  2  B1 04                LDA     (bufadd),y      ;get high
00C882  2  8C BA CB             STY     mpdrsy          ;alter y
00C885  2               gthiex:
00C885  2  60                   RTS
00C886  2               ;get console input
00C886  2               ; input:pndkey
00C886  2               ; returns:a=character
00C886  2               ; alters:all,pndkey
00C886  2               getcon:
00C886  2  AD 8F CB             LDA     pndkey          ;get pending
00C889  2  48                   PHA                     ;save it
00C88A  2  A9 00                LDA     #0              ;clear
00C88C  2  8D 8F CB             STA     pndkey          ;pending
00C88F  2  68                   PLA                     ;restore
00C890  2  D0 03                BNE     extget          ;exit if not null
00C892  2  20 E9 CB             JSR     sim+9           ;else get new
00C895  2               
00C895  2               extget:
00C895  2  60                   RTS                     ;and return
00C896  2               ;check keyboard status
00C896  2               ;handles <ctl-s> for freeze and <ctl-c> for boot
00C896  2               ; input:pndkey
00C896  2               ; returns:a=0 if no input or <>0 if input
00C896  2               ; alters:all,pndkey
00C896  2               kbdsts:
00C896  2  AD 8F CB             LDA     pndkey          ;get pending
00C899  2  D0 20                BNE     extkbd          ;if there quit
00C89B  2  20 E6 CB             JSR     sim+6           ;else test
00C89E  2  C9 00                CMP     #$00            ;if zero
00C8A0  2  F0 19                BEQ     extkbd          ;exit
00C8A2  2  20 E9 CB             JSR     sim+9           ;else get input
00C8A5  2  C9 13                CMP     #ctls           ;if not freeze
00C8A7  2  D0 0D                BNE     newpnd          ;save input
00C8A9  2  20 E9 CB             JSR     sim+9           ;else wait for more
00C8AC  2  C9 03                CMP     #ctlc           ;if not abort
00C8AE  2  D0 03                BNE     nowarm          ;then jump
00C8B0  2  4C EA C0             JMP     xwboot          ;else do warm boot
00C8B3  2               nowarm:
00C8B3  2  A9 00                LDA     #0              ;clear
00C8B5  2  60                   RTS                     ;and return
00C8B6  2               newpnd:
00C8B6  2  8D 8F CB             STA     pndkey          ;save
00C8B9  2  A9 FF                LDA     #$ff            ;set ready
00C8BB  2               extkbd:
00C8BB  2  60                   RTS                     ;and return
00C8BC  2               ;test character
00C8BC  2               ; input:a=character
00C8BC  2               ; returns:c=0 if control or c=1 if printing
00C8BC  2               ; alters:p
00C8BC  2               tstchr:
00C8BC  2  C9 0D                CMP     #cr             ;if cr
00C8BE  2  F0 0A                BEQ     chtext          ;quit
00C8C0  2  C9 0A                CMP     #lf             ;if linefeed
00C8C2  2  F0 06                BEQ     chtext          ;quit
00C8C4  2  C9 09                CMP     #ctli           ;if tab
00C8C6  2  F0 02                BEQ     chtext          ;quit
00C8C8  2  C9 20                CMP     #' '            ;see if control
00C8CA  2               chtext:
00C8CA  2  60                   RTS                     ;and return
00C8CB  2               ;send string ending in $
00C8CB  2               ; input:ay=string address
00C8CB  2               ; returns:none
00C8CB  2               ; alters:all,index,sndlpe+1 and +2
00C8CB  2               sndstr:
00C8CB  2  8D D4 C8             STA     sndlpe+1        ;set pointer
00C8CE  2  8C D5 C8             STY     sndlpe+2
00C8D1  2  A0 00                LDY     #0
00C8D3  2               sndlpe:
00C8D3  2  B9 FF FF             LDA     $ffff,y         ;get char
00C8D6  2  C9 24                CMP     #'$'            ;if terminator
00C8D8  2  F0 0C                BEQ     sndext          ;then exit
00C8DA  2  C8                   INY                     ;else bump
00C8DB  2  8C B6 CB             STY     index           ;and save
00C8DE  2  20 14 C9             JSR     sndchr          ;send char
00C8E1  2  AC B6 CB             LDY     index           ;get index
00C8E4  2  D0 ED                BNE     sndlpe          ;and loop
00C8E6  2               sndext:
00C8E6  2  60                   RTS                     ;return
00C8E7  2               ;send char to printer if enabled
00C8E7  2               ; input:a=character,lstflg
00C8E7  2               ; returns:a=character
00C8E7  2               ; alters:x,y,p
00C8E7  2               lstout:
00C8E7  2  2C 90 CB             BIT     lstflg          ;test flag
00C8EA  2  10 0A                BPL     extlst          ;exit if off
00C8EC  2  2C B8 CB             BIT     outflg          ;test output flag
00C8EF  2  30 05                BMI     extlst          ;done if set
00C8F1  2  48                   PHA                     ;save char
00C8F2  2  20 EF CB             JSR     sim+15          ;send
00C8F5  2  68                   PLA                     ;get char
00C8F6  2               extlst:
00C8F6  2  60                   RTS                     ;and done
00C8F7  2               ;output a character
00C8F7  2               ; input:a=character,console definition block in sim
00C8F7  2               ; returns:none
00C8F7  2               ; alters:all,positn
00C8F7  2               output:
00C8F7  2  20 BC C8             JSR     tstchr          ;test it
00C8FA  2  B0 18                BCS     sndchr          ;if not control jump
00C8FC  2  48                   PHA                     ;else save
00C8FD  2  AD 1A CC             LDA     sysdef+4        ;get invert
00C900  2  20 2D C9             JSR     nolist          ;send to console
00C903  2  A9 5E                LDA     #'^'            ;get arrow
00C905  2  20 E7 C8             JSR     lstout          ;send to printer
00C908  2  68                   PLA                     ;get character
00C909  2  09 40                ORA     #'A'-1          ;convert to ascii
00C90B  2  20 25 C9             JSR     pchrot          ;send to all
00C90E  2  AD 19 CC             LDA     sysdef+3        ;get normal
00C911  2  4C 2D C9             JMP     nolist          ;to console
00C914  2               sndchr:
00C914  2  C9 09                CMP     #ctli           ;if not tab
00C916  2  D0 0D                BNE     pchrot          ;send
00C918  2               tabspc:
00C918  2  A9 20                LDA     #' '            ;else get space
00C91A  2  20 25 C9             JSR     pchrot          ;send
00C91D  2  AD 91 CB             LDA     positn          ;get count
00C920  2  29 07                AND     #7              ;if not mod 8
00C922  2  D0 F4                BNE     tabspc          ;loop
00C924  2  60                   RTS                     ;else exit
00C925  2               pchrot:
00C925  2  48                   PHA                     ;save char
00C926  2  20 96 C8             JSR     kbdsts          ;test input
00C929  2  68                   PLA                     ;restore
00C92A  2  20 E7 C8             JSR     lstout          ;to printer if on
00C92D  2               nolist:
00C92D  2  48                   PHA                     ;save again
00C92E  2  2C B8 CB             BIT     outflg          ;test flag
00C931  2  30 03                BMI     *+5             ;done if set
00C933  2  20 EC CB             JSR     sim+12          ;to console
00C936  2  68                   PLA                     ;restore
00C937  2  EE 91 CB             INC     positn          ;bump col
00C93A  2  C9 20                CMP     #' '            ;if space or more
00C93C  2  B0 26                BCS     extchr          ;is ok
00C93E  2  CD 18 CC             CMP     sysdef+2        ;also ok
00C941  2  F0 21                BEQ     extchr          ;if forward
00C943  2  CE 91 CB             DEC     positn          ;else drop back
00C946  2  CD 16 CC             CMP     sysdef+0        ;see if bs
00C949  2  D0 06                BNE     tryotr          ;branch if not
00C94B  2  CE 91 CB             DEC     positn          ;else drop again
00C94E  2  30 0F                BMI     zrocol          ;zero if <0
00C950  2  60                   RTS                     ;else ok
00C951  2               tryotr:
00C951  2  C9 0D                CMP     #cr             ;if a cr
00C953  2  F0 0A                BEQ     zrocol          ;clear col
00C955  2  CD 1D CC             CMP     sysdef+7        ;if a formfeed
00C958  2  F0 05                BEQ     zrocol          ;also clear
00C95A  2  CD 1E CC             CMP     sysdef+8        ;if not home
00C95D  2  D0 05                BNE     extchr          ;then done
00C95F  2               zrocol:
00C95F  2  A9 00                LDA     #0              ;clear
00C961  2  8D 91 CB             STA     positn          ;column
00C964  2               extchr:
00C964  2  60                   RTS                     ;and exit
00C965  2               ;go to left and space past prompt
00C965  2               ; input:frscol,positn
00C965  2               ; returns:none
00C965  2               ; alters:positn
00C965  2               spcovr:
00C965  2  A9 0D                LDA     #cr             ;get cr
00C967  2  20 25 C9             JSR     pchrot          ;send to all
00C96A  2  A9 0A                LDA     #lf             ;send lf
00C96C  2  20 E7 C8             JSR     lstout          ;only to printer
00C96F  2               mreovr:
00C96F  2  AD 8E CB             LDA     frscol          ;get first
00C972  2  CD 91 CB             CMP     positn          ;see if there
00C975  2  F0 ED                BEQ     extchr          ;done if is
00C977  2  AD 18 CC             LDA     sysdef+2        ;get forward
00C97A  2  20 2D C9             JSR     nolist          ;send it
00C97D  2  4C 6F C9             JMP     mreovr          ;and loop
00C980  2               ;buffered read
00C980  2               ; input:buffer@(addinp)
00C980  2               ; returns:none
00C980  2               ; alters:all,buffer@(addinp)
00C980  2               bufinp:
00C980  2  A9 00                LDA     #0              ;clear
00C982  2  A0 01                LDY     #1              ;length
00C984  2  91 02                STA     (addinp),y      ;position in buffer
00C986  2  8C 98 CB             STY     bufpsn          ;set point to 1
00C989  2  AD 91 CB             LDA     positn          ;get current
00C98C  2  8D 8E CB             STA     frscol          ;and save
00C98F  2               nxtinp:
00C98F  2  20 86 C8             JSR     getcon          ;get input
00C992  2  AC 98 CB             LDY     bufpsn          ;get index
00C995  2  C9 0D                CMP     #cr             ;if not a cr
00C997  2  D0 03                BNE     notcr           ;then jump
00C999  2  4C 5F CA             JMP     endlin          ;else done
00C99C  2               notcr:
00C99C  2  C9 08                CMP     #delete         ;if not delete
00C99E  2  D0 5E                BNE     ntdelt          ;then jump
00C9A0  2  C0 01                CPY     #1              ;else if start
00C9A2  2  F0 EB                BEQ     nxtinp          ;then loop
00C9A4  2  B1 02                LDA     (addinp),y      ;get last
00C9A6  2  48                   PHA                     ;save char
00C9A7  2  A0 01                LDY     #1              ;point to count
00C9A9  2  38                   SEC                     ;set carry
00C9AA  2  B1 02                LDA     (addinp),y      ;get count
00C9AC  2  E9 01                SBC     #1              ;decrement
00C9AE  2  91 02                STA     (addinp),y      ;then save
00C9B0  2  68                   PLA                     ;restore char
00C9B1  2  CE 98 CB             DEC     bufpsn          ;backup pointer
00C9B4  2  C9 20                CMP     #' '            ;if space or more
00C9B6  2  B0 40                BCS     nrmbs           ;just backspace
00C9B8  2  C9 09                CMP     #ctli           ;see if tab
00C9BA  2  D0 30                BNE     ctlbs           ;if not is control
00C9BC  2  38                   SEC                     ;set flag
00C9BD  2  6E B8 CB             ROR     outflg
00C9C0  2  AD 91 CB             LDA     positn          ;get position and save
00C9C3  2  8D B9 CB             STA     lstcol
00C9C6  2  20 65 C9             JSR     spcovr          ;else go back
00C9C9  2  20 6C CA             JSR     rptlne          ;and retype
00C9CC  2  AD 91 CB             LDA     positn          ;get new last position
00C9CF  2  48                   PHA                     ;save on stack
00C9D0  2  38                   SEC                     ;subtract to get delta
00C9D1  2  AD B9 CB             LDA     lstcol
00C9D4  2  ED 91 CB             SBC     positn
00C9D7  2  8D B9 CB             STA     lstcol          ;and save
00C9DA  2  0E B8 CB             ASL     outflg          ;clear flag
00C9DD  2               bstab:
00C9DD  2  20 8C CA             JSR     dobs            ;do one
00C9E0  2  CE B9 CB             DEC     lstcol          ;drop count
00C9E3  2  D0 F8                BNE     bstab           ;loop if more
00C9E5  2  68                   PLA                     ;get position
00C9E6  2  8D 91 CB             STA     positn          ;and set
00C9E9  2  4C 8F C9             JMP     nxtinp          ;then loop
00C9EC  2               ctlbs:
00C9EC  2  AD 19 CC             LDA     sysdef+3        ;get normal
00C9EF  2  20 88 CA             JSR     chkbs           ;bs if printing
00C9F2  2  AD 1A CC             LDA     sysdef+4        ;same for invert
00C9F5  2  20 88 CA             JSR     chkbs           ;then delete char itself
00C9F8  2               nrmbs:
00C9F8  2  20 8C CA             JSR     dobs            ;do a backspace
00C9FB  2  4C 8F C9             JMP     nxtinp          ;and loop
00C9FE  2               ntdelt:
00C9FE  2  C9 10                CMP     #ctlp           ;if not ctl-p
00CA00  2  D0 0B                BNE     ntctlp          ;then jump
00CA02  2  AD 90 CB             LDA     lstflg          ;else get printer flag
00CA05  2  49 FF                EOR     #$ff            ;complement
00CA07  2  8D 90 CB             STA     lstflg          ;save
00CA0A  2  4C 8F C9             JMP     nxtinp          ;and loop
00CA0D  2               ntctlp:
00CA0D  2  C9 18                CMP     #ctlx           ;if not ctl-x
00CA0F  2  D0 0C                BNE     ntctlx          ;then jump
00CA11  2  20 65 C9             JSR     spcovr          ;restart
00CA14  2  AD 17 CC             LDA     sysdef+1        ;get clear to eol
00CA17  2  20 2D C9             JSR     nolist          ;send it
00CA1A  2  4C 80 C9             JMP     bufinp          ;and start over
00CA1D  2               ntctlx:
00CA1D  2  C9 12                CMP     #ctlr           ;if not ctl-r
00CA1F  2  D0 09                BNE     ntctlr          ;then jump
00CA21  2  20 65 C9             JSR     spcovr          ;restart
00CA24  2  20 6C CA             JSR     rptlne          ;retype line
00CA27  2  4C 8F C9             JMP     nxtinp          ;and start over
00CA2A  2               ntctlr:
00CA2A  2  C8                   INY                     ;next position
00CA2B  2  91 02                STA     (addinp),y      ;store char
00CA2D  2  48                   PHA                     ;and save
00CA2E  2  8C 98 CB             STY     bufpsn          ;index
00CA31  2  A0 01                LDY     #1              ;point to count
00CA33  2  98                   TYA                     ;set a to 1
00CA34  2  18                   CLC                     ;then
00CA35  2  71 02                ADC     (addinp),y      ;add count
00CA37  2  91 02                STA     (addinp),y      ;and save
00CA39  2  68                   PLA                     ;restore char
00CA3A  2               dontsv:
00CA3A  2  20 F7 C8             JSR     output          ;send char
00CA3D  2  AC 98 CB             LDY     bufpsn          ;get index
00CA40  2  B1 02                LDA     (addinp),y      ;get char
00CA42  2  C9 03                CMP     #ctlc           ;if not ctl-c
00CA44  2  D0 0B                BNE     ignrcc          ;ignore
00CA46  2  A0 01                LDY     #1              ;get count
00CA48  2  B1 02                LDA     (addinp),y      ;from buffer
00CA4A  2  C9 01                CMP     #1              ;if not at start
00CA4C  2  D0 03                BNE     ignrcc          ;ignore
00CA4E  2  4C EA C0             JMP     xwboot          ;else do warm boot
00CA51  2               ignrcc:
00CA51  2  A0 01                LDY     #1              ;get
00CA53  2  B1 02                LDA     (addinp),y      ;count
00CA55  2  88                   DEY                     ;point to max
00CA56  2  D1 02                CMP     (addinp),y      ;if length
00CA58  2  B0 03                BCS     lineen          ;at max jump
00CA5A  2  4C 8F C9             JMP     nxtinp          ;else loop
00CA5D  2               lineen:
00CA5D  2  A9 0D                LDA     #cr             ;get a cr
00CA5F  2               endlin:
00CA5F  2  4C 25 C9             JMP     pchrot          ;and send
00CA62  2               ;cr and lf
00CA62  2               pcrlf:
00CA62  2  A9 0D                LDA     #cr             ;then a
00CA64  2  20 25 C9             JSR     pchrot          ;cr
00CA67  2  A9 0A                LDA     #lf             ;and a
00CA69  2  4C 25 C9             JMP     pchrot          ;lf
00CA6C  2               ;retype line
00CA6C  2               rptlne:
00CA6C  2  AD 98 CB             LDA     bufpsn          ;save point
00CA6F  2  8D B7 CB             STA     numcnt          ;as count
00CA72  2  A9 01                LDA     #1              ;start position
00CA74  2  48                   PHA                     ;save
00CA75  2               mrerpt:
00CA75  2  68                   PLA                     ;get position
00CA76  2  CE B7 CB             DEC     numcnt          ;count down
00CA79  2  D0 01                BNE     *+3             ;continue if more
00CA7B  2  60                   RTS                     ;else done
00CA7C  2  A8                   TAY                     ;else make index
00CA7D  2  C8                   INY                     ;and bump
00CA7E  2  98                   TYA                     ;save
00CA7F  2  48                   PHA                     ;on stack
00CA80  2  B1 02                LDA     (addinp),y      ;get char
00CA82  2  20 F7 C8             JSR     output          ;send
00CA85  2  4C 75 CA             JMP     mrerpt          ;and loop
00CA88  2               ;check for printing and backspace if needed
00CA88  2               chkbs:
00CA88  2  C9 20                CMP     #' '            ;compare to space
00CA8A  2  90 19                BCC     extdec          ;not printing so done
00CA8C  2               ;do a backspace
00CA8C  2               dobs:
00CA8C  2  AD 16 CC             LDA     sysdef+0        ;get backspace
00CA8F  2  48                   PHA                     ;save it
00CA90  2  20 2D C9             JSR     nolist          ;send
00CA93  2  A9 20                LDA     #' '            ;get space
00CA95  2  20 2D C9             JSR     nolist          ;send
00CA98  2  68                   PLA                     ;get backspace
00CA99  2  4C 2D C9             JMP     nolist          ;send it
00CA9C  2               ;test for decimal digit
00CA9C  2               ;if decimal then c=0 else c=1
00CA9C  2               tstdec:
00CA9C  2  C9 30                CMP     #'0'            ;if under 0
00CA9E  2  90 04                BCC     notdec          ;then not decimal
00CAA0  2  C9 3A                CMP     #'9'+1          ;if 9 or under is ok
00CAA2  2  90 01                BCC     extdec
00CAA4  2               notdec:
00CAA4  2  38                   SEC                     ;else not a match
00CAA5  2               extdec:
00CAA5  2  60                   RTS
00CAA6  2               ;test for hexadecimal digit
00CAA6  2               ;if hex then c=0 else c=1
00CAA6  2               tsthex:
00CAA6  2  20 9C CA             JSR     tstdec          ;first try decimal
00CAA9  2  90 FA                BCC     extdec          ;ok if dec
00CAAB  2  C9 41                CMP     #'A'            ;if under A
00CAAD  2  90 F5                BCC     notdec          ;then not hex
00CAAF  2  C9 47                CMP     #'F'+1          ;set c in F compare
00CAB1  2  60                   RTS
00CAB2  2               ;bump load address by 128 and return in ay
00CAB2  2               adjdb:
00CAB2  2  AD F3 BF             LDA     dskbuf          ;get old
00CAB5  2  AC F4 BF             LDY     dskbuf+1        ;address
00CAB8  2  18                   CLC                     ;and bump
00CAB9  2  69 80                ADC     #128            ;by 128
00CABB  2  8D F3 BF             STA     dskbuf          ;save low
00CABE  2  90 04                BCC     *+6             ;then bump
00CAC0  2  C8                   INY                     ;and save
00CAC1  2  8C F4 BF             STY     dskbuf+1        ;high as needed
00CAC4  2  60                   RTS
00CAC5  2               ;move record from disk buffer to default buffer
00CAC5  2               mv128:
00CAC5  2  AD F3 BF             LDA     dskbuf          ;get address
00CAC8  2  AC F4 BF             LDY     dskbuf+1
00CACB  2  8D D4 CA             STA     mvfrom+1        ;and set pointer
00CACE  2  8C D5 CA             STY     mvfrom+2
00CAD1  2  A2 00                LDX     #0              ;clear index
00CAD3  2               mvfrom:
00CAD3  2  BD FF FF             LDA     $ffff,x         ;get byte
00CAD6  2  9D 28 01             STA     dflbuf,x        ;move it
00CAD9  2  E8                   INX
00CADA  2  10 F7                BPL     mvfrom          ;loop until done
00CADC  2  60                   RTS
00CADD  2               
00CADD  2               ;relocatable vectors
00CADD  2  4C                   .BYTE   $4c
00CADE  2               extevc:
00CADE  2  49 C0                .WORD   extexq-1
00CAE0  2  4C                   .BYTE   $4c
00CAE1  2               sltmvc:
00CAE1  2  3D CB                .WORD   sltmsg
00CAE3  2  4C                   .BYTE   $4c
00CAE4  2               empdvc:
00CAE4  2  4E CB                .WORD   empty
00CAE6  2  4C                   .BYTE   $4c
00CAE7  2               rommvc:
00CAE7  2  F3 CA                .WORD   romsg
00CAE9  2  4C                   .BYTE   $4c
00CAEA  2               bdsmvc:
00CAEA  2  FA CA                .WORD   bdsmsg
00CAEC  2  4C                   .BYTE   $4c
00CAED  2               pemmvc:
00CAED  2  2D CB                .WORD   pemmsg
00CAEF  2  4C                   .BYTE   $4c
00CAF0  2               dcbevc:
00CAF0  2  C7 CB                .WORD   dcb
00CAF2  2               ;relocation stopper
00CAF2  2  FF                   .BYTE   $ff
00CAF3  2               ;messages
00CAF3  2               romsg:
00CAF3  2  20 2D 20 52          .BYTE   " - R/O$"
00CAF7  2  2F 4F 24     
00CAFA  2               bdsmsg:
00CAFA  2  20 2D 20 42          .BYTE   " - BAD SECTOR"
00CAFE  2  41 44 20 53  
00CB02  2  45 43 54 4F  
00CB07  2  0D 0A 3C 52          .BYTE   cr,lf,"<RET> TO IGNORE -- <OTHER> "
00CB0B  2  45 54 3E 20  
00CB0F  2  54 4F 20 49  
00CB24  2  54 4F 20 41          .BYTE   "TO ABORT$"
00CB28  2  42 4F 52 54  
00CB2C  2  24           
00CB2D  2               pemmsg:
00CB2D  2  0D 0A 50 45          .BYTE   cr,lf,"PEM ERROR ON $"
00CB31  2  4D 20 45 52  
00CB35  2  52 4F 52 20  
00CB3D  2               sltmsg:
00CB3D  2  20 2D 20 49          .BYTE   " - INVALID DRIVE$"
00CB41  2  4E 56 41 4C  
00CB45  2  49 44 20 44  
00CB4E  2               
00CB4E  2               ;dummy fcb
00CB4E  2               empty:
00CB4E  2  E5                   .BYTE   $e5
00CB4F  2               ;zero page switch enable table
00CB4F  2               swctbl:
00CB4F  2  00 00 00 00          .BYTE   0,0,0,0,0,0,0,0
00CB53  2  00 00 00 00  
00CB57  2  00 00 01 00          .BYTE   0,0,1,0,0,1,1,1
00CB5B  2  00 01 01 01  
00CB5F  2  01 01 01 01          .BYTE   1,1,1,1,1,1,1,1
00CB63  2  01 01 01 01  
00CB67  2  00 00 01 00          .BYTE   0,0,1,0,0,0,0,0
00CB6B  2  00 00 00 00  
00CB6F  2  00 00 00 00          .BYTE   0,0,0,0
00CB73  2               ;bit mask table
00CB73  2               bitmsk:
00CB73  2  80 40 20 10          .BYTE   128,64,32,16,8,4,2,1
00CB77  2  08 04 02 01  
00CB7B  2               ;bit map table
00CB7B  2               bitmap:
00CB7B  2  01 02 04 08          .BYTE   1,2,4,8,16,32,64,128
00CB7F  2  10 20 40 80  
00CB83  2               ;extent mask table (also uses 3 bytes in sabtbl
00CB83  2               exmtbl:
00CB83  2  00 01 03             .BYTE   0,1,3
00CB86  2               ;sab table
00CB86  2               sabtbl:
00CB86  2  07 0F 1F 3F          .BYTE   7,15,31,63,127
00CB8A  2  7F           
00CB8B  2               ;variable storage
00CB8B  2               skpdir:
00CB8B  2  00                   .BYTE   0               ;positive if no change
00CB8C  2               fcbind:
00CB8C  2  00                   .BYTE   0               ;index to block number
00CB8D  2               savext:
00CB8D  2  00                   .BYTE   0               ;save extent
00CB8E  2               frscol:
00CB8E  2  00                   .BYTE   0               ;first col
00CB8F  2               pndkey:
00CB8F  2  00                   .BYTE   0               ;pending input
00CB90  2               lstflg:
00CB90  2  00                   .BYTE   0               ;printer flag
00CB91  2               positn:
00CB91  2  00                   .BYTE   0               ;print position
00CB92  2               swcflg:
00CB92  2  00                   .BYTE   0               ;zero page switch flag
00CB93  2               bytinp:
00CB93  2  00 00                .WORD   0               ;input value
00CB95  2               cmdinp:
00CB95  2  00                   .BYTE   0               ;input command
00CB96  2               addout:
00CB96  2  00 00                .WORD   0               ;output address
00CB98  2               bytout          = addout        ;output value
00CB98  2               bufpsn:
00CB98  2  00                   .BYTE   0               ;input buffer position
00CB99  2               exrwfl:
00CB99  2  00                   .BYTE   0               ;extend flag
00CB9A  2               tmpdrv:
00CB9A  2  00                   .BYTE   0               ;temporary drive number
00CB9B  2               ;align xqtvec on word boundary
00CB9B  2  xx                   .ALIGN  2
00CB9C  2               xqtvec:
00CB9C  2  00 00                .WORD   0               ;command vector
00CB9E  2               countr:
00CB9E  2  00 00                .WORD   0               ;record counter
00CBA0  2  00                   .BYTE   0               ;overflow
00CBA1  2               lkdown:
00CBA1  2  00 00                .WORD   0               ;down pnt. for block search
00CBA3  2               lookup:
00CBA3  2  00 00                .WORD   0               ;up pnt. for block search
00CBA5  2               olddrv:
00CBA5  2  00                   .BYTE   0               ;old drive number
00CBA6  2               curdrv:
00CBA6  2  00                   .BYTE   0               ;current drive
00CBA7  2               lginvc:
00CBA7  2  00                   .BYTE   0               ;log in status
00CBA8  2               ronlst:
00CBA8  2  00                   .BYTE   0               ;read write status
00CBA9  2               dirnum:
00CBA9  2  00 00                .WORD   0               ;directory number
00CBAB  2               subrec:
00CBAB  2  00                   .BYTE   0               ;directory offset
00CBAC  2               recnum:
00CBAC  2  00 00                .WORD   0               ;record number
00CBAE  2               blknum          = recnum        ;block number
00CBAE  2  00                   .BYTE   0               ;overflow
00CBAF  2               chrcnt:
00CBAF  2  00                   .BYTE   0               ;character count
00CBB0  2               cmppnt:
00CBB0  2  00                   .BYTE   0               ;comparison pointer
00CBB1  2               nxtrec:
00CBB1  2  00                   .BYTE   0               ;next record
00CBB2  2               numrec:
00CBB2  2  00                   .BYTE   0               ;number records
00CBB3  2               dirrec:
00CBB3  2  00 00                .WORD   0               ;directory record
00CBB5  2               dirmod:
00CBB5  2  00                   .BYTE   0               ;directory mod 4
00CBB6  2               index:
00CBB6  2  00                   .BYTE   0               ;buffer index
00CBB7  2               numcnt:
00CBB7  2  00                   .BYTE   0               ;counter
00CBB8  2               outflg:
00CBB8  2  00                   .BYTE   0               ;output enable flag
00CBB9  2               lstcol:
00CBB9  2  00                   .BYTE   0               ;last column
00CBBA  2               mpdrsy:
00CBBA  2  00                   .BYTE   0               ;save for y in mapdir
00CBBB  2               mpdrtm:
00CBBB  2  00                   .BYTE   0               ;temp in mapdir
00CBBC  2               blmode:
00CBBC  2  00                   .BYTE   0               ;<128 if byte else word
00CBBD  2               maxdrc:
00CBBD  2  00 00                .WORD   0               ;max directory record
00CBBF  2               sab:
00CBBF  2  00                   .BYTE   0               ;mask for block
00CBC0  2               sxb:
00CBC0  2  00                   .BYTE   0               ;shift for block
00CBC1  2               rtclk:
00CBC1  2  00 00 00             .BYTE   0,0,0           ;real time clock
00CBC4  2               gpcnt:
00CBC4  2  00 00                .WORD   0               ;gp counter
00CBC6  2               trkctr:
00CBC6  2  00                   .BYTE   0               ;track counter
00CBC7  2               ;following region is used to capture dcb
00CBC7  2               dcb:
00CBC7  2               maxblk:
00CBC7  2  00 00                .WORD   0               ;maximum block number
00CBC9  2               sectrk:
00CBC9  2  00 00                .WORD   0               ;sectors per track
00CBCB  2               nsystr:
00CBCB  2  00 00                .WORD   0               ;number system tracks
00CBCD  2               blkscd:
00CBCD  2  00                   .BYTE   0               ;block size code
00CBCE  2               maxdir:
00CBCE  2  00 00                .WORD   0               ;maximum directory number
00CBD0  2               alcmap:
00CBD0  2  00 00                .WORD   0               ;address of allocation map
00CBD2  2               chkflg:
00CBD2  2  00                   .BYTE   0               ;check flag
00CBD3  2               chkmap:
00CBD3  2  00 00                .WORD   0               ;address of checksum map
00CBD5  2               pemwrtype:
00CBD5  2  00                   .BYTE   0               ;write type 0=norm,1=dir,2=unalloc
00CBD6  2               exm:
00CBD6  2  00                   .BYTE   0               ;extent mask
00CBD7  2               cexm1f:
00CBD7  2  00                   .BYTE   0               ;exm complemented and 1f
00CBD8  2               ;zero page save block
00CBD8  2               varblk:
00CBD8  2               lowin:
00CBD8  2  00 00                .WORD   0
00CBDA  2  00 00                .WORD   0               ;save bufadd
00CBDC  2  00 00                .WORD   0               ;save alcpnt
00CBDE  2  00 00                .WORD   0               ;save chkpnt
00CBE0  2               
00CBE0  1                       .INCLUDE "simrbc.asm"
00CBE0  2               ;--------------------------------
00CBE0  2               ;dos/65 system interface module (sim)
00CBE0  2               ;--------------------------------
00CBE0  2               
00CBE0  2               
00CBE0  2               ;dos/65 system interface module (sim)
00CBE0  2               ;version 3.00
00CBE0  2               ;this version is designed to work with the 6x0x
00CBE0  2               
00CBE0  2               ;fixed parameters
00CBE0  2               simstart:
00CBE0  2               
00CBE0  2               ;main program
00CBE0  2               ;jump vector used by pem
00CBE0  2               sim:
00CBE0  2  4C 35 CD             JMP     boot            ;from cold start
00CBE3  2               wboote:
00CBE3  2  4C CA CD             JMP     wboot           ;from warm boot
00CBE6  2  4C 83 CE             JMP     consts          ;check for input
00CBE9  2  4C 8A CE             JMP     conrde          ;get input
00CBEC  2  4C 91 CE             JMP     conwrt          ;send to terminal
00CBEF  2  4C 9A CE             JMP     prnwrt          ;printer output
00CBF2  2  4C 9B CE             JMP     punwrt          ;punch output
00CBF5  2  4C 9C CE             JMP     rdrinp          ;reader input
00CBF8  2  4C F0 CD             JMP     home            ;home drive
00CBFB  2  4C D2 CD             JMP     seldsk          ;select disk
00CBFE  2  4C F4 CD             JMP     seltrk          ;set track
00CC01  2  4C FB CD             JMP     selsec          ;set sector
00CC04  2  4C 7E CE             JMP     setdma          ;set buffer address
00CC07  2  4C 02 CE             JMP     read            ;read sector
00CC0A  2  4C 40 CE             JMP     write           ;write sector
00CC0D  2  A9 01                LDA     #1              ;printer always ready
00CC0F  2  60                   RTS
00CC10  2  4C 9D CE             JMP     rdtime          ;clock entry
00CC13  2  4C A0 CE             JMP     xlate           ;translate
00CC16  2               
00CC16  2               ;console definition block
00CC16  2               sysdef:
00CC16  2  08                   .BYTE   8               ;backspace
00CC17  2  01                   .BYTE   1               ;clear to end of line
00CC18  2  0C                   .BYTE   $c              ;forward space
00CC19  2  00                   .BYTE   0               ;normal video
00CC1A  2  5E                   .BYTE   '^'             ;invert video
00CC1B  2  18                   .BYTE   24              ;lines per screen
00CC1C  2  50                   .BYTE   80              ;char per line
00CC1D  2  0C                   .BYTE   $c              ;formfeed
00CC1E  2  1E                   .BYTE   $1e             ;home
00CC1F  2  02                   .BYTE   2               ;clear to end of screen
00CC20  2               
00CC20  2               ;opening id message
00CC20  2               opnmsg:
00CC20  2  0D 0A                .BYTE   cr, lf
00CC22  2               
00CC22  2  64 38 38 38          .BYTE   "d8888b.  .d88b.  .d8888.    dD     ooooo", cr, lf
00CC26  2  38 62 2E 20  
00CC2A  2  20 2E 64 38  
00CC4C  2  38 38 20 20          .BYTE   "88  `8D .8P  Y8. 88'  YP   d8'    8P~~~~", cr, lf
00CC50  2  60 38 44 20  
00CC54  2  2E 38 50 20  
00CC76  2  38 38 20 20          .BYTE   "88   88 88    88 `8bo.    d8'    dP", cr, lf
00CC7A  2  20 38 38 20  
00CC7E  2  38 38 20 20  
00CC9B  2  38 38 20 20          .BYTE   "88   88 88    88   `Y8b. d8888b. V8888b.", cr, lf,0
00CC9F  2  20 38 38 20  
00CCA3  2  38 38 20 20  
00CCC6  2               opnmsg1:
00CCC6  2  38 38 20 20          .BYTE   "88  .8D `8b  d8' db   8D 88' `8D     `8D ", cr, lf
00CCCA  2  2E 38 44 20  
00CCCE  2  60 38 62 20  
00CCF1  2  59 38 38 38          .BYTE   "Y8888D'  `Y88P'  `8888Y' `8888P  88oobY'", cr, lf
00CCF5  2  38 44 27 20  
00CCF9  2  20 60 59 38  
00CD1B  2  11 44 4F 53          .BYTE   17, "DOS / 65 V3.00", cr, lf, 0
00CD1F  2  20 2F 20 36  
00CD23  2  35 20 56 33  
00CD2D  2               
00CD2D  2               DSKYMSG:
00CD2D  2  54 6E 5C 5E          .BYTE   $54, $6E, $5C, $5E, $6E, $54, $79, $40
00CD31  2  6E 54 79 40  
00CD35  2               
00CD35  2               ;cold entry from loader
00CD35  2               boot:
00CD35  2  78                   SEI
00CD36  2  A2 FF                LDX     #$ff            ;set stack
00CD38  2  9A                   TXS                     ;pointer
00CD39  2  D8                   CLD                     ;set binary mode
00CD3A  2               
00CD3A  2  A9 20                LDA     #<opnmsg        ;point to message
00CD3C  2  A0 CC                LDY     #>opnmsg
00CD3E  2  20 A1 CE             JSR     outmsg          ;send it
00CD41  2  A9 C6                LDA     #<opnmsg1       ;point to message
00CD43  2  A0 CC                LDY     #>opnmsg1
00CD45  2  20 A1 CE             JSR     outmsg          ;send it
00CD48  2               ;set up jumps into dos/65 in page one
00CD48  2               
00CD48  2               ; setup diskconfig table
00CD48  2  A2 00                LDX     #0
00CD4A  2               :
00CD4A  2  BD 25 D9             LDA     dftdskcfg, x
00CD4D  2  9D 17 06             STA     dskcfg, x
00CD50  2  E8                   INX
00CD51  2  E0 10                CPX     #$10
00CD53  2  D0 F5                BNE     :-
00CD55  2               
00CD55  2  A9 28                LDA     #40             ; DSKY INITIALIZE
00CD57  2  85 32                STA     farfunct
00CD59  2  20 F0 FF             JSR     DO_FARCALL
00CD5C  2               
00CD5C  2  A9 34                LDA     #52             ; RTC_RESET
00CD5E  2  85 32                STA     farfunct
00CD60  2  20 F0 FF             JSR     DO_FARCALL
00CD63  2               
00CD63  2  A9 3C                LDA     #60             ; IDE INITIALIZE
00CD65  2  85 32                STA     farfunct
00CD67  2  20 F0 FF             JSR     DO_FARCALL
00CD6A  2               
00CD6A  2  A9 3F                LDA     #63             ; SD INITIALIZE
00CD6C  2  85 32                STA     farfunct
00CD6E  2  20 F0 FF             JSR     DO_FARCALL
00CD71  2               
00CD71  2  A9 42                LDA     #66             ; FLOPPY INITIALIZE
00CD73  2  85 32                STA     farfunct
00CD75  2  20 F0 FF             JSR     DO_FARCALL
00CD78  2               
00CD78  2  A9 44                LDA     #<cnstxt        ; STORE POINTER TO COMMAND LINE
00CD7A  2  85 30                STA     cmdlnp
00CD7C  2  A9 BF                LDA     #>cnstxt
00CD7E  2  85 31                STA     cmdlnp + 1
00CD80  2               
00CD80  2  A9 17                LDA     #<dskcfg        ; STORE POINTER TO DISK CONFIG TABLE FOR APPS
00CD82  2  85 2E                STA     dskcfpc
00CD84  2  A9 06                LDA     #>dskcfg
00CD86  2  85 2F                STA     dskcfpc + 1
00CD88  2               
00CD88  2  A9 35                LDA     #<dcba          ; STORE POINTER TO DCB TABLES FOR APPS
00CD8A  2  85 2C                STA     dcbpc
00CD8C  2  A9 D0                LDA     #>dcba
00CD8E  2  85 2D                STA     dcbpc + 1
00CD90  2               
00CD90  2               
00CD90  2               
00CD90  2               
00CD90  2               setup:
00CD90  2               ;        LDX     #0              ;clear index
00CD90  2               ;first clear key dba variables
00CD90  2               ;        STX     hstact          ;host buffer inactive
00CD90  2               ;        STX     unacnt          ;clear unalloc count
00CD90  2               setupl:
00CD90  2  BD C4 CD             LDA     inttbl,x        ;get byte
00CD93  2  9D 00 01             STA     $100,x          ;insert at start
00CD96  2  E8                   INX
00CD97  2  E0 06                CPX     #6
00CD99  2  D0 F5                BNE     setupl          ;loop until done
00CD9B  2  A9 28                LDA     #<dflbuf        ;get low buffer
00CD9D  2  A0 01                LDY     #>dflbuf        ;and high
00CD9F  2  20 7E CE             JSR     setdma          ;and set
00CDA2  2  AD 16 06             LDA     sekdsk          ;get disk
00CDA5  2               
00CDA5  2  A2 00                LDX     #$00            ; SHOW A STARTUP MESSAGE ON DSKY
00CDA7  2               :
00CDA7  2  BD 2D CD             LDA     DSKYMSG,x
00CDAA  2  9D 00 06             STA     DSKY_BUF,x
00CDAD  2  E8                   INX
00CDAE  2  E0 08                CPX     #8
00CDB0  2  D0 F5                BNE     :-
00CDB2  2  A9 29                LDA     #41             ; DSKY_SHOW
00CDB4  2  85 32                STA     farfunct
00CDB6  2  20 F0 FF             JSR     DO_FARCALL
00CDB9  2               
00CDB9  2  A9 00                LDA     #DEFDRV         ;set zero
00CDBB  2  20 D2 CD             JSR     seldsk          ;and select drive zero
00CDBE  2  20 F0 CD             JSR     home            ;home that drive
00CDC1  2               
00CDC1  2  4C 03 B8             JMP     ccm             ;and go to ccm
00CDC4  2               ;initialization table
00CDC4  2               inttbl:
00CDC4  2  4C E3 CB 4C          .BYTE   $4c,<wboote,>wboote,$4c,<pem,>pem
00CDC8  2  FE BF        
00CDCA  2               ;warm boot-read dos/65 back except sim and then
00CDCA  2               ; jump to ccm.
00CDCA  2               
00CDCA  2               
00CDCA  2               wboot:
00CDCA  2  78                   SEI
00CDCB  2  A2 FF                LDX     #$ff            ;set stack
00CDCD  2  9A                   TXS                     ;pointer
00CDCE  2  D8                   CLD                     ;set binary mode
00CDCF  2               
00CDCF  2  4C 90 CD             JMP     setup           ;go setup
00CDD2  2               
00CDD2  2               
00CDD2  2               
00CDD2  2               ;__SELDSK_________________________________________________________________________________________________
00CDD2  2               ;
00CDD2  2               ; 	PERFORM DOS/65 DISK DRIVE SELECT
00CDD2  2               ;________________________________________________________________________________________________________
00CDD2  2               ;select disk
00CDD2  2               seldsk:
00CDD2  2  29 07                AND     #7              ;eight drives only
00CDD4  2  8D 16 06             STA     sekdsk          ;save for later
00CDD7  2  0A                   ASL     a               ;multiply by two
00CDD8  2  AA                   TAX                     ;make an Index
00CDD9  2  BD E0 CD             LDA     dcbtbl,x        ;get address
00CDDC  2  BC E1 CD             LDY     dcbtbl+1,x
00CDDF  2  60                   RTS
00CDE0  2               
00CDE0  2               ;table of dcb addresses
00CDE0  2               dcbtbl:
00CDE0  2  35 D0                .WORD   dcba
00CDE2  2  43 D0                .WORD   dcbb
00CDE4  2  51 D0                .WORD   dcbc
00CDE6  2  5F D0                .WORD   dcbd
00CDE8  2  6D D0                .WORD   dcbe
00CDEA  2  7B D0                .WORD   dcbf
00CDEC  2  89 D0                .WORD   dcbg
00CDEE  2  97 D0                .WORD   dcbh
00CDF0  2               
00CDF0  2               
00CDF0  2               
00CDF0  2               ;__HOME__________________________________________________________________________________________________
00CDF0  2               ;
00CDF0  2               ; 	PERFORM DOS/65 HEAD HOME
00CDF0  2               ;________________________________________________________________________________________________________
00CDF0  2               home:
00CDF0  2  A9 00                LDA     #$00
00CDF2  2  A0 00                LDY     #$00
00CDF4  2               
00CDF4  2               ;__SELTRK________________________________________________________________________________________________
00CDF4  2               ;
00CDF4  2               ; 	PERFORM DOS/65 SELECT TRACK
00CDF4  2               ;
00CDF4  2               ;	A=TRACK LOW BYTE
00CDF4  2               ;	Y=TRACK HIGH BYTE
00CDF4  2               ;________________________________________________________________________________________________________
00CDF4  2               seltrk:
00CDF4  2  8D 0C 06             STA     sektrk          ;save number
00CDF7  2  8C 0D 06             STY     sektrk+1
00CDFA  2  60                   RTS
00CDFB  2               
00CDFB  2               ;__SELSEC________________________________________________________________________________________________
00CDFB  2               ;
00CDFB  2               ; 	PERFORM DOS/65 SECTOR SELECT
00CDFB  2               ;
00CDFB  2               ;	A=SECTOR LOW BYTE
00CDFB  2               ;	Y=SECTOR HIGH BYTE
00CDFB  2               ;________________________________________________________________________________________________________
00CDFB  2               selsec:
00CDFB  2  8D 0E 06             STA     seksec          ;save low and high
00CDFE  2  8C 0F 06             STY     seksec+1
00CE01  2  60                   RTS
00CE02  2               
00CE02  2               ;__READ__________________________________________________________________________________________________
00CE02  2               ;
00CE02  2               ; PERFORM DOS / 65 SECTOR READ
00CE02  2               ;________________________________________________________________________________________________________
00CE02  2               read:
00CE02  2  20 13 D0             JSR     GET_DRIVE_DEVICE;
00CE05  2  29 F0                AND     #$F0            ; only want first nybble
00CE07  2  C9 00                CMP     #$00
00CE09  2  D0 0E                BNE     :+              ; not SD drive
00CE0B  2               ;SD
00CE0B  2  20 B5 CE             JSR     CONVERT_SECTOR_LBA
00CE0E  2  A9 40                LDA     #64             ; sd read sector
00CE10  2  85 32                STA     farfunct
00CE12  2  20 F0 FF             JSR     DO_FARCALL
00CE15  2  20 BE CF             JSR     DEBSECR
00CE18  2  60                   RTS
00CE19  2               :
00CE19  2  C9 20                CMP     #$20
00CE1B  2  D0 0E                BNE     :+              ; not floppy drive
00CE1D  2               ;FD
00CE1D  2  20 80 CF             JSR     SETUP_FD_CHS
00CE20  2  A9 43                LDA     #67             ; floppy read sector
00CE22  2  85 32                STA     farfunct
00CE24  2  20 F0 FF             JSR     DO_FARCALL
00CE27  2  20 BE CF             JSR     DEBSECR
00CE2A  2  60                   RTS
00CE2B  2               :
00CE2B  2  C9 30                CMP     #$30
00CE2D  2  D0 0E                BNE     :+              ; invalid drive
00CE2F  2               ;PPIDE
00CE2F  2  20 B5 CE             JSR     CONVERT_SECTOR_LBA
00CE32  2  A9 3D                LDA     #61             ; IDE_READ_SECTOR
00CE34  2  85 32                STA     farfunct
00CE36  2  20 F0 FF             JSR     DO_FARCALL
00CE39  2  20 BE CF             JSR     DEBSECR
00CE3C  2  60                   RTS
00CE3D  2               :
00CE3D  2  A9 FF                LDA     #$FF            ; signal error
00CE3F  2  60                   RTS                     ;
00CE40  2               
00CE40  2               
00CE40  2               ;__WRITE_________________________________________________________________________________________________
00CE40  2               ;
00CE40  2               ; PERFORM DOS / 65 SECTOR WRITE
00CE40  2               ;________________________________________________________________________________________________________
00CE40  2               write:
00CE40  2  20 13 D0             JSR     GET_DRIVE_DEVICE;
00CE43  2  29 F0                AND     #$F0            ; only want first nybble
00CE45  2               
00CE45  2  C9 00                CMP     #$00
00CE47  2  D0 0E                BNE     :+              ; not SD drive
00CE49  2               ;SD
00CE49  2  20 B5 CE             JSR     CONVERT_SECTOR_LBA
00CE4C  2  20 E7 CF             JSR     BLKSECR
00CE4F  2  A9 41                LDA     #65             ;PPP_WRITE_SECTOR
00CE51  2  85 32                STA     farfunct
00CE53  2  20 F0 FF             JSR     DO_FARCALL
00CE56  2  60                   RTS
00CE57  2               :
00CE57  2  C9 20                CMP     #$20
00CE59  2  D0 0E                BNE     :+              ; not floppy drive
00CE5B  2               ;FD
00CE5B  2  20 80 CF             JSR     SETUP_FD_CHS
00CE5E  2  20 E7 CF             JSR     BLKSECR
00CE61  2  A9 44                LDA     #68             ; floppy write sector
00CE63  2  85 32                STA     farfunct
00CE65  2  20 F0 FF             JSR     DO_FARCALL
00CE68  2  60                   RTS
00CE69  2               :
00CE69  2  C9 30                CMP     #$30
00CE6B  2  D0 0E                BNE     :+              ; invalid drive
00CE6D  2               ;PPIDE
00CE6D  2  20 B5 CE             JSR     CONVERT_SECTOR_LBA
00CE70  2  20 E7 CF             JSR     BLKSECR
00CE73  2  A9 3E                LDA     #62             ; IDE_WRITE_SECTOR
00CE75  2  85 32                STA     farfunct
00CE77  2  20 F0 FF             JSR     DO_FARCALL
00CE7A  2  60                   RTS
00CE7B  2               :
00CE7B  2  A9 FF                LDA     #$FF            ; signal error
00CE7D  2  60                   RTS                     ;
00CE7E  2               
00CE7E  2               
00CE7E  2               ;__SETDMA________________________________________________________________________________________________
00CE7E  2               ;
00CE7E  2               ; 	PERFORM DOS/65 BUFFER ADDRESS SELECTION
00CE7E  2               ;
00CE7E  2               ;	A=BUFFER LOW BYTE
00CE7E  2               ;	Y=BUFFER HIGH BYTE
00CE7E  2               ;________________________________________________________________________________________________________
00CE7E  2               setdma:
00CE7E  2  85 F4                STA     dmaadr          ;store low
00CE80  2  84 F5                STY     dmaadr+1        ;and high
00CE82  2  60                   RTS
00CE83  2               
00CE83  2               
00CE83  2               ;__CONSTS________________________________________________________________________________________________
00CE83  2               ;
00CE83  2               ; 	GET DOS/65 CONSOLE STATUS
00CE83  2               ;________________________________________________________________________________________________________
00CE83  2               consts:
00CE83  2  A9 03                LDA     #03
00CE85  2  85 32                STA     farfunct
00CE87  2  4C F0 FF             JMP     DO_FARCALL
00CE8A  2               
00CE8A  2               ;__CONRDE________________________________________________________________________________________________
00CE8A  2               ;
00CE8A  2               ; 	PERFORM DOS/65 CONSOLE READ
00CE8A  2               ;________________________________________________________________________________________________________
00CE8A  2               conrde:
00CE8A  2  A9 02                LDA     #02
00CE8C  2  85 32                STA     farfunct
00CE8E  2  4C F0 FF             JMP     DO_FARCALL      ;console read
00CE91  2               
00CE91  2               ;__CONWRT________________________________________________________________________________________________
00CE91  2               ;
00CE91  2               ; 	PERFORM DOS/65 CONSOLE WRITE
00CE91  2               ;________________________________________________________________________________________________________
00CE91  2               conwrt:
00CE91  2  48                   PHA
00CE92  2  A9 00                LDA     #00
00CE94  2  85 32                STA     farfunct
00CE96  2  68                   PLA
00CE97  2  4C F0 FF             JMP     DO_FARCALL
00CE9A  2               
00CE9A  2               prnwrt:
00CE9A  2  60                   RTS                     ;printer
00CE9B  2               punwrt:
00CE9B  2  60                   RTS                     ;punch output
00CE9C  2               rdrinp:
00CE9C  2  60                   RTS                     ;reader input
00CE9D  2               rdtime:
00CE9D  2  A2 80                LDX     #128
00CE9F  2  60                   RTS                     ;read clock
00CEA0  2               xlate:
00CEA0  2  60                   RTS                     ;sector translate
00CEA1  2               
00CEA1  2               
00CEA1  2               ;__OUTMSG________________________________________________________________________________________________
00CEA1  2               ;
00CEA1  2               ; 	WRITE A NULL TERMINATED STRING TO THE CONSOLE
00CEA1  2               ;
00CEA1  2               ;	A=POINTER LOW BYTE
00CEA1  2               ;	Y=POINTER HIGH BYTE
00CEA1  2               ;________________________________________________________________________________________________________
00CEA1  2               outmsg: ;output message
00CEA1  2  85 F0                STA     OUTMSG_W
00CEA3  2  84 F1                STY     OUTMSG_W+1
00CEA5  2  A0 00                LDY     #$00
00CEA7  2               OUTSTRLP:
00CEA7  2  B1 F0                LDA     (OUTMSG_W),Y    ; LOAD NEXT CHAR FROM STRING INTO ACC
00CEA9  2  C9 00                CMP     #$00            ; IS NULL?
00CEAB  2  F0 07                BEQ     ENDOUTSTR       ; YES, END PRINT OUT
00CEAD  2  20 91 CE             JSR     conwrt          ; PRINT CHAR IN ACC
00CEB0  2  C8                   INY                     ; Y=Y+1 (BUMP INDEX)
00CEB1  2  4C A7 CE             JMP     OUTSTRLP        ; DO NEXT CHAR
00CEB4  2               ENDOUTSTR:
00CEB4  2  60                   RTS                     ; RETURN
00CEB5  2               
00CEB5  2               
00CEB5  2               ;___CONVERT_SECTOR_LBA___________________________________________________________________________________
00CEB5  2               ;
00CEB5  2               ; 	TRANSLATE LBA SECTORS
00CEB5  2               ;________________________________________________________________________________________________________
00CEB5  2               CONVERT_SECTOR_LBA:
00CEB5  2  AD 0C 06             LDA     sektrk          ; LOAD TRACK # (LOW BYTE)
00CEB8  2  29 0F                AND     #$0F            ; ISOLATE HEAD IN LOW 4 BITS
00CEBA  2  0A                   ASL     a               ; MOVE TO HIGH BYTE
00CEBB  2  0A                   ASL     a
00CEBC  2  0A                   ASL     a
00CEBD  2  0A                   ASL     a
00CEBE  2  AA                   TAX                     ; PARK IN X
00CEBF  2  AD 0E 06             LDA     seksec          ; LOAD SECTOR # (LOW BYTE)
00CEC2  2  4A                   LSR     A               ;
00CEC3  2  4A                   LSR     A               ; DIVIDE BY 4 (FOR BLOCKING)
00CEC4  2  29 0F                AND     #$0F            ; CLEAR UPPER 4 BITS (JUST 'CAUSE)
00CEC6  2  8D 12 06             STA     debsehd         ; STORE IN SECTOR/HEAD
00CEC9  2  8A                   TXA                     ; GET HEAD BACK
00CECA  2  0D 12 06             ORA     debsehd
00CECD  2  8D 12 06             STA     debsehd         ; STORE IN SECTOR/HEAD
00CED0  2               
00CED0  2  AD 0C 06             LDA     sektrk
00CED3  2  8D 10 06             STA     debcyll         ; STORE IN TRACK (lsb)
00CED6  2  AD 0D 06             LDA     sektrk+1
00CED9  2  8D 11 06             STA     debcylm         ; STORE IN TRACK (msb)
00CEDC  2               ; REMOVE HEAD FROM TRACK VALUE (DIV/4)
00CEDC  2  AD 11 06             LDA     debcylm
00CEDF  2  4A                   LSR     A
00CEE0  2  8D 11 06             STA     debcylm
00CEE3  2  AD 10 06             LDA     debcyll
00CEE6  2  6A                   ROR     A
00CEE7  2  8D 10 06             STA     debcyll
00CEEA  2               
00CEEA  2  AD 11 06             LDA     debcylm
00CEED  2  4A                   LSR     A
00CEEE  2  8D 11 06             STA     debcylm
00CEF1  2  AD 10 06             LDA     debcyll
00CEF4  2  6A                   ROR     A
00CEF5  2  8D 10 06             STA     debcyll
00CEF8  2               
00CEF8  2  AD 11 06             LDA     debcylm
00CEFB  2  4A                   LSR     A
00CEFC  2  8D 11 06             STA     debcylm
00CEFF  2  AD 10 06             LDA     debcyll
00CF02  2  6A                   ROR     A
00CF03  2  8D 10 06             STA     debcyll
00CF06  2               
00CF06  2  AD 11 06             LDA     debcylm
00CF09  2  4A                   LSR     A
00CF0A  2  8D 11 06             STA     debcylm
00CF0D  2  AD 10 06             LDA     debcyll
00CF10  2  6A                   ROR     A
00CF11  2  8D 10 06             STA     debcyll
00CF14  2               ;	ADD SLICE OFFSET
00CF14  2  AD 16 06             LDA     sekdsk          ; GET DRIVE#
00CF17  2  29 07                AND     #7              ; ONLY FIRST 8 DEVICES SUPPORTED
00CF19  2  0A                   ASL     a               ; DOUBLE NUMBER FOR TABLE LOOKUP
00CF1A  2  AA                   TAX                     ; MOVE TO X REGISTER
00CF1B  2  E8                   INX                     ; WANT SECOND BYTE OF ENTRY
00CF1C  2  BD 17 06             LDA     dskcfg,X        ; GET SLICE#
00CF1F  2  8D 32 06             STA     slicetmp+1      ; SLICE OFFSET MSB
00CF22  2  A9 00                LDA     #0              ; GET SLICE#
00CF24  2  8D 31 06             STA     slicetmp        ; SLICE OFFSET LSB
00CF27  2  18                   CLC                     ; VOODOO MATH TO TAKE SLICE*$4000
00CF28  2  6E 32 06             ROR     slicetmp+1
00CF2B  2  6E 31 06             ROR     slicetmp
00CF2E  2  6E 32 06             ROR     slicetmp+1
00CF31  2  6E 31 06             ROR     slicetmp
00CF34  2               
00CF34  2  BD 17 06             LDA     dskcfg,X        ; GET SLICE#
00CF37  2  18                   CLC
00CF38  2  6D 31 06             ADC     slicetmp
00CF3B  2  8D 31 06             STA     slicetmp
00CF3E  2  A9 00                LDA     #$00            ; LOGIC ERROR FOR SLICES THAT CARRY?
00CF40  2  6D 32 06             ADC     slicetmp+1      ;
00CF43  2  8D 32 06             STA     slicetmp+1      ;
00CF46  2               
00CF46  2               ; ADD SLICE OFFSET TO TRACK #
00CF46  2  18                   CLC                     ; clear carry
00CF47  2  AD 31 06             LDA     slicetmp
00CF4A  2  6D 10 06             ADC     debcyll
00CF4D  2  8D 10 06             STA     debcyll         ; store sum of LSBs
00CF50  2  AD 32 06             LDA     slicetmp+1
00CF53  2  6D 11 06             ADC     debcylm         ; add the MSBs using carry from
00CF56  2  8D 11 06             STA     debcylm         ; the previous calculation
00CF59  2               
00CF59  2               
00CF59  2               ; DISPLAY ON DSKY IF PRESENT
00CF59  2  AD 16 06             LDA     sekdsk
00CF5C  2  8D 08 06             STA     DSKY_HEXBUF
00CF5F  2  AD 11 06             LDA     debcylm
00CF62  2  8D 09 06             STA     DSKY_HEXBUF+1
00CF65  2  AD 10 06             LDA     debcyll
00CF68  2  8D 0A 06             STA     DSKY_HEXBUF+2
00CF6B  2  AD 12 06             LDA     debsehd
00CF6E  2  8D 0B 06             STA     DSKY_HEXBUF+3
00CF71  2  A9 2A                LDA     #42             ; DSKY_BIN2SEG
00CF73  2  85 32                STA     farfunct
00CF75  2  20 F0 FF             JSR     DO_FARCALL
00CF78  2  A9 29                LDA     #41             ; DSKY_SHOW
00CF7A  2  85 32                STA     farfunct
00CF7C  2  20 F0 FF             JSR     DO_FARCALL
00CF7F  2  60                   RTS
00CF80  2               
00CF80  2               ;__SETUP_FD_CHS__________________________________________________________________________________________________________________
00CF80  2               ;
00CF80  2               ; 	TRANSFORM DOS65 CHS TO FLOPPY
00CF80  2               ;________________________________________________________________________________________________________________________________
00CF80  2               ;
00CF80  2               SETUP_FD_CHS:
00CF80  2  AD 0C 06             LDA     sektrk          ; LOAD TRACK # (LOW BYTE)
00CF83  2  29 01                AND     #$01            ; FILTER OUT HEAD
00CF85  2  8D 11 06             STA     debcylm         ; STORE HEAD
00CF88  2  AD 0C 06             LDA     sektrk          ; SAVE TRACK IN A
00CF8B  2  4A                   LSR     A               ; REMOVE HEAD BIT
00CF8C  2  8D 10 06             STA     debcyll         ; STORE IN TRACK
00CF8F  2  AD 0E 06             LDA     seksec          ; LOAD SECTOR # (LOW BYTE)
00CF92  2  4A                   LSR     A               ;
00CF93  2  4A                   LSR     A               ; DIVIDE BY 4 (FOR BLOCKING)
00CF94  2  8D 12 06             STA     debsehd         ; STORE IN SECTOR
00CF97  2               
00CF97  2  AD 16 06             LDA     sekdsk
00CF9A  2  8D 08 06             STA     DSKY_HEXBUF
00CF9D  2  AD 11 06             LDA     debcylm
00CFA0  2  8D 09 06             STA     DSKY_HEXBUF+1
00CFA3  2  AD 10 06             LDA     debcyll
00CFA6  2  8D 0A 06             STA     DSKY_HEXBUF+2
00CFA9  2  AD 12 06             LDA     debsehd
00CFAC  2  8D 0B 06             STA     DSKY_HEXBUF+3
00CFAF  2  A9 2A                LDA     #42             ; DSKY_BIN2SEG
00CFB1  2  85 32                STA     farfunct
00CFB3  2  20 F0 FF             JSR     DO_FARCALL
00CFB6  2  A9 29                LDA     #41             ; DSKY_SHOW
00CFB8  2  85 32                STA     farfunct
00CFBA  2  20 F0 FF             JSR     DO_FARCALL
00CFBD  2  60                   RTS
00CFBE  2               
00CFBE  2               
00CFBE  2               ;___DEBSECR______________________________________________________________________________________________
00CFBE  2               ;
00CFBE  2               ;	DEBLOCK 512 BYTE SECTOR FOR DOS/65
00CFBE  2               ;
00CFBE  2               ;________________________________________________________________________________________________________
00CFBE  2               DEBSECR:
00CFBE  2  48                   PHA
00CFBF  2  AD 0E 06             LDA     seksec          ;
00CFC2  2  29 03                AND     #$03            ; GET SECTOR INDEX
00CFC4  2  18                   CLC                     ;
00CFC5  2  2A                   ROL     A               ;
00CFC6  2  AA                   TAX                     ;
00CFC7  2  BD DF CF             LDA     DEBTAB,X        ;
00CFCA  2  85 EE                STA     SRC
00CFCC  2  E8                   INX
00CFCD  2  BD DF CF             LDA     DEBTAB,X        ;
00CFD0  2  85 EF                STA     SRC+1           ;
00CFD2  2  A5 F4                LDA     dmaadr          ;
00CFD4  2  85 EC                STA     DEST            ;
00CFD6  2  A5 F5                LDA     dmaadr+1        ;
00CFD8  2  85 ED                STA     DEST+1          ;
00CFDA  2  20 06 D0             JSR     COPY_DOS_SECTOR ;
00CFDD  2  68                   PLA
00CFDE  2  60                   RTS
00CFDF  2               
00CFDF  2               DEBTAB:
00CFDF  2  00 04                .WORD   hstbuf          ;
00CFE1  2  80 04                .WORD   hstbuf+128      ;
00CFE3  2  00 05                .WORD   hstbuf+256      ;
00CFE5  2  80 05                .WORD   hstbuf+384      ;
00CFE7  2               
00CFE7  2               
00CFE7  2               ;___BLKSECR______________________________________________________________________________________________
00CFE7  2               ;
00CFE7  2               ;	BLOCK 512 BYTE SECTOR FOR DOS/65
00CFE7  2               ;
00CFE7  2               ;________________________________________________________________________________________________________
00CFE7  2               BLKSECR:
00CFE7  2  AD 0E 06             LDA     seksec          ;
00CFEA  2  29 03                AND     #$03            ; GET SECTOR INDEX
00CFEC  2  18                   CLC                     ;
00CFED  2  2A                   ROL     A               ;
00CFEE  2  AA                   TAX                     ;
00CFEF  2  BD DF CF             LDA     DEBTAB,X        ;
00CFF2  2  85 EC                STA     DEST
00CFF4  2  E8                   INX
00CFF5  2  BD DF CF             LDA     DEBTAB,X        ;
00CFF8  2  85 ED                STA     DEST+1          ;
00CFFA  2  A5 F4                LDA     dmaadr          ;
00CFFC  2  85 EE                STA     SRC             ;
00CFFE  2  A5 F5                LDA     dmaadr+1        ;
00D000  2  85 EF                STA     SRC+1           ;
00D002  2  20 06 D0             JSR     COPY_DOS_SECTOR ;
00D005  2  60                   RTS
00D006  2               
00D006  2               
00D006  2               ;___COPY_DOS_SECTOR______________________________________________________________________________________
00D006  2               ;
00D006  2               ;	COPY 128 BYTE SECTOR FOR DOS/65
00D006  2               ;
00D006  2               ;________________________________________________________________________________________________________
00D006  2               COPY_DOS_SECTOR:
00D006  2  A0 00                LDY     #$00            ;
00D008  2               COPY_DOS_SECTOR1:
00D008  2  B1 EE                LDA     (SRC),Y         ;
00D00A  2  91 EC                STA     (DEST),Y        ;
00D00C  2  C8                   INY                     ;
00D00D  2  98                   TYA                     ;
00D00E  2  C9 80                CMP     #$80            ;
00D010  2  D0 F6                BNE     COPY_DOS_SECTOR1;
00D012  2  60                   RTS
00D013  2               
00D013  2               ;___GET_DRIVE_DEVICE_____________________________________________________________________________________
00D013  2               ;
00D013  2               ; GET SELECTED DEVICE TYPE AND UNIT, RETURN IN "A"
00D013  2               ;
00D013  2               ;________________________________________________________________________________________________________
00D013  2               GET_DRIVE_DEVICE:
00D013  2  8E 34 D0             STX     GET_DRIVE_DEVICE_TMP
00D016  2  AD 16 06             LDA     sekdsk          ; GET DRIVE
00D019  2  29 07                AND     #7              ; ONLY FIRST 8 DEVICES SUPPORTED
00D01B  2  0A                   ASL     a               ; DOUBLE NUMBER FOR TABLE LOOKUP
00D01C  2  AA                   TAX                     ; MOVE TO X REGISTER
00D01D  2  BD 17 06             LDA     dskcfg, X       ; GET device
00D020  2  29 0F                AND     #$0F
00D022  2  8D 3D 06             STA     CURRENT_IDE_DRIVE
00D025  2  BD 17 06             LDA     dskcfg, X       ; GET device
00D028  2               ; SETUP FLOPPY CONTROL WHILE WE ARE HERE
00D028  2  29 01                AND     #$01
00D02A  2  8D 28 06             STA     DSKUNIT
00D02D  2  BD 17 06             LDA     dskcfg, X       ; GET device
00D030  2  AE 34 D0             LDX     GET_DRIVE_DEVICE_TMP
00D033  2  60                   RTS
00D034  2               
00D034  2               GET_DRIVE_DEVICE_TMP:
00D034  2  00                   .BYTE   00
00D035  2               ;------------------------------------------------------------------------------------
00D035  2               
00D035  2               
00D035  2               ;disk control blocks
00D035  2               dcba:
00D035  2  FF 07                .WORD   2047            ;max block number
00D037  2  40 00                .WORD   64              ;sectors per track
00D039  2  10 00                .WORD   16              ;number system tracks
00D03B  2  02                   .BYTE   2               ;block size = 4096
00D03C  2  FF 01                .WORD   511             ;max directory number
00D03E  2  A5 D0                .WORD   almpa           ;address of map for a
00D040  2  80                   .BYTE   128             ;no checksums
00D041  2  A5 D8                .WORD   ckmp            ;checksum map
00D043  2               dcbb:
00D043  2  FF 07                .WORD   2047            ;max block number
00D045  2  40 00                .WORD   64              ;sectors per track
00D047  2  10 00                .WORD   16              ;number system tracks
00D049  2  02                   .BYTE   2               ;block size = 4096
00D04A  2  FF 01                .WORD   511             ;max directory number
00D04C  2  A5 D1                .WORD   almpb           ;address of map for a
00D04E  2  80                   .BYTE   128             ;no checksums
00D04F  2  A5 D8                .WORD   ckmp            ;checksum map
00D051  2               dcbc:
00D051  2  FF 07                .WORD   2047            ;max block number
00D053  2  40 00                .WORD   64              ;sectors per track
00D055  2  10 00                .WORD   16              ;number system tracks
00D057  2  02                   .BYTE   2               ;block size = 4096
00D058  2  FF 01                .WORD   511             ;max directory number
00D05A  2  A5 D2                .WORD   almpc           ;address of map for a
00D05C  2  80                   .BYTE   128             ;no checksums
00D05D  2  A5 D8                .WORD   ckmp            ;checksum map
00D05F  2               dcbd:
00D05F  2  FF 07                .WORD   2047            ;max block number
00D061  2  40 00                .WORD   64              ;sectors per track
00D063  2  10 00                .WORD   16              ;number system tracks
00D065  2  02                   .BYTE   2               ;block size = 4096
00D066  2  FF 01                .WORD   511             ;max directory number
00D068  2  A5 D3                .WORD   almpd           ;address of map for a
00D06A  2  80                   .BYTE   128             ;no checksums
00D06B  2  A5 D8                .WORD   ckmp            ;checksum map
00D06D  2               dcbe:
00D06D  2  FF 07                .WORD   2047            ;max block number
00D06F  2  40 00                .WORD   64              ;sectors per track
00D071  2  10 00                .WORD   16              ;number system tracks
00D073  2  02                   .BYTE   2               ;block size = 4096
00D074  2  FF 01                .WORD   511             ;max directory number
00D076  2  A5 D4                .WORD   almpe           ;address of map for a
00D078  2  80                   .BYTE   128             ;no checksums
00D079  2  A5 D8                .WORD   ckmp            ;checksum map
00D07B  2               dcbf:
00D07B  2  FF 07                .WORD   2047            ;max block number
00D07D  2  40 00                .WORD   64              ;sectors per track
00D07F  2  10 00                .WORD   16              ;number system tracks
00D081  2  02                   .BYTE   2               ;block size = 4096
00D082  2  FF 01                .WORD   511             ;max directory number
00D084  2  A5 D5                .WORD   almpf           ;address of map for a
00D086  2  80                   .BYTE   128             ;no checksums
00D087  2  A5 D8                .WORD   ckmp            ;checksum map
00D089  2               dcbg:
00D089  2  FF 07                .WORD   2047            ;max block number
00D08B  2  40 00                .WORD   64              ;sectors per track
00D08D  2  10 00                .WORD   16              ;number system tracks
00D08F  2  02                   .BYTE   2               ;block size = 4096
00D090  2  FF 01                .WORD   511             ;max directory number
00D092  2  A5 D6                .WORD   almpg           ;address of map for a
00D094  2  80                   .BYTE   128             ;no checksums
00D095  2  A5 D8                .WORD   ckmp            ;checksum map
00D097  2               dcbh:
00D097  2  FF 07                .WORD   2047            ;max block number
00D099  2  40 00                .WORD   64              ;sectors per track
00D09B  2  10 00                .WORD   16              ;number system tracks
00D09D  2  02                   .BYTE   2               ;block size = 4096
00D09E  2  FF 01                .WORD   511             ;max directory number
00D0A0  2  A5 D7                .WORD   almph           ;address of map for a
00D0A2  2  80                   .BYTE   128             ;no checksums
00D0A3  2  A5 D8                .WORD   ckmp            ;checksum map
00D0A5  2               
00D0A5  2               
00D0A5  2               
00D0A5  2               ;allocation maps
00D0A5  2               almpa:
00D0A5  2  xx xx xx xx          .RES    256
00D0A9  2  xx xx xx xx  
00D0AD  2  xx xx xx xx  
00D1A5  2               almpb:
00D1A5  2  xx xx xx xx          .RES    256
00D1A9  2  xx xx xx xx  
00D1AD  2  xx xx xx xx  
00D2A5  2               almpc:
00D2A5  2  xx xx xx xx          .RES    256
00D2A9  2  xx xx xx xx  
00D2AD  2  xx xx xx xx  
00D3A5  2               almpd:
00D3A5  2  xx xx xx xx          .RES    256
00D3A9  2  xx xx xx xx  
00D3AD  2  xx xx xx xx  
00D4A5  2               almpe:
00D4A5  2  xx xx xx xx          .RES    256
00D4A9  2  xx xx xx xx  
00D4AD  2  xx xx xx xx  
00D5A5  2               almpf:
00D5A5  2  xx xx xx xx          .RES    256
00D5A9  2  xx xx xx xx  
00D5AD  2  xx xx xx xx  
00D6A5  2               almpg:
00D6A5  2  xx xx xx xx          .RES    256
00D6A9  2  xx xx xx xx  
00D6AD  2  xx xx xx xx  
00D7A5  2               almph:
00D7A5  2  xx xx xx xx          .RES    256
00D7A9  2  xx xx xx xx  
00D7AD  2  xx xx xx xx  
00D8A5  2               
00D8A5  2               ;checksum maps
00D8A5  2               ;drive a
00D8A5  2               ckmp:
00D8A5  2  xx xx xx xx          .RES    128
00D8A9  2  xx xx xx xx  
00D8AD  2  xx xx xx xx  
00D925  2               
00D925  2               
00D925  2               ; See Platform Documentation for Drive Types.
00D925  2               
00D925  2               dftdskcfg:
00D925  2  00 00                .BYTE   $00, $00        ; disk A: unit, slice (invalid for floppy disks)
00D927  2  30 00                .BYTE   $30, $00        ; disk B: unit, slice (invalid for floppy disks)
00D929  2  90 00                .BYTE   $90, $00        ; disk C: unit, slice (invalid for floppy disks)
00D92B  2  90 00                .BYTE   $90, $00        ; disk D: unit, slice (invalid for floppy disks)
00D92D  2  90 00                .BYTE   $90, $00        ; disk E: unit, slice (invalid for floppy disks)
00D92F  2  90 00                .BYTE   $90, $00        ; disk F: unit, slice (invalid for floppy disks)
00D931  2  90 00                .BYTE   $90, $00        ; disk G: unit, slice (invalid for floppy disks)
00D933  2  90 00                .BYTE   $90, $00        ; disk H: unit, slice (invalid for floppy disks)
00D935  2               
00D935  1               
00D935  1                       .END
