	
	
TEST8:
	LD	DE,PPPSTR_SIOLOOP
	CALL	WRITESTR
	
	LD	C,$55		; RX FLUSH
	CALL	SENDCMD
	
	LD	B,26
	LD	C,'A' - 1
TEST8A:
	LD	A,C
	INC	A
	LD	C,A
	PUSH	BC
	CALL	SIOTX
	CALL	SIORX
	LD	A,C
	POP	BC
	CP	C
	JR	NZ,TEST8_CMPERR

	CALL	PC_PERIOD
	DJNZ	TEST8A
	
	LD	DE,PPPSTR_OK
	CALL	WRITESTR
	
	XOR	A
	RET

TEST8_CMPERR:
	PUSH	AF
	PUSH	BC
	LD	DE,PPPSTR_CMPERR
	CALL	WRITESTR
	CALL	PC_COLON
	POP	BC
	LD	A,C
	CALL	PRTHEXBYTE
	CALL	PC_SPACE
	POP	AF
	CALL	PRTHEXBYTE
	
	SCF
	RET
	

	
TEST9:
	LD	DE,PPPSTR_SIOBUF
	CALL	WRITESTR
	
	LD	C,$55		; RX FLUSH
	CALL	SENDCMD
	
	;LD	C,$53		; SERIAL RX STAT
	;CALL	SENDCMD
	;CALL	GETBYTE
	;CALL	PRTHEXBYTE
	;CALL	PC_SPACE
	
	;LD	C,$54		; SERIAL TX STAT
	;CALL	SENDCMD
	;CALL	GETBYTE
	;CALL	PRTHEXBYTE
	;CALL	PC_SPACE
	
	LD	C,'X'
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	CALL	SIOTX
	CALL	PC_PERIOD
	
	;LD	C,$54		; SERIAL TX STAT
	;CALL	SENDCMD
	;CALL	GETBYTE
	;CALL	PRTHEXBYTE
	;CALL	PC_SPACE
	
	CALL	LDELAY

	LD	C,$53		; SERIAL RX STAT
	CALL	SENDCMD
	CALL	GETBYTE
	LD	A,8
	CP	C
	JR	NZ,TEST9_CMPERR

	LD	DE,PPPSTR_OK
	CALL	WRITESTR
	
	XOR	A
	RET
	
TEST9_CMPERR:
	PUSH	BC
	LD	DE,PPPSTR_CMPERR
	CALL	WRITESTR
	CALL	PC_COLON
	POP	BC
	LD	A,C
	CALL	PRTHEXBYTE
	
	SCF
	RET
	

	
SIOTX:
	PUSH	BC
	LD	C,$52
	CALL	SENDCMD
	POP	BC

	CALL	PUTBYTE
	RET
	
SIORX:
	LD	C,$51
	CALL	SENDCMD

	CALL	GETBYTE
	RET

VIDOUT:
	PUSH	BC
	LD	C,$20
	CALL	SENDCMD
	POP	BC

	CALL	PUTBYTE
	RET
	

	
	
DUMP_BUFFER:
	CALL	NEWLINE

	PUSH	DE
	POP	HL
	INC	D
	INC	D
	
BLKRD:
	CALL	PHL			; PRINT START LOCATION
	LD	C,16			; SET FOR 16 LOCS
	PUSH	HL			; SAVE STARTING HL
NXTONE:
	LD 	A,(HL)			; GET BYTE
	CALL	PRTHEXBYTE		; PRINT IT
	CALL	PC_SPACE		;
UPDH:	
	INC	HL			; POINT NEXT
	DEC	C			; DEC. LOC COUNT
	JR	NZ,NXTONE		; IF LINE NOT DONE
					; NOW PRINT 'DECODED' DATA TO RIGHT OF DUMP
PCRLF:
	CALL	PC_SPACE		; SPACE IT
	LD	C,16			; SET FOR 16 CHARS
	POP	HL			; GET BACK START
PCRLF0:
	LD	A,(HL)			; GET BYTE
	AND	060H			; SEE IF A 'DOT'
	LD	A,(HL)			; O.K. TO GET
	JR	NZ,PDOT			;
DOT:
	LD	A,2EH			; LOAD A DOT	
PDOT:
	CALL	COUT			; PRINT IT
	INC	HL			; 
	LD	A,D			;
	CP	H			;
	JR	NZ,UPDH1		;
	LD	A,E			;
	CP	L			;
	JP	Z,DUMP_END		;
;
;IF BLOCK NOT DUMPED, DO NEXT CHARACTER OR LINE
UPDH1:
	DEC	C			; DEC. CHAR COUNT
	JR	NZ,PCRLF0		; DO NEXT
CONTD:
	CALL	NEWLINE			;
	JP	BLKRD			;

DUMP_END:	
	RET				;
;__PHL_________________________________________________________________________________________________________________________ 
;
;	PRINT THE HL REG ON THE SERIAL PORT
;________________________________________________________________________________________________________________________________
;
PHL:
	LD	A,H			; GET HI BYTE
	CALL	PRTHEXBYTE		; DO HEX OUT ROUTINE
	LD	A,L			; GET LOW BYTE
	CALL	PRTHEXBYTE		; HEX IT
	CALL	PC_SPACE
	RET				; DONE  

;
; CLEAR BUFFER WITH $00
;
CLR_BUFFER:
	LD	HL,SECBUF
	LD	BC,BUFSIZ
CLR_BUFFER1:
	LD	A,0
	LD	(HL),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JP	NZ,CLR_BUFFER1
	RET
