ca65 V2.18 - Ubuntu 2.19-1
Main file   : 6x0xbios.asm
Current file: 6x0xbios.asm

000000r 1               
000000r 1               ;__6x0xbios__________________________________________________________________________________________
000000r 1               ;
000000r 1               ;	BIOS for the 6502 6x0x Retrobrew Computers SBC
000000r 1               ;
000000r 1               ;	ORIGINALLY WRITTEN BY: DAN WERNER -- 1/1/2014
000000r 1               ; 	Code cleanup: Dan Werner -- 1/22/2023
000000r 1               ;
000000r 1               ; ** NOTE THAT THIS BIOS NEEDS PAGED MEMORY TO OPERATE
000000r 1               ; ** K17 MUST BE OPEN FOR PAGED MEMORY TO OPERATE ON THE 6502 CPU
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; CONFIGURATION
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;
000000r 1               M6X0X_IOSPACE   = $E000
000000r 1               M6X0X_SHADOW_ROM = $F000
000000r 1               
000000r 1               ; PAGER
000000r 1               M6X0X_ACT_TASK  = M6X0X_IOSPACE+$A00
000000r 1               M6X0X_MAP_SETUP = M6X0X_IOSPACE+$A10
000000r 1               M6X0X_MAP_SPACE = M6X0X_IOSPACE+$A20
000000r 1               M6X0X_MMU_ENA   = M6X0X_IOSPACE+$A30
000000r 1               
000000r 1               ;
000000r 1               ;
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; DATA CONSTANTS
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;ZERO PAGE	ADDRESS			; FUNCTION
000000r 1               IRQVECTOR       = $35           ; VECTOR FOR USER IRQ RTN
000000r 1               NMIVECTOR       = $37           ; VECTOR FOR USER NMI RTN
000000r 1               CONSOLE         = $3A           ; CURRENT CONSOLE
000000r 1               WORKPTR         = $3B           ; WORK POINTER FOR COMMAND PROCESSOR
000000r 1               JUMPPTR         = $3D           ; JUMP VECTOR FOR LOOKUP TABLE
000000r 1               TEMPWORD        = $3F           ;
000000r 1               TEMPWORD1       = $41           ;
000000r 1               TEMPWORD2       = $43           ;
000000r 1               TEMPBYTE        = $45           ;
000000r 1               ACC             = $46           ; ACC STORAGE
000000r 1               XREG            = $47           ; X REG STORAGE
000000r 1               YREG            = $48           ; Y REG STORAGE
000000r 1               PREG            = $49           ; CURRENT STACK POINTER
000000r 1               PC              = $4A           ; PROGRAM COUNTER
000000r 1               SPTR            = $4C           ; CPU STATUS REGISTER
000000r 1               CKSM            = $4D           ; CHECKSUM
000000r 1               BYTECT          = $4E           ; BYTE COUNT
000000r 1               STRPTR          = $4F           ;
000000r 1               
000000r 1               ; working memory for assembler -- only used during assembler operation
000000r 1               savx            = $1c
000000r 1               tmpc            = $1d
000000r 1               length          = $1f
000000r 1               wrap            = $26
000000r 1               aflg            = $28
000000r 1               acmd            = $2a
000000r 1               nemo            = $44
000000r 1               tmp0            = $c1
000000r 1               tmp2            = $c3
000000r 1               stage           = $0210         ; assembler stage area (SHARED WITH HOST BUFFER	)
000000r 1               hstbuf          = $0200         ; 0200-03ff host buffer
000000r 1               ;
000000r 1               ; DRIVER WORKING STORAGE
000000r 1               ;
000000r 1               INBUFFER        = $0400         ;
000000r 1               
000000r 1               DSKY_BUF        = $0500         ; Eight Bytes DSKY display buffer
000000r 1               DSKY_BUFLEN     = 8             ;
000000r 1               DSKY_HEXBUF     = $0508         ; Four Bytes DSKY hex buffer
000000r 1               DSKY_HEXBUFLEN  = 4             ;
000000r 1               sektrk          = $050C         ; seek track number
000000r 1               seksec          = $050E         ; seek sector number
000000r 1               debcyll         = $0510         ; DEBLOCKED CYLINDER LSB
000000r 1               debcylm         = $0511         ; DEBLOCKED CYLINDER MSB
000000r 1               debsehd         = $0512         ; DEBLOCKED SECTOR AND HEAD (HS)
000000r 1               Cdebcyll        = $0513         ; DEBLOCKED CYLINDER LSB (IN CACHE)
000000r 1               Cdebcylm        = $0514         ; DEBLOCKED CYLINDER MSB (IN CACHE)
000000r 1               Cdebsehd        = $0515         ; DEBLOCKED SECTOR AND HEAD (HS)  (IN CACHE)
000000r 1               sekdsk          = $0516         ; seek disk number
000000r 1               dskcfg          = $0517         ; 16 bytes disk configuration table
000000r 1               DSKUNIT         = $0528         ; seek disk number
000000r 1               ST0             = $0529         ;
000000r 1               FLERR           = $052A         ;
000000r 1               FCMD            = $052B         ;
000000r 1               FLRETRY         = $052C         ;
000000r 1               FLRETRY1        = $052D         ;
000000r 1               FLATCH_STORE    = $052E         ;
000000r 1               PPIDETIMEOUT    = $052F         ; (word)
000000r 1               slicetmp        = $0531         ; (word)
000000r 1               PPIDEINDEX      = $0533
000000r 1               CURRENT_IDE_DRIVE = $0534
000000r 1               
000000r 1               
000000r 1                       .PC02
000000r 1                       .ORG    $C000
00C000  1                       .SEGMENT "DRIVERS"
00C000  1                       .INCLUDE "macro.asm"
00C000  2               ;__MACRO___________________________________________________________________________________________________________________
00C000  2               ;
00C000  2               ; 	Macros for the betterment of Mankind
00C000  2               ;________________________________________________________________________________________________________________________________
00C000  2               ;
00C000  2               
00C000  2               .macro          PRTS      message
00C000  2               .LOCAL p1
00C000  2               .LOCAL p2
00C000  2               .LOCAL p3
00C000  2               .LOCAL p4
00C000  2               .LOCAL p5
00C000  2                 .if     .paramcount <> 1
00C000  2                       .error  "Too few parameters for macro PRTS"
00C000  2                       .endif
00C000  2                       PHA
00C000  2                       PHX
00C000  2                       PHY
00C000  2                       LDX #$00
00C000  2               p1:
00C000  2                       LDA p4,x
00C000  2                       INX
00C000  2                       CMP #'$'
00C000  2                       BEQ p2
00C000  2                       JSR IOF_OUTCH
00C000  2                       JMP p1
00C000  2               p2:
00C000  2                       PLY
00C000  2                       plx
00C000  2                       pla
00C000  2                       JMP p5
00C000  2               p4:
00C000  2                       .BYTE message
00C000  2               p5:
00C000  2               .endmacro
00C000  2               
00C000  2               
00C000  2               
00C000  2               NEWLINE:
00C000  2  48                   PHA
00C001  2  DA                   PHX
00C002  2  5A                   PHY
00C003  2  A9 0D                LDA     #$0D
00C005  2  20 26 FA             JSR     IOF_OUTCH
00C008  2  A9 0A                LDA     #$0A
00C00A  2  20 26 FA             JSR     IOF_OUTCH
00C00D  2  7A                   PLY
00C00E  2  FA                   PLX
00C00F  2  68                   PLA
00C010  2  60                   RTS
00C011  2               
00C011  2               PRTDEC:
00C011  2  5A                   PHY
00C012  2  DA                   PHX
00C013  2  48                   PHA
00C014  2  A0 00                LDY     #00
00C016  2  A2 FF                LDX     #$FF
00C018  2  38                   SEC
00C019  2               PrDec100:
00C019  2  E8                   INX
00C01A  2  E9 64                SBC     #100
00C01C  2  B0 FB                BCS     PrDec100        ;Count how many 100s
00C01E  2  69 64                ADC     #100
00C020  2  20 3A C0             JSR     PrDecDigit      ;Print the 100s
00C023  2  A2 FF                LDX     #$FF
00C025  2  38                   SEC                     ;Prepare for subtraction
00C026  2               PrDec10:
00C026  2  E8                   INX
00C027  2  E9 0A                SBC     #10
00C029  2  B0 FB                BCS     PrDec10         ;Count how many 10s
00C02B  2  69 0A                ADC     #10
00C02D  2  20 3A C0             JSR     PrDecDigit      ;Print the 10s
00C030  2  AA                   TAX                     ;Pass 1s into X
00C031  2  A0 01                LDY     #1
00C033  2  20 3A C0             JSR     PrDecDigit      ;Print the 1s
00C036  2  68                   PLA
00C037  2  FA                   PLX
00C038  2  7A                   PLY
00C039  2  60                   RTS
00C03A  2               PrDecDigit:
00C03A  2  48                   PHA
00C03B  2  C0 00                CPY     #$00
00C03D  2  D0 09                BNE     PrDecDigit1
00C03F  2  8A                   TXA
00C040  2  A8                   TAY
00C041  2  C0 00                CPY     #$00
00C043  2  D0 03                BNE     PrDecDigit1
00C045  2  4C 4E C0             JMP     PrDecDigit2
00C048  2               PrDecDigit1:
00C048  2  8A                   TXA                     ;Save A, pass digit to A
00C049  2  09 30                ORA     #'0'
00C04B  2  20 26 FA             JSR     IOF_OUTCH       ;Convert to character and print it
00C04E  2               PrDecDigit2:
00C04E  2  68                   PLA
00C04F  2  60                   RTS                     ;Restore A and return
00C050  2               
00C050  1               ;	dsky? (both)
00C050  1               ; 	rtc?
00C050  1                       .INCLUDE "bios_ppp_hd.asm"
00C050  2               ;__PARALLEL PORT PROP MASS STORAGE DRIVERS_______________________________________________________________________________________
00C050  2               ;
00C050  2               ; 	DOS/65 PARALLEL PORT PROP MASS STORAGE DRIVERS
00C050  2               ;
00C050  2               ;	Entry points:
00C050  2               ;		PPP_SOFT_RESET   - called during OS init
00C050  2               ;		PPP_READ_SECTOR  - read a sector from drive
00C050  2               ;		PPP_WRITE_SECTOR - write a sector to drive
00C050  2               ;               PPP_INITIALIZE   - INITIALIZE HARDWARE
00C050  2               ;________________________________________________________________________________________________________________________________
00C050  2               ;
00C050  2               
00C050  2               
00C050  2               ;*__PPP_READ_SECTOR___________________________________________________________________________________
00C050  2               ;*
00C050  2               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
00C050  2               ;*
00C050  2               ;*____________________________________________________________________________________________________
00C050  2               PPP_READ_SECTOR:
00C050  2               
00C050  2               
00C050  2  AD 12 05             LDA     debsehd         ;
00C053  2  CD 15 05             CMP     Cdebsehd        ;
00C056  2  D0 13                BNE     PPP_READ_SECTOR_DIRTY
00C058  2  AD 10 05             LDA     debcyll         ;
00C05B  2  CD 13 05             CMP     Cdebcyll        ;
00C05E  2  D0 0B                BNE     PPP_READ_SECTOR_DIRTY
00C060  2  AD 11 05             LDA     debcylm         ;
00C063  2  CD 14 05             CMP     Cdebcylm        ;
00C066  2  D0 03                BNE     PPP_READ_SECTOR_DIRTY
00C068  2               
00C068  2  A9 00                LDA     #$00
00C06A  2  60                   RTS
00C06B  2               
00C06B  2               PPP_READ_SECTOR_DIRTY:
00C06B  2  AD 10 05             LDA     debcyll         ; STORE CURRENT PARMS
00C06E  2  8D 13 05             STA     Cdebcyll        ;
00C071  2  AD 11 05             LDA     debcylm         ;
00C074  2  8D 14 05             STA     Cdebcylm        ;
00C077  2  AD 12 05             LDA     debsehd         ;
00C07A  2  8D 15 05             STA     Cdebsehd        ;
00C07D  2               
00C07D  2               
00C07D  2  A9 14                LDA     #$14
00C07F  2  20 96 F4             JSR     SENDCMD
00C082  2               
00C082  2  AD 12 05             LDA     debsehd
00C085  2  20 AC F4             JSR     PUTBYTE
00C088  2  AD 10 05             LDA     debcyll
00C08B  2  20 AC F4             JSR     PUTBYTE
00C08E  2  AD 11 05             LDA     debcylm
00C091  2  20 AC F4             JSR     PUTBYTE
00C094  2  A9 00                LDA     #$00
00C096  2  20 AC F4             JSR     PUTBYTE
00C099  2               
00C099  2               
00C099  2  20 E7 F4             JSR     GETBYTE         ; GET RESULT
00C09C  2  C9 00                CMP     #$00
00C09E  2  D0 0B                BNE     PPP_READ_SECTOR_ERR
00C0A0  2               
00C0A0  2  A9 13                LDA     #$13
00C0A2  2  20 96 F4             JSR     SENDCMD
00C0A5  2  20 B9 C0             JSR     GETBUF
00C0A8  2  A9 00                LDA     #$00
00C0AA  2  60                   RTS
00C0AB  2               PPP_READ_SECTOR_ERR:
00C0AB  2  A9 FF                LDA     #$FF            ; STORE CURRENT PARMS
00C0AD  2  8D 15 05             STA     Cdebsehd        ;
00C0B0  2  8D 13 05             STA     Cdebcyll        ;
00C0B3  2  8D 14 05             STA     Cdebcylm        ;
00C0B6  2               
00C0B6  2  A9 02                LDA     #$02
00C0B8  2  60                   RTS
00C0B9  2               GETBUF:
00C0B9  2  A2 00                LDX     #$00
00C0BB  2               GETBUF1:
00C0BB  2  20 E7 F4             JSR     GETBYTE
00C0BE  2  9D 00 02             STA     hstbuf,X
00C0C1  2  E8                   INX
00C0C2  2  E0 00                CPX     #$00
00C0C4  2  D0 F5                BNE     GETBUF1
00C0C6  2               GETBUF2:
00C0C6  2  20 E7 F4             JSR     GETBYTE
00C0C9  2  9D 00 03             STA     hstbuf+256,X
00C0CC  2  E8                   INX
00C0CD  2  E0 00                CPX     #$00
00C0CF  2  D0 F5                BNE     GETBUF2
00C0D1  2  60                   RTS
00C0D2  2               
00C0D2  2               
00C0D2  2               ;*__PPP_WRITE_SECTOR__________________________________________________________________________________
00C0D2  2               ;*
00C0D2  2               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
00C0D2  2               ;*
00C0D2  2               ;*____________________________________________________________________________________________________
00C0D2  2               PPP_WRITE_SECTOR:
00C0D2  2               ; WRITE A SECTOR
00C0D2  2  A9 12                LDA     #$12
00C0D4  2  20 96 F4             JSR     SENDCMD
00C0D7  2  20 19 C1             JSR     PUTBUF
00C0DA  2               
00C0DA  2  A9 15                LDA     #$15
00C0DC  2  20 96 F4             JSR     SENDCMD
00C0DF  2               
00C0DF  2  AD 12 05             LDA     debsehd
00C0E2  2  20 AC F4             JSR     PUTBYTE
00C0E5  2  AD 10 05             LDA     debcyll
00C0E8  2  20 AC F4             JSR     PUTBYTE
00C0EB  2  AD 11 05             LDA     debcylm
00C0EE  2  20 AC F4             JSR     PUTBYTE
00C0F1  2  A9 00                LDA     #$00
00C0F3  2  20 AC F4             JSR     PUTBYTE
00C0F6  2               
00C0F6  2  20 E7 F4             JSR     GETBYTE         ; GET RESULT
00C0F9  2  C9 00                CMP     #$00
00C0FB  2  D0 0E                BNE     PPP_WRITE_SECTOR_ERROR
00C0FD  2               
00C0FD  2  A9 FF                LDA     #$FF            ; STORE CURRENT PARMS
00C0FF  2  8D 13 05             STA     Cdebcyll        ;
00C102  2  8D 14 05             STA     Cdebcylm        ;
00C105  2  8D 15 05             STA     Cdebsehd        ;
00C108  2  A9 00                LDA     #$00
00C10A  2  60                   RTS
00C10B  2               PPP_WRITE_SECTOR_ERROR:
00C10B  2  A9 FF                LDA     #$FF            ; STORE CURRENT PARMS
00C10D  2  8D 15 05             STA     Cdebsehd        ;
00C110  2  8D 13 05             STA     Cdebcyll        ;
00C113  2  8D 14 05             STA     Cdebcylm        ;
00C116  2  A9 02                LDA     #$02
00C118  2  60                   RTS
00C119  2               PUTBUF:
00C119  2  A2 00                LDX     #$00
00C11B  2               PUTBUF1:
00C11B  2  BD 00 02             LDA     hstbuf,X
00C11E  2  20 AC F4             JSR     PUTBYTE
00C121  2  E8                   INX
00C122  2  E0 00                CPX     #$00
00C124  2  D0 F5                BNE     PUTBUF1
00C126  2               PUTBUF2:
00C126  2  BD 00 03             LDA     hstbuf+256,X
00C129  2  20 AC F4             JSR     PUTBYTE
00C12C  2  E8                   INX
00C12D  2  E0 00                CPX     #$00
00C12F  2  D0 F5                BNE     PUTBUF2
00C131  2  60                   RTS
00C132  2               
00C132  2               
00C132  2               ;*__PPP_SOFT_RESET____________________________________________________________________________________
00C132  2               ;*
00C132  2               ;*  SOFT RESET PPP CHANNEL
00C132  2               ;*
00C132  2               ;*____________________________________________________________________________________________________
00C132  2               PPP_SOFT_RESET:
00C132  2  A9 10                LDA     #$10
00C134  2  20 96 F4             JSR     SENDCMD
00C137  2  60                   RTS                     ;
00C138  2               
00C138  2               ;*__PPP_INITIALIZE____________________________________________________________________________________
00C138  2               ;*
00C138  2               ;*  INITIALIZE THE PPP SD DRIVERS
00C138  2               ;*
00C138  2               ;*____________________________________________________________________________________________________
00C138  2               PPP_INITIALIZE:
00C138  2  48 DA 5A A2          PRTS    "SD CARD: INITIALIZED$"; NOT PRESENT
00C13C  2  00 BD 51 C1  
00C140  2  E8 C9 24 F0  
00C166  2  20 00 C0             JSR     NEWLINE
00C169  2  4C 32 C1             JMP     PPP_SOFT_RESET
00C16C  2               
00C16C  1                       .INCLUDE "bios_diov3_flp.asm"
00C16C  2               ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
00C16C  2               ;
00C16C  2               ; 	DOS/65 floppy drivers for direct attached disk-io V3 card
00C16C  2               ;
00C16C  2               ;	Entry points:
00C16C  2               ;		SETUPDRIVE  - called during OS init
00C16C  2               ;		FORMFL	    - format floppy disk ('U' POINTS TO DCB)
00C16C  2               ;		READFL	    - read a sector from drive ('U' POINTS TO DCB, X TO MEMORY)
00C16C  2               ;		WRITEFL	    - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
00C16C  2               ;
00C16C  2               ;________________________________________________________________________________________________________________________________
00C16C  2               ;
00C16C  2               
00C16C  2               
00C16C  2               
00C16C  2               ;*
00C16C  2               ;* HARDWARE I/O ADDRESSES
00C16C  2               ;*
00C16C  2               
00C16C  2               FMSR            = M6X0X_IOSPACE+$30; ADDRESS OF MAIN STATUS REGISTER
00C16C  2               FDATA           = M6X0X_IOSPACE+$31; FLOPPY DATA REGISTER
00C16C  2               FLATCH          = M6X0X_IOSPACE+$38; FLOPPY CONFIGURATION LATCH
00C16C  2               
00C16C  2               ;
00C16C  2               ; FDC CONFIGURATION LATCH OUTPUT BIT PATTERNS
00C16C  2               MOTOR           = %00000010     ; BIT PATTERN IN LATCH FOR MOTOR CONTROL (ON)
00C16C  2               TERMCN          = %00000001     ; BIT PATTERN IN LATCH TO WRITE A TC STROBE
00C16C  2               RESETL          = %00000000     ; BIT PATTERN IN LATCH TO RESET ALL BITS
00C16C  2               MINI            = %00000100     ; BIT PATTERN IN LATCH TO SET MINI MODE FDC9229 LOW DENS=1, HIGH DENS=0
00C16C  2               PRECOMP         = %00100000     ; BIT PATTERN IN LATCH TO SET WRITE PRECOMP 125 NS:
00C16C  2               FDDENSITY       = %01000000     ; BIT PATTERN IN LATCH TO FLOPPY LOW DENSITY (HIGH IS 1)
00C16C  2               FDREADY         = %10000000     ; BIT PATTERN IN LATCH TO FLOPPY READY (P-34):
00C16C  2               
00C16C  2               
00C16C  2               
00C16C  2               
00C16C  2               ;__SETUPDRIVE__________________________________________________________________________________________________________________________
00C16C  2               ;
00C16C  2               ;	SETUP FLOPPY DRIVE SETTINGS
00C16C  2               ;________________________________________________________________________________________________________________________________
00C16C  2               ;
00C16C  2               ;
00C16C  2               ;
00C16C  2               SETUPDRIVE:
00C16C  2  A9 00                LDA     #$00
00C16E  2  8D 38 E0             STA     FLATCH
00C171  2  A9 00                LDA     #RESETL         ; RESET SETTINGS
00C173  2  09 04                ORA     #MINI           ; SELECT MINI FLOPPY (low dens=1, high dens=0)
00C175  2  09 20                ORA     #PRECOMP        ; SELECT PRECOMP
00C177  2  09 40                ORA     #FDDENSITY      ; SELECT HIGH DENSITY
00C179  2  09 80                ORA     #FDREADY        ;
00C17B  2  8D 2E 05             STA     FLATCH_STORE    ; SAVE SETTINGS
00C17E  2  8D 38 E0             STA     FLATCH
00C181  2  20 25 C4             JSR     CHECKINT        ;
00C184  2  A9 03                LDA     #$03            ; SPECIFY COMMAND
00C186  2  20 E3 C3             JSR     PFDATA          ; OUTPUT TO FDC
00C189  2  A9 7F                LDA     #$7F            ; 6 MS STEP, 480 MS HEAD UNLOAD
00C18B  2  20 E3 C3             JSR     PFDATA          ; OUTPUT TO FDC
00C18E  2  A9 05                LDA     #$05            ; 508 MS HEAD LOAD, NON-DMA MODE
00C190  2  20 E3 C3             JSR     PFDATA          ; OUTPUT TO FDC
00C193  2  20 25 C4             JSR     CHECKINT        ;
00C196  2  20 25 C4             JSR     CHECKINT        ;
00C199  2  20 25 C4             JSR     CHECKINT        ;
00C19C  2  20 25 C4             JSR     CHECKINT        ;
00C19F  2  20 25 C4             JSR     CHECKINT        ;
00C1A2  2  20 25 C4             JSR     CHECKINT        ;
00C1A5  2  20 B5 C3             JSR     RECAL           ;
00C1A8  2  A9 27                LDA     #39             ;
00C1AA  2  8D 10 05             STA     debcyll         ;
00C1AD  2  20 85 C3             JSR     SETTRACK
00C1B0  2  4C B5 C3             JMP     RECAL           ;
00C1B3  2               
00C1B3  2               ;__OUTFLATCH__________________________________________________________________________________________________________________________
00C1B3  2               ;
00C1B3  2               ;	SEND SETTINGS TO FLOPPY CONTROLLER
00C1B3  2               ;________________________________________________________________________________________________________________________________
00C1B3  2               ;
00C1B3  2               OUTFLATCH:
00C1B3  2  AD 2E 05             LDA     FLATCH_STORE    ; SET A TO SETTINGS
00C1B6  2  8D 38 E0             STA     FLATCH          ; OUTPUT TO CONTROLLER
00C1B9  2  60                   RTS
00C1BA  2               
00C1BA  2               
00C1BA  2               ;__READFL________________________________________________________________________________________________________________________
00C1BA  2               ;
00C1BA  2               ; 	READ A FLOPPY SECTOR
00C1BA  2               ;________________________________________________________________________________________________________________________________
00C1BA  2               ;
00C1BA  2               READFL:
00C1BA  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C1BD  2  09 02                ORA     #%00000010      ; SET MOTOR ON
00C1BF  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C1C2  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C1C5  2               
00C1C5  2  AD 10 05             LDA     debcyll         ;
00C1C8  2  CD 13 05             CMP     Cdebcyll        ;
00C1CB  2  D0 0B                BNE     READFL_DIRTY
00C1CD  2  AD 12 05             LDA     debsehd         ;
00C1D0  2  CD 15 05             CMP     Cdebsehd        ;
00C1D3  2  D0 03                BNE     READFL_DIRTY
00C1D5  2               
00C1D5  2  A9 00                LDA     #$00
00C1D7  2  60                   RTS
00C1D8  2               
00C1D8  2               
00C1D8  2               READFL_DIRTY:
00C1D8  2               
00C1D8  2  AD 10 05             LDA     debcyll         ;  STORE CURRENT PARMS
00C1DB  2  8D 13 05             STA     Cdebcyll        ;
00C1DE  2  AD 12 05             LDA     debsehd         ;
00C1E1  2  8D 15 05             STA     Cdebsehd        ;
00C1E4  2               
00C1E4  2               
00C1E4  2  A9 00                LDA     #$00
00C1E6  2  8D 2C 05             STA     FLRETRY
00C1E9  2  8D 2D 05             STA     FLRETRY1
00C1EC  2               READFL1:
00C1EC  2  A9 46                LDA     #$46            ; BIT 6 SETS MFM, 06H IS READ COMMAND
00C1EE  2  8D 2B 05             STA     FCMD
00C1F1  2  20 75 C2             JSR     DSKOP
00C1F4  2  C9 00                CMP     #$00
00C1F6  2  F0 28                BEQ     READFLDONE
00C1F8  2  EE 2C 05             INC     FLRETRY
00C1FB  2  AD 2C 05             LDA     FLRETRY
00C1FE  2  C9 06                CMP     #$06
00C200  2  D0 EA                BNE     READFL1
00C202  2  20 B5 C3             JSR     RECAL
00C205  2  20 85 C3             JSR     SETTRACK
00C208  2  A9 00                LDA     #$00
00C20A  2  8D 2C 05             STA     FLRETRY
00C20D  2  EE 2D 05             INC     FLRETRY1
00C210  2  AD 2D 05             LDA     FLRETRY1
00C213  2  C9 02                CMP     #$02
00C215  2  D0 D5                BNE     READFL1
00C217  2               
00C217  2  A9 FF                LDA     #$FF
00C219  2  8D 13 05             STA     Cdebcyll        ;
00C21C  2  8D 15 05             STA     Cdebsehd        ;
00C21F  2  60                   RTS                     ; A = $FF ON RETURN = OPERATION ERROR
00C220  2               READFLDONE:
00C220  2  A9 00                LDA     #$00            ; A = 0 ON RETURN = OPERATION OK
00C222  2  60                   RTS
00C223  2               
00C223  2               ;__WRITEFL________________________________________________________________________________________________________________________
00C223  2               ;
00C223  2               ; 	WRITE A FLOPPY SECTOR
00C223  2               ;________________________________________________________________________________________________________________________________
00C223  2               ;
00C223  2               WRITEFL:
00C223  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C226  2  09 02                ORA     #%00000010      ; SET MOTOR ON
00C228  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C22B  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C22E  2               
00C22E  2  A9 FF                LDA     #$FF
00C230  2  8D 13 05             STA     Cdebcyll        ;
00C233  2  8D 15 05             STA     Cdebsehd        ;
00C236  2  A9 00                LDA     #$00
00C238  2  8D 2C 05             STA     FLRETRY
00C23B  2  8D 2D 05             STA     FLRETRY1
00C23E  2               WRITEFL1:
00C23E  2  A9 45                LDA     #$45            ; BIT 6 SETS MFM, 05H IS WRITE COMMAND
00C240  2  8D 2B 05             STA     FCMD
00C243  2  20 75 C2             JSR     DSKOP
00C246  2  C9 00                CMP     #$00
00C248  2  F0 D6                BEQ     READFLDONE
00C24A  2  EE 2C 05             INC     FLRETRY
00C24D  2  AD 2C 05             LDA     FLRETRY
00C250  2  C9 06                CMP     #$06
00C252  2  D0 EA                BNE     WRITEFL1
00C254  2  20 B5 C3             JSR     RECAL
00C257  2  20 85 C3             JSR     SETTRACK
00C25A  2  A9 00                LDA     #$00
00C25C  2  8D 2C 05             STA     FLRETRY
00C25F  2  EE 2D 05             INC     FLRETRY1
00C262  2  AD 2D 05             LDA     FLRETRY1
00C265  2  C9 02                CMP     #$02
00C267  2  D0 D5                BNE     WRITEFL1
00C269  2  A9 FF                LDA     #$FF            ;
00C26B  2  8D 13 05             STA     Cdebcyll        ;
00C26E  2  8D 15 05             STA     Cdebsehd        ;
00C271  2  60                   RTS                     ; A = $FF ON RETURN = OPERATION ERROR
00C272  2               WRITEFLDONE:
00C272  2  A9 00                LDA     #$00            ; A = 0 ON RETURN = OPERATION OK
00C274  2  60                   RTS
00C275  2               
00C275  2               
00C275  2               ;__DSKOP__________________________________________________________________________________________________________________________
00C275  2               ;
00C275  2               ; 	PERFORM A DISK OPERATION
00C275  2               ;________________________________________________________________________________________________________________________________
00C275  2               ;
00C275  2               
00C275  2               DSKOP:
00C275  2  78                   SEI
00C276  2  20 25 C4             JSR     CHECKINT        ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
00C279  2  C9 FF                CMP     #$FF            ; DID IT RETURN WITH ERROR CODE?
00C27B  2  F0 1B                BEQ     DSKEXIT         ; IF YES, EXIT WITH ERROR CODE
00C27D  2               ;
00C27D  2               ;
00C27D  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C280  2  09 02                ORA     #%00000010      ; SET MOTOR ON
00C282  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C285  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C288  2               ;
00C288  2  20 85 C3             JSR     SETTRACK        ; PERFORM SEEK TO TRACK
00C28B  2               ;
00C28B  2  AD 2B 05             LDA     FCMD            ; WHAT COMMAND IS PENDING?
00C28E  2  C9 46                CMP     #$46            ; IS IT A READ COMMAND?
00C290  2  D0 03                BNE     GWRR_POLL       ;
00C292  2  4C F8 C2             JMP     RDD_POLL        ;
00C295  2               GWRR_POLL:
00C295  2  4C 5B C3             JMP     WRR_POLL        ;
00C298  2               DSKEXIT:
00C298  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C29B  2  29 FD                AND     #%11111101      ; SET MOTOR OFF
00C29D  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C2A0  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C2A3  2  A9 FF                LDA     #$FF            ; SET -1 IF ERROR
00C2A5  2  58                   CLI
00C2A6  2  60                   RTS
00C2A7  2               
00C2A7  2               SNDFDWR:
00C2A7  2               
00C2A7  2  A0 00                LDY     #$00            ; BYTES/SECTOR COUNT
00C2A9  2  18                   CLC
00C2AA  2  AD 16 05             LDA     sekdsk          ; GET DISK UNIT NUMBER
00C2AD  2  29 03                AND     #$03            ; MASK FOR FOUR DRIVES.
00C2AF  2  8D 28 05             STA     DSKUNIT         ; PARK IT IN TEMP
00C2B2  2  AD 12 05             LDA     debsehd         ; GET HEAD SELECTION
00C2B5  2  29 01                AND     #$01            ; INSURE SINGLE BIT
00C2B7  2  0A                   ASL     A               ;
00C2B8  2  0A                   ASL     A               ; MOVE HEAD TO BIT 2 POSITION
00C2B9  2  0D 28 05             ORA     DSKUNIT         ; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
00C2BC  2  8D 28 05             STA     DSKUNIT         ; STORE IN UNIT
00C2BF  2  AD 2B 05             LDA     FCMD            ;
00C2C2  2  20 E3 C3             JSR     PFDATA          ; PUSH COMMAND TO I8272
00C2C5  2  AD 28 05             LDA     DSKUNIT         ;
00C2C8  2  20 E3 C3             JSR     PFDATA          ;
00C2CB  2  AD 10 05             LDA     debcyll         ;
00C2CE  2  20 E3 C3             JSR     PFDATA          ;
00C2D1  2  AD 12 05             LDA     debsehd         ; GET HEAD SELECTION
00C2D4  2  29 01                AND     #$01            ; INSURE SINGLE BIT
00C2D6  2  20 E3 C3             JSR     PFDATA          ;
00C2D9  2  18                   CLC                     ;
00C2DA  2  AD 12 05             LDA     debsehd         ;
00C2DD  2  4A                   LSR     A
00C2DE  2  69 01                ADC     #$01            ;
00C2E0  2  20 E3 C3             JSR     PFDATA          ;
00C2E3  2  A9 02                LDA     #$02            ;
00C2E5  2  20 E3 C3             JSR     PFDATA          ; WHAT DENSITY
00C2E8  2  A9 09                LDA     #$09            ;
00C2EA  2  20 E3 C3             JSR     PFDATA          ; ASSUME SC (SECTOR COUNT)  EOT
00C2ED  2  A9 1B                LDA     #$1B            ;
00C2EF  2  20 E3 C3             JSR     PFDATA          ; WHAT GAP IS NEEDED
00C2F2  2  A9 FF                LDA     #$FF            ; DTL, IS THE LAST COMMAND BYTE TO I8272
00C2F4  2  20 0C C4             JSR     PFDATAS
00C2F7  2  60                   RTS
00C2F8  2               ; PERFORM READ
00C2F8  2               ; FROM READ TO READ MUST NOT EXCEED 25US WORST CASE MIN.
00C2F8  2               ;
00C2F8  2               RDD_POLL:
00C2F8  2  20 A7 C2             JSR     SNDFDWR         ;
00C2FB  2               RDS1:
00C2FB  2  AD 30 E0             LDA     FMSR            ; GET STATUS
00C2FE  2  10 FB                BPL     RDS1
00C300  2  29 20                AND     #%00100000      ; EXECUTION MODE?
00C302  2  F0 1B                BEQ     DSKOPEND        ; NO, ERROR
00C304  2  AD 31 E0             LDA     FDATA           ; GET DATA
00C307  2  99 00 02             STA     hstbuf,Y        ; WRITE IT
00C30A  2  C8                   INY
00C30B  2  D0 EE                BNE     RDS1            ; KEEP GOING
00C30D  2               RDS2:
00C30D  2  AD 30 E0             LDA     FMSR            ; GET STATUS
00C310  2  10 FB                BPL     RDS2
00C312  2  29 20                AND     #%00100000      ; EXECUTION MODE?
00C314  2  F0 09                BEQ     DSKOPEND        ; NO, ERROR
00C316  2  AD 31 E0             LDA     FDATA           ; GET DATA
00C319  2  99 00 03             STA     hstbuf+256,Y    ; WRITE IT
00C31C  2  C8                   INY
00C31D  2  D0 EE                BNE     RDS2            ; KEEP GOING
00C31F  2               
00C31F  2               DSKOPEND:
00C31F  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C322  2  09 01                ORA     #%00000001      ;
00C324  2  8D 2E 05             STA     FLATCH_STORE    ; SET TC
00C327  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C32A  2  EA                   NOP                     ;
00C32B  2  EA                   NOP                     ; 2 MICROSECOND DELAY
00C32C  2  EA                   NOP                     ;
00C32D  2  EA                   NOP                     ;
00C32E  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C331  2  29 FE                AND     #%11111110      ;
00C333  2  8D 2E 05             STA     FLATCH_STORE    ; CLEAR TC
00C336  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C339  2  48                   PHA                     ;
00C33A  2  68                   PLA                     ;
00C33B  2  48                   PHA                     ;
00C33C  2  68                   PLA                     ; 2 MICROSECOND DELAY
00C33D  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C340  2  29 FD                AND     #%11111101      ; SET MOTOR OFF
00C342  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C345  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER					;
00C348  2               ;
00C348  2  20 5B C4             JSR     GFDATA          ;GET ERROR TYPE
00C34B  2  8D 2A 05             STA     FLERR
00C34E  2               
00C34E  2               ;* CLEAR OUT ANY REMAINING DATA
00C34E  2               RESUL3:
00C34E  2  20 5B C4             JSR     GFDATA          ;READ BYTE FROM FDC
00C351  2  C9 00                CMP     #$00
00C353  2  D0 F9                BNE     RESUL3          ;CLEAR THEM ALL
00C355  2  AD 2A 05             LDA     FLERR           ;
00C358  2  29 C0                AND     #%11000000      ;
00C35A  2  60                   RTS
00C35B  2               
00C35B  2               WRR_POLL:
00C35B  2  20 A7 C2             JSR     SNDFDWR         ;
00C35E  2               WRS1:   ;
00C35E  2  AD 30 E0             LDA     FMSR            ; GET STATUS
00C361  2  10 FB                BPL     WRS1            ; NOT READY
00C363  2  29 20                AND     #%00100000      ; EXECUTION MODE?
00C365  2  F0 1B                BEQ     WRS3            ; NO, ERROR
00C367  2  B9 00 02             LDA     hstbuf,Y        ; WRITE IT
00C36A  2  8D 31 E0             STA     FDATA           ; WRITE TO FDC
00C36D  2  C8                   INY
00C36E  2  D0 EE                BNE     WRS1            ; DO NEXT
00C370  2               WRS2:   ;
00C370  2  AD 30 E0             LDA     FMSR            ; GET STATUS
00C373  2  10 FB                BPL     WRS2            ; NOT READY
00C375  2  29 20                AND     #%00100000      ; EXECUTION MODE?
00C377  2  F0 09                BEQ     WRS3            ; NO, ERROR
00C379  2  B9 00 03             LDA     hstbuf+256,Y    ; WRITE IT
00C37C  2  8D 31 E0             STA     FDATA           ; WRITE TO FDC
00C37F  2  C8                   INY
00C380  2  D0 EE                BNE     WRS2            ; DO NEXT
00C382  2               WRS3:
00C382  2  4C 1F C3             JMP     DSKOPEND        ;
00C385  2               
00C385  2               
00C385  2               ;__SETTRACK__________________________________________________________________________________________________________________________
00C385  2               ;
00C385  2               ; 	SEEK TO A TRACK ON GIVEN UNIT
00C385  2               ; 	A: TRACK #
00C385  2               ;________________________________________________________________________________________________________________________________
00C385  2               ;
00C385  2               SETTRACK:
00C385  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C388  2  09 02                ORA     #%00000010      ; SET MOTOR ON
00C38A  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C38D  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C390  2               
00C390  2               ; ANY INTERUPT PENDING
00C390  2               ; IF YES FIND OUT WHY/CLEAR
00C390  2  20 25 C4             JSR     CHECKINT        ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
00C393  2  C9 FF                CMP     #$FF            ; DID IT RTSURN WITH ERROR CODE?
00C395  2  D0 03                BNE     SETTRK1
00C397  2  4C E2 C3             JMP     SETTRKEXIT      ;
00C39A  2               
00C39A  2               ;
00C39A  2               SETTRK1:
00C39A  2  AD 10 05             LDA     debcyll         ; GET TRACK
00C39D  2  C9 00                CMP     #$00            ;
00C39F  2  F0 14                BEQ     RECAL           ; IF 0 PERFORM RECAL INSTEAD OF SEEK
00C3A1  2  A9 0F                LDA     #$0F            ; SEEK COMMAND
00C3A3  2  20 E3 C3             JSR     PFDATA          ; PUSH COMMAND
00C3A6  2  AD 16 05             LDA     sekdsk          ; SAY WHICH UNIT
00C3A9  2  20 E3 C3             JSR     PFDATA          ; SEND THAT
00C3AC  2  AD 10 05             LDA     debcyll         ; TO WHAT TRACK
00C3AF  2  20 E3 C3             JSR     PFDATA          ; SEND THAT TOO
00C3B2  2  4C CB C3             JMP     WAINT           ; WAIT FOR INTERRUPT SAYING DONE
00C3B5  2               RECAL:
00C3B5  2  AD 2E 05             LDA     FLATCH_STORE    ; POINT TO FLATCH
00C3B8  2  09 02                ORA     #%00000010      ; SET MOTOR ON
00C3BA  2  8D 2E 05             STA     FLATCH_STORE    ; POINT TO FLATCH
00C3BD  2  20 B3 C1             JSR     OUTFLATCH       ; OUTPUT TO CONTROLLER
00C3C0  2               
00C3C0  2  A9 07                LDA     #$07            ; RECAL TO TRACK 0
00C3C2  2  20 E3 C3             JSR     PFDATA          ; SEND IT
00C3C5  2  AD 16 05             LDA     sekdsk          ; WHICH UNIT
00C3C8  2  20 E3 C3             JSR     PFDATA          ; SEND THAT TOO
00C3CB  2               ;
00C3CB  2               WAINT:
00C3CB  2  48                   PHA
00C3CC  2  8A                   TXA
00C3CD  2  48                   PHA
00C3CE  2  A2 00                LDX     #$00
00C3D0  2               WAINT1:
00C3D0  2  E8                   INX
00C3D1  2  E0 FF                CPX     #$FF
00C3D3  2  D0 FB                BNE     WAINT1
00C3D5  2  68                   PLA
00C3D6  2  AA                   TAX
00C3D7  2  68                   PLA
00C3D8  2               ;
00C3D8  2               SETTRK2:
00C3D8  2  20 25 C4             JSR     CHECKINT
00C3DB  2  AD 30 E0             LDA     FMSR            ; READ SEEK STATUS
00C3DE  2  29 0F                AND     #%00001111      ; ANY DRIVES SEEKING?
00C3E0  2  D0 F6                BNE     SETTRK2         ; YES, WAIT FOR THEM
00C3E2  2               ;
00C3E2  2               SETTRKEXIT:
00C3E2  2  60                   RTS
00C3E3  2               
00C3E3  2               ;__PFDATA__________________________________________________________________________________________________________________________
00C3E3  2               ;
00C3E3  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE
00C3E3  2               ;
00C3E3  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
00C3E3  2               ;	RQM  DIO
00C3E3  2               ;	0	0	BUSY
00C3E3  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
00C3E3  2               ;	1	1	BYTE FOR READ BY HOST PENDING
00C3E3  2               ;	0	1	BUSY
00C3E3  2               ;
00C3E3  2               ;________________________________________________________________________________________________________________________________
00C3E3  2               ;
00C3E3  2               PFDATA:
00C3E3  2  48                   PHA                     ; SAVE DATA BYTE
00C3E4  2               WRF1:
00C3E4  2  AD 30 E0             LDA     FMSR            ; READ FDC STATUS
00C3E7  2  AA                   TAX
00C3E8  2  29 80                AND     #$80            ;
00C3EA  2  F0 F8                BEQ     WRF1            ; FDC IS NOT READY, WAIT FOR IT
00C3EC  2  8A                   TXA
00C3ED  2  29 40                AND     #$40            ; TEST DIO BIT
00C3EF  2  D0 15                BNE     WRF2            ; FDC IS OUT OF SYNC
00C3F1  2  68                   PLA                     ; RESTORE DATA
00C3F2  2  8D 31 E0             STA     FDATA           ; WRITE TO FDC
00C3F5  2               
00C3F5  2  48                   PHA
00C3F6  2  68                   PLA
00C3F7  2  48                   PHA
00C3F8  2  68                   PLA
00C3F9  2  48                   PHA
00C3FA  2  68                   PLA
00C3FB  2  48                   PHA
00C3FC  2  68                   PLA
00C3FD  2  48                   PHA
00C3FE  2  68                   PLA
00C3FF  2  48                   PHA
00C400  2  68                   PLA
00C401  2  48                   PHA
00C402  2  68                   PLA
00C403  2  48                   PHA
00C404  2  68                   PLA
00C405  2               
00C405  2  60                   RTS
00C406  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
00C406  2               WRF2:
00C406  2  AD 31 E0             LDA     FDATA           ; READ DATA REGISTER
00C409  2  4C E4 C3             JMP     WRF1            ; AND CONTINUE
00C40C  2               
00C40C  2               ;__PFDATAS_________________________________________________________________________________________________________________________
00C40C  2               ;
00C40C  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
00C40C  2               ;
00C40C  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
00C40C  2               ;	RQM  DIO
00C40C  2               ;	0	0	BUSY
00C40C  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
00C40C  2               ;	1	1	BYTE FOR READ BY HOST PENDING
00C40C  2               ;	0	1	BUSY
00C40C  2               ;
00C40C  2               ;________________________________________________________________________________________________________________________________
00C40C  2               ;
00C40C  2               PFDATAS:
00C40C  2  48                   PHA                     ; SAVE DATA BYTE
00C40D  2               WRF1S:
00C40D  2  AD 30 E0             LDA     FMSR            ; READ FDC STATUS
00C410  2  AA                   TAX
00C411  2  29 80                AND     #$80            ;
00C413  2  F0 F8                BEQ     WRF1S           ; FDC IS NOT READY, WAIT FOR IT
00C415  2  8A                   TXA
00C416  2  29 40                AND     #$40            ; TEST DIO BIT
00C418  2  D0 05                BNE     WRF2S           ; FDC IS OUT OF SYNC
00C41A  2  68                   PLA                     ; RESTORE DATA
00C41B  2  8D 31 E0             STA     FDATA           ; WRITE TO FDC
00C41E  2  60                   RTS
00C41F  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
00C41F  2               WRF2S:
00C41F  2  AD 31 E0             LDA     FDATA           ; READ DATA REGISTER
00C422  2  4C 0D C4             JMP     WRF1S           ; AND CONTINUE
00C425  2               
00C425  2               
00C425  2               
00C425  2               ;__CHECKINT__________________________________________________________________________________________________________________________
00C425  2               ;
00C425  2               ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
00C425  2               ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
00C425  2               ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
00C425  2               ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
00C425  2               ;________________________________________________________________________________________________________________________________
00C425  2               ;
00C425  2               CHECKINT:
00C425  2  AD 30 E0             LDA     FMSR            ; READING OR WRITING IS KEYS TO D7 RQM
00C428  2  29 80                AND     #$80
00C42A  2  F0 F9                BEQ     CHECKINT        ; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
00C42C  2  AD 30 E0             LDA     FMSR            ; READING OR WRITING IS KEYS TO D7 RQM
00C42F  2  29 40                AND     #$40            ; WAITING FOR INPUT?
00C431  2  F0 0E                BEQ     SENDINT
00C433  2  60                   RTS
00C434  2               
00C434  2               ERRCLR:
00C434  2  AD 31 E0             LDA     FDATA           ; CLEAR THE JUNK OUT OF DATA REGISTER
00C437  2  AD 30 E0             LDA     FMSR            ; CHECK WITH RQM
00C43A  2  29 80                AND     #$80            ; IF STILL NOT READY, READ OUT MORE JUNK
00C43C  2  F0 F6                BEQ     ERRCLR          ;
00C43E  2  A9 FF                LDA     #$FF            ; RETURN ERROR CODE -1
00C440  2               ;
00C440  2  60                   RTS
00C441  2               
00C441  2               ;__SENDINT__________________________________________________________________________________________________________________________
00C441  2               ;
00C441  2               ; SENSE INTERRUPT COMMAND
00C441  2               ;________________________________________________________________________________________________________________________________
00C441  2               ;
00C441  2               SENDINT:
00C441  2  A9 08                LDA     #$08            ; SENSE INTERRUPT COMMAND
00C443  2  20 E3 C3             JSR     PFDATA          ; SEND IT
00C446  2  20 5B C4             JSR     GFDATA          ; GET RESULTS
00C449  2  8D 29 05             STA     ST0             ; STORE THAT
00C44C  2  29 C0                AND     #$C0            ; MASK OFF INTERRUPT STATUS BITS
00C44E  2  C9 80                CMP     #$80            ; CHECK IF INVALID COMMAND
00C450  2  F0 08                BEQ     ENDSENDINT      ; YES, EXIT
00C452  2  20 5B C4             JSR     GFDATA          ; GET ANOTHER (STATUS CODE 1)
00C455  2  AD 29 05             LDA     ST0             ; GET FIRST ONE
00C458  2  29 C0                AND     #$C0            ; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
00C45A  2               ENDSENDINT:
00C45A  2  60                   RTS                     ; ANYTHING ELSE IS AN ERROR
00C45B  2               
00C45B  2               
00C45B  2               ;__GFDATA__________________________________________________________________________________________________________________________
00C45B  2               ;
00C45B  2               ; GET DATA FROM FLOPPY CONTROLLER
00C45B  2               ;
00C45B  2               ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
00C45B  2               ;	RQM  DIO
00C45B  2               ;	0	0	BUSY
00C45B  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
00C45B  2               ;	1	1	BYTE FOR READ BY HOST PENDING
00C45B  2               ;	0	1	BUSY
00C45B  2               ;
00C45B  2               ;________________________________________________________________________________________________________________________________
00C45B  2               ;
00C45B  2               GFDATA:
00C45B  2  AD 30 E0             LDA     FMSR            ; GET STATUS
00C45E  2  AA                   TAX                     ;
00C45F  2  29 80                AND     #%10000000      ; NOT READY, WAIT
00C461  2  F0 F8                BEQ     GFDATA          ;
00C463  2  8A                   TXA
00C464  2  29 40                AND     #%01000000      ; ANY DATA FOR US?
00C466  2  F0 03                BEQ     GFDATA1         ; NO, SKIP IT
00C468  2  AD 31 E0             LDA     FDATA           ; GET FDC DATA
00C46B  2               GFDATA1:
00C46B  2  60                   RTS
00C46C  2               
00C46C  1                       .INCLUDE "bios_diov3_ide.asm"
00C46C  2               ;__IDE DRIVERS___________________________________________________________________________________________________________________
00C46C  2               ;
00C46C  2               ; 	DOS/65 DISK DRIVERS FOR DIRECT ATTACHED DISK-IO V3 CARD
00C46C  2               ;
00C46C  2               ;	ENTRY POINTS:
00C46C  2               ;		IDE_SOFT_RESET   - CALLED DURING OS INIT
00C46C  2               ;		IDE_READ_SECTOR  - READ A SECTOR FROM DRIVE  ('U' POINTS TO DCB, X TO MEMORY)
00C46C  2               ;		IDE_WRITE_SECTOR - WRITE A SECTOR TO DRIVE   ('U' POINTS TO DCB, X TO MEMORY)
00C46C  2               ;               IDE_INITIALIZE   - DETECT AND INITIALIZE HARDWARE
00C46C  2               ;________________________________________________________________________________________________________________________________
00C46C  2               ;
00C46C  2               PPIDELO         = M6X0X_IOSPACE+$20; DATA PORT (LOW BYTE)
00C46C  2               PPIDEHI         = M6X0X_IOSPACE+$21; DATA PORT (HIGH BYTE)
00C46C  2               PPIDECNTRL      = M6X0X_IOSPACE+$22; IDE CONTROL
00C46C  2               PPIDEPPIC       = M6X0X_IOSPACE+$23; PPI CONTROL
00C46C  2               
00C46C  2               PPIDE_A0_LINE   = $01           ;DIRECT FROM 8255 TO IDE INTERFACE
00C46C  2               PPIDE_A1_LINE   = $02           ;DIRECT FROM 8255 TO IDE INTERFACE
00C46C  2               PPIDE_A2_LINE   = $04           ;DIRECT FROM 8255 TO IDE INTERFACE
00C46C  2               PPIDE_CS0_LINE  = $08           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00C46C  2               PPIDE_CS1_LINE  = $10           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00C46C  2               PPIDE_WR_LINE   = $20           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00C46C  2               PPIDE_RD_LINE   = $40           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00C46C  2               PPIDE_RST_LINE  = $80           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00C46C  2               
00C46C  2               PPIDE_DATA      = PPIDE_CS0_LINE
00C46C  2               PPIDE_ERR       = PPIDE_CS0_LINE + PPIDE_A0_LINE
00C46C  2               PPIDE_SEC_CNT   = PPIDE_CS0_LINE + PPIDE_A1_LINE
00C46C  2               PPIDE_LBALOW    = PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00C46C  2               PPIDE_LBAMID    = PPIDE_CS0_LINE + PPIDE_A2_LINE
00C46C  2               PPIDE_LBAHI     = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
00C46C  2               PPIDE_DEVICE    = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00C46C  2               PPIDE_COMMAND   = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00C46C  2               PPIDE_STATUS    = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00C46C  2               PPIDE_CONTROL   = PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00C46C  2               PPIDE_ASTATUS   = PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00C46C  2               
00C46C  2               
00C46C  2               ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
00C46C  2               PPIDE_CMD_RECAL = $10
00C46C  2               PPIDE_CMD_READ  = $20
00C46C  2               PPIDE_CMD_WRITE = $30
00C46C  2               PPIDE_CMD_INIT  = $91
00C46C  2               PPIDE_CMD_ID    = $EC
00C46C  2               PPIDE_CMD_SPINDOWN = $E0
00C46C  2               PPIDE_CMD_SPINUP = $E1
00C46C  2               
00C46C  2               
00C46C  2               PPRD_IDE_8255   = %10010010     ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
00C46C  2               PPWR_IDE_8255   = %10000000     ;ALL THREE PORTS OUTPUT
00C46C  2               
00C46C  2               
00C46C  2               
00C46C  2               
00C46C  2               ;__PPIDE_INIT_________________________________________________________________________________________
00C46C  2               ;
00C46C  2               ;  INIT AND DISPLAY IDE INFO
00C46C  2               ;____________________________________________________________________________________________________
00C46C  2               ;
00C46C  2               PPIDE_INIT:
00C46C  2  48 DA 5A A2          PRTS    "PPIDE :$"
00C470  2  00 BD 85 C4  
00C474  2  E8 C9 24 F0  
00C48D  2  20 00 C0             JSR     NEWLINE
00C490  2  20 23 C6             JSR     IDE_PPIDETECT   ; TEST FOR PPI HARDWARE
00C493  2  D0 35                BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
00C495  2               ;
00C495  2  48 DA 5A A2          PRTS    " IO=0x$"
00C499  2  00 BD AE C4  
00C49D  2  E8 C9 24 F0  
00C4B5  2  A9 E0                LDA     #>PPIDELO       ; GET BASE PORT
00C4B7  2  20 2B F9             JSR     PRINT_BYTE      ; PRINT BASE PORT
00C4BA  2  A9 20                LDA     #<PPIDELO       ; GET BASE PORT
00C4BC  2  20 2B F9             JSR     PRINT_BYTE      ; PRINT BASE PORT
00C4BF  2               ;
00C4BF  2  20 A8 C6             JSR     PPIDE_RESET     ; RESET THE BUS
00C4C2  2  20 58 C5             JSR     PPIDE_PROBE     ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
00C4C5  2  B0 03                BCS     IDE_ABORT
00C4C7  2  4C F3 C4             JMP     IDE_PRINT_INFO
00C4CA  2               IDE_ABORT:
00C4CA  2  48 DA 5A A2          PRTS    " NOT PRESENT$" ; NOT PRESENT
00C4CE  2  00 BD E3 C4  
00C4D2  2  E8 C9 24 F0  
00C4F0  2  4C 54 C5             JMP     IDE_INITA
00C4F3  2               IDE_PRINT_INFO:
00C4F3  2  20 00 C0             JSR     NEWLINE
00C4F6  2  48 DA 5A A2          PRTS    " PPIDE0: Blocks=$"
00C4FA  2  00 BD 0F C5  
00C4FE  2  E8 C9 24 F0  
00C520  2  A9 00                LDA     #$00
00C522  2  20 98 C5             JSR     IDE_READ_INFO   ; GET DRIVE INFO, ABORT IF ERROR
00C525  2  48 DA 5A A2          PRTS    " PPIDE1: Blocks=$"
00C529  2  00 BD 3E C5  
00C52D  2  E8 C9 24 F0  
00C54F  2  A9 01                LDA     #$01
00C551  2  20 98 C5             JSR     IDE_READ_INFO   ; GET DRIVE INFO, ABORT IF ERROR
00C554  2               IDE_INITA:
00C554  2  20 00 C0             JSR     NEWLINE
00C557  2  60                   RTS                     ; DONE
00C558  2               ;
00C558  2               ;__PPIDE_PROBE_______________________________________________________________________________________
00C558  2               ;
00C558  2               ;  PROBE FOR IDE HARDWARE
00C558  2               ;____________________________________________________________________________________________________
00C558  2               ;
00C558  2               PPIDE_PROBE:
00C558  2               ;
00C558  2               ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
00C558  2               ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
00C558  2               ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
00C558  2               ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
00C558  2               ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
00C558  2               ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
00C558  2               ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
00C558  2               ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
00C558  2               
00C558  2  A9 00                LDA     #$00
00C55A  2  8D 20 E0             STA     PPIDELO         ; PPI PORT A, DATALO
00C55D  2               
00C55D  2  20 D0 C6             JSR     IDE_WAIT_NOT_BUSY; WAIT FOR BUSY TO CLEAR
00C560  2  B0 34                BCS     PPIDE_PROBE_FAIL; IF TIMEOUT, REPORT NO IDE PRESENT
00C562  2  A9 0F                LDA     #PPIDE_STATUS   ; GET STATUS
00C564  2  20 C7 C7             JSR     IDE_READ
00C567  2  8A                   TXA
00C568  2  29 40                AND     #%01000000
00C56A  2  C9 00                CMP     #$00
00C56C  2  F0 28                BEQ     PPIDE_PROBE_FAIL; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
00C56E  2               
00C56E  2               ; CHECK SIGNATURE
00C56E  2  A9 0A                LDA     #PPIDE_SEC_CNT
00C570  2  20 C7 C7             JSR     IDE_READ
00C573  2  E0 01                CPX     #$01
00C575  2  D0 1F                BNE     PPIDE_PROBE_FAIL; IF not '01' THEN REPORT NO IDE PRESENT
00C577  2  A9 0B                LDA     #PPIDE_LBALOW
00C579  2  20 C7 C7             JSR     IDE_READ
00C57C  2  E0 01                CPX     #$01
00C57E  2  D0 16                BNE     PPIDE_PROBE_FAIL; IF not '01' THEN REPORT NO IDE PRESENT
00C580  2  A9 0C                LDA     #PPIDE_LBAMID
00C582  2  20 C7 C7             JSR     IDE_READ
00C585  2  E0 00                CPX     #$00
00C587  2  D0 0D                BNE     PPIDE_PROBE_FAIL; IF not '00' THEN REPORT NO IDE PRESENT
00C589  2  A9 0D                LDA     #PPIDE_LBAHI
00C58B  2  20 C7 C7             JSR     IDE_READ
00C58E  2  E0 00                CPX     #$00
00C590  2  D0 04                BNE     PPIDE_PROBE_FAIL; IF not '00' THEN REPORT NO IDE PRESENT
00C592  2  18                   CLC
00C593  2  4C 97 C5             JMP     PPIDE_PROBE_SUCCESS
00C596  2               PPIDE_PROBE_FAIL:
00C596  2  38                   SEC
00C597  2               PPIDE_PROBE_SUCCESS:
00C597  2  60                   RTS                     ; DONE, NOTE THAT A=0 AND Z IS SET
00C598  2               
00C598  2               
00C598  2               
00C598  2               ;*__IDE_READ_INFO___________________________________________________________________________________
00C598  2               ;*
00C598  2               ;*  READ IDE INFORMATION
00C598  2               ;*	CARRY SET ON ERROR
00C598  2               ;* 	A=MST/SLV
00C598  2               ;*____________________________________________________________________________________________________
00C598  2               IDE_READ_INFO:
00C598  2  48                   PHA
00C599  2               ; SET DRIVE BIT
00C599  2  29 01                AND     #$01            ; ONLY WANT THE 1 BIT (MST/SLV)
00C59B  2  0A                   ASL     a               ; SHIFT 4
00C59C  2  0A                   ASL     a               ;
00C59D  2  0A                   ASL     a               ;
00C59E  2  0A                   ASL     a               ;
00C59F  2  09 E0                ORA     #$E0            ; E0=MST  F0=SLV
00C5A1  2  AA                   TAX
00C5A2  2  A0 00                LDY     #$00
00C5A4  2  A9 0E                LDA     #PPIDE_DEVICE
00C5A6  2  20 E3 C7             JSR     IDE_WRITE
00C5A9  2               
00C5A9  2               
00C5A9  2  20 D0 C6             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
00C5AC  2  B0 49                BCS     IDE_READ_INFO_ABORT
00C5AE  2  A9 0F                LDA     #PPIDE_COMMAND  ;SELECT IDE REGISTER
00C5B0  2  A2 EC                LDX     #PPIDE_CMD_ID
00C5B2  2  20 E3 C7             JSR     IDE_WRITE       ;ASK THE DRIVE TO READ IT
00C5B5  2  20 F8 C6             JSR     IDE_WAIT_DRQ    ;WAIT UNTIL IT'S GOT THE DATA
00C5B8  2  B0 3D                BCS     IDE_READ_INFO_ABORT
00C5BA  2  20 28 C7             JSR     IDE_READ_BUFFER ; GRAB THE 256 WORDS FROM THE BUFFER
00C5BD  2  48 DA 5A A2          PRTS    "0x$"
00C5C1  2  00 BD D6 C5  
00C5C5  2  E8 C9 24 F0  
00C5D9  2  AD 7B 02             LDA     hstbuf+123
00C5DC  2  20 2B F9             JSR     PRINT_BYTE
00C5DF  2  AD 7A 02             LDA     hstbuf+122
00C5E2  2  20 2B F9             JSR     PRINT_BYTE
00C5E5  2  AD 79 02             LDA     hstbuf+121
00C5E8  2  20 2B F9             JSR     PRINT_BYTE
00C5EB  2  AD 78 02             LDA     hstbuf+120
00C5EE  2  20 2B F9             JSR     PRINT_BYTE
00C5F1  2  20 00 C0             JSR     NEWLINE
00C5F4  2  68                   PLA
00C5F5  2  18                   CLC
00C5F6  2  60                   RTS
00C5F7  2               
00C5F7  2               IDE_READ_INFO_ABORT:
00C5F7  2  48 DA 5A A2          PRTS    " NOT PRESENT$" ; NOT PRESENT
00C5FB  2  00 BD 10 C6  
00C5FF  2  E8 C9 24 F0  
00C61D  2  20 00 C0             JSR     NEWLINE
00C620  2  68                   PLA
00C621  2  38                   SEC
00C622  2  60                   RTS
00C623  2               
00C623  2               ;__IDE_PPIDETECT____________________________________________________________________________________
00C623  2               ;
00C623  2               ;  PROBE FOR PPI HARDWARE
00C623  2               ;____________________________________________________________________________________________________
00C623  2               ;
00C623  2               IDE_PPIDETECT:
00C623  2               ;
00C623  2               ; TEST FOR PPI EXISTENCE
00C623  2               ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
00C623  2               ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
00C623  2               ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
00C623  2               ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
00C623  2               ; INTERFERE WITH THE VALUE BEING READ.
00C623  2  20 07 C8             JSR     SET_PPI_WR
00C626  2               ;
00C626  2  A9 00                LDA     #$00            ; VALUE ZERO
00C628  2  8D 20 E0             STA     PPIDELO         ; PUSH VALUE TO PORT
00C62B  2  AD 20 E0             LDA     PPIDELO         ; GET PORT VALUE
00C62E  2  C9 00                CMP     #$00
00C630  2  60                   RTS                     ; AND RETURN
00C631  2               ;
00C631  2               
00C631  2               
00C631  2               ;*__IDE_READ_SECTOR___________________________________________________________________________________
00C631  2               ;*
00C631  2               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
00C631  2               ;*
00C631  2               ;*____________________________________________________________________________________________________
00C631  2               IDE_READ_SECTOR:
00C631  2  AD 12 05             LDA     debsehd         ; STORE CURRENT PARMS
00C634  2  CD 15 05             CMP     Cdebsehd        ;
00C637  2  D0 13                BNE     IDE_READ_SECTOR_DIRTY
00C639  2  AD 11 05             LDA     debcylm         ;
00C63C  2  CD 14 05             CMP     Cdebcylm        ;
00C63F  2  D0 0B                BNE     IDE_READ_SECTOR_DIRTY
00C641  2  AD 10 05             LDA     debcyll         ;
00C644  2  CD 13 05             CMP     Cdebcyll        ;
00C647  2  D0 03                BNE     IDE_READ_SECTOR_DIRTY
00C649  2  A9 00                LDA     #$00            ; ZERO = 1 ON RETURN = OPERATION OK
00C64B  2  60                   RTS
00C64C  2               
00C64C  2               IDE_READ_SECTOR_DIRTY:
00C64C  2  20 D0 C6             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
00C64F  2  B0 27                BCS     IDE_READ_SECTOR_DIRTY_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
00C651  2               IDE_READ_SECTOR_DIRTY1:
00C651  2  20 94 C7             JSR     IDE_SETUP_LBA   ;TELL IT WHICH SECTOR WE WANT
00C654  2  A9 0F                LDA     #PPIDE_COMMAND  ;SELECT IDE REGISTER
00C656  2  A2 20                LDX     #PPIDE_CMD_READ
00C658  2  20 E3 C7             JSR     IDE_WRITE       ;ASK THE DRIVE TO READ IT
00C65B  2  20 F8 C6             JSR     IDE_WAIT_DRQ    ;WAIT UNTIL IT'S GOT THE DATA
00C65E  2  B0 18                BCS     IDE_READ_SECTOR_DIRTY_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
00C660  2  20 28 C7             JSR     IDE_READ_BUFFER ; GRAB THE 256 WORDS FROM THE BUFFER
00C663  2  AD 12 05             LDA     debsehd         ; STORE CURRENT PARMS
00C666  2  8D 15 05             STA     Cdebsehd        ;
00C669  2  AD 10 05             LDA     debcyll         ;
00C66C  2  8D 13 05             STA     Cdebcyll        ;
00C66F  2  AD 11 05             LDA     debcylm         ;
00C672  2  8D 14 05             STA     Cdebcylm        ;
00C675  2               
00C675  2  A9 00                LDA     #$00            ; ZERO = 1 ON RETURN = OPERATION OK
00C677  2  60                   RTS
00C678  2               IDE_READ_SECTOR_DIRTY_ERROR:
00C678  2  A9 FF                LDA     #$FF            ; ZERO = 1 ON RETURN = OPERATION OK
00C67A  2  60                   RTS
00C67B  2               
00C67B  2               ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
00C67B  2               ;*
00C67B  2               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
00C67B  2               ;*
00C67B  2               ;*____________________________________________________________________________________________________
00C67B  2               IDE_WRITE_SECTOR:
00C67B  2  20 D0 C6             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
00C67E  2  B0 25                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
00C680  2               IDE_WRITE_SECTOR_RAW:
00C680  2  20 94 C7             JSR     IDE_SETUP_LBA   ;TELL IT WHICH SECTOR WE WANT
00C683  2  A9 0F                LDA     #PPIDE_COMMAND
00C685  2  A2 30                LDX     #PPIDE_CMD_WRITE
00C687  2  20 E3 C7             JSR     IDE_WRITE       ;TELL DRIVE TO WRITE A SECTOR
00C68A  2  20 F8 C6             JSR     IDE_WAIT_DRQ    ;WAIT UNIT IT WANTS THE DATA
00C68D  2  B0 16                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
00C68F  2  20 5D C7             JSR     IDE_WRITE_BUFFER;GIVE THE DATA TO THE DRIVE
00C692  2  20 D0 C6             JSR     IDE_WAIT_NOT_BUSY;WAIT UNTIL THE WRITE IS COMPLETE
00C695  2  B0 0E                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
00C697  2  A9 FF                LDA     #$FF            ; STORE CURRENT PARMS
00C699  2  8D 15 05             STA     Cdebsehd        ;
00C69C  2  8D 13 05             STA     Cdebcyll        ;
00C69F  2  8D 14 05             STA     Cdebcylm        ;
00C6A2  2               
00C6A2  2  A9 00                LDA     #$00            ; ZERO ON RETURN = OPERATION OK
00C6A4  2  60                   RTS
00C6A5  2               IDE_WRITE_SECTOR_ERROR:
00C6A5  2  A9 FF                LDA     #$FF            ; 1 ON RETURN = OPERATION FAIL
00C6A7  2  60                   RTS
00C6A8  2               
00C6A8  2               ;*__PPIDE_RESET____________________________________________________________________________________
00C6A8  2               ;*
00C6A8  2               ;*  SOFT RESET IDE CHANNEL
00C6A8  2               ;*
00C6A8  2               ;*____________________________________________________________________________________________________
00C6A8  2               PPIDE_RESET:
00C6A8  2  A9 00                LDA     #$00
00C6AA  2  8D 12 05             STA     debsehd
00C6AD  2  8D 10 05             STA     debcyll
00C6B0  2  8D 11 05             STA     debcylm
00C6B3  2  A9 FF                LDA     #$FF            ;
00C6B5  2  8D 15 05             STA     Cdebsehd        ;
00C6B8  2  8D 13 05             STA     Cdebcyll        ;
00C6BB  2  8D 14 05             STA     Cdebcylm        ;
00C6BE  2               
00C6BE  2  A9 80                LDA     #PPIDE_RST_LINE
00C6C0  2  8D 22 E0             STA     PPIDECNTRL      ; ASSERT RST LINE ON IDE INTERFACE
00C6C3  2  A2 00                LDX     #$00
00C6C5  2               RST_DLY:
00C6C5  2  CA                   DEX
00C6C6  2  E0 00                CPX     #$00
00C6C8  2  D0 FB                BNE     RST_DLY
00C6CA  2  A9 00                LDA     #$00
00C6CC  2  8D 22 E0             STA     PPIDECNTRL      ; DEASSERT RST LINE ON IDE INTERFACE
00C6CF  2  60                   RTS
00C6D0  2               
00C6D0  2               
00C6D0  2               ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
00C6D0  2               ;*
00C6D0  2               ;*  WAIT FOR IDE CHANNEL TO BECOME READY
00C6D0  2               ;*
00C6D0  2               ;*____________________________________________________________________________________________________
00C6D0  2               IDE_WAIT_NOT_BUSY:
00C6D0  2  DA                   PHX
00C6D1  2  5A                   PHY
00C6D2  2  48                   PHA
00C6D3  2  A9 00                LDA     #$00
00C6D5  2  8D 2F 05             STA     PPIDETIMEOUT
00C6D8  2  8D 30 05             STA     PPIDETIMEOUT+1
00C6DB  2               IDE_WAIT_NOT_BUSY1:
00C6DB  2  A9 0F                LDA     #PPIDE_STATUS   ;WAIT FOR RDY BIT TO BE SET
00C6DD  2  20 C7 C7             JSR     IDE_READ
00C6E0  2  8A                   TXA
00C6E1  2  29 80                AND     #$80
00C6E3  2  F0 0E                BEQ     IDE_WAIT_NOT_BUSY2
00C6E5  2  EE 2F 05             INC     PPIDETIMEOUT
00C6E8  2  D0 F1                BNE     IDE_WAIT_NOT_BUSY1
00C6EA  2  EE 30 05             INC     PPIDETIMEOUT+1
00C6ED  2  D0 EC                BNE     IDE_WAIT_NOT_BUSY1
00C6EF  2  38                   SEC
00C6F0  2  4C F4 C6             JMP     IDE_WAIT_NOT_BUSY3
00C6F3  2               IDE_WAIT_NOT_BUSY2:
00C6F3  2  18                   CLC
00C6F4  2               IDE_WAIT_NOT_BUSY3:
00C6F4  2  68                   PLA
00C6F5  2  7A                   PLY
00C6F6  2  FA                   PLX
00C6F7  2  60                   RTS
00C6F8  2               
00C6F8  2               ;*__IDE_WAIT_DRQ______________________________________________________________________________________
00C6F8  2               ;*
00C6F8  2               ;*	WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
00C6F8  2               ;*
00C6F8  2               ;*____________________________________________________________________________________________________
00C6F8  2               IDE_WAIT_DRQ:
00C6F8  2  DA                   PHX
00C6F9  2  5A                   PHY
00C6FA  2  48                   PHA
00C6FB  2  A9 00                LDA     #$00
00C6FD  2  8D 2F 05             STA     PPIDETIMEOUT
00C700  2  8D 30 05             STA     PPIDETIMEOUT+1
00C703  2               IDE_WAIT_DRQ1:
00C703  2  A9 0F                LDA     #PPIDE_STATUS   ;WAIT FOR DRQ BIT TO BE SET
00C705  2  20 C7 C7             JSR     IDE_READ
00C708  2  8A                   TXA
00C709  2  29 88                AND     #%10001000      ; MASK OFF BUSY(7) AND DRQ(3)
00C70B  2  C9 08                CMP     #%00001000      ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
00C70D  2  F0 14                BEQ     IDE_WAIT_DRQ2
00C70F  2  29 01                AND     #%00000001      ; IS ERROR?
00C711  2  C9 01                CMP     #%00000001      ;
00C713  2  F0 0A                BEQ     IDE_WAIT_DRQE
00C715  2  EE 2F 05             INC     PPIDETIMEOUT
00C718  2  D0 E9                BNE     IDE_WAIT_DRQ1
00C71A  2  EE 30 05             INC     PPIDETIMEOUT+1
00C71D  2  D0 E4                BNE     IDE_WAIT_DRQ1
00C71F  2               IDE_WAIT_DRQE:
00C71F  2  38                   SEC
00C720  2  4C 24 C7             JMP     IDE_WAIT_DRQ3
00C723  2               IDE_WAIT_DRQ2:
00C723  2  18                   CLC
00C724  2               IDE_WAIT_DRQ3:
00C724  2  68                   PLA
00C725  2  7A                   PLY
00C726  2  FA                   PLX
00C727  2  60                   RTS
00C728  2               
00C728  2               
00C728  2               
00C728  2               ;*__IDE_READ_BUFFER___________________________________________________________________________________
00C728  2               ;*
00C728  2               ;*  READ IDE BUFFER LITTLE ENDIAN
00C728  2               ;*
00C728  2               ;*____________________________________________________________________________________________________
00C728  2               IDE_READ_BUFFER:
00C728  2  A2 00                LDX     #$00            ; INDEX
00C72A  2               IDEBUFRD:
00C72A  2  8E 33 05             STX     PPIDEINDEX
00C72D  2  A9 08                LDA     #PPIDE_DATA
00C72F  2  20 C7 C7             JSR     IDE_READ
00C732  2  8A                   TXA
00C733  2  AE 33 05             LDX     PPIDEINDEX
00C736  2  9D 00 02             STA     hstbuf,X        ;
00C739  2  E8                   INX                     ;
00C73A  2  98                   TYA                     ; THEN HIGH BYTE OF WORD
00C73B  2  9D 00 02             STA     hstbuf,X        ;
00C73E  2  E8                   INX
00C73F  2  E0 00                CPX     #$00            ;
00C741  2  D0 E7                BNE     IDEBUFRD        ;
00C743  2               IDEBUFRD1:
00C743  2  8E 33 05             STX     PPIDEINDEX
00C746  2  A9 08                LDA     #PPIDE_DATA
00C748  2  20 C7 C7             JSR     IDE_READ
00C74B  2  8A                   TXA
00C74C  2  AE 33 05             LDX     PPIDEINDEX
00C74F  2  9D 00 03             STA     hstbuf+256,X    ;
00C752  2  E8                   INX                     ;
00C753  2  98                   TYA                     ; THEN HIGH BYTE OF WORD
00C754  2  9D 00 03             STA     hstbuf+256,X    ;
00C757  2  E8                   INX                     ;
00C758  2  E0 00                CPX     #$00            ;
00C75A  2  D0 E7                BNE     IDEBUFRD1       ;
00C75C  2  60                   RTS                     ;
00C75D  2               
00C75D  2               ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
00C75D  2               ;*
00C75D  2               ;*  WRITE IDE BUFFER LITTLE ENDIAN
00C75D  2               ;*
00C75D  2               ;*____________________________________________________________________________________________________
00C75D  2               IDE_WRITE_BUFFER:
00C75D  2  A2 00                LDX     #$00            ; INDEX
00C75F  2               IDEBUFWT:
00C75F  2  8E 33 05             STX     PPIDEINDEX
00C762  2  BD 01 02             LDA     hstbuf+1,X      ; SECTORS ARE BIG ENDIAN
00C765  2  A8                   TAY                     ;
00C766  2  BD 00 02             LDA     hstbuf,X        ; SECTORS ARE BIG ENDIAN
00C769  2  AA                   TAX
00C76A  2  A9 08                LDA     #PPIDE_DATA
00C76C  2  20 E3 C7             JSR     IDE_WRITE
00C76F  2  AE 33 05             LDX     PPIDEINDEX
00C772  2  E8                   INX                     ;
00C773  2  E8                   INX                     ;
00C774  2  E0 00                CPX     #$00            ;
00C776  2  D0 E7                BNE     IDEBUFWT        ;
00C778  2  A2 00                LDX     #$00            ; INDEX
00C77A  2               IDEBUFWT1:
00C77A  2  8E 33 05             STX     PPIDEINDEX
00C77D  2  BD 01 03             LDA     hstbuf+257,X    ; SECTORS ARE BIG ENDIAN
00C780  2  A8                   TAY
00C781  2  BD 00 03             LDA     hstbuf+256,X    ; SECTORS ARE BIG ENDIAN
00C784  2  AA                   TAX
00C785  2  A9 08                LDA     #PPIDE_DATA
00C787  2  20 E3 C7             JSR     IDE_WRITE
00C78A  2  AE 33 05             LDX     PPIDEINDEX
00C78D  2  E8                   INX                     ;
00C78E  2  E8                   INX                     ;
00C78F  2  E0 00                CPX     #$00            ;
00C791  2  D0 E7                BNE     IDEBUFWT1       ;
00C793  2  60                   RTS                     ;
00C794  2               
00C794  2               ;*__IDE_SETUP_LBA_____________________________________________________________________________________
00C794  2               ;*
00C794  2               ;*  SETUP LBA DATA
00C794  2               ;*  A= DRIVE DEVICE
00C794  2               ;*____________________________________________________________________________________________________
00C794  2               IDE_SETUP_LBA:
00C794  2  AD 34 05             LDA     CURRENT_IDE_DRIVE
00C797  2  29 01                AND     #$01            ; only want drive cfg
00C799  2  0A                   ASL     a               ; SHIFT 4
00C79A  2  0A                   ASL     a               ;
00C79B  2  0A                   ASL     a               ;
00C79C  2  0A                   ASL     a               ;
00C79D  2  09 E0                ORA     #$E0            ; E0=MST  F0=SLV
00C79F  2  AA                   TAX
00C7A0  2  A0 00                LDY     #$00
00C7A2  2  A9 0E                LDA     #PPIDE_DEVICE
00C7A4  2  20 E3 C7             JSR     IDE_WRITE
00C7A7  2               
00C7A7  2  AE 11 05             LDX     debcylm
00C7AA  2  A9 0D                LDA     #PPIDE_LBAHI
00C7AC  2  20 E3 C7             JSR     IDE_WRITE
00C7AF  2               
00C7AF  2  AE 10 05             LDX     debcyll         ;
00C7B2  2  A9 0C                LDA     #PPIDE_LBAMID
00C7B4  2  20 E3 C7             JSR     IDE_WRITE
00C7B7  2               
00C7B7  2  AE 12 05             LDX     debsehd         ;
00C7BA  2  A9 0B                LDA     #PPIDE_LBALOW
00C7BC  2  20 E3 C7             JSR     IDE_WRITE
00C7BF  2               
00C7BF  2  A2 01                LDX     #$01
00C7C1  2  A9 0A                LDA     #PPIDE_SEC_CNT
00C7C3  2  20 E3 C7             JSR     IDE_WRITE
00C7C6  2               
00C7C6  2  60                   RTS
00C7C7  2               
00C7C7  2               
00C7C7  2               ;-------------------------------------------------------------------------------
00C7C7  2               
00C7C7  2               ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
00C7C7  2               ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
00C7C7  2               ; PROGRAM WOULD NOT CALL TO THESE.
00C7C7  2               
00C7C7  2               ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
00C7C7  2               ;INPUT A = IDE REGSITER ADDRESS
00C7C7  2               ;OUTPUT X = LOWER BYTE READ FROM IDE DRIVE
00C7C7  2               ;OUTPUT Y = UPPER BYTE READ FROM IDE DRIVE
00C7C7  2               
00C7C7  2               IDE_READ:
00C7C7  2  20 FF C7             JSR     SET_PPI_RD      ; SETUP FOR A READ CYCLE
00C7CA  2  8D 22 E0             STA     PPIDECNTRL      ;DRIVE ADDRESS ONTO CONTROL LINES
00C7CD  2  09 40                ORA     #PPIDE_RD_LINE  ; ASSERT RD PIN
00C7CF  2  8D 22 E0             STA     PPIDECNTRL
00C7D2  2  AE 20 E0             LDX     PPIDELO         ; READ LOWER BYTE
00C7D5  2  AC 21 E0             LDY     PPIDEHI         ; READ UPPER BYTE
00C7D8  2  49 40                EOR     #PPIDE_RD_LINE  ; DE-ASSERT RD SIGNAL
00C7DA  2  8D 22 E0             STA     PPIDECNTRL
00C7DD  2  A9 00                LDA     #$00
00C7DF  2  8D 22 E0             STA     PPIDECNTRL      ;DEASSERT ALL CONTROL PINS
00C7E2  2  60                   RTS
00C7E3  2               
00C7E3  2               
00C7E3  2               
00C7E3  2               
00C7E3  2               ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
00C7E3  2               ;INPUT A = IDE REGISTER ADDRESS
00C7E3  2               ;INPUT REGISTER X = LSB TO WRITE
00C7E3  2               ;INPUT REGISTER Y = MSB TO WRITE
00C7E3  2               ;
00C7E3  2               
00C7E3  2               
00C7E3  2               IDE_WRITE:
00C7E3  2  20 07 C8             JSR     SET_PPI_WR      ; SETUP FOR A WRITE CYCLE
00C7E6  2               
00C7E6  2  8E 20 E0             STX     PPIDELO         ; WRITE LOWER BYTE
00C7E9  2  8C 21 E0             STY     PPIDEHI         ; WRITE UPPER BYTE
00C7EC  2               
00C7EC  2  8D 22 E0             STA     PPIDECNTRL      ;DRIVE ADDRESS ONTO CONTROL LINES
00C7EF  2               
00C7EF  2  09 20                ORA     #PPIDE_WR_LINE  ; ASSERT WRITE PIN
00C7F1  2  8D 22 E0             STA     PPIDECNTRL
00C7F4  2               
00C7F4  2  49 20                EOR     #PPIDE_WR_LINE  ; DE ASSERT WR PIN
00C7F6  2  8D 22 E0             STA     PPIDECNTRL
00C7F9  2               
00C7F9  2  A9 00                LDA     #$00
00C7FB  2  8D 22 E0             STA     PPIDECNTRL      ;DEASSERT ALL CONTROL PINS
00C7FE  2  60                   RTS
00C7FF  2               
00C7FF  2               
00C7FF  2               ;-----------------------------------------------------------------------------------
00C7FF  2               ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
00C7FF  2               ;
00C7FF  2               ;------------------------------------------------------------------------------------
00C7FF  2               
00C7FF  2               SET_PPI_RD:
00C7FF  2  48                   PHA
00C800  2  A9 92                LDA     #PPRD_IDE_8255
00C802  2  8D 23 E0             STA     PPIDEPPIC       ;CONFIG 8255 CHIP, READ MODE
00C805  2  68                   PLA
00C806  2  60                   RTS
00C807  2               
00C807  2               SET_PPI_WR:
00C807  2  48                   PHA
00C808  2  A9 80                LDA     #PPWR_IDE_8255
00C80A  2  8D 23 E0             STA     PPIDEPPIC       ;CONFIG 8255 CHIP, WRITE MODE
00C80D  2  68                   PLA
00C80E  2  60                   RTS
00C80F  2               
00C80F  1                       .INCLUDE "bios_clrdir.asm"
00C80F  2               ;__CLRDIR_______________________________________________________
00C80F  2               ;
00C80F  2               ; Clear Device Tracks
00C80F  2               ; USAGE:
00C80F  2               ;
00C80F  2               ; CLRDIR  D TTTTTT NN
00C80F  2               ; D     = Device (I)DE Primary (J)IDE Secondary or (S)D
00C80F  2               ; TTTTTT= Starting Track
00C80F  2               ; NN    = Number of Tracks
00C80F  2               ;______________________________________________________________
00C80F  2               CLRDIR:
00C80F  2               
00C80F  2  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00C811  2  85 3B                STA     WORKPTR         ;
00C813  2  A9 04                LDA     #>INBUFFER      ;
00C815  2  85 3C                STA     WORKPTR +1      ;
00C817  2               
00C817  2  A9 06                LDA     #6
00C819  2  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "CLRDIR"
00C81C  2               
00C81C  2  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00C81F  2  A2 00                LDX     #$00            ;
00C821  2               
00C821  2  A1 3B                LDA     (WORKPTR,X)     ; GET NEXT BYTE FROM BUFFER
00C823  2  C9 49                CMP     #'I'            ; IDE Selected
00C825  2  D0 0B                BNE     :+
00C827  2  A9 00                LDA     #$00
00C829  2  8D 16 05             STA     sekdsk
00C82C  2  8D 34 05             STA     CURRENT_IDE_DRIVE
00C82F  2  4C 52 C8             JMP     clrdir_gettrk
00C832  2               :
00C832  2  C9 4A                CMP     #'J'            ; IDE SECONDARY Selected
00C834  2  D0 0D                BNE     :+
00C836  2  A9 00                LDA     #$00
00C838  2  8D 16 05             STA     sekdsk
00C83B  2  A9 01                LDA     #$01
00C83D  2  8D 34 05             STA     CURRENT_IDE_DRIVE
00C840  2  4C 52 C8             JMP     clrdir_gettrk
00C843  2               :
00C843  2  C9 53                CMP     #'S'            ; SD  Selected
00C845  2  D0 08                BNE     :+
00C847  2  A9 01                LDA     #$01
00C849  2  8D 16 05             STA     sekdsk
00C84C  2  4C 52 C8             JMP     clrdir_gettrk
00C84F  2               :
00C84F  2  4C 93 C8             JMP     clrdir_err1
00C852  2               clrdir_gettrk:
00C852  2  20 95 F8             JSR     INCWORKPTR      ;
00C855  2  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00C858  2  20 09 F9             JSR     HEXIN
00C85B  2  B0 41                BCS     clrdir_err
00C85D  2  2A                   ROL     A
00C85E  2  2A                   ROL     A
00C85F  2  2A                   ROL     A
00C860  2  2A                   ROL     A
00C861  2  8D 11 05             STA     debcylm
00C864  2  20 95 F8             JSR     INCWORKPTR      ;
00C867  2  20 09 F9             JSR     HEXIN
00C86A  2  B0 32                BCS     clrdir_err
00C86C  2  0D 11 05             ORA     debcylm
00C86F  2  8D 11 05             STA     debcylm
00C872  2  20 95 F8             JSR     INCWORKPTR      ;
00C875  2  20 C8 F8             JSR     GETNUMBER
00C878  2  B0 24                BCS     clrdir_err
00C87A  2  A5 40                LDA     TEMPWORD+1
00C87C  2  8D 10 05             STA     debcyll
00C87F  2  A5 3F                LDA     TEMPWORD
00C881  2  8D 12 05             STA     debsehd
00C884  2  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00C887  2               ;       get number of tracks to process
00C887  2  20 C8 F8             JSR     GETNUMBER
00C88A  2  B0 12                BCS     clrdir_err
00C88C  2  A5 3F                LDA     TEMPWORD
00C88E  2  85 4E                STA     BYTECT
00C890  2  4C A1 C8             JMP     clrdir_CLRBUF
00C893  2               clrdir_err1:
00C893  2  A9 4E                LDA     #<ERROR         ; LOAD LOW BYTE OF ERROR STRING
00C895  2  85 4F                STA     STRPTR          ; STORE IN POINTER LOW BYTE
00C897  2  A9 FB                LDA     #>ERROR         ; LOAD HOGH BYTE OF ERROR STRING
00C899  2  85 50                STA     STRPTR +1       ; STORE IN POINTER HIGH BYTE
00C89B  2  4C 46 F9             JMP     OUTSTR          ; OUTPUT THE STRING
00C89E  2               clrdir_err:
00C89E  2  4C BD F8             JMP     INVALID_NUMBER_ERROR
00C8A1  2               clrdir_CLRBUF:
00C8A1  2               ;       clear buffer
00C8A1  2  A9 E5                LDA     #$e5
00C8A3  2  A2 00                LDX     #$00
00C8A5  2               :
00C8A5  2  9D 00 02             STA     $200,X
00C8A8  2  9D 00 03             STA     $300,X
00C8AB  2  E8                   INX
00C8AC  2  E0 00                CPX     #00
00C8AE  2  D0 F5                BNE     :-
00C8B0  2               
00C8B0  2               clrdir_Loopl:
00C8B0  2  AD 10 05             LDA     debcyll
00C8B3  2  20 2B F9             JSR     PRINT_BYTE
00C8B6  2  A9 2E                LDA     #'.'
00C8B8  2  20 26 FA             JSR     IOF_OUTCH
00C8BB  2               
00C8BB  2               clrdir_Loop:
00C8BB  2  AD 16 05             LDA     sekdsk
00C8BE  2  C9 00                CMP     #$00
00C8C0  2  F0 06                BEQ     :+
00C8C2  2  20 D2 C0             JSR     PPP_WRITE_SECTOR
00C8C5  2  4C CB C8             JMP     :++
00C8C8  2               :
00C8C8  2  20 7B C6             JSR     IDE_WRITE_SECTOR
00C8CB  2               :
00C8CB  2  EE 12 05             INC     debsehd
00C8CE  2  AD 12 05             LDA     debsehd
00C8D1  2  C9 00                CMP     #$00
00C8D3  2  D0 E6                BNE     clrdir_Loop
00C8D5  2  EE 10 05             INC     debcyll
00C8D8  2  C6 4E                DEC     BYTECT
00C8DA  2  A5 4E                LDA     BYTECT
00C8DC  2  C9 00                CMP     #$00
00C8DE  2  F0 03                BEQ     clrdir_EXIT
00C8E0  2  4C B0 C8             JMP     clrdir_Loopl
00C8E3  2               clrdir_EXIT:
00C8E3  2  A9 0D                LDA     #$0d
00C8E5  2  20 26 FA             JSR     IOF_OUTCH
00C8E8  2  A9 0A                LDA     #$0a
00C8EA  2  20 26 FA             JSR     IOF_OUTCH
00C8ED  2  60                   RTS
00C8EE  2               
00C8EE  1               
00C8EE  1               
00C8EE  1                       .SEGMENT "TROM"
00C8EE  1                       .ORG    $F000
00F000  1                       .INCLUDE "miniassembler.asm"
00F000  2               ;*
00F000  2               ;* ASSEMBLER/DISSASSEMBLER
00F000  2               ;*
00F000  2               ;* Based on original source code by Jim Butterfield
00F000  2               ;*
00F000  2               ;* Mr. Butterfield inspired many of us with his work on the commodore series of computers.
00F000  2               ;* May he rest in peace. (1936-2007)
00F000  2               ;*
00F000  2               
00F000  2               ;__DISASSEMBLE_________________________________________________
00F000  2               ;
00F000  2               ; Disassemble assembly lines to screen
00F000  2               ; USAGE:
00F000  2               ;
00F000  2               ; DISSASSEMBLE XXXX
00F000  2               ;______________________________________________________________
00F000  2               DISASSEMBLE:
00F000  2               
00F000  2  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00F002  2  85 3B                STA     WORKPTR         ;
00F004  2  A9 04                LDA     #>INBUFFER      ;
00F006  2  85 3C                STA     WORKPTR +1      ;
00F008  2               
00F008  2  A9 0B                LDA     #11
00F00A  2  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "DISASSEMBLE"
00F00D  2               
00F00D  2  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00F010  2  20 C8 F8             JSR     GETNUMBER       ; GET THE STARTING ADDRESS
00F013  2  B0 45                BCS     DISASSEMBLE_ERROR; IF NOT A NUMBER, REPORT ERROR
00F015  2  A5 3F                LDA     TEMPWORD
00F017  2  85 C1                STA     tmp0
00F019  2  A5 40                LDA     TEMPWORD+1
00F01B  2  85 C2                STA     tmp0+1
00F01D  2               diss:
00F01D  2  A9 0F                LDA     #$0f
00F01F  2  85 45                STA     TEMPBYTE
00F021  2               dislp:
00F021  2  20 7F F0             JSR     diss1
00F024  2  20 E2 F0             JSR     pcadj
00F027  2  85 C1                STA     tmp0
00F029  2  84 C2                STY     tmp0+1
00F02B  2  C6 45                DEC     TEMPBYTE
00F02D  2  D0 F2                BNE     dislp
00F02F  2               
00F02F  2               
00F02F  2  A9 45                LDA     #<DISSASSEMBLE_TEXT; LOAD LOW BYTE OF PROMPT STRING
00F031  2  85 4F                STA     STRPTR          ; STORE IN POINTER LOW BYTE
00F033  2  A9 F0                LDA     #>DISSASSEMBLE_TEXT; LOAD HOGH BYTE OF PROMPR STRING
00F035  2  85 50                STA     STRPTR +1       ; STORE IN POINTER HIGH BYTE
00F037  2  20 46 F9             JSR     OUTSTR          ; OUTPUT THE STRING
00F03A  2               
00F03A  2  20 19 FA             JSR     IOF_CONINW
00F03D  2  C9 59                CMP     #'Y'
00F03F  2  D0 03                BNE     dissexit
00F041  2  4C 1D F0             JMP     diss
00F044  2               dissexit:
00F044  2  60                   RTS
00F045  2               DISSASSEMBLE_TEXT:
00F045  2  0D 0A                .BYTE   $0d,$0a
00F047  2  43 4F 4E 54          .BYTE   "CONTINUE? (Y/N) "
00F04B  2  49 4E 55 45  
00F04F  2  3F 20 28 59  
00F057  2  0D 0A 00             .BYTE   $0d,$0a,$00
00F05A  2               
00F05A  2               DISASSEMBLE_ERROR:
00F05A  2  4C BD F8             JMP     INVALID_NUMBER_ERROR
00F05D  2               ENTER_BYTE:
00F05D  2  AA                   TAX                     ; SAVE A REGISTER
00F05E  2  4A                   LSR     A               ; SHIFT HIGH NIBBLE TO LOW NIBBLE
00F05F  2  4A                   LSR     A               ;
00F060  2  4A                   LSR     A               ;
00F061  2  4A                   LSR     A               ;
00F062  2  18                   CLC                     ; CLEAR CARRY
00F063  2  20 6A F0             JSR     ENTER_DIGIT     ; PRINT LOW NIBBLE
00F066  2  8A                   TXA                     ; RESTORE ACCUMULATOR
00F067  2  4C 6A F0             JMP     ENTER_DIGIT     ; PRINT LOW NIBBLE
00F06A  2               ENTER_DIGIT:
00F06A  2  29 0F                AND     #$0F            ; STRIP OFF HIGH NIBBLE
00F06C  2  09 30                ORA     #$30            ; ADD $30 TO PRODUCE ASCII
00F06E  2  C9 3A                CMP     #$3A            ; IS GREATER THAN 9
00F070  2  30 03                BMI     ENTER_DIGIT_OUT ; NO, SKIP ADD
00F072  2  18                   CLC                     ; CLEAR CARRY
00F073  2  69 07                ADC     #$07            ; ADD ON FOR LETTER VALUES
00F075  2               ENTER_DIGIT_OUT:                ;
00F075  2  48                   PHA
00F076  2  20 26 FA             JSR     IOF_OUTCH       ; PRINT OUT CHAR
00F079  2  68                   PLA
00F07A  2  85 3B                STA     WORKPTR
00F07C  2  4C 95 F8             JMP     INCWORKPTR
00F07F  2               
00F07F  2               
00F07F  2               
00F07F  2               
00F07F  2               ;__diss1_______________________________________________________
00F07F  2               ;
00F07F  2               ; Disassemble 1 assembly line to screen
00F07F  2               ; Parms:
00F07F  2               ; tmp0 (WORD) Word Pointer to begin disassembly
00F07F  2               ;______________________________________________________________
00F07F  2               diss1:
00F07F  2  20 70 F1             JSR     crlf
00F082  2  A9 2E                LDA     #'.'
00F084  2  20 26 FA             JSR     IOF_OUTCH
00F087  2  20 6C F1             JSR     space
00F08A  2               diss1a:
00F08A  2  20 E9 F2             JSR     PRINT_WORD
00F08D  2  20 6C F1             JSR     space
00F090  2  A2 00                LDX     #0
00F092  2  A1 C1                LDA     (tmp0,x)
00F094  2  20 F1 F0             JSR     instxx
00F097  2  48                   PHA
00F098  2  20 37 F1             JSR     disvv
00F09B  2  68                   PLA
00F09C  2  20 4D F1             JSR     propxx
00F09F  2  A2 06                LDX     #$06
00F0A1  2               pradr1:
00F0A1  2  E0 03                CPX     #$03
00F0A3  2  D0 12                BNE     pradr3
00F0A5  2  A4 1F                LDY     length
00F0A7  2  F0 0E                BEQ     pradr3
00F0A9  2               pradr2:
00F0A9  2  A5 2A                LDA     acmd
00F0AB  2  C9 E8                CMP     #$e8
00F0AD  2  B1 C1                LDA     (tmp0),y
00F0AF  2  B0 1C                BCS     reladr
00F0B1  2  20 DA F0             JSR     prbyte
00F0B4  2  88                   DEY
00F0B5  2  D0 F2                BNE     pradr2
00F0B7  2               pradr3:
00F0B7  2  06 2A                ASL     acmd
00F0B9  2  90 0E                BCC     pradr4
00F0BB  2  BD B5 F3             LDA     char1-1,x
00F0BE  2  20 26 F3             JSR     chrout
00F0C1  2  BD BB F3             LDA     char2-1,x
00F0C4  2  F0 03                BEQ     pradr4
00F0C6  2  20 26 F3             JSR     chrout
00F0C9  2               pradr4:
00F0C9  2  CA                   DEX
00F0CA  2  D0 D5                BNE     pradr1
00F0CC  2  60                   RTS
00F0CD  2               ; ** print rel address **
00F0CD  2               reladr:
00F0CD  2  20 E5 F0             JSR     pcadj3
00F0D0  2  AA                   TAX
00F0D1  2  E8                   INX
00F0D2  2  D0 01                BNE     prntyx
00F0D4  2  C8                   INY
00F0D5  2               ; ** print word address **
00F0D5  2               prntyx:
00F0D5  2  98                   TYA
00F0D6  2  20 DA F0             JSR     prbyte
00F0D9  2  8A                   TXA
00F0DA  2               ; ** print Byte **
00F0DA  2               prbyte:
00F0DA  2  86 1C                STX     savx
00F0DC  2  20 2B F9             JSR     PRINT_BYTE
00F0DF  2  A6 1C                LDX     savx
00F0E1  2  60                   RTS
00F0E2  2               ; ** advance the program counter **
00F0E2  2               pcadj:
00F0E2  2  A5 1F                LDA     length
00F0E4  2  38                   SEC
00F0E5  2               pcadj3:
00F0E5  2  A4 C2                LDY     tmp0+1
00F0E7  2  AA                   TAX
00F0E8  2  10 01                BPL     pcadj4
00F0EA  2  88                   DEY
00F0EB  2               pcadj4:
00F0EB  2  65 C1                ADC     tmp0
00F0ED  2  90 01                BCC     rts1
00F0EF  2  C8                   INY
00F0F0  2               rts1:
00F0F0  2  60                   RTS
00F0F1  2               ; ** check inst valid, len **
00F0F1  2               instxx:
00F0F1  2  A8                   TAY
00F0F2  2  4A                   LSR     a
00F0F3  2  90 0B                BCC     ieven
00F0F5  2  4A                   LSR     a
00F0F6  2  B0 17                BCS     err
00F0F8  2  C9 22                CMP     #$22
00F0FA  2  F0 13                BEQ     err
00F0FC  2  29 07                AND     #$07
00F0FE  2  09 80                ORA     #$80
00F100  2               ieven:
00F100  2  4A                   LSR     a
00F101  2  AA                   TAX
00F102  2  BD 64 F3             LDA     mode,x
00F105  2  B0 04                BCS     rtmode
00F107  2  4A                   LSR     a
00F108  2  4A                   LSR     a
00F109  2  4A                   LSR     a
00F10A  2  4A                   LSR     a
00F10B  2               rtmode:
00F10B  2  29 0F                AND     #$0f
00F10D  2  D0 04                BNE     getfmt
00F10F  2               err:
00F10F  2  A0 80                LDY     #$80
00F111  2  A9 00                LDA     #0
00F113  2               ; ** get addr mode, length **
00F113  2               getfmt:
00F113  2  AA                   TAX
00F114  2  BD A8 F3             LDA     mode2,x
00F117  2  85 2A                STA     acmd
00F119  2  29 03                AND     #$03
00F11B  2  85 1F                STA     length
00F11D  2               ; ** extract intructn **
00F11D  2  98                   TYA
00F11E  2  29 8F                AND     #$8f
00F120  2  AA                   TAX
00F121  2  98                   TYA
00F122  2  A0 03                LDY     #$03
00F124  2  E0 8A                CPX     #$8a
00F126  2  F0 0B                BEQ     mnndx3
00F128  2               mnndx1:
00F128  2  4A                   LSR     a
00F129  2  90 08                BCC     mnndx3
00F12B  2  4A                   LSR     a
00F12C  2               mnndx2:
00F12C  2  4A                   LSR     a
00F12D  2  09 20                ORA     #$20
00F12F  2  88                   DEY
00F130  2  D0 FA                BNE     mnndx2
00F132  2  C8                   INY
00F133  2               mnndx3:
00F133  2  88                   DEY
00F134  2  D0 F2                BNE     mnndx1
00F136  2  60                   RTS
00F137  2               ; print bytes
00F137  2               disvv:
00F137  2  B1 C1                LDA     (tmp0),y
00F139  2  20 DA F0             JSR     prbyte
00F13C  2  A2 01                LDX     #1
00F13E  2               disvl:
00F13E  2  20 1F F3             JSR     spacd
00F141  2  C4 1F                CPY     length
00F143  2  C8                   INY
00F144  2  90 F1                BCC     disvv
00F146  2  A2 03                LDX     #$03
00F148  2  C0 04                CPY     #4
00F14A  2  90 F2                BCC     disvl
00F14C  2  60                   RTS
00F14D  2               ; ** print mnemonic **
00F14D  2               propxx:
00F14D  2  A8                   TAY
00F14E  2  B9 C2 F3             LDA     mneml,y
00F151  2  85 28                STA     aflg
00F153  2  B9 02 F4             LDA     mnemr,y
00F156  2  85 29                STA     aflg+1
00F158  2               prmn1:
00F158  2  A9 00                LDA     #0
00F15A  2  A0 05                LDY     #$05
00F15C  2               prmn2:
00F15C  2  06 29                ASL     aflg+1
00F15E  2  26 28                ROL     aflg
00F160  2  2A                   ROL     a
00F161  2  88                   DEY
00F162  2  D0 F8                BNE     prmn2
00F164  2  69 3F                ADC     #$3f
00F166  2  20 26 FA             JSR     IOF_OUTCH
00F169  2  CA                   DEX
00F16A  2  D0 EC                BNE     prmn1
00F16C  2               ; ** print space **
00F16C  2               space:
00F16C  2  A9 20                LDA     #$20
00F16E  2  D0 07                BNE     flip
00F170  2               ; ** print cr, maybe lf **
00F170  2               crlf:
00F170  2  A9 0D                LDA     #$0d
00F172  2  20 26 FA             JSR     IOF_OUTCH
00F175  2  A9 0A                LDA     #$0a
00F177  2               flip:
00F177  2  4C 26 FA             JMP     IOF_OUTCH
00F17A  2               
00F17A  2               
00F17A  2               ;__ASSEMBLE____________________________________________________
00F17A  2               ;
00F17A  2               ; Assemble line from keyboard to memory
00F17A  2               ;______________________________________________________________
00F17A  2               ASSEMBLE:
00F17A  2  A9 00                LDA     #(INBUFFER & $FF); SETUP WORK BUFFER
00F17C  2  85 3B                STA     WORKPTR         ;
00F17E  2  A9 04                LDA     #(INBUFFER >> 8);
00F180  2  85 3C                STA     WORKPTR +1      ;
00F182  2               
00F182  2  A9 08                LDA     #8
00F184  2  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "ASSEMBLE"
00F187  2               
00F187  2  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER ANY WHITESPACE
00F18A  2  20 C8 F8             JSR     GETNUMBER       ; GET NUMBER
00F18D  2  B0 03                BCS     ASSEMBLE_ERROR  ; IF NOT A NUMBER REPORT ERROR
00F18F  2  4C 95 F1             JMP     asvald
00F192  2               ASSEMBLE_ERROR:
00F192  2  4C 19 F3             JMP     error
00F195  2               asvald:
00F195  2  A5 3F                LDA     TEMPWORD
00F197  2  85 C1                STA     tmp0
00F199  2  A5 40                LDA     TEMPWORD+1
00F19B  2  85 C2                STA     tmp0+1
00F19D  2               asv1:
00F19D  2  20 70 F1             JSR     crlf
00F1A0  2  A9 2E                LDA     #'.'
00F1A2  2  20 26 FA             JSR     IOF_OUTCH
00F1A5  2  20 6C F1             JSR     space
00F1A8  2  20 E9 F2             JSR     PRINT_WORD
00F1AB  2  20 6C F1             JSR     space
00F1AE  2  20 D9 F2             JSR     t2t2
00F1B1  2  8E 11 02             STX     stage+1
00F1B4  2  A9 00                LDA     #(INBUFFER & $FF); SETUP INPUT COMMAND BUFFER
00F1B6  2  85 4F                STA     STRPTR          ;
00F1B8  2  85 3B                STA     WORKPTR         ;
00F1BA  2  A9 04                LDA     #(INBUFFER >> 8);
00F1BC  2  85 50                STA     STRPTR +1       ;
00F1BE  2  85 3C                STA     WORKPTR+1       ;
00F1C0  2  20 5B F9             JSR     INSTR           ; GET A STRING FROM THE CONSOLE
00F1C3  2  20 1C F9             JSR     EATWHITESPACE
00F1C6  2  A2 03                LDX     #$03            ; push opcode to stack
00F1C8  2  A0 00                LDY     #$00
00F1CA  2               apush:
00F1CA  2  B1 3B                LDA     (WORKPTR),Y     ; GET NEXT CHAR FROM BUFFER
00F1CC  2  48                   PHA
00F1CD  2  20 95 F8             JSR     INCWORKPTR
00F1D0  2  CA                   DEX
00F1D1  2  D0 F7                BNE     apush
00F1D3  2               
00F1D3  2  A2 03                LDX     #$03
00F1D5  2               apull:
00F1D5  2  68                   PLA
00F1D6  2  38                   SEC
00F1D7  2  E9 3F                SBC     #$3f
00F1D9  2  A0 05                LDY     #$05
00F1DB  2               acrun:
00F1DB  2  4A                   LSR     a
00F1DC  2  6E 11 02             ROR     stage+1
00F1DF  2  6E 10 02             ROR     stage
00F1E2  2  88                   DEY
00F1E3  2  D0 F6                BNE     acrun
00F1E5  2  CA                   DEX
00F1E6  2  D0 ED                BNE     apull
00F1E8  2  A2 02                LDX     #$02
00F1EA  2               ainp:
00F1EA  2  A0 00                LDY     #$00
00F1EC  2  B1 3B                LDA     (WORKPTR),Y     ; GET NEXT CHAR FROM BUFFER
00F1EE  2  20 95 F8             JSR     INCWORKPTR
00F1F1  2  C9 00                CMP     #$00
00F1F3  2  F0 1E                BEQ     aret
00F1F5  2  C9 20                CMP     #$20
00F1F7  2  F0 F1                BEQ     ainp
00F1F9  2  20 D0 F2             JSR     ahex
00F1FC  2  B0 0F                BCS     stone
00F1FE  2               
00F1FE  2  20 46 F3             JSR     rdob2
00F201  2  A4 C1                LDY     tmp0
00F203  2  84 C2                STY     tmp0+1
00F205  2  85 C1                STA     tmp0
00F207  2               
00F207  2  A9 30                LDA     #$30
00F209  2  9D 10 02             STA     stage,x
00F20C  2  E8                   INX
00F20D  2               stone:
00F20D  2  9D 10 02             STA     stage,x
00F210  2  E8                   INX
00F211  2  D0 D7                BNE     ainp
00F213  2               aret:
00F213  2  86 28                STX     aflg
00F215  2  A2 00                LDX     #0
00F217  2  86 26                STX     wrap
00F219  2  F0 04                BEQ     atry
00F21B  2               abump:
00F21B  2  E6 26                INC     wrap
00F21D  2  F0 75                BEQ     aerr
00F21F  2               atry:
00F21F  2  A2 00                LDX     #0
00F221  2  86 1D                STX     tmpc
00F223  2  A5 26                LDA     wrap
00F225  2  20 F1 F0             JSR     instxx
00F228  2  A6 2A                LDX     acmd
00F22A  2  86 29                STX     aflg+1
00F22C  2  AA                   TAX
00F22D  2  BC C2 F3             LDY     mneml,x
00F230  2  BD 02 F4             LDA     mnemr,x
00F233  2  20 B9 F2             JSR     achek2
00F236  2  D0 E3                BNE     abump
00F238  2  A2 06                LDX     #$06
00F23A  2               aoprnd:
00F23A  2  E0 03                CPX     #$03
00F23C  2  D0 19                BNE     ashf
00F23E  2  A4 1F                LDY     length
00F240  2  F0 15                BEQ     ashf
00F242  2               arsc:
00F242  2  A5 2A                LDA     acmd
00F244  2  C9 E8                CMP     #$e8
00F246  2  A9 30                LDA     #$30
00F248  2  B0 21                BCS     arel1
00F24A  2  20 BF F2             JSR     acheck
00F24D  2  D0 CC                BNE     abump
00F24F  2  20 C1 F2             JSR     achick
00F252  2  D0 C7                BNE     abump
00F254  2  88                   DEY
00F255  2  D0 EB                BNE     arsc
00F257  2               ashf:
00F257  2  06 2A                ASL     acmd
00F259  2  90 0B                BCC     adex
00F25B  2  BC BB F3             LDY     char2-1,x
00F25E  2  BD B5 F3             LDA     char1-1,x
00F261  2  20 B9 F2             JSR     achek2
00F264  2  D0 B5                BNE     abump
00F266  2               adex:
00F266  2  CA                   DEX
00F267  2  D0 D1                BNE     aoprnd
00F269  2  F0 0A                BEQ     ald
00F26B  2               arel1:
00F26B  2  20 B8 F2             JSR     acdb1
00F26E  2  D0 AB                BNE     abump
00F270  2  20 B8 F2             JSR     acdb1
00F273  2  D0 A6                BNE     abump
00F275  2               ald:
00F275  2  A5 28                LDA     aflg
00F277  2  C5 1D                CMP     tmpc
00F279  2  D0 A0                BNE     abump
00F27B  2  20 D9 F2             JSR     t2t2
00F27E  2  A4 1F                LDY     length
00F280  2  F0 28                BEQ     aopset
00F282  2  A5 29                LDA     aflg+1
00F284  2  C9 9D                CMP     #$9d
00F286  2  D0 1A                BNE     aopnd
00F288  2  20 F6 F2             JSR     diffb
00F28B  2  90 0A                BCC     abdown
00F28D  2  98                   TYA
00F28E  2  D0 04                BNE     aerr
00F290  2  A5 44                LDA     nemo
00F292  2  10 0A                BPL     abran
00F294  2               aerr:
00F294  2  4C 19 F3             JMP     error
00F297  2               abdown:
00F297  2  C8                   INY
00F298  2  D0 FA                BNE     aerr
00F29A  2  A5 44                LDA     nemo
00F29C  2  10 F6                BPL     aerr
00F29E  2               abran:
00F29E  2  A4 1F                LDY     length
00F2A0  2  D0 03                BNE     abrel
00F2A2  2               aopnd:
00F2A2  2  B9 C2 00             LDA     tmp2-1,y
00F2A5  2               abrel:
00F2A5  2  91 C1                STA     (tmp0),y
00F2A7  2  88                   DEY
00F2A8  2  D0 F8                BNE     aopnd
00F2AA  2               aopset:
00F2AA  2  A5 26                LDA     wrap
00F2AC  2  91 C1                STA     (tmp0),y
00F2AE  2  20 E2 F0             JSR     pcadj
00F2B1  2  85 C1                STA     tmp0
00F2B3  2  84 C2                STY     tmp0+1
00F2B5  2  4C 9D F1             JMP     asv1
00F2B8  2               acdb1:
00F2B8  2  A8                   TAY
00F2B9  2               achek2:
00F2B9  2  20 BF F2             JSR     acheck
00F2BC  2  D0 11                BNE     acex
00F2BE  2  98                   TYA
00F2BF  2               acheck:
00F2BF  2  F0 0E                BEQ     acex
00F2C1  2               achick:
00F2C1  2  86 1C                STX     savx
00F2C3  2  A6 1D                LDX     tmpc
00F2C5  2  DD 10 02             CMP     stage,x
00F2C8  2  08                   PHP
00F2C9  2  E8                   INX
00F2CA  2  86 1D                STX     tmpc
00F2CC  2  A6 1C                LDX     savx
00F2CE  2  28                   PLP
00F2CF  2               acex:
00F2CF  2  60                   RTS
00F2D0  2               ahex:
00F2D0  2  C9 30                CMP     #$30
00F2D2  2  90 03                BCC     asx
00F2D4  2  C9 47                CMP     #$47
00F2D6  2  60                   RTS
00F2D7  2               asx:
00F2D7  2  38                   SEC
00F2D8  2  60                   RTS
00F2D9  2               
00F2D9  2               
00F2D9  2               
00F2D9  2               ; ** swap tmp0, tmp2 **
00F2D9  2               t2t2:
00F2D9  2  A2 02                LDX     #$02
00F2DB  2               t2t21:
00F2DB  2  B5 C0                LDA     tmp0-1,x
00F2DD  2  48                   PHA
00F2DE  2  B5 C2                LDA     tmp2-1,x
00F2E0  2  95 C0                STA     tmp0-1,x
00F2E2  2  68                   PLA
00F2E3  2  95 C2                STA     tmp2-1,x
00F2E5  2  CA                   DEX
00F2E6  2  D0 F3                BNE     t2t21
00F2E8  2  60                   RTS
00F2E9  2               
00F2E9  2               PRINT_WORD:
00F2E9  2  48                   PHA
00F2EA  2  A5 C2                LDA     tmp0+1
00F2EC  2  20 DA F0             JSR     prbyte
00F2EF  2  A5 C1                LDA     tmp0
00F2F1  2  20 DA F0             JSR     prbyte
00F2F4  2  68                   PLA
00F2F5  2  60                   RTS
00F2F6  2               ; ** calc tmp2-tmp0-2 **
00F2F6  2               diffb:
00F2F6  2  A5 C3                LDA     tmp2
00F2F8  2  A4 C4                LDY     tmp2+1
00F2FA  2  38                   SEC
00F2FB  2  E9 02                SBC     #2
00F2FD  2  B0 0E                BCS     deck
00F2FF  2  88                   DEY
00F300  2  90 0B                BCC     deck
00F302  2               ; ** calc aflg-tmp0 **
00F302  2               diffa:
00F302  2  A5 28                LDA     aflg
00F304  2  A4 29                LDY     aflg+1
00F306  2  4C 0D F3             JMP     deck
00F309  2               ; ** calc tmp2-tmp0 **
00F309  2               diffp:
00F309  2  A5 C3                LDA     tmp2
00F30B  2  A4 C4                LDY     tmp2+1
00F30D  2               deck:
00F30D  2  38                   SEC
00F30E  2  E5 C1                SBC     tmp0
00F310  2  85 44                STA     nemo
00F312  2  98                   TYA
00F313  2  E5 C2                SBC     tmp0+1
00F315  2  A8                   TAY
00F316  2  05 44                ORA     nemo
00F318  2  60                   RTS
00F319  2               
00F319  2               error:
00F319  2  A9 3F                LDA     #$3f
00F31B  2  20 26 FA             JSR     IOF_OUTCH
00F31E  2  60                   RTS
00F31F  2               ; ** print spaces **
00F31F  2               spacd:
00F31F  2  20 6C F1             JSR     space
00F322  2  CA                   DEX
00F323  2  D0 FA                BNE     spacd
00F325  2  60                   RTS
00F326  2               chrout:
00F326  2  C5 28                CMP     aflg
00F328  2  F0 03                BEQ     caltrit
00F32A  2  20 26 FA             JSR     IOF_OUTCH
00F32D  2               caltrit:
00F32D  2  60                   RTS
00F32E  2               
00F32E  2               altrit:
00F32E  2  98                   TYA
00F32F  2  48                   PHA
00F330  2  20 70 F1             JSR     crlf
00F333  2  68                   PLA
00F334  2  20 26 FA             JSR     IOF_OUTCH
00F337  2  A9 2E                LDA     #$2e
00F339  2  4C 26 FA             JMP     IOF_OUTCH
00F33C  2               
00F33C  2               ; ** print hex byte **
00F33C  2               wroa:
00F33C  2  A5 C2                LDA     tmp0+1
00F33E  2  20 2B F9             JSR     PRINT_BYTE
00F341  2  A5 C1                LDA     tmp0
00F343  2  4C 2B F9             JMP     PRINT_BYTE
00F346  2               
00F346  2               ; ** read hex byte **
00F346  2               rdob2:
00F346  2  20 5B F3             JSR     hexit
00F349  2  0A                   ASL     a
00F34A  2  0A                   ASL     a
00F34B  2  0A                   ASL     a
00F34C  2  0A                   ASL     a
00F34D  2  85 2A                STA     acmd
00F34F  2  B1 3B                LDA     (WORKPTR),Y     ; GET NEXT CHAR FROM BUFFER
00F351  2  20 95 F8             JSR     INCWORKPTR
00F354  2               rdob3:
00F354  2  20 5B F3             JSR     hexit
00F357  2  05 2A                ORA     acmd
00F359  2  38                   SEC
00F35A  2  60                   RTS
00F35B  2               ; ** convert from hex **
00F35B  2               hexit:
00F35B  2  C9 3A                CMP     #$3a
00F35D  2  90 02                BCC     hex08
00F35F  2  69 08                ADC     #$08
00F361  2               hex08:
00F361  2  29 0F                AND     #$0f
00F363  2  60                   RTS
00F364  2               
00F364  2               
00F364  2               ; mode table... nybble organized
00F364  2               ; 0= err  4= implied  8= zer,x   c= zer,y
00F364  2               ; 1= imm  5= acc      9= abs,x   d= rel
00F364  2               ; 2= zer  6= (ind,x)  a= abs,y
00F364  2               ; 3= abs  7= (ind),y  b= (ind)
00F364  2               mode:
00F364  2  40 02 45 03          .BYTE   $40,$02,$45,$03
00F368  2  D0 08 40 09          .BYTE   $d0,$08,$40,$09
00F36C  2  30 22 45 33          .BYTE   $30,$22,$45,$33
00F370  2  D0 08 40 09          .BYTE   $d0,$08,$40,$09
00F374  2  40 02 45 33          .BYTE   $40,$02,$45,$33
00F378  2  D0 08 40 09          .BYTE   $d0,$08,$40,$09
00F37C  2  40 02 45 B3          .BYTE   $40,$02,$45,$b3
00F380  2  D0 08 40 09          .BYTE   $d0,$08,$40,$09
00F384  2  00 22 44 33          .BYTE   $00,$22,$44,$33
00F388  2  D0 8C 44 00          .BYTE   $d0,$8c,$44,$00
00F38C  2  11 22 44 33          .BYTE   $11,$22,$44,$33
00F390  2  D0 8C 44 9A          .BYTE   $d0,$8c,$44,$9a
00F394  2  10 22 44 33          .BYTE   $10,$22,$44,$33
00F398  2  D0 08 40 09          .BYTE   $d0,$08,$40,$09
00F39C  2  10 22 44 33          .BYTE   $10,$22,$44,$33
00F3A0  2  D0 08 40 09          .BYTE   $d0,$08,$40,$09
00F3A4  2  62 13 78 A9          .BYTE   $62,$13,$78,$a9
00F3A8  2               ;master modes
00F3A8  2               ;six hi-order bits  mode options
00F3A8  2               ;two lo-order bits  operand length ready.
00F3A8  2               mode2:
00F3A8  2  00 21 81 82          .BYTE   $00,$21,$81,$82
00F3AC  2  00 00 59 4D          .BYTE   $00,$00,$59,$4d
00F3B0  2  91 92 86 4A          .BYTE   $91,$92,$86,$4a,$85,$9d
00F3B4  2  85 9D        
00F3B6  2               char1:
00F3B6  2  2C 29 2C 23          .BYTE   $2c,$29,$2c,$23,$28,$24
00F3BA  2  28 24        
00F3BC  2               char2:
00F3BC  2  59 00 58 24          .BYTE   $59,$00,$58,$24,$24,$00
00F3C0  2  24 00        
00F3C2  2               ; packed mnemonics
00F3C2  2               mneml:
00F3C2  2  1C 8A 1C 23          .BYTE   $1c,$8a,$1c,$23
00F3C6  2  5D 8B 1B A1          .BYTE   $5d,$8b,$1b,$a1
00F3CA  2  9D 8A 1D 23          .BYTE   $9d,$8a,$1d,$23
00F3CE  2  9D 8B 1D A1          .BYTE   $9d,$8b,$1d,$a1
00F3D2  2  00 29 19 AE          .BYTE   $00,$29,$19,$ae
00F3D6  2  69 A8 19 23          .BYTE   $69,$a8,$19,$23
00F3DA  2  24 53 1B 23          .BYTE   $24,$53,$1b,$23
00F3DE  2  24 53 19 A1          .BYTE   $24,$53,$19,$a1
00F3E2  2  00 1A 5B 5B          .BYTE   $00,$1a,$5b,$5b
00F3E6  2  A5 69 24 24          .BYTE   $a5,$69,$24,$24
00F3EA  2  AE AE A8 AD          .BYTE   $ae,$ae,$a8,$ad
00F3EE  2  29 00 7C 00          .BYTE   $29,$00,$7c,$00
00F3F2  2  15 9C 6D 9C          .BYTE   $15,$9c,$6d,$9c
00F3F6  2  A5 69 29 53          .BYTE   $a5,$69,$29,$53
00F3FA  2  84 13 34 11          .BYTE   $84,$13,$34,$11
00F3FE  2  A5 69 23 A0          .BYTE   $a5,$69,$23,$a0
00F402  2               
00F402  2               mnemr:
00F402  2  D8 62 5A 48          .BYTE   $d8,$62,$5a,$48
00F406  2  26 62 94 88          .BYTE   $26,$62,$94,$88
00F40A  2  54 44 C8 54          .BYTE   $54,$44,$c8,$54
00F40E  2  68 44 E8 94          .BYTE   $68,$44,$e8,$94
00F412  2  00 B4 08 84          .BYTE   $00,$b4,$08,$84
00F416  2  74 B4 28 6E          .BYTE   $74,$b4,$28,$6e
00F41A  2  74 F4 CC 4A          .BYTE   $74,$f4,$cc,$4a
00F41E  2  72 F2 A4 8A          .BYTE   $72,$f2,$a4,$8a
00F422  2  00 AA A2 A2          .BYTE   $00,$aa,$a2,$a2
00F426  2  74 74 74 72          .BYTE   $74,$74,$74,$72
00F42A  2  44 68 B2 32          .BYTE   $44,$68,$b2,$32
00F42E  2  B2 00 22 00          .BYTE   $b2,$00,$22,$00
00F432  2  1A 1A 26 26          .BYTE   $1a,$1a,$26,$26
00F436  2  72 72 88 C8          .BYTE   $72,$72,$88,$c8
00F43A  2  C4 CA 26 48          .BYTE   $c4,$ca,$26,$48
00F43E  2  44 44 A2 C8          .BYTE   $44,$44,$a2,$c8
00F442  2               
00F442  1                       .INCLUDE "bios_ppp_common.asm"
00F442  2               ;__Parallel Port Prop Common Code_________________________________________________________________________________________________
00F442  2               ;
00F442  2               ; 	This is the code that is common to all PPP drivers
00F442  2               ;
00F442  2               ;	Entry points:
00F442  2               ;		INIT_PPP - INIT THE PPP HARDWARE
00F442  2               ;		SENDCMD - SEND A COMMAND TO THE PPP HARDWARE
00F442  2               ;		PUTBYTE -  SEND A BYTE TO THE PPP HARDWARE
00F442  2               ;		GETBYTE -  GET BYTE FROM THE PPP HARDWARE
00F442  2               ;________________________________________________________________________________________________________________________________
00F442  2               ;
00F442  2               
00F442  2               
00F442  2               
00F442  2               ;*
00F442  2               ;* HARDWARE I/O ADDRESSES
00F442  2               ;*
00F442  2               PPPPIOA         = M6X0X_IOSPACE+$EFC
00F442  2               PPPCNTA         = M6X0X_IOSPACE+$EFD
00F442  2               PPPPIOB         = M6X0X_IOSPACE+$EFE
00F442  2               PPPCNTB         = M6X0X_IOSPACE+$EFF
00F442  2               
00F442  2               ;*__INIT_PPP___________________________________________________________________________________
00F442  2               ;*
00F442  2               ;*  INIT THE PPP HARDWARE
00F442  2               ;*
00F442  2               ;*____________________________________________________________________________________________________
00F442  2               INIT_PPP:
00F442  2               
00F442  2  A9 00                LDA     #$00            ; SELECT DDR
00F444  2  8D FD EE             STA     PPPCNTA
00F447  2  A9 00                LDA     #$00            ; SET ALL PINS INPUT
00F449  2  8D FC EE             STA     PPPPIOA         ;
00F44C  2  A9 00                LDA     #$00            ; SELECT DDR
00F44E  2  8D FF EE             STA     PPPCNTB
00F451  2               
00F451  2  A9 6F                LDA     #%01101111      ; SET CONTROL PINS
00F453  2               ; PB0=>CMD/DATA	[O]
00F453  2               ; PB1=> X  		[O]
00F453  2               ; PB2=> RESET 	[O]
00F453  2               ; PB3=> X   	[O]
00F453  2               ; PB4=> STB 	[I]
00F453  2               ; PB5=> IBF 	[0]
00F453  2               ; PB6=> ACK 	[O]
00F453  2               ; PB7=> OBF 	[I]
00F453  2               ;
00F453  2  8D FE EE             STA     PPPPIOB         ;
00F456  2               
00F456  2  A9 04                LDA     #$04            ; SELECT PIO
00F458  2  8D FD EE             STA     PPPCNTA
00F45B  2  8D FF EE             STA     PPPCNTB
00F45E  2               
00F45E  2  A9 04                LDA     #%00000100      ; ASSERT RESET
00F460  2  8D FE EE             STA     PPPPIOB
00F463  2  A9 01                LDA     #%00000001      ; DEASSERT RESET,  DATA
00F465  2  8D FE EE             STA     PPPPIOB
00F468  2               
00F468  2               INIT_PPP0:
00F468  2               
00F468  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK HIGH
00F46B  2  09 40                ORA     #%01000000
00F46D  2  8D FE EE             STA     PPPPIOB
00F470  2               
00F470  2               INIT_PPP1:
00F470  2               ; WAIT FOR STB LOW (OUTPUT BUFFER READY)
00F470  2  AD FE EE             LDA     PPPPIOB         ;
00F473  2  29 10                AND     #%00010000      ;
00F475  2  D0 F9                BNE     INIT_PPP1       ;
00F477  2  AD FC EE             LDA     PPPPIOA         ;IS $AA?
00F47A  2  C9 AA                CMP     #$AA
00F47C  2  D0 F2                BNE     INIT_PPP1       ; NO, STILL INIT IN PROCESS
00F47E  2               
00F47E  2  AD FE EE             LDA     PPPPIOB         ; YES, BRING ACK LOW
00F481  2  29 BF                AND     #%10111111
00F483  2  8D FE EE             STA     PPPPIOB
00F486  2               INIT_PPP3:                      ; WAIT FOR STB HIGH
00F486  2  AD FE EE             LDA     PPPPIOB
00F489  2  29 10                AND     #%00010000
00F48B  2  F0 F9                BEQ     INIT_PPP3
00F48D  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK HIGH
00F490  2  09 40                ORA     #%01000000
00F492  2  8D FE EE             STA     PPPPIOB
00F495  2  60                   RTS
00F496  2               
00F496  2               
00F496  2               
00F496  2               ;*__SENDCMD___________________________________________________________________________________________
00F496  2               ;*
00F496  2               ;*  SEND A COMMAND TO THE PPP HARDWARE
00F496  2               ;*
00F496  2               ;*____________________________________________________________________________________________________
00F496  2               SENDCMD:
00F496  2  48                   PHA
00F497  2               SENDCMD1:
00F497  2  AD FE EE             LDA     PPPPIOB         ;
00F49A  2  29 FE                AND     #%11111110      ; SET CMD FLAG
00F49C  2  8D FE EE             STA     PPPPIOB         ; SEND IT
00F49F  2  68                   PLA
00F4A0  2  20 AC F4             JSR     PUTBYTE         ; SEND THE COMMAND BYTE
00F4A3  2               ; TURN OFF CMD
00F4A3  2  AD FE EE             LDA     PPPPIOB         ;
00F4A6  2  09 01                ORA     #%00000001      ; CLEAR CMD FLAG
00F4A8  2  8D FE EE             STA     PPPPIOB         ; SEND IT
00F4AB  2  60                   RTS
00F4AC  2               
00F4AC  2               ;*__PUTBYTE___________________________________________________________________________________________
00F4AC  2               ;*
00F4AC  2               ;*  SEND A BYTE TO THE PPP HARDWARE
00F4AC  2               ;*
00F4AC  2               ;*____________________________________________________________________________________________________
00F4AC  2               
00F4AC  2               PUTBYTE:
00F4AC  2  48                   PHA
00F4AD  2  A9 00                LDA     #$00
00F4AF  2  8D FD EE             STA     PPPCNTA
00F4B2  2  A9 FF                LDA     #$FF            ; SET ALL PINS OUTPUT
00F4B4  2  8D FC EE             STA     PPPPIOA         ;
00F4B7  2  A9 04                LDA     #$04
00F4B9  2  8D FD EE             STA     PPPCNTA
00F4BC  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK HIGH
00F4BF  2  09 40                ORA     #%01000000
00F4C1  2  8D FE EE             STA     PPPPIOB
00F4C4  2               PUTWAIT1:
00F4C4  2               ; WAIT FOR OBF HIGH
00F4C4  2  AD FE EE             LDA     PPPPIOB         ;
00F4C7  2  29 80                AND     #%10000000      ;
00F4C9  2  F0 F9                BEQ     PUTWAIT1        ;
00F4CB  2  68                   PLA
00F4CC  2  8D FC EE             STA     PPPPIOA
00F4CF  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK LOW
00F4D2  2  29 BF                AND     #%10111111
00F4D4  2  8D FE EE             STA     PPPPIOB
00F4D7  2               PUTWAIT2:
00F4D7  2               ; WAIT FOR OBF LOW
00F4D7  2  AD FE EE             LDA     PPPPIOB         ;
00F4DA  2  29 80                AND     #%10000000      ;
00F4DC  2  D0 F9                BNE     PUTWAIT2        ;
00F4DE  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK HIGH
00F4E1  2  09 40                ORA     #%01000000
00F4E3  2  8D FE EE             STA     PPPPIOB
00F4E6  2  60                   RTS
00F4E7  2               
00F4E7  2               ;*__GETBYTE___________________________________________________________________________________________
00F4E7  2               ;*
00F4E7  2               ;*  GET BYTE FROM THE PPP HARDWARE
00F4E7  2               ;*
00F4E7  2               ;*____________________________________________________________________________________________________
00F4E7  2               
00F4E7  2               GETBYTE:
00F4E7  2  A9 00                LDA     #$00
00F4E9  2  8D FD EE             STA     PPPCNTA
00F4EC  2  A9 00                LDA     #$00            ; SET ALL PINS INPUT
00F4EE  2  8D FC EE             STA     PPPPIOA         ;
00F4F1  2  A9 04                LDA     #$04
00F4F3  2  8D FD EE             STA     PPPCNTA
00F4F6  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK HIGH
00F4F9  2  09 40                ORA     #%01000000
00F4FB  2  8D FE EE             STA     PPPPIOB
00F4FE  2               GETWAIT1:
00F4FE  2               ; WAIT FOR STB LOW
00F4FE  2  AD FE EE             LDA     PPPPIOB         ;
00F501  2  29 10                AND     #%00010000      ;
00F503  2  D0 F9                BNE     GETWAIT1        ;
00F505  2  AD FC EE             LDA     PPPPIOA
00F508  2  48                   PHA
00F509  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK LOW
00F50C  2  29 BF                AND     #%10111111
00F50E  2  8D FE EE             STA     PPPPIOB
00F511  2               GETWAIT2:
00F511  2               ; WAIT FOR STB HIGH
00F511  2  AD FE EE             LDA     PPPPIOB         ;
00F514  2  29 10                AND     #%00010000      ;
00F516  2  F0 F9                BEQ     GETWAIT2        ;
00F518  2  AD FE EE             LDA     PPPPIOB         ; BRING ACK HIGH
00F51B  2  09 40                ORA     #%01000000
00F51D  2  8D FE EE             STA     PPPPIOB
00F520  2  68                   PLA
00F521  2  60                   RTS
00F522  2               
00F522  1                       .INCLUDE "bios_serial.asm"
00F522  2               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
00F522  2               ;
00F522  2               ; 	serial drivers
00F522  2               ;
00F522  2               ;	Entry points:
00F522  2               ;		SERIALINIT  - called during OS init
00F522  2               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
00F522  2               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
00F522  2               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
00F522  2               ;		SERIALSTATUS- GET UART STATUS
00F522  2               ;________________________________________________________________________________________________________________________________
00F522  2               ;
00F522  2               
00F522  2               
00F522  2               ;*
00F522  2               ;* HARDWARE I/O ADDRESSES
00F522  2               ;*
00F522  2               
00F522  2               UART1DATA       = M6X0X_IOSPACE+$FF4; SERIAL PORT 1 (I/O Card)
00F522  2               UART1STATUS     = M6X0X_IOSPACE+$FF5; SERIAL PORT 1 (I/O Card)
00F522  2               UART1COMMAND    = M6X0X_IOSPACE+$FF6; SERIAL PORT 1 (I/O Card)
00F522  2               UART1CONTROL    = M6X0X_IOSPACE+$FF7; SERIAL PORT 1 (I/O Card)
00F522  2               
00F522  2               
00F522  2               ;Command Register
00F522  2               ;No bit is affected by a software reset, however, all bits are set to zero on a hardware reset.
00F522  2               ;Bit 7 6 5  configuration
00F522  2               ;    x x 0  no parity bit
00F522  2               ;    0 0 1  send and receive with odd parity
00F522  2               ;    0 1 1  send and receive with even parity
00F522  2               ;    1 0 1  send: parity=1; receive: parity not evaluated
00F522  2               ;    1 1 1  send: parity=0; receive: parity not evaluated
00F522  2               ;
00F522  2               ;Bit 4  0: no echo
00F522  2               ;       1: echo (received characters are being sent again,
00F522  2               ;                bits 2 and 3 must be 0 for that)
00F522  2               ;
00F522  2               ;Bit 3 2  sender interr.   RTS level   sender
00F522  2               ;    0 0  no               high        off
00F522  2               ;    0 1  yes              low         on
00F522  2               ;    1 0  no               low         on
00F522  2               ;    1 1  no               low         send BRK
00F522  2               ;
00F522  2               ;Bit 1  0: interrupt gets triggered by bit 3 in status register
00F522  2               ;       1: no interrupt
00F522  2               ;
00F522  2               ;Bit 0  0: disable transceiver and interrupts, /DTR high
00F522  2               ;       1: enable transceiver and interrupts, /DTR low
00F522  2               ;
00F522  2               ;Control Register
00F522  2               ;Bits 0 to 3 are set to zero on a software reset, and all bits are set to zero on a hardware reset.
00F522  2               ;Bit 7  0: 1 stop bit
00F522  2               ;       1: a) with 8 data bits and 1 parity bit: 1 stop bit
00F522  2               ;          b) with 5 data bits and no parity bit: 1.5 stop bits
00F522  2               ;          c) otherwise 2 stop bits
00F522  2               ;
00F522  2               ;Bit 6 5  data bits
00F522  2               ;    0 0  8
00F522  2               ;    0 1  7
00F522  2               ;    1 0  6
00F522  2               ;    1 1  5
00F522  2               ;
00F522  2               ;Bit 4  0: external receive clock
00F522  2               ;       1: builtin clock as receive clock
00F522  2               ;
00F522  2               ;Bit 3 2 1 0  baud rate
00F522  2               ;    0 0 0 0  1/16 times external clock
00F522  2               ;    0 0 0 1  50 bps
00F522  2               ;    0 0 1 0  75 bps
00F522  2               ;    0 0 1 1  109.92 bps
00F522  2               ;    0 1 0 0  134.58 bps
00F522  2               ;    0 1 0 1  150 bps
00F522  2               ;    0 1 1 0  300 bps
00F522  2               ;    0 1 1 1  600 bps
00F522  2               ;    1 0 0 0  1200 bps
00F522  2               ;    1 0 0 1  1800 bps
00F522  2               ;    1 0 1 0  2400 bps
00F522  2               ;    1 0 1 1  3600 bps
00F522  2               ;    1 1 0 0  4800 bps
00F522  2               ;    1 1 0 1  7200 bps
00F522  2               ;    1 1 1 0  9600 bps
00F522  2               ;    1 1 1 1  19200 bps
00F522  2               
00F522  2               
00F522  2               
00F522  2               ;__SERIALINIT____________________________________________________________________________________________________________________
00F522  2               ;
00F522  2               ;	INITIALIZE SERIAL PORTS
00F522  2               ;________________________________________________________________________________________________________________________________
00F522  2               ;
00F522  2               SERIALINIT:
00F522  2  A9 00                LDA     #$00            ; RESET UART
00F524  2  8D F5 EF             STA     UART1STATUS     ;
00F527  2  A9 0B                LDA     #$0B            ;
00F529  2  8D F6 EF             STA     UART1COMMAND    ;
00F52C  2  A9 1E                LDA     #$1E            ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
00F52E  2  8D F7 EF             STA     UART1CONTROL    ;
00F531  2  60                   RTS
00F532  2               
00F532  2               
00F532  2               
00F532  2               ;__WRSER1________________________________________________________________________________________________________________________
00F532  2               ;
00F532  2               ;	WRITE CHARACTER(A) TO UART
00F532  2               ;________________________________________________________________________________________________________________________________
00F532  2               ;
00F532  2               WRSER1:
00F532  2  48                   PHA
00F533  2               WRSER1a:
00F533  2  AD F5 EF             LDA     UART1STATUS     ; GET STATUS
00F536  2  29 10                AND     #%00010000      ; IS TX READY
00F538  2  F0 F9                BEQ     WRSER1a         ; NO, WAIT FOR IT
00F53A  2  68                   PLA
00F53B  2  8D F4 EF             STA     UART1DATA       ; WRITE DATA
00F53E  2  60                   RTS
00F53F  2               
00F53F  2               ;__RDSER1________________________________________________________________________________________________________________________
00F53F  2               ;
00F53F  2               ;	READ CHARACTER FROM UART TO (A)
00F53F  2               ;________________________________________________________________________________________________________________________________
00F53F  2               ;
00F53F  2               RDSER1:
00F53F  2  AD F5 EF             LDA     UART1STATUS     ; GET STATUS REGISTER
00F542  2  29 08                AND     #%00001000      ; IS RX READY
00F544  2  F0 04                BEQ     RDSER1N         ; NO, INDICATE NO CHAR
00F546  2  AD F4 EF             LDA     UART1DATA       ; GET DATA CHAR
00F549  2  60                   RTS
00F54A  2               RDSER1N:
00F54A  2  A9 00                LDA     #$00            ;
00F54C  2  60                   RTS                     ;
00F54D  2               
00F54D  2               ;__RDSER1W_______________________________________________________________________________________________________________________
00F54D  2               ;
00F54D  2               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
00F54D  2               ;________________________________________________________________________________________________________________________________
00F54D  2               ;
00F54D  2               
00F54D  2               RDSER1W:
00F54D  2  20 3F F5             JSR     RDSER1
00F550  2  C9 00                CMP     #$00
00F552  2  F0 F9                BEQ     RDSER1W
00F554  2  29 7F                AND     #$7F
00F556  2  60                   RTS
00F557  2               
00F557  2               ;__SERIALSTATUS__________________________________________________________________________________________________________________
00F557  2               ;
00F557  2               ;	READ UARD STATUS
00F557  2               ;________________________________________________________________________________________________________________________________
00F557  2               ;
00F557  2               SERIALSTATUS:
00F557  2  AD F5 EF             LDA     UART1STATUS     ; GET STATUS REGISTER
00F55A  2  29 08                AND     #%00001000      ; IS RX READY
00F55C  2  D0 03                BNE     RDSTAT1         ; NO, INDICATE NO CHAR
00F55E  2  A9 00                LDA     #$00            ; GET DATA CHAR
00F560  2  60                   RTS
00F561  2               RDSTAT1:
00F561  2  A9 FF                LDA     #$FF            ; GET DATA CHAR
00F563  2  60                   RTS
00F564  2               
00F564  1                       .INCLUDE "bios_ppp_console.asm"
00F564  2               ;__PARALLEL PORT PROP CONSOLE DRIVERS____________________________________________________________________________________________
00F564  2               ;
00F564  2               ; 	DOS CONSOLE DRIVERS FOR THE PARALLEL PORT PROP
00F564  2               ;
00F564  2               ;	Entry points:
00F564  2               ;		PPPCONIN   	- read a byte from CONSOLE ('A' POINTS TO BYTE)
00F564  2               ;		PPPCONINW  	- read a byte from CONSOLE ('A' POINTS TO BYTE, WAIT FOR BYTE)
00F564  2               ;		PPPOUTCH   	- write a byte from CONSOLE  ('A' POINTS TO BYTE)
00F564  2               ;		PPPCONSTATUS	-RETURN CONSOLE STATUS
00F564  2               ;________________________________________________________________________________________________________________________________
00F564  2               ;
00F564  2               
00F564  2               
00F564  2               
00F564  2               
00F564  2               
00F564  2               ;__PPPOUTCH______________________________________________________________________________________________________________________
00F564  2               ;
00F564  2               ;	WRITE CHARACTER(A) TO PPP
00F564  2               ;________________________________________________________________________________________________________________________________
00F564  2               ;
00F564  2               PPPOUTCH:
00F564  2  48                   PHA
00F565  2  A9 20                LDA     #$20
00F567  2  20 96 F4             JSR     SENDCMD
00F56A  2  68                   PLA
00F56B  2               
00F56B  2  20 AC F4             JSR     PUTBYTE
00F56E  2  60                   RTS
00F56F  2               
00F56F  2               ;__PPPCONIN______________________________________________________________________________________________________________________
00F56F  2               ;
00F56F  2               ;	READ CHARACTER FROM PPP
00F56F  2               ;________________________________________________________________________________________________________________________________
00F56F  2               ;
00F56F  2               PPPCONIN:
00F56F  2  A9 31                LDA     #$31
00F571  2  20 96 F4             JSR     SENDCMD
00F574  2  20 E7 F4             JSR     GETBYTE
00F577  2  60                   RTS                     ;
00F578  2               
00F578  2               ;__CONINW________________________________________________________________________________________________________________________
00F578  2               ;
00F578  2               ;	READ CHARACTER FROM PPP (WAIT FOR CHAR)
00F578  2               ;________________________________________________________________________________________________________________________________
00F578  2               ;
00F578  2               PPPCONINW:
00F578  2  A9 31                LDA     #$31
00F57A  2  20 96 F4             JSR     SENDCMD
00F57D  2  20 E7 F4             JSR     GETBYTE
00F580  2  C9 00                CMP     #$00
00F582  2  F0 F4                BEQ     PPPCONINW
00F584  2  29 7F                AND     #$7F
00F586  2  60                   RTS
00F587  2               
00F587  2               ;__IOF_CONSTATUS_________________________________________________________________________________________________________________
00F587  2               ;
00F587  2               ;	READ STATUS FROM PPP
00F587  2               ;________________________________________________________________________________________________________________________________
00F587  2               ;
00F587  2               PPPCONSTATUS:
00F587  2  A9 30                LDA     #$30
00F589  2  20 96 F4             JSR     SENDCMD
00F58C  2  20 E7 F4             JSR     GETBYTE
00F58F  2  60                   RTS
00F590  2               
00F590  1               
00F590  1               
00F590  1               ;__COLD_START___________________________________________________
00F590  1               ;
00F590  1               ; PERFORM SYSTEM COLD INIT
00F590  1               ;
00F590  1               ;_______________________________________________________________
00F590  1               COLD_START:
00F590  1  78                   SEI                     ; DISABLE INTERRUPTS
00F591  1  D8                   CLD                     ;  VERIFY DECIMAL MODE IS OFF
00F592  1  A2 FF                LDX     #$FF            ;
00F594  1  9A                   TXS                     ; CLEAR STACK
00F595  1  8A                   TXA
00F596  1               
00F596  1  A9 00                LDA     #$00            ; SET CONSOLE (00=PPP, 01= SERIAL)
00F598  1               ;;; TODO  ADD AUTODETECT/OPTION AT SOME POINT
00F598  1  85 3A                STA     CONSOLE
00F59A  1               
00F59A  1  A9 E3                LDA     #<IRQROUTINE
00F59C  1  85 35                STA     IRQVECTOR
00F59E  1  85 37                STA     NMIVECTOR
00F5A0  1  A9 F5                LDA     #>IRQROUTINE
00F5A2  1  85 36                STA     IRQVECTOR+1
00F5A4  1  85 38                STA     NMIVECTOR+1
00F5A6  1               
00F5A6  1               ;	INIT HARDWARE
00F5A6  1  20 42 F4             JSR     INIT_PPP        ;
00F5A9  1  20 22 F5             JSR     SERIALINIT      ;
00F5AC  1  20 43 FA             JSR     INITPAGES       ;
00F5AF  1               
00F5AF  1               
00F5AF  1  A9 93                LDA     #<STARTUP       ; OUTPUT STARTUP STRING
00F5B1  1  85 4F                STA     STRPTR          ;
00F5B3  1  A9 FB                LDA     #>STARTUP       ;
00F5B5  1  85 50                STA     STRPTR+1        ;
00F5B7  1  20 46 F9             JSR     OUTSTR          ;
00F5BA  1               
00F5BA  1  A9 00                LDA     #$00            ;
00F5BC  1  8D 00 04             STA     INBUFFER        ; MAKE SURE INPUT BUFFER IS EMPTY
00F5BF  1               ;
00F5BF  1  20 C8 FA             JSR     P_PPP_INITIALIZE
00F5C2  1  20 D1 FA             JSR     P_IDE_INITIALIZE
00F5C5  1               
00F5C5  1               
00F5C5  1  00                   BRK                     ; PERFORM BRK (START MONITOR)
00F5C6  1               
00F5C6  1               
00F5C6  1               ;__BRKROUTINE___________________________________________________
00F5C6  1               ;
00F5C6  1               ; HANDLE CPU BRK INTERRUPT PROCESING AND START MONITOR
00F5C6  1               ;
00F5C6  1               ;_______________________________________________________________
00F5C6  1               BRKROUTINE:
00F5C6  1               ; MONITOR'S BREAK HANDLER
00F5C6  1  18                   CLC
00F5C7  1  68                   PLA                     ;
00F5C8  1  AA                   TAX                     ; LOW BYTE OF PC
00F5C9  1  68                   PLA                     ;
00F5CA  1  A8                   TAY                     ; HIGH BYTE OF PC
00F5CB  1  38                   SEC                     ;
00F5CC  1  8A                   TXA                     ;
00F5CD  1  E9 02                SBC     #$02            ; REMOVE BREAK INSTRUCTION
00F5CF  1  85 4A                STA     PC              ;
00F5D1  1  B0 01                BCS     BRK2            ;
00F5D3  1  88                   DEY
00F5D4  1               BRK2:
00F5D4  1  84 4B                STY     PC+1            ; SAVE PC
00F5D6  1  BA                   TSX                     ; GET STACK POINTER
00F5D7  1  86 4C                STX     SPTR            ; SAVE STACK POINTER
00F5D9  1  20 FC F5             JSR     PRINT_REG       ; DUMP REGISTER CONTENTS
00F5DC  1  A2 FF                LDX     #$FF            ;
00F5DE  1  9A                   TXS                     ; CLEAR STACK
00F5DF  1  58                   CLI                     ; ENABLE INTERRUPTS AGAIN
00F5E0  1  4C 5C F6             JMP     COMMAND_PROCESSOR; START THE MONITOR
00F5E3  1               
00F5E3  1               
00F5E3  1               ;__IRQROUTINE___________________________________________________
00F5E3  1               ;
00F5E3  1               ; HANDLE INTERRUPT PROCESING
00F5E3  1               ;
00F5E3  1               ;_______________________________________________________________
00F5E3  1               IRQROUTINE:
00F5E3  1  58                   CLI                     ; ENABLE INTERRUPTS AGAIN
00F5E4  1  40                   RTI
00F5E5  1               
00F5E5  1               ;__INTERRUPT____________________________________________________
00F5E5  1               ;
00F5E5  1               ; HANDLE IRQ INTERRUPT AND DETERMINE IF IT IS A BRK OR AN IRQ
00F5E5  1               ;
00F5E5  1               ;_______________________________________________________________
00F5E5  1               INTERRUPT:
00F5E5  1  78                   SEI                     ; DISABLE INTERRUPTS
00F5E6  1  84 48                STY     YREG            ; SAVE Y
00F5E8  1  86 47                STX     XREG            ; SAVE X
00F5EA  1  85 46                STA     ACC             ; SAVE A
00F5EC  1  68                   PLA                     ; GET STATUS REGISTER
00F5ED  1  85 49                STA     PREG            ; SAVE STATUS REGISTER
00F5EF  1  29 10                AND     #$10            ; MASK BRK
00F5F1  1  D0 03                BNE     BRKCMD          ; BRK CMD
00F5F3  1  6C 35 00             JMP     (IRQVECTOR)     ; LET USER ROUTINE HAVE IT (USER DEFINED IRQ)
00F5F6  1               BRKCMD:
00F5F6  1  4C C6 F5             JMP     BRKROUTINE      ; MONITOR BRK ROUTINE
00F5F9  1               
00F5F9  1               NINTERRUPT:
00F5F9  1  6C 37 00             JMP     (NMIVECTOR)     ; LET USER ROUTINE HAVE IT (USER DEFINED NMI)
00F5FC  1               
00F5FC  1               
00F5FC  1               
00F5FC  1               ;__PRINT_REG____________________________________________________
00F5FC  1               ;
00F5FC  1               ; PRINT OUT REGISTERS ON THE DISPLAY
00F5FC  1               ;
00F5FC  1               ;_______________________________________________________________
00F5FC  1               PRINT_REG:
00F5FC  1  A9 73                LDA     #<REGDATA       ; OUTPUT HEADER STRING
00F5FE  1  85 4F                STA     STRPTR          ;
00F600  1  A9 FB                LDA     #>REGDATA       ;
00F602  1  85 50                STA     STRPTR+1        ;
00F604  1  20 46 F9             JSR     OUTSTR          ;
00F607  1  A5 4B                LDA     PC+1            ; OUTPUT PROGRAM COUNTER HIGH BYTE
00F609  1  20 2B F9             JSR     PRINT_BYTE      ;
00F60C  1  A5 4A                LDA     PC              ; OUTPUT PROGRAM COUNTER LOW BYTE
00F60E  1  20 2B F9             JSR     PRINT_BYTE      ;
00F611  1  A9 20                LDA     #$20            ; OUTPUT SPACE
00F613  1  20 26 FA             JSR     IOF_OUTCH       ;
00F616  1  A5 46                LDA     ACC             ; OUTPUT ACCUMULATOR
00F618  1  20 2B F9             JSR     PRINT_BYTE      ;
00F61B  1  A9 20                LDA     #$20            ; OUTPUT 2 SPACES
00F61D  1  20 26 FA             JSR     IOF_OUTCH       ;
00F620  1  A9 20                LDA     #$20            ;
00F622  1  20 26 FA             JSR     IOF_OUTCH       ;
00F625  1  A5 47                LDA     XREG            ; OUTPUT X REGISTER
00F627  1  20 2B F9             JSR     PRINT_BYTE      ;
00F62A  1  A9 20                LDA     #$20            ; OUTPUT 2 SPACES
00F62C  1  20 26 FA             JSR     IOF_OUTCH       ;
00F62F  1  A9 20                LDA     #$20            ;
00F631  1  20 26 FA             JSR     IOF_OUTCH       ;
00F634  1  A5 48                LDA     YREG            ; OUTPUT Y REGISTER
00F636  1  20 2B F9             JSR     PRINT_BYTE      ;
00F639  1  A9 20                LDA     #$20            ; OUTPUT 2 SPACES
00F63B  1  20 26 FA             JSR     IOF_OUTCH       ;
00F63E  1  A9 20                LDA     #$20            ;
00F640  1  20 26 FA             JSR     IOF_OUTCH       ;
00F643  1  A5 4C                LDA     SPTR            ; OUTPUT STACK POINTER
00F645  1  20 2B F9             JSR     PRINT_BYTE      ;
00F648  1  A9 20                LDA     #$20            ; OUTPUT 2 SPACES
00F64A  1  20 26 FA             JSR     IOF_OUTCH       ;
00F64D  1  A9 20                LDA     #$20            ;
00F64F  1  20 26 FA             JSR     IOF_OUTCH       ;
00F652  1  A5 49                LDA     PREG            ; OUTPUT STATUS REGISTER
00F654  1  20 2B F9             JSR     PRINT_BYTE      ; OUTPUT IN HEX
00F657  1  A9 0D                LDA     #$0D            ; PRINT NEW LINE
00F659  1  4C 26 FA             JMP     IOF_OUTCH       ;
00F65C  1               
00F65C  1               
00F65C  1               
00F65C  1               
00F65C  1               ;__COMMAND_PROCESSOR____________________________________________
00F65C  1               ;
00F65C  1               ; PROMPT FOR, INPUT, AND PROCESS INCOMMING USER COMMANDS
00F65C  1               ;
00F65C  1               ;_______________________________________________________________
00F65C  1               COMMAND_PROCESSOR:
00F65C  1               
00F65C  1  20 8A F8             JSR     DISPLAY_PROMPT  ; PRINT PROMPT STRING
00F65F  1               
00F65F  1  A9 00                LDA     #<INBUFFER      ; SETUP INPUT COMMAND BUFFER
00F661  1  85 4F                STA     STRPTR          ;
00F663  1  A9 04                LDA     #>INBUFFER      ;
00F665  1  85 50                STA     STRPTR +1       ;
00F667  1               
00F667  1  20 5B F9             JSR     INSTR           ; GET A STRING FROM THE CONSOLE
00F66A  1               
00F66A  1  A9 0D                LDA     #$0D            ;
00F66C  1  20 26 FA             JSR     IOF_OUTCH       ;
00F66F  1  A9 0A                LDA     #$0A            ;
00F671  1  20 26 FA             JSR     IOF_OUTCH       ;
00F674  1               
00F674  1  A0 00                LDY     #$00            ; SET INDEX = 0
00F676  1               
00F676  1  A9 F9                LDA     #<COMMAND_LOOKUP_TABLE; SETUP INPUT COMMAND POINTER
00F678  1  85 3B                STA     WORKPTR         ;
00F67A  1  A9 FA                LDA     #>COMMAND_LOOKUP_TABLE;
00F67C  1  85 3C                STA     WORKPTR +1      ;
00F67E  1  B9 00 04             LDA     INBUFFER,Y      ; MOVE FIRST BYTE OF COMMAND BUFFER TO ACC
00F681  1  C9 00                CMP     #$00            ; IS NULL?
00F683  1  F0 D7                BEQ     COMMAND_PROCESSOR; YES, GET NEXT COMMAND
00F685  1               
00F685  1               COMMAND_PROCESSOR_CMP:
00F685  1  A2 00                LDX     #$00            ; X=0
00F687  1  B9 00 04             LDA     INBUFFER,Y      ; ACC= NEXT BYTE OF INPUT BUFFER
00F68A  1  C1 3B                CMP     (WORKPTR,X)     ; DOES NEXT BYTE OF INPUT BUFFER MATCH NEXT BYTE OF LOOKUP TABLE
00F68C  1  D0 1A                BNE     CMD_PROCESOR_NEXT_CMD; NO, GO TO NEXT COMMAND IN LOOKUP TABLE
00F68E  1  C8                   INY                     ; YES, Y=Y+1
00F68F  1  B9 00 04             LDA     INBUFFER,Y      ; LOAD NEXT BYTE OF INPUT BUFFER
00F692  1  C9 20                CMP     #$20            ; IS IT A SPACE (SINGALING END OF COMMAND)
00F694  1  F0 2F                BEQ     CMD_PROCESSOR_MATCH_FOUND; YES, POSSIBLE MATCH FOUND
00F696  1  C9 00                CMP     #$00            ; IS IT A NULL (SINGALING END OF COMMAND)
00F698  1  F0 2B                BEQ     CMD_PROCESSOR_MATCH_FOUND; YES, POSSIBLE MATCH FOUND
00F69A  1  20 95 F8             JSR     INCWORKPTR      ; NO, INCREMENT POINTER TO LOOKUP TABLE
00F69D  1  A2 00                LDX     #$00            ;
00F69F  1  A1 3B                LDA     (WORKPTR,X)     ; A= NEXT BYTE OF LOOKUP TABLE
00F6A1  1  C9 00                CMP     #$00            ; IS IT A NULL? (SIGNALING END OF TABLE ENTRY)
00F6A3  1  F0 0E                BEQ     CMD_PROCESOR_NEXT_CMD1; YES, ADVANCE TO NEXT COMMAND IN TABLE
00F6A5  1  4C 85 F6             JMP     COMMAND_PROCESSOR_CMP; LOOP TO CHECK NEXT CHAR
00F6A8  1               
00F6A8  1               CMD_PROCESOR_NEXT_CMD:
00F6A8  1  20 95 F8             JSR     INCWORKPTR      ; INCREMENT POINTER TO LOOKUP TABLE
00F6AB  1  A2 00                LDX     #$00            ;
00F6AD  1  A1 3B                LDA     (WORKPTR,X)     ; A = NEXT BYTE OF LOOKUP TABLE
00F6AF  1  C9 00                CMP     #$00            ; IS IT A NULL?
00F6B1  1  D0 F5                BNE     CMD_PROCESOR_NEXT_CMD; NO, LOOP
00F6B3  1               
00F6B3  1               CMD_PROCESOR_NEXT_CMD1:
00F6B3  1  A9 03                LDA     #3
00F6B5  1  20 9C F8             JSR     INCWORKPTRX     ; INCREMENT POINTER TO LOOKUP TABLE
00F6B8  1  A2 00                LDX     #$00            ;
00F6BA  1  A1 3B                LDA     (WORKPTR,X)     ; A = NEXT BYTE OF LOOKUP TABLE
00F6BC  1  C9 01                CMP     #$01            ; IS IT $01 (SINGALING END OF LOOKUP TABLE)
00F6BE  1  F0 28                BEQ     CMD_PROCESOR_NOT_FOUND; YES, DISPLAY NOT FOUND MESSAGE
00F6C0  1  A0 00                LDY     #$00            ; NO RESET INPUT BUFFER COUNTER
00F6C2  1  4C 85 F6             JMP     COMMAND_PROCESSOR_CMP; LOOP
00F6C5  1               
00F6C5  1               CMD_PROCESSOR_MATCH_FOUND:
00F6C5  1  20 95 F8             JSR     INCWORKPTR      ; INCREMENT POINTER TO LOOKUP TABLE
00F6C8  1  A2 00                LDX     #$00            ;
00F6CA  1  A1 3B                LDA     (WORKPTR,X)     ; A = NEXT BYTE OF LOOKUP TABLE
00F6CC  1  C9 00                CMP     #$00            ; IS IT A NULL?
00F6CE  1  D0 D8                BNE     CMD_PROCESOR_NEXT_CMD; NO, TRY NEXT COMMAND
00F6D0  1  20 95 F8             JSR     INCWORKPTR      ; YES, INCREMENT POINTER TO LOOKUP TABLE
00F6D3  1  A2 00                LDX     #$00            ;
00F6D5  1  A1 3B                LDA     (WORKPTR,X)     ; A = NEXT BYTE OF LOOKUP TABLE
00F6D7  1  85 3D                STA     JUMPPTR         ; STORE A INTO LOW BYTE OF JUMP VECTOR
00F6D9  1  20 95 F8             JSR     INCWORKPTR      ; INCREMENT POINTER TO LOOKUP TABLE
00F6DC  1  A2 00                LDX     #$00            ;
00F6DE  1  A1 3B                LDA     (WORKPTR,X)     ; A = NEXT BYTE OF LOOKUP TABLE
00F6E0  1  85 3E                STA     JUMPPTR+1       ; INCREMENT POINTER TO LOOKUP TABLE
00F6E2  1  20 F6 F6             JSR     CMD_PROCESOR_RUN; RUN COMMAND
00F6E5  1  4C 5C F6             JMP     COMMAND_PROCESSOR; GET NEXT COMMAND
00F6E8  1               
00F6E8  1               CMD_PROCESOR_NOT_FOUND:
00F6E8  1  A9 4E                LDA     #<ERROR         ; LOAD LOW BYTE OF ERROR STRING
00F6EA  1  85 4F                STA     STRPTR          ; STORE IN POINTER LOW BYTE
00F6EC  1  A9 FB                LDA     #>ERROR         ; LOAD HOGH BYTE OF ERROR STRING
00F6EE  1  85 50                STA     STRPTR +1       ; STORE IN POINTER HIGH BYTE
00F6F0  1               
00F6F0  1  20 46 F9             JSR     OUTSTR          ; OUTPUT THE STRING
00F6F3  1  4C 5C F6             JMP     COMMAND_PROCESSOR;
00F6F6  1               CMD_PROCESOR_RUN:
00F6F6  1  6C 3D 00             JMP     (JUMPPTR)       ; JUMP TO COMMAND VECTOR
00F6F9  1               
00F6F9  1               EXIT_MONITOR:
00F6F9  1  6C FC FF             JMP     ($FFFC)         ;
00F6FC  1               
00F6FC  1               
00F6FC  1               ;__BOOT_________________________________________________________
00F6FC  1               ;
00F6FC  1               ; BOOT OS
00F6FC  1               ;
00F6FC  1               ; BOOT X
00F6FC  1               ;_______________________________________________________________
00F6FC  1               IOF_BOOT:
00F6FC  1               ;
00F6FC  1  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00F6FE  1  85 3B                STA     WORKPTR         ;
00F700  1  A9 04                LDA     #>INBUFFER      ;
00F702  1  85 3C                STA     WORKPTR +1      ;
00F704  1               
00F704  1  A9 04                LDA     #4
00F706  1  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "BOOT"
00F709  1               
00F709  1  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00F70C  1  20 09 F9             JSR     HEXIN           ;
00F70F  1  B0 52                BCS     BOOT_ERROR
00F711  1               
00F711  1  C9 01                CMP     #$01            ;
00F713  1  F0 32                BEQ     BOOTFDD
00F715  1               ;
00F715  1  C9 04                CMP     #$04            ;
00F717  1  F0 17                BEQ     BOOTHDD
00F719  1               
00F719  1  20 92 FA             JSR     P_PPP_SOFT_RESET;
00F71C  1  A9 00                LDA     #$00
00F71E  1  8D 28 05             STA     DSKUNIT
00F721  1  8D 10 05             STA     debcyll         ;
00F724  1  8D 11 05             STA     debcylm         ;
00F727  1  8D 12 05             STA     debsehd         ;
00F72A  1  20 9B FA             JSR     P_PPP_READ_SECTOR;
00F72D  1  4C 00 02             JMP     hstbuf          ;
00F730  1               ;
00F730  1               BOOTHDD:
00F730  1               ;
00F730  1  20 C8 FA             JSR     P_PPP_INITIALIZE;
00F733  1  A9 00                LDA     #$00
00F735  1  8D 28 05             STA     DSKUNIT
00F738  1  8D 10 05             STA     debcyll         ;
00F73B  1  8D 11 05             STA     debcylm         ;
00F73E  1  8D 12 05             STA     debsehd         ;
00F741  1  20 B6 FA             JSR     P_IDE_READ_SECTOR;
00F744  1  4C 00 02             JMP     hstbuf          ;
00F747  1               BOOTFDD:
00F747  1               ;
00F747  1  A9 01                LDA     #$01            ;
00F749  1  8D 16 05             STA     sekdsk          ;
00F74C  1  20 77 FA             JSR     P_SETUPDRIVE    ;
00F74F  1  A9 00                LDA     #$00
00F751  1  8D 28 05             STA     DSKUNIT
00F754  1  8D 10 05             STA     debcyll         ;
00F757  1  8D 11 05             STA     debcylm         ;
00F75A  1  8D 12 05             STA     debsehd         ;
00F75D  1  20 80 FA             JSR     P_READFL        ;
00F760  1  4C 00 02             JMP     hstbuf          ;
00F763  1               
00F763  1               BOOT_ERROR:
00F763  1  4C BD F8             JMP     INVALID_NUMBER_ERROR
00F766  1               ;__GO______________________________________________________
00F766  1               ;
00F766  1               ; GO COMMAND
00F766  1               ;
00F766  1               ; GO XXXX
00F766  1               ;_______________________________________________________________
00F766  1               GO:
00F766  1               
00F766  1  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00F768  1  85 3B                STA     WORKPTR         ;
00F76A  1  A9 04                LDA     #>INBUFFER      ;
00F76C  1  85 3C                STA     WORKPTR +1      ;
00F76E  1               
00F76E  1  A9 02                LDA     #2
00F770  1  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "GO"
00F773  1               
00F773  1  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00F776  1  20 C8 F8             JSR     GETNUMBER       ; GET THE STARTING ADDRESS
00F779  1  B0 4C                BCS     DUMP_ERROR      ; IF NOT A NUMBER, REPORT ERROR
00F77B  1               
00F77B  1  6C 3F 00             JMP     (TEMPWORD)      ;
00F77E  1               
00F77E  1               
00F77E  1               
00F77E  1               
00F77E  1               ;__DUMPMEM______________________________________________________
00F77E  1               ;
00F77E  1               ; DUMP MEMORY COMMAND
00F77E  1               ;
00F77E  1               ; DUMP XXXX (XXXX)
00F77E  1               ;_______________________________________________________________
00F77E  1               DUMP:
00F77E  1               
00F77E  1  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00F780  1  85 3B                STA     WORKPTR         ;
00F782  1  A9 04                LDA     #>INBUFFER      ;
00F784  1  85 3C                STA     WORKPTR +1      ;
00F786  1               
00F786  1  A9 04                LDA     #4
00F788  1  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "DUMP"
00F78B  1               
00F78B  1  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER THE WHITESPACE
00F78E  1  20 C8 F8             JSR     GETNUMBER       ; GET THE STARTING ADDRESS
00F791  1  B0 34                BCS     DUMP_ERROR      ; IF NOT A NUMBER, REPORT ERROR
00F793  1               
00F793  1  A5 3F                LDA     TEMPWORD        ; STORE STARTING ADDRESS IN WORD POINTER (TEMPWORD1)
00F795  1  85 41                STA     TEMPWORD1       ;
00F797  1  A5 40                LDA     TEMPWORD+1      ;
00F799  1  85 42                STA     TEMPWORD1+1     ;
00F79B  1               
00F79B  1  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER ANY WHITESPACE
00F79E  1  20 C8 F8             JSR     GETNUMBER       ; GET THE ENDING ADDRESS
00F7A1  1  B0 24                BCS     DUMP_ERROR      ; IF NOT A NUMBER, REPORT ERROR
00F7A3  1               
00F7A3  1  A5 41                LDA     TEMPWORD1       ; STORE ENDING ADDRESS IN WORD POINTER (WORKPTR)
00F7A5  1  85 3B                STA     WORKPTR         ;
00F7A7  1  A5 42                LDA     TEMPWORD1+1     ;
00F7A9  1  85 3C                STA     WORKPTR+1       ;
00F7AB  1               DUMP_LOOP:
00F7AB  1  20 49 F8             JSR     PRINT_MEM_LINE  ;
00F7AE  1  A9 0D                LDA     #$0D            ;
00F7B0  1  20 26 FA             JSR     IOF_OUTCH       ;
00F7B3  1  A9 0A                LDA     #$0A            ;
00F7B5  1  20 26 FA             JSR     IOF_OUTCH       ;
00F7B8  1  A5 3C                LDA     WORKPTR+1       ; COMPARE HIGH BYTES
00F7BA  1  C5 40                CMP     TEMPWORD+1
00F7BC  1  90 ED                BCC     DUMP_LOOP       ; IF NUM1H < NUM2H THEN NUM1 < NUM2
00F7BE  1  D0 06                BNE     DUMP_DONE       ; IF NUM1H <> NUM2H THEN NUM1 > NUM2 (SO NUM1 >= NUM2)
00F7C0  1  A5 3B                LDA     WORKPTR         ; COMPARE LOW BYTES
00F7C2  1  C5 3F                CMP     TEMPWORD
00F7C4  1  90 E5                BCC     DUMP_LOOP       ; IF NUM1L < NUM2L THEN NUM1 < NUM2
00F7C6  1               DUMP_DONE:
00F7C6  1  60                   RTS
00F7C7  1               DUMP_ERROR:
00F7C7  1  4C BD F8             JMP     INVALID_NUMBER_ERROR
00F7CA  1               
00F7CA  1               
00F7CA  1               
00F7CA  1               ;__ENTERMEM_____________________________________________________
00F7CA  1               ;
00F7CA  1               ; ENTER MEMORY COMMAND
00F7CA  1               ;
00F7CA  1               ; ENTER XXXX (XX XX XX XX XX XX XX XX XX XX XX XX XX XX )
00F7CA  1               ;_______________________________________________________________
00F7CA  1               ENTERMEM:
00F7CA  1               
00F7CA  1  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00F7CC  1  85 3B                STA     WORKPTR         ;
00F7CE  1  A9 04                LDA     #>INBUFFER      ;
00F7D0  1  85 3C                STA     WORKPTR +1      ;
00F7D2  1               
00F7D2  1  A9 05                LDA     #5
00F7D4  1  20 9C F8             JSR     INCWORKPTRX     ; JUMP OVER "ENTER"
00F7D7  1               
00F7D7  1  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER ANY WHITESPACE
00F7DA  1  20 C8 F8             JSR     GETNUMBER       ; GET NUMBER
00F7DD  1  B0 67                BCS     ENTER_ERROR     ; IF NOT A NUMBER REPORT ERROR
00F7DF  1               
00F7DF  1  A5 3F                LDA     TEMPWORD        ; STORE ADDRESS INTO WORD POINTER (TEMPWORD1)
00F7E1  1  85 41                STA     TEMPWORD1       ;
00F7E3  1  A5 40                LDA     TEMPWORD+1      ;
00F7E5  1  85 42                STA     TEMPWORD1+1     ;
00F7E7  1  A0 00                LDY     #$00            ; RESET COUNTER TO 0
00F7E9  1               ENTERLOOP:
00F7E9  1  A2 00                LDX     #$00            ;
00F7EB  1  A1 3B                LDA     (WORKPTR,X)     ; GET NEXT BYTE FROM BUFFER
00F7ED  1  C9 00                CMP     #$00            ; IS NULL?
00F7EF  1  F0 10                BEQ     ENTER_DONE      ; YES, WE'RE DONE
00F7F1  1  20 1C F9             JSR     EATWHITESPACE   ; SKIP OVER ANY WHITESPACE
00F7F4  1  20 C8 F8             JSR     GETNUMBER       ; GET NEXT NUMBER
00F7F7  1  B0 4D                BCS     ENTER_ERROR     ; IF NOT A NUMBER REPORT ERROR
00F7F9  1  A5 3F                LDA     TEMPWORD        ; STORE BYTE IN ADDRESS (INDEXED BY Y)
00F7FB  1  91 41                STA     (TEMPWORD1),Y   ;
00F7FD  1  C8                   INY                     ; GO TO NEXT BYTE
00F7FE  1  4C E9 F7             JMP     ENTERLOOP       ; LOOP
00F801  1               ENTER_DONE:
00F801  1  C0 00                CPY     #$00            ; WAS LINE BLANK?
00F803  1  D0 01                BNE     ENTER_CONTINUE  ; NO, PREPARE FOR NEXT LINE
00F805  1  60                   RTS                     ; YES, END DATA ENTRY
00F806  1               ENTER_CONTINUE:
00F806  1  A9 0D                LDA     #$0D            ;
00F808  1  20 26 FA             JSR     IOF_OUTCH       ;
00F80B  1  A9 0A                LDA     #$0A            ;
00F80D  1  20 26 FA             JSR     IOF_OUTCH
00F810  1  A9 3A                LDA     #$3A            ; OUTPUT ":" TO SCREEN
00F812  1  20 26 FA             JSR     IOF_OUTCH       ;
00F815  1  18                   CLC                     ; CLEAR CARRY
00F816  1  98                   TYA                     ; A=Y (LAST COUNTER)
00F817  1  65 41                ADC     TEMPWORD1       ; ADD LAST COUNT TO BEGINNING POINTER
00F819  1  85 41                STA     TEMPWORD1       ; STORE RESULT IN BEGINNING POINTER
00F81B  1  D0 02                BNE     ENTER_INCREMENT ; NOT ZERO?, DONE
00F81D  1  E6 42                INC     TEMPWORD1+1     ; ZERO, INC HIGH BYTE
00F81F  1               ENTER_INCREMENT:
00F81F  1  A5 42                LDA     TEMPWORD1+1     ; PRINTOUT STARTING ADDRESS TO SCREEN
00F821  1  20 2B F9             JSR     PRINT_BYTE      ; (HIGH)
00F824  1  A5 41                LDA     TEMPWORD1       ;
00F826  1  20 2B F9             JSR     PRINT_BYTE      ; (LOW)
00F829  1  A9 20                LDA     #$20            ; OUTPUT SPACE TO SCREEN
00F82B  1  20 26 FA             JSR     IOF_OUTCH       ;
00F82E  1  A9 00                LDA     #<INBUFFER      ; SETUP INPUT COMMAND BUFFER
00F830  1  85 4F                STA     STRPTR          ;
00F832  1  A9 04                LDA     #>INBUFFER      ;
00F834  1  85 50                STA     STRPTR +1       ;
00F836  1  20 5B F9             JSR     INSTR           ; GET A STRING FROM THE CONSOLE
00F839  1  A9 00                LDA     #<INBUFFER      ; SETUP WORK BUFFER
00F83B  1  85 3B                STA     WORKPTR         ;
00F83D  1  A9 04                LDA     #>INBUFFER      ;
00F83F  1  85 3C                STA     WORKPTR +1      ;
00F841  1  A0 00                LDY     #$00            ;
00F843  1  4C E9 F7             JMP     ENTERLOOP       ; LOOP
00F846  1               
00F846  1               
00F846  1               ENTER_ERROR:
00F846  1  4C BD F8             JMP     INVALID_NUMBER_ERROR
00F849  1               
00F849  1               ;__PRINT_MEM_LINE_______________________________________________
00F849  1               ;
00F849  1               ; PRINT MEMORY DUMP LINE
00F849  1               ;
00F849  1               ; PRINT 16 HEX LOCATIONS STARTING WITH ADDRESS WORKPTR
00F849  1               ;_______________________________________________________________
00F849  1               PRINT_MEM_LINE:
00F849  1  A9 3A                LDA     #$3A            ; LOAD ':' INTO ACC
00F84B  1  20 26 FA             JSR     IOF_OUTCH       ; PRINT ':'
00F84E  1  A5 3C                LDA     WORKPTR+1       ; PRINT ADDRESS
00F850  1  20 2B F9             JSR     PRINT_BYTE      ;
00F853  1  A5 3B                LDA     WORKPTR         ;
00F855  1  20 2B F9             JSR     PRINT_BYTE      ;
00F858  1  A9 2D                LDA     #$2D            ; LOAD '-'
00F85A  1  20 26 FA             JSR     IOF_OUTCH       ; PRINT '-'
00F85D  1  A0 00                LDY     #$00            ;
00F85F  1               PRINT_MEM_LINE_LOOP:
00F85F  1  B1 3B                LDA     (WORKPTR),Y     ; LOAD NEXT BYTE
00F861  1  20 2B F9             JSR     PRINT_BYTE      ; PRINT BYTE
00F864  1  A9 20                LDA     #$20            ; LOAD ' '
00F866  1  20 26 FA             JSR     IOF_OUTCH       ; PRINT ' '
00F869  1  C8                   INY                     ; INCREMENT COUNTER
00F86A  1  C0 10                CPY     #$10            ; HAVE WE PRINTED 16 ADDRESSES
00F86C  1  D0 F1                BNE     PRINT_MEM_LINE_LOOP; NO, LOOP
00F86E  1  A9 3A                LDA     #$3A            ; LOAD ':' INTO ACC
00F870  1  20 26 FA             JSR     IOF_OUTCH       ; PRINT ':'
00F873  1  A2 00                LDX     #$00            ;
00F875  1  A0 00                LDY     #$00            ;
00F877  1               PRINT_MEM_LINE_LOOP_ASCII:
00F877  1  A1 3B                LDA     (WORKPTR,X)     ; GET NEXT BYTE
00F879  1  20 AD F8             JSR     OUTASCII        ; PRINT ASCII VALUE OF BYTE
00F87C  1  C8                   INY                     ; INCREMENT COUNTER
00F87D  1  20 95 F8             JSR     INCWORKPTR      ; INCREMENT BUFFER POINTER
00F880  1  C0 10                CPY     #$10            ; HAVE WE PRINTED 16 ADDRESSES
00F882  1  D0 F3                BNE     PRINT_MEM_LINE_LOOP_ASCII; NO, LOOP
00F884  1  A9 0D                LDA     #$0D            ; YES, PRINT CR
00F886  1  20 26 FA             JSR     IOF_OUTCH       ;
00F889  1  60                   RTS                     ; RETURN
00F88A  1               
00F88A  1               
00F88A  1               
00F88A  1               ;__DISPLAY_PROMPT______________________________________________
00F88A  1               ;
00F88A  1               ; DISPLAY THE INPUT PROMPT ON THE SCREEN
00F88A  1               ;
00F88A  1               ;______________________________________________________________
00F88A  1               DISPLAY_PROMPT:
00F88A  1  A9 4A                LDA     #<PROMPT        ; LOAD LOW BYTE OF PROMPT STRING
00F88C  1  85 4F                STA     STRPTR          ; STORE IN POINTER LOW BYTE
00F88E  1  A9 FB                LDA     #>PROMPT        ; LOAD HOGH BYTE OF PROMPR STRING
00F890  1  85 50                STA     STRPTR +1       ; STORE IN POINTER HIGH BYTE
00F892  1               
00F892  1  4C 46 F9             JMP     OUTSTR          ; OUTPUT THE STRING
00F895  1               
00F895  1               
00F895  1               ;__INCWORKPTR___________________________________________________
00F895  1               ; INCREMENT THE 16BIT WORK POINTER
00F895  1               ;
00F895  1               ;_______________________________________________________________
00F895  1               INCWORKPTR:
00F895  1  E6 3B                INC     WORKPTR         ; INCREMENT LOWBYTE
00F897  1  D0 02                BNE     :+              ; NOT ZERO?, DONE
00F899  1  E6 3C                INC     WORKPTR+1       ; ZERO, INC HIGH BYTE
00F89B  1               :
00F89B  1  60                   RTS                     ; RETURN
00F89C  1               
00F89C  1               ;__INCWORKPTRX__________________________________________________
00F89C  1               ; INCREMENT THE 16BIT WORK POINTER X TIMES
00F89C  1               ;   A= NUMBER OF TIMES TO INCREMENT
00F89C  1               ;_______________________________________________________________
00F89C  1               INCWORKPTRX:
00F89C  1  18                   CLC
00F89D  1  65 3B                ADC     WORKPTR         ; INCREMENT LOWBYTE
00F89F  1  90 02                BCC     :+              ; NO CARRY?
00F8A1  1  E6 3C                INC     WORKPTR+1       ; CARRY, INC HIGH BYTE
00F8A3  1               :
00F8A3  1  85 3B                STA     WORKPTR         ; STORE
00F8A5  1  60                   RTS                     ; RETURN
00F8A6  1               
00F8A6  1               
00F8A6  1               
00F8A6  1               ;__INCTEMPWORD2__________________________________________________
00F8A6  1               ;
00F8A6  1               ; INCREMENT THE 16BIT WORK POINTER
00F8A6  1               ;
00F8A6  1               ;
00F8A6  1               ;_______________________________________________________________
00F8A6  1               INCTEMPWORD2:
00F8A6  1  E6 43                INC     TEMPWORD2       ; INCREMENT LOWBYTE
00F8A8  1  D0 02                BNE     :+              ; NOT ZERO?, DONE
00F8AA  1  E6 44                INC     TEMPWORD2+1     ; ZERO, INC HIGH BYTE
00F8AC  1               :
00F8AC  1  60                   RTS                     ; RETURN
00F8AD  1               
00F8AD  1               
00F8AD  1               
00F8AD  1               ;__OUTASCII_____________________________________________________
00F8AD  1               ;
00F8AD  1               ; PRINT CHAR IF VALID, ELSE PRINT '.'
00F8AD  1               ;
00F8AD  1               ;_______________________________________________________________
00F8AD  1               OUTASCII:
00F8AD  1  C9 20                CMP     #$20            ; IS < 20
00F8AF  1  90 07                BCC     :+              ; YES, SKIP
00F8B1  1  C9 80                CMP     #$80
00F8B3  1  B0 03                BCS     :+
00F8B5  1  4C 26 FA             JMP     IOF_OUTCH       ; NO, PRINT CHAR AND RETURN
00F8B8  1               :
00F8B8  1  A9 2E                LDA     #$2E            ; A= '.'
00F8BA  1  4C 26 FA             JMP     IOF_OUTCH       ; PRINT '.' AND RETURN
00F8BD  1               
00F8BD  1               
00F8BD  1               
00F8BD  1               ;__INVALID_NUMBER_ERROR__________________________________________
00F8BD  1               ;
00F8BD  1               ; PRINT "INVALID HEX NUMBER MESSAGE"
00F8BD  1               ;
00F8BD  1               ;_______________________________________________________________
00F8BD  1               INVALID_NUMBER_ERROR:
00F8BD  1  A9 5F                LDA     #<INERROR       ; LOAD LOW BYTE OF ERROR STRING
00F8BF  1  85 4F                STA     STRPTR          ; STORE IN POINTER LOW BYTE
00F8C1  1  A9 FB                LDA     #>INERROR       ; LOAD HOGH BYTE OF ERROR STRING
00F8C3  1  85 50                STA     STRPTR +1       ; STORE IN POINTER HIGH BYTE
00F8C5  1  4C 46 F9             JMP     OUTSTR          ; OUTPUT THE STRING
00F8C8  1               
00F8C8  1               
00F8C8  1               ;__GETNUMBER______________________________________________________
00F8C8  1               ;
00F8C8  1               ; GET ASCII NUMBER FROM BUFFER AND PARSE INTO TEMPWORD
00F8C8  1               ;
00F8C8  1               ;_______________________________________________________________
00F8C8  1               GETNUMBER:
00F8C8  1  A9 00                LDA     #$00            ;
00F8CA  1  85 3F                STA     TEMPWORD        ; CLEAR OUT TEMPWORD (OUTPUT OF GETNUMBER)
00F8CC  1  85 40                STA     TEMPWORD+1      ;
00F8CE  1  A2 00                LDX     #$00            ;
00F8D0  1               GETNUMBER_LOOP:
00F8D0  1  A1 3B                LDA     (WORKPTR,X)     ; GET NEXT BYTE FROM BUFFER
00F8D2  1  C9 20                CMP     #$20            ; IS SPACE?
00F8D4  1  F0 31                BEQ     GETNUMBER_DONE  ; YES, WE'RE DONE
00F8D6  1  C9 00                CMP     #$00            ; IS NULL?
00F8D8  1  F0 2D                BEQ     GETNUMBER_DONE  ; YES, WE'RE DONE
00F8DA  1  C9 2C                CMP     #$2C            ; IS ","?
00F8DC  1  F0 29                BEQ     GETNUMBER_DONE  ; YES, WE'RE DONE
00F8DE  1  C9 29                CMP     #$29            ; IS ")"?
00F8E0  1  F0 25                BEQ     GETNUMBER_DONE  ; YES, WE'RE DONE
00F8E2  1  20 09 F9             JSR     HEXIN           ; GET HEX DIGIT
00F8E5  1  B0 1E                BCS     GETNUMBER_ERROR ; IS INVALID DIGIT?, YES PRINT ERROR AND ABORT
00F8E7  1  18                   CLC                     ; CLEAR CARRY
00F8E8  1  26 3F                ROL     TEMPWORD        ; MOVE WORD OVER 4 BITS TO LEFT
00F8EA  1  26 40                ROL     TEMPWORD+1      ;
00F8EC  1  18                   CLC                     ;
00F8ED  1  26 3F                ROL     TEMPWORD        ;
00F8EF  1  26 40                ROL     TEMPWORD+1      ;
00F8F1  1  18                   CLC                     ;
00F8F2  1  26 3F                ROL     TEMPWORD        ;
00F8F4  1  26 40                ROL     TEMPWORD+1      ;
00F8F6  1  18                   CLC                     ;
00F8F7  1  26 3F                ROL     TEMPWORD        ;
00F8F9  1  26 40                ROL     TEMPWORD+1      ;
00F8FB  1  05 3F                ORA     TEMPWORD        ; ADD IN NEW DIGIT
00F8FD  1  85 3F                STA     TEMPWORD        ; STORE BACK TO TEMPWORD
00F8FF  1  20 95 F8             JSR     INCWORKPTR      ; INCREMENT BUFFER POINTER
00F902  1  4C D0 F8             JMP     GETNUMBER_LOOP  ; LOOP
00F905  1               GETNUMBER_ERROR:
00F905  1  38                   SEC                     ; SET ERROR FLAG (CARRY)
00F906  1  60                   RTS                     ; RETURN
00F907  1               GETNUMBER_DONE:
00F907  1  18                   CLC                     ; CLEAR ERROR FLAG (CARRY)
00F908  1  60                   RTS                     ; RETURN
00F909  1               
00F909  1               ;__HEXIN________________________________________________________
00F909  1               ;
00F909  1               ; GET NEXT CHAR FROM INPUT BUFFER AND CHANGE TO HEX DIGIT
00F909  1               ;
00F909  1               ; IF INVALID, SET CARRY FLAG
00F909  1               ;_______________________________________________________________
00F909  1               HEXIN:
00F909  1  A2 00                LDX     #$00            ;
00F90B  1  A1 3B                LDA     (WORKPTR,X)     ; GET NEXT CHAR FROM BUFFER
00F90D  1  C9 3A                CMP     #$3A            ; LESS THAN 9?
00F90F  1  B0 02                BCS     HEXIN_BIG       ; NO, SKIP NEXT
00F911  1  E9 2F                SBC     #$2F            ; CONVERT 0-9
00F913  1               HEXIN_BIG:
00F913  1  C9 41                CMP     #$41            ; A OR MORE?
00F915  1  90 02                BCC     HEXIN_SMALL     ; NO, SKIP NEXT
00F917  1  E9 37                SBC     #$37            ; CONVERT A-F
00F919  1               HEXIN_SMALL:
00F919  1  C9 10                CMP     #$10            ; RESULT TOO BIG?
00F91B  1  60                   RTS
00F91C  1               
00F91C  1               
00F91C  1               ;__EATWHITESPACE___________________________________________________
00F91C  1               ;
00F91C  1               ; FORWARD THE BUFFER POINTER PAST ANY WHITE SPACE IN THE INPUT BUFFER
00F91C  1               ;
00F91C  1               ;_______________________________________________________________
00F91C  1               EATWHITESPACE:
00F91C  1  A2 00                LDX     #$00            ;
00F91E  1  A1 3B                LDA     (WORKPTR,X)     ; GET NEXT CHAR FROM BUFFER
00F920  1  C9 20                CMP     #$20            ; IS SPACE
00F922  1  D0 06                BNE     EATWHITESPACE_OUT; NO, DONE
00F924  1  20 95 F8             JSR     INCWORKPTR      ; YES, INCREMENT BUFFER POINTER
00F927  1  4C 1C F9             JMP     EATWHITESPACE   ; LOOP
00F92A  1               EATWHITESPACE_OUT:
00F92A  1  60                   RTS                     ; RETURN
00F92B  1               
00F92B  1               
00F92B  1               ;__PRINT_BYTE__________________________________________________
00F92B  1               ;
00F92B  1               ; PRINT OUT ACCUMULATOR AS HEX NUMBER
00F92B  1               ;
00F92B  1               ;______________________________________________________________
00F92B  1               PRINT_BYTE:
00F92B  1  AA                   TAX                     ; SAVE A REGISTER
00F92C  1  4A                   LSR     A               ; SHIFT HIGH NIBBLE TO LOW NIBBLE
00F92D  1  4A                   LSR     A               ;
00F92E  1  4A                   LSR     A               ;
00F92F  1  4A                   LSR     A               ;
00F930  1  18                   CLC                     ; CLEAR CARRY
00F931  1  20 38 F9             JSR     PRINT_DIGIT     ; PRINT LOW NIBBLE
00F934  1  8A                   TXA                     ; RESTORE ACCUMULATOR
00F935  1  4C 38 F9             JMP     PRINT_DIGIT     ; PRINT LOW NIBBLE
00F938  1               
00F938  1               ;__PRINT_DIGIT_________________________________________________
00F938  1               ;
00F938  1               ; PRINT OUT LOW NIBBLE OF ACCUMULATOR IN HEX
00F938  1               ;
00F938  1               ;______________________________________________________________
00F938  1               PRINT_DIGIT:
00F938  1  29 0F                AND     #$0F            ; STRIP OFF HIGH NIBBLE
00F93A  1  09 30                ORA     #$30            ; ADD $30 TO PRODUCE ASCII
00F93C  1  C9 3A                CMP     #$3A            ; IS GREATER THAN 9
00F93E  1  30 03                BMI     PRINT_DIGIT_OUT ; NO, SKIP ADD
00F940  1  18                   CLC                     ; CLEAR CARRY
00F941  1  69 07                ADC     #$07            ; ADD ON FOR LETTER VALUES
00F943  1               PRINT_DIGIT_OUT:                ;
00F943  1  4C 26 FA             JMP     IOF_OUTCH       ; PRINT OUT CHAR
00F946  1               
00F946  1               
00F946  1               
00F946  1               ;__OUTSTR______________________________________________________
00F946  1               ;
00F946  1               ; OUTPUT THE STRING POINTED TO BY OUTSTR TO THE SCREEN
00F946  1               ;
00F946  1               ;______________________________________________________________
00F946  1               OUTSTR:
00F946  1  A0 00                LDY     #$00            ; LOAD $00 INTO Y
00F948  1               OUTSTRLP:
00F948  1  B1 4F                LDA     (STRPTR),Y      ; LOAD NEXT CHAR FROM STRING INTO ACC
00F94A  1  C9 00                CMP     #$00            ; IS NULL?
00F94C  1  F0 0C                BEQ     ENDOUTSTR       ; YES, END PRINT OUT
00F94E  1  20 26 FA             JSR     IOF_OUTCH       ; PRINT CHAR IN ACC
00F951  1  E6 4F                INC     STRPTR
00F953  1  D0 F3                BNE     OUTSTRLP
00F955  1  E6 50                INC     STRPTR+1
00F957  1  4C 48 F9             JMP     OUTSTRLP        ; DO NEXT CHAR
00F95A  1               ENDOUTSTR:
00F95A  1  60                   RTS                     ; RETURN
00F95B  1               
00F95B  1               ;__INSTR_______________________________________________________
00F95B  1               ;
00F95B  1               ; INPUT STRING FROM KEYBOARD INTO KEYBOARD BUFFER
00F95B  1               ;
00F95B  1               ;______________________________________________________________
00F95B  1               INSTR:
00F95B  1  A0 00                LDY     #$00            ; LOAD $00 INTO Y
00F95D  1               INSTRLP:
00F95D  1  20 19 FA             JSR     IOF_CONINW
00F960  1  C9 60                CMP     #$60            ; IS LOWER CASE
00F962  1  90 02                BCC     INSTRUC         ; NO, SKIP
00F964  1  29 DF                AND     #$DF            ; TO UPPER CASE
00F966  1               INSTRUC:
00F966  1  C9 0D                CMP     #$0D            ; IS CR?
00F968  1  F0 1E                BEQ     ENDINSTR        ; YES, DONE WITH INPUT
00F96A  1  C9 08                CMP     #$08            ; IS BACKSPACE?
00F96C  1  D0 10                BNE     INSTR_NOTBS     ; NO, SKUP BACKSPACE RTN
00F96E  1  C0 00                CPY     #$00            ; IS INDEX =0 ?
00F970  1  F0 1B                BEQ     INSTR_EMPTY_BS  ; YES, SKIP BACKSPACE
00F972  1  20 26 FA             JSR     IOF_OUTCH       ; OUTPUT CHAR TO SCREEN
00F975  1  88                   DEY                     ; Y=Y-1
00F976  1  A9 00                LDA     #$00            ;
00F978  1  91 4F                STA     (STRPTR),Y      ; NULL TERMINATE INPUT BUFFER
00F97A  1  88                   DEY                     ; Y=Y-1
00F97B  1  4C 83 F9             JMP     INSTR_SKIP_STORE; SKIP STORE OF CHAR TO INPUT BUFFER
00F97E  1               INSTR_NOTBS:
00F97E  1  91 4F                STA     (STRPTR),Y      ; STORE CHAR IN KEYBAORD BUFFER
00F980  1  20 26 FA             JSR     IOF_OUTCH       ; OUTPUT CHAR TO SCREEN
00F983  1               INSTR_SKIP_STORE:
00F983  1  C8                   INY                     ; Y=Y+1
00F984  1  C0 FF                CPY     #$FF            ; DOES Y=$FF
00F986  1  D0 D5                BNE     INSTRLP         ; NO, LOOP FOR NEXT CHAR
00F988  1               ENDINSTR:
00F988  1  A9 00                LDA     #$00            ; A=0
00F98A  1  91 4F                STA     (STRPTR),Y      ; NULL TERMINATE INPUT BUFFER
00F98C  1  60                   RTS
00F98D  1               INSTR_EMPTY_BS:
00F98D  1  A9 00                LDA     #$00            ; BLANK OUT KEYBOARD CHAR, TO SIGNAL READY FOR NEXT CHAR
00F98F  1  4C 5D F9             JMP     INSTRLP         ; JUMP TO INPUT LOOP
00F992  1               
00F992  1               
00F992  1               ;__LOAD_________________________________________________________
00F992  1               
00F992  1               ; LOAD A MOTOROLA FORMATTED HEX FILE
00F992  1               ;
00F992  1               ;_______________________________________________________________
00F992  1               LOAD:
00F992  1  20 4D F5             JSR     RDSER1W         ;
00F995  1  C9 53                CMP     #'S'            ;
00F997  1  D0 F9                BNE     LOAD            ; FIRST CHAR NOT (S)
00F999  1  20 4D F5             JSR     RDSER1W         ; READ CHAR
00F99C  1  C9 39                CMP     #'9'            ;
00F99E  1  F0 2C                BEQ     LOAD21          ;
00F9A0  1  C9 31                CMP     #'1'            ;
00F9A2  1  D0 EE                BNE     LOAD            ; SECOND CHAR NOT (1)
00F9A4  1  A9 00                LDA     #$00            ;
00F9A6  1  85 4D                STA     CKSM            ; ZERO CHECKSUM
00F9A8  1  20 CD F9             JSR     LGETBYTE        ; READ BYTE
00F9AB  1  E9 01                SBC     #$01            ;
00F9AD  1  85 4E                STA     BYTECT          ; BYTE COUNT
00F9AF  1  20 FA F9             JSR     BADDR           ; BUILD ADDRESS
00F9B2  1  A0 00                LDY     #$00            ;
00F9B4  1               LOAD11:
00F9B4  1  20 CD F9             JSR     LGETBYTE        ;
00F9B7  1  C6 4E                DEC     BYTECT          ;
00F9B9  1  F0 08                BEQ     LOAD15          ; ZERO BYTE COUNT
00F9BB  1  91 41                STA     (TEMPWORD1),Y   ; STORE DATA
00F9BD  1  20 05 FA             JSR     INCTEMPWORD1    ;
00F9C0  1  4C B4 F9             JMP     LOAD11          ;
00F9C3  1               
00F9C3  1               LOAD15:
00F9C3  1  E6 4D                INC     CKSM            ;
00F9C5  1  F0 CB                BEQ     LOAD            ;
00F9C7  1               LOAD19:
00F9C7  1  A9 3F                LDA     #'?'            ;
00F9C9  1  20 32 F5             JSR     WRSER1          ;
00F9CC  1               LOAD21:
00F9CC  1  60                   RTS
00F9CD  1               LGETBYTE:
00F9CD  1  20 E5 F9             JSR     INHEX           ; GET HEX CHAR
00F9D0  1  0A                   ASL     A               ;
00F9D1  1  0A                   ASL     A               ;
00F9D2  1  0A                   ASL     A               ;
00F9D3  1  0A                   ASL     A               ;
00F9D4  1  85 45                STA     TEMPBYTE        ;
00F9D6  1  20 E5 F9             JSR     INHEX           ;
00F9D9  1  29 0F                AND     #$0F            ; MASK TO 4 BITS
00F9DB  1  05 45                ORA     TEMPBYTE        ;
00F9DD  1  48                   PHA                     ;
00F9DE  1  18                   CLC                     ;
00F9DF  1  65 4D                ADC     CKSM            ;
00F9E1  1  85 4D                STA     CKSM            ;
00F9E3  1  68                   PLA                     ;
00F9E4  1  60                   RTS                     ;
00F9E5  1               ; INPUT HEX CHAR
00F9E5  1               INHEX:
00F9E5  1  20 4D F5             JSR     RDSER1W         ;
00F9E8  1  48                   PHA                     ;
00F9E9  1  20 32 F5             JSR     WRSER1          ;
00F9EC  1  68                   PLA                     ;
00F9ED  1  C9 3A                CMP     #$3A            ; LESS THAN 9?
00F9EF  1  B0 02                BCS     INHEX_BIG       ; NO, SKIP NEXT
00F9F1  1  E9 2F                SBC     #$2F            ; CONVERT 0-9
00F9F3  1               INHEX_BIG:
00F9F3  1  C9 41                CMP     #$41            ; A OR MORE?
00F9F5  1  90 02                BCC     INHEX_SMALL     ; NO, SKIP NEXT
00F9F7  1  E9 37                SBC     #$37            ; CONVERT A-F
00F9F9  1               INHEX_SMALL:
00F9F9  1  60                   RTS                     ;
00F9FA  1               
00F9FA  1               ; BUILD ADDRESS
00F9FA  1               BADDR:
00F9FA  1  20 CD F9             JSR     LGETBYTE        ; READ 2 FRAMES
00F9FD  1  85 42                STA     TEMPWORD1+1     ;
00F9FF  1  20 CD F9             JSR     LGETBYTE        ;
00FA02  1  85 41                STA     TEMPWORD1       ;
00FA04  1  60                   RTS
00FA05  1               
00FA05  1               
00FA05  1               INCTEMPWORD1:
00FA05  1  E6 41                INC     TEMPWORD1       ; INCREMENT LOWBYTE
00FA07  1  D0 02                BNE     INCTEMPWORD1_OUT; NOT ZERO?, DONE
00FA09  1  E6 42                INC     TEMPWORD1+1     ; ZERO, INC HIGH BYTE
00FA0B  1               INCTEMPWORD1_OUT:
00FA0B  1  60                   RTS                     ; RETURN
00FA0C  1               
00FA0C  1               
00FA0C  1               ;__IOF_CONIN____________________________________________________
00FA0C  1               ;
00FA0C  1               ; read a byte from CONSOLE ('A' POINTS TO BYTE)
00FA0C  1               ;_______________________________________________________________
00FA0C  1               IOF_CONIN:
00FA0C  1  A5 3A                LDA     CONSOLE
00FA0E  1  C9 01                CMP     #$01
00FA10  1  F0 03                BEQ     CONINSERIAL
00FA12  1  4C 6F F5             JMP     PPPCONIN
00FA15  1               CONINSERIAL:
00FA15  1  4C 3F F5             JMP     RDSER1
00FA18  1  60                   RTS
00FA19  1               
00FA19  1               ;__IOF_CONINW____________________________________________________
00FA19  1               ;
00FA19  1               ; read a byte from CONSOLE ('A' POINTS TO BYTE, WAIT FOR BYTE)
00FA19  1               ;_______________________________________________________________
00FA19  1               IOF_CONINW:
00FA19  1  A5 3A                LDA     CONSOLE
00FA1B  1  C9 01                CMP     #$01
00FA1D  1  F0 03                BEQ     CONINSERIALW
00FA1F  1  4C 78 F5             JMP     PPPCONINW
00FA22  1               CONINSERIALW:
00FA22  1  4C 4D F5             JMP     RDSER1W
00FA25  1  60                   RTS
00FA26  1               
00FA26  1               ;__IOF_OUTCH____________________________________________________
00FA26  1               ;
00FA26  1               ; write a byte from CONSOLE  ('A' POINTS TO BYTE)
00FA26  1               ;_______________________________________________________________
00FA26  1               IOF_OUTCH:
00FA26  1  48                   PHA
00FA27  1  A5 3A                LDA     CONSOLE
00FA29  1  C9 01                CMP     #$01
00FA2B  1  F0 04                BEQ     CONOUTSERIAL
00FA2D  1  68                   PLA
00FA2E  1  4C 64 F5             JMP     PPPOUTCH
00FA31  1               CONOUTSERIAL:
00FA31  1  68                   PLA
00FA32  1  4C 32 F5             JMP     WRSER1
00FA35  1  60                   RTS
00FA36  1               
00FA36  1               ;__IOF_CONSTATUS________________________________________________
00FA36  1               ;
00FA36  1               ; RETURN CONSOLE STATUS
00FA36  1               ;______________________________________________________________
00FA36  1               IOF_CONSTATUS:
00FA36  1  A5 3A                LDA     CONSOLE
00FA38  1  C9 01                CMP     #$01
00FA3A  1  F0 03                BEQ     CONSTATUSSERIAL
00FA3C  1  4C 87 F5             JMP     PPPCONSTATUS
00FA3F  1               CONSTATUSSERIAL:
00FA3F  1  4C 57 F5             JMP     SERIALSTATUS
00FA42  1  60                   RTS
00FA43  1               
00FA43  1               
00FA43  1               ;__INITPAGES____________________________________________________
00FA43  1               ;
00FA43  1               ; SETUP MMU FOR BIOS PAGED MEMORY OPERATION
00FA43  1               ;
00FA43  1               ; SETUP:
00FA43  1               ; 	TASK 0, NORMAL OPERATION
00FA43  1               ;   TASK 1, ADDITIONAL ROM DRIVERS PAGED INTO C000-D000
00FA43  1               ;	TASKS 2-15 -- OPEN FOR OS/USER USE
00FA43  1               ;_______________________________________________________________
00FA43  1               INITPAGES:
00FA43  1  A9 00                LDA     #$00            ; ENSURE MMU IS DISABLED (SHOULD BE ALREADY, BUT . . . )
00FA45  1  8D 30 EA             STA     M6X0X_MMU_ENA
00FA48  1  8D 10 EA             STA     M6X0X_MAP_SETUP ; START WITH TASK 0
00FA4B  1  20 6B FA             JSR     INITPAGE        ; FILL TASK 0 WITH A 1:1 MAP
00FA4E  1  A9 01                LDA     #$01
00FA50  1  8D 10 EA             STA     M6X0X_MAP_SETUP ; NOW TASK 2
00FA53  1  20 6B FA             JSR     INITPAGE        ; FILL TASK 2 WITH A 1:1 MAP
00FA56  1  A9 8C                LDA     #$8C            ; BUT, MAP Cxxx AND Dxxx TO ROM Cxxx AND Dxxx RATHER THAN RAM
00FA58  1  8D 2C EA             STA     M6X0X_MAP_SPACE+$0C
00FA5B  1  A9 8D                LDA     #$8D
00FA5D  1  8D 2D EA             STA     M6X0X_MAP_SPACE+$0D
00FA60  1               ;
00FA60  1  A9 00                LDA     #$00
00FA62  1  8D 00 EA             STA     M6X0X_ACT_TASK  ; SET ACTIVE TASK TO 00
00FA65  1  A9 01                LDA     #$01
00FA67  1  8D 30 EA             STA     M6X0X_MMU_ENA   ; ENABLE MMU --- FEEEEEL THE POOOOWERRRR
00FA6A  1  60                   RTS
00FA6B  1               
00FA6B  1               
00FA6B  1               INITPAGE:
00FA6B  1  A2 00                LDX     #$00
00FA6D  1               :
00FA6D  1  8A                   TXA
00FA6E  1  9D 20 EA             STA     M6X0X_MAP_SPACE,X; CREATE A 1:1 MAP OF BANK
00FA71  1  E8                   INX
00FA72  1  E0 10                CPX     #$10
00FA74  1  D0 F7                BNE     :-
00FA76  1  60                   RTS
00FA77  1               
00FA77  1               P_SETUPDRIVE:                   ; init floppy drive
00FA77  1  20 EB FA             JSR     PAGE_ENTER
00FA7A  1  20 6C C1             JSR     SETUPDRIVE
00FA7D  1  4C E3 FA             JMP     PAGE_EXIT
00FA80  1               P_READFL:                       ; read sector from floppy
00FA80  1  20 EB FA             JSR     PAGE_ENTER
00FA83  1  20 BA C1             JSR     READFL
00FA86  1  4C E3 FA             JMP     PAGE_EXIT
00FA89  1               P_WRITEFL:                      ; write sector to floppy
00FA89  1  20 EB FA             JSR     PAGE_ENTER
00FA8C  1  20 23 C2             JSR     WRITEFL
00FA8F  1  4C E3 FA             JMP     PAGE_EXIT
00FA92  1               P_PPP_SOFT_RESET:               ; reset ppp sd drive
00FA92  1  20 EB FA             JSR     PAGE_ENTER
00FA95  1  20 32 C1             JSR     PPP_SOFT_RESET
00FA98  1  4C E3 FA             JMP     PAGE_EXIT
00FA9B  1               P_PPP_READ_SECTOR:              ; read ppp sd drive sector
00FA9B  1  20 EB FA             JSR     PAGE_ENTER
00FA9E  1  20 50 C0             JSR     PPP_READ_SECTOR
00FAA1  1  4C E3 FA             JMP     PAGE_EXIT
00FAA4  1               P_PPP_WRITE_SECTOR:             ; write ppp sd drive sector
00FAA4  1  20 EB FA             JSR     PAGE_ENTER
00FAA7  1  20 D2 C0             JSR     PPP_WRITE_SECTOR
00FAAA  1  4C E3 FA             JMP     PAGE_EXIT
00FAAD  1               P_IDE_SOFT_RESET:               ; reset ide drive
00FAAD  1  20 EB FA             JSR     PAGE_ENTER
00FAB0  1  20 A8 C6             JSR     PPIDE_RESET
00FAB3  1  4C E3 FA             JMP     PAGE_EXIT
00FAB6  1               P_IDE_READ_SECTOR:              ; ide read sector
00FAB6  1  20 EB FA             JSR     PAGE_ENTER
00FAB9  1  20 31 C6             JSR     IDE_READ_SECTOR
00FABC  1  4C E3 FA             JMP     PAGE_EXIT
00FABF  1               P_IDE_WRITE_SECTOR:             ; ide write sector
00FABF  1  20 EB FA             JSR     PAGE_ENTER
00FAC2  1  20 7B C6             JSR     IDE_WRITE_SECTOR
00FAC5  1  4C E3 FA             JMP     PAGE_EXIT
00FAC8  1               P_PPP_INITIALIZE:
00FAC8  1  20 EB FA             JSR     PAGE_ENTER
00FACB  1  20 38 C1             JSR     PPP_INITIALIZE
00FACE  1  4C E3 FA             JMP     PAGE_EXIT
00FAD1  1               P_IDE_INITIALIZE:
00FAD1  1  20 EB FA             JSR     PAGE_ENTER
00FAD4  1  20 6C C4             JSR     PPIDE_INIT
00FAD7  1  4C E3 FA             JMP     PAGE_EXIT
00FADA  1               P_CLRDIR:
00FADA  1  20 EB FA             JSR     PAGE_ENTER
00FADD  1  20 0F C8             JSR     CLRDIR
00FAE0  1  4C E3 FA             JMP     PAGE_EXIT
00FAE3  1               PAGE_EXIT:
00FAE3  1  48                   PHA
00FAE4  1  A9 00                LDA     #$00
00FAE6  1  8D 00 EA             STA     M6X0X_ACT_TASK  ; SET ACTIVE TASK TO 00
00FAE9  1  68                   PLA
00FAEA  1  60                   RTS
00FAEB  1               PAGE_ENTER:
00FAEB  1  48                   PHA
00FAEC  1  78                   SEI
00FAED  1  A9 01                LDA     #$01
00FAEF  1  8D 00 EA             STA     M6X0X_ACT_TASK  ; SET ACTIVE TASK TO 00
00FAF2  1  A9 01                LDA     #$01
00FAF4  1  8D 30 EA             STA     M6X0X_MMU_ENA   ; ENSURE MMU IS ENABLED --- FEEEEEL THE POOOOWERRRR
00FAF7  1  68                   PLA
00FAF8  1  60                   RTS
00FAF9  1               
00FAF9  1               ; COMMAND PROCESSOR JUMP TABLE
00FAF9  1               COMMAND_LOOKUP_TABLE:
00FAF9  1  52 45 47 49          .BYTE   "REGISTER",0,<PRINT_REG,>PRINT_REG
00FAFD  1  53 54 45 52  
00FB01  1  00 FC F5     
00FB04  1  44 55 4D 50          .BYTE   "DUMP",0,<DUMP,>DUMP
00FB08  1  00 7E F7     
00FB0B  1  45 4E 54 45          .BYTE   "ENTER",0,<ENTERMEM,>ENTERMEM
00FB0F  1  52 00 CA F7  
00FB13  1  47 4F 00 66          .BYTE   "GO",0,<GO,>GO
00FB17  1  F7           
00FB18  1  4C 4F 41 44          .BYTE   "LOAD",0,<LOAD,>LOAD
00FB1C  1  00 92 F9     
00FB1F  1  42 4F 4F 54          .BYTE   "BOOT",0,<IOF_BOOT,>IOF_BOOT
00FB23  1  00 FC F6     
00FB26  1  44 49 53 41          .BYTE   "DISASSEMBLE",0,<DISASSEMBLE,>DISASSEMBLE
00FB2A  1  53 53 45 4D  
00FB2E  1  42 4C 45 00  
00FB34  1  41 53 53 45          .BYTE   "ASSEMBLE",0,<ASSEMBLE,>ASSEMBLE
00FB38  1  4D 42 4C 45  
00FB3C  1  00 7A F1     
00FB3F  1  43 4C 52 44          .BYTE   "CLRDIR",0,<P_CLRDIR,>P_CLRDIR
00FB43  1  49 52 00 DA  
00FB47  1  FA           
00FB48  1  01 00                .BYTE   01,0
00FB4A  1               ; COMMAND PROMPT STRING
00FB4A  1               PROMPT:
00FB4A  1  0D 0A 2E 00          .BYTE   $0D,$0A,".",0
00FB4E  1               ; ERROR STRING
00FB4E  1               ERROR:
00FB4E  1  0D 0A 3F 20          .BYTE   $0D,$0A,"? BAD COMMAND",$0D,0
00FB52  1  42 41 44 20  
00FB56  1  43 4F 4D 4D  
00FB5F  1               INERROR:
00FB5F  1  0D 0A 3F 20          .BYTE   $0D,$0A,"? BAD HEX NUMBER",$0D,0
00FB63  1  42 41 44 20  
00FB67  1  48 45 58 20  
00FB73  1               ; STRINGS FOR REGISTER DISPLY
00FB73  1               REGDATA:
00FB73  1  0D 0A                .BYTE   $0D,$0A
00FB75  1  20 20 20 50          .BYTE   "   PC  AC  XR  YR  SP  SR"
00FB79  1  43 20 20 41  
00FB7D  1  43 20 20 58  
00FB8E  1  0D 0A 21 20          .BYTE   $0D,$0A,"! ",0
00FB92  1  00           
00FB93  1               
00FB93  1               
00FB93  1               STARTUP:
00FB93  1  0D 0A                .BYTE   $0D,$0A
00FB95  1               
00FB95  1  20 20 52 65          .BYTE   "  RetroBrew Computers 6x0x",$0D,$0A,$0D,$0A
00FB99  1  74 72 6F 42  
00FB9D  1  72 65 77 20  
00FBB3  1  20 2E 64 38          .BYTE   " .d8888b.            .d8888b. ",$0D,$0A
00FBB7  1  38 38 38 62  
00FBBB  1  2E 20 20 20  
00FBD3  1  64 38 38 50          .BYTE   "d88P  Y88b          d88P  Y88b ",$0D,$0A
00FBD7  1  20 20 59 38  
00FBDB  1  38 62 20 20  
00FBF4  1  38 38 38 20          .BYTE   "888                 888    888 ",$0D,$0A
00FBF8  1  20 20 20 20  
00FBFC  1  20 20 20 20  
00FC15  1  38 38 38 64          .BYTE   "888d888b.  888  888 888    888 888  888 ",$0D,$0A
00FC19  1  38 38 38 62  
00FC1D  1  2E 20 20 38  
00FC3F  1  38 38 38 50          .BYTE   "888P  Y88b `Y8bd8P' 888    888 `Y8bd8P' ",$0D,$0A
00FC43  1  20 20 59 38  
00FC47  1  38 62 20 60  
00FC69  1  38 38 38 20          .BYTE   "888    888   X88K   888    888   X88K ",$0D,$0A
00FC6D  1  20 20 20 38  
00FC71  1  38 38 20 20  
00FC91  1  59 38 38 62          .BYTE   "Y88b  d88P .d8  8b. Y88b  d88P .d8  8b. ",$0D,$0A
00FC95  1  20 20 64 38  
00FC99  1  38 50 20 2E  
00FCBB  1  20 20 59 38          .BYTE   "  Y8888P   888  888   Y8888P   888  888 ",$0D,$0A,$0D,$0A
00FCBF  1  38 38 38 50  
00FCC3  1  20 20 20 38  
00FCE7  1               
00FCE7  1               ;BIOS JUMP TABLE
00FCE7  1                       .SEGMENT "JUMPTABLE"
00FCE7  1                       .ORG    $FD00           ; JUMP TABLE LOCATION
00FD00  1  4C 0C FA             JMP     IOF_CONIN       ; read a byte from CONSOLE ('A' POINTS TO BYTE)
00FD03  1  4C 19 FA             JMP     IOF_CONINW      ; read a byte from CONSOLE ('A' POINTS TO BYTE, WAIT FOR BYTE)
00FD06  1  4C 26 FA             JMP     IOF_OUTCH       ; write a byte from CONSOLE  ('A' POINTS TO BYTE)
00FD09  1  4C 36 FA             JMP     IOF_CONSTATUS   ; RETURN CONSOLE STATUS
00FD0C  1  4C 22 F5             JMP     SERIALINIT      ; called during OS init
00FD0F  1  4C 3F F5             JMP     RDSER1          ; read a byte from serial port ('A' POINTS TO BYTE)
00FD12  1  4C 32 F5             JMP     WRSER1          ; write a byte from serial port  ('A' POINTS TO BYTE)
00FD15  1  4C 4D F5             JMP     RDSER1W         ; read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
00FD18  1  4C 57 F5             JMP     SERIALSTATUS    ; GET UART STATUS
00FD1B  1  4C 77 FA             JMP     P_SETUPDRIVE    ; init floppy drive
00FD1E  1  4C 80 FA             JMP     P_READFL        ; read sector from floppy
00FD21  1  4C 89 FA             JMP     P_WRITEFL       ; write sector to floppy
00FD24  1  4C 92 FA             JMP     P_PPP_SOFT_RESET; reset ppp sd drive
00FD27  1  4C 9B FA             JMP     P_PPP_READ_SECTOR; read ppp sd drive sector
00FD2A  1  4C A4 FA             JMP     P_PPP_WRITE_SECTOR; write ppp sd drive sector
00FD2D  1  4C AD FA             JMP     P_IDE_SOFT_RESET; reset ide drive
00FD30  1  4C B6 FA             JMP     P_IDE_READ_SECTOR; ide read sector
00FD33  1  4C BF FA             JMP     P_IDE_WRITE_SECTOR; ide write sector
00FD36  1  4C 92 F9             JMP     LOAD            ; load s19 file into memory
00FD39  1  4C C8 FA             JMP     P_PPP_INITIALIZE; INITIALIZE PPP SD HARDWARE
00FD3C  1  4C D1 FA             JMP     P_IDE_INITIALIZE; INITIALIZE/DETECT IDE V3 HARDWARE
00FD3F  1               
00FD3F  1               
00FD3F  1               
00FD3F  1               
00FD3F  1               
00FD3F  1               
00FD3F  1                       .SEGMENT "VECTORS"
00FD3F  1                       .ORG    $FFFA
00FFFA  1               NNTVECTOR:
00FFFA  1  F9 F5                .WORD   NINTERRUPT      ;
00FFFC  1               RSTVECTOR:
00FFFC  1  90 F5                .WORD   COLD_START      ;
00FFFE  1               INTVECTOR:
00FFFE  1  E5 F5                .WORD   INTERRUPT       ; ROM VECTOR FOR IRQ
010000  1               
010000  1                       .END
