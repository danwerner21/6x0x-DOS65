ca65 V2.18 - Ubuntu 2.19-1
Main file   : dos65drv.asm
Current file: dos65drv.asm

000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ;	Nhyodyne dos/65 banked driver code
000000r 1               ;       Intended for RAM BANK $0C
000000r 1               ;
000000r 1               ;  DWERNER 04/24/2022 	Initial
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               
000000r 1               DSKYOSC         = 1000000       ; Set DSKY NG Osc frequency
000000r 1               
000000r 1                       .SEGMENT "DRIVERS"
000000r 1                       .ORG    $8800
008800  1                       .INCLUDE "../dos65_os/dosdefn.asm"; base addresses and definitions
008800  2               ;________________________________________________________________________________________________________________________________
008800  2               ;
008800  2               ;	DOS/65 base addresses and definitions
008800  2               ;
008800  2               ;  DWERNER 04/24/2022 	Initial
008800  2               ;________________________________________________________________________________________________________________________________
008800  2               
008800  2               ;base addresses and definitions
008800  2               btejmp          = $0100         ; warm boot jump
008800  2               pemjmp          = $0103         ; jump to pem
008800  2               iostat          = $0106         ; i/o status
008800  2               dflfcb          = $0107         ; default fcb
008800  2               dflbuf          = $0128         ; default buffer
008800  2               memmovr         = $0200         ; 0200-02ff subr to move data from ram/rom disks
008800  2               MD_PAGERA       = $0200         ; PAGE DRIVER ADDRESS
008800  2               IO              = $0300         ; 0300-03FF Memory mapped IO
008800  2               MPCL_ROM        = $037C         ; ROM MAPPER
008800  2               MPCL_RAM        = $0378         ; RAM MAPPER
008800  2               hstbuf          = $0400         ; 0400-05ff host buffer
008800  2               ;
008800  2               ; DRIVER WORKING STORAGE
008800  2               ;
008800  2               
008800  2               
008800  2               DSKY_BUF        = $0600         ; Eight Bytes DSKY display buffer
008800  2               DSKY_BUFLEN     = 8             ;
008800  2               DSKY_HEXBUF     = $0608         ; Four Bytes DSKY hex buffer
008800  2               DSKY_HEXBUFLEN  = 4             ;
008800  2               sektrk          = $060C         ; seek track number
008800  2               seksec          = $060E         ; seek sector number
008800  2               debcyll         = $0610         ; DEBLOCKED CYLINDER LSB
008800  2               debcylm         = $0611         ; DEBLOCKED CYLINDER MSB
008800  2               debsehd         = $0612         ; DEBLOCKED SECTOR AND HEAD (HS)
008800  2               sekdsk          = $0616         ; seek disk number
008800  2               dskcfg          = $0617         ; 16 bytes disk configuration table
008800  2               DSKUNIT         = $0628         ; seek disk number
008800  2               slicetmp        = $0631         ; (word)
008800  2               STACKA          = $0635
008800  2               nmsstr          = $0636
008800  2               FLRETRY         = $0637         ;
008800  2               FLRETRY1        = $0638         ;
008800  2               ST0             = $0639         ;
008800  2               FLERR           = $063A         ;
008800  2               FCMD            = $063B         ;
008800  2               PPIDEINDEX      = $063C
008800  2               currentDrive    = $063D
008800  2               DSKY_X_STORAGE  = $063E
008800  2               DSKY_Y_STORAGE  = $063F
008800  2               DSKY_TEMP_VAL   = $0640
008800  2               DSKY_PPIX_VAL   = $0641
008800  2               FLOPPY_DETCT    = $0642
008800  2               DSKY_PRESENT    = $0643
008800  2               Cdebcyll        = $0644         ; DEBLOCKED CYLINDER LSB (IN CACHE)
008800  2               Cdebcylm        = $0645         ; DEBLOCKED CYLINDER MSB (IN CACHE)
008800  2               Cdebsehd        = $0646         ; DEBLOCKED SECTOR AND HEAD (HS)  (IN CACHE)
008800  2               
008800  2               
008800  2               tea             = $800          ;tea start
008800  2               
008800  2               ;zero page for setup
008800  2               addinp          = $02           ;initialized to a,y
008800  2               bufadd          = $04           ;buffer address
008800  2               alcpnt          = $06           ;allocation map pointer
008800  2               chkpnt          = $08           ;checksum map pointer
008800  2               numvar          = 8             ;eight bytes
008800  2               
008800  2               
008800  2               msgptr          = chkpnt+2      ;message pointer
008800  2               movptr          = msgptr        ;and move pointer
008800  2               dcbloc          = msgptr+2      ;pointer to dcb
008800  2               
008800  2               dcbpc           = $2C           ;pointer to DCB table
008800  2               dskcfpc         = $2E           ;pointer to disk configuration table
008800  2               cmdlnp          = $30           ;pointer to command line buffer
008800  2               farfunct        = $32           ; function to call in driver area
008800  2               farpointer      = $33           ;
008800  2               IRQVECTOR       = $35           ; VECTOR FOR USER IRQ RTN
008800  2               NMIVECTOR       = $37           ; VECTOR FOR USER NMI RTN
008800  2               CONSOLE         = $3A
008800  2               TEMPWORD        = $3B           ;
008800  2               TEMPWORD1       = $3D           ;
008800  2               TEMPWORD2       = $3F           ;
008800  2               STRPTR          = $41           ;
008800  2               DSKYMODE        = $43           ; DSKY MODE (0=NONE, 1=DSKY, 2=DSKY NG
008800  2               
008800  2               
008800  2               DO_FARCALL      = $FFF0
008800  2               
008800  2               ;page zero and system ram assignments
008800  2               DEST            = $EC           ;pointer for OutMsg
008800  2               SRC             = $EE           ;pointer for OutMsg
008800  2               OUTMSG_W        = $F0           ;pointer for OutMsg
008800  2               dmaadr          = $f4           ;pointer for r/w
008800  2               
008800  2               
008800  2               ;pem constants on entry to write
008800  2               wrall           = 0             ;write to allocated
008800  2               wrdir           = 1             ;write to directory
008800  2               wrual           = 2             ;write to unallocated
008800  2               
008800  2               ;fixed parameters
008800  2               lf              = $a            ;linefeeed
008800  2               cr              = $d            ;return
008800  2               eof             = $1a           ;end of file
008800  2               null            = 0             ;null
008800  2               ctlc            = 3             ;abort
008800  2               ctle            = 5             ;physical cr lf
008800  2               ctli            = 9             ;tab character
008800  2               ctlp            = $10           ;toggle printer
008800  2               ctlr            = $12           ;repeat line
008800  2               ctls            = $13           ;freeze
008800  2               ctlx            = $18           ;cancel
008800  2               semico          = $3b           ;semicolon
008800  2               delete          = $08           ;delete character
008800  2               numcmd          = 36            ;number commands
008800  2               DEFDRV          = 0             ; SET TO DEFAULT DRIVE LETTER
008800  2               
008800  2               
008800  2                       .IFDEF  RBC6X0X
008800  2                       .DEFINE COMSUFFIX "COM"
008800  2                       .ENDIF
008800  2               
008800  2                       .IFDEF  NHYODYNE
008800  2                       .DEFINE COMSUFFIX "CO6"
008800  2                       .ENDIF
008800  2               
008800  2               DEBUG           = 0
008800  2               BANKED_DRIVER_DISPATCHER=$8800
008800  2               
008800  1               
008800  1               ; for Nhyodyne:
008800  1               ; RAM BANK $0C is RAM area for Drivers
008800  1               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
008800  1               ; RAM BANK $0F is fixed bank $0000-$7FFF
008800  1               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code (AS A SECONDARY CPU)
008800  1               
008800  1               ;       Area from $0C:8000 to $0C:8800 reserved for work RAM for drivers (FOR SECONDARY CPU, UNDER ROMWBW)
008800  1               ;       Area from $0C:8000 to $0C:8800 reserved for ROM for drivers (FOR PRIMARY CPU, NO ROMWBW)
008800  1               ;
008800  1               
008800  1               ;__DISPATCHER________________________________________________________________________________________
008800  1               ;
008800  1               ;  Function dispatcher
008800  1               ;  function to call is located in "farfunct"
008800  1               ;____________________________________________________________________________________________________
008800  1               ;
008800  1               FUNCTION_DISPATCHER:
008800  1  48                   PHA
008801  1  8A                   TXA
008802  1  48                   PHA
008803  1  A5 32                LDA     farfunct
008805  1  0A                   ASL     A               ; DOUBLE NUMBER FOR TABLE LOOKUP
008806  1  AA                   TAX
008807  1  BD 17 88             LDA     DISPATCHTABLE,X
00880A  1  85 33                STA     farpointer
00880C  1  BD 18 88             LDA     DISPATCHTABLE+1,X
00880F  1  85 34                STA     farpointer+1
008811  1               
008811  1  68                   PLA
008812  1  AA                   TAX
008813  1  68                   PLA
008814  1  6C 33 00             JMP     (farpointer)
008817  1               
008817  1               
008817  1               DISPATCHTABLE:
008817  1  21 97                .WORD   DFT_CONSOLE     ; FUNCTION 00 - WRITE CONSOLE
008819  1  21 97                .WORD   DFT_CONSOLE     ; FUNCTION 01 - READ CONSOLE
00881B  1  21 97                .WORD   DFT_CONSOLE     ; FUNCTION 02 - READ CONSOLE (BLOCKING)
00881D  1  21 97                .WORD   DFT_CONSOLE     ; FUNCTION 03 - GET CONSOLE STATUS
00881F  1               
00881F  1  2E 89                .WORD   WRSER1          ; FUNCTION 04 - WRITE SERIAL PORT
008821  1  3D 89                .WORD   RDSER1          ; FUNCTION 05 - READ SERIAL PORT
008823  1  4D 89                .WORD   RDSER1W         ; FUNCTION 06 - READ SERIAL PORT (BLOCKING)
008825  1  5C 89                .WORD   SERIALSTATUS    ; FUNCTION 07 - GET SERIAL STATUS
008827  1  2D 89                .WORD   SERIALINIT      ; FUNCTION 08 - SERIAL PORT INIT
008829  1               
008829  1  2E 89                .WORD   WRSER1          ; FUNCTION 09 - WRITE VIDEO
00882B  1  3D 89                .WORD   RDSER1          ; FUNCTION 10 - READ KEYBOARD
00882D  1  4D 89                .WORD   RDSER1W         ; FUNCTION 11 - READ KEYBOARD (BLOCKING)
00882F  1  5C 89                .WORD   SERIALSTATUS    ; FUNCTION 12 - GET KEYBOARD STATUS
008831  1  2D 89                .WORD   SERIALINIT      ; FUNCTION 13 - INIT INTERFACE
008833  1               
008833  1  2D 97                .WORD   drv_noop        ; FUNCTION 14
008835  1  2D 97                .WORD   drv_noop        ; FUNCTION 15
008837  1  2D 97                .WORD   drv_noop        ; FUNCTION 16
008839  1  2D 97                .WORD   drv_noop        ; FUNCTION 17
00883B  1  2D 97                .WORD   drv_noop        ; FUNCTION 18
00883D  1  2D 97                .WORD   drv_noop        ; FUNCTION 19
00883F  1  2D 97                .WORD   drv_noop        ; FUNCTION 20
008841  1  2D 97                .WORD   drv_noop        ; FUNCTION 21
008843  1  2D 97                .WORD   drv_noop        ; FUNCTION 22
008845  1  2D 97                .WORD   drv_noop        ; FUNCTION 23
008847  1  2D 97                .WORD   drv_noop        ; FUNCTION 24
008849  1  2D 97                .WORD   drv_noop        ; FUNCTION 25
00884B  1  2D 97                .WORD   drv_noop        ; FUNCTION 26
00884D  1  2D 97                .WORD   drv_noop        ; FUNCTION 27
00884F  1  2D 97                .WORD   drv_noop        ; FUNCTION 28
008851  1  2D 97                .WORD   drv_noop        ; FUNCTION 29
008853  1  2D 97                .WORD   drv_noop        ; FUNCTION 30
008855  1  2D 97                .WORD   drv_noop        ; FUNCTION 31
008857  1  2D 97                .WORD   drv_noop        ; FUNCTION 32
008859  1  2D 97                .WORD   drv_noop        ; FUNCTION 33
00885B  1  2D 97                .WORD   drv_noop        ; FUNCTION 34
00885D  1  2D 97                .WORD   drv_noop        ; FUNCTION 35
00885F  1  2D 97                .WORD   drv_noop        ; FUNCTION 36
008861  1  2D 97                .WORD   drv_noop        ; FUNCTION 37
008863  1  2D 97                .WORD   drv_noop        ; FUNCTION 38
008865  1  2D 97                .WORD   drv_noop        ; FUNCTION 39
008867  1               ;
008867  1  30 8E                .WORD   DSKY_INIT       ; FUNCTION 40 -
008869  1  F5 8F                .WORD   DSKY_SHOW       ; FUNCTION 41 -
00886B  1  B6 8F                .WORD   DSKY_BIN2SEG    ; FUNCTION 42 -
00886D  1  38 8F                .WORD   DSKY_RESET      ; FUNCTION 43 -
00886F  1  53 8F                .WORD   DSKY_STAT       ; FUNCTION 44 -
008871  1  60 8F                .WORD   DSKY_GETKEY     ; FUNCTION 45 -
008873  1  D8 90                .WORD   DSKY_BEEP       ; FUNCTION 46 -
008875  1  09 91                .WORD   DSKY_DSPL       ; FUNCTION 47 -
008877  1  BD 90                .WORD   DSKY_PUTLED     ; FUNCTION 48 -
008879  1  83 90                .WORD   DSKY_BLANK      ; FUNCTION 49 -
00887B  1               ;
00887B  1  2D 97                .WORD   drv_noop        ; FUNCTION 50 -
00887D  1  2D 97                .WORD   drv_noop        ; FUNCTION 51 -
00887F  1  2D 97                .WORD   drv_noop        ; FUNCTION 52 -
008881  1               
008881  1  2D 97                .WORD   drv_noop        ; FUNCTION 53
008883  1  2D 97                .WORD   drv_noop        ; FUNCTION 54
008885  1  2D 97                .WORD   drv_noop        ; FUNCTION 55
008887  1  2D 97                .WORD   drv_noop        ; FUNCTION 56
008889  1  2D 97                .WORD   drv_noop        ; FUNCTION 57
00888B  1  2D 97                .WORD   drv_noop        ; FUNCTION 58
00888D  1  2D 97                .WORD   drv_noop        ; FUNCTION 59
00888F  1               
00888F  1  6B 89                .WORD   PPIDE_INIT      ; FUNCTION 60 - called during OS init
008891  1  33 8C                .WORD   IDE_READ_SECTOR ; FUNCTION 61 - read a sector from drive
008893  1  8B 8C                .WORD   IDE_WRITE_SECTOR; FUNCTION 62 - write a sector to drive
008895  1               ;
008895  1  63 91                .WORD   MD_SHOW         ; FUNCTION 63 - init the mem device
008897  1  AC 91                .WORD   MD_READ_SECTOR  ; FUNCTION 64 - read a sector from the memory device
008899  1  E1 91                .WORD   MD_WRITE_SECTOR ; FUNCTION 65 - write a sector to the memory device
00889B  1               ;
00889B  1  28 92                .WORD   FL_SETUP        ; FUNCTION 66 - init floppy device
00889D  1  55 93                .WORD   FL_READ_SECTOR  ; FUNCTION 67 - read a sector from floppy device
00889F  1  E5 93                .WORD   FL_WRITE_SECTOR ; FUNCTION 68 - write a sector to floppy device
0088A1  1               
0088A1  1               
0088A1  1               ;__DRIVERS___________________________________________________________________________________________
0088A1  1               ;
0088A1  1                       .INCLUDE "drvmacro.asm"
0088A1  2               ;__MACRO___________________________________________________________________________________________________________________
0088A1  2               ;
0088A1  2               ; 	Macros for the betterment of Mankind
0088A1  2               ;________________________________________________________________________________________________________________________________
0088A1  2               ;
0088A1  2               
0088A1  2               .macro          PRTDBG      message
0088A1  2               .LOCAL p1
0088A1  2               .LOCAL p2
0088A1  2               .LOCAL p3
0088A1  2               .LOCAL p4
0088A1  2               .LOCAL p5
0088A1  2                 .if     .paramcount <> 1
0088A1  2                       .error  "Too few parameters for macro PRTDBG"
0088A1  2                       .endif
0088A1  2                       .if DEBUG=1
0088A1  2                       PHA
0088A1  2                       txa
0088A1  2                       PHA
0088A1  2                       tya
0088A1  2                       PHA
0088A1  2                       LDX #$00
0088A1  2               p1:
0088A1  2                       LDA p4,x
0088A1  2                       INX
0088A1  2                       CMP #'$'
0088A1  2                       BEQ p2
0088A1  2                       JSR MACRO_OUTCH
0088A1  2                       JMP p1
0088A1  2               p2:
0088A1  2                       LDA #13
0088A1  2                       jsr MACRO_OUTCH
0088A1  2                       LDA #10
0088A1  2                       jsr MACRO_OUTCH
0088A1  2                       PLA
0088A1  2                       tay
0088A1  2                       PLA
0088A1  2                       tax
0088A1  2                       pla
0088A1  2                       JMP p5
0088A1  2               p4:
0088A1  2                       .BYTE message
0088A1  2               p5:
0088A1  2                       .endif
0088A1  2               .endmacro
0088A1  2               
0088A1  2               .macro          PRTS      message
0088A1  2               .LOCAL p1
0088A1  2               .LOCAL p2
0088A1  2               .LOCAL p3
0088A1  2               .LOCAL p4
0088A1  2               .LOCAL p5
0088A1  2                 .if     .paramcount <> 1
0088A1  2                       .error  "Too few parameters for macro PRTS"
0088A1  2                       .endif
0088A1  2                       PHA
0088A1  2                       TXA
0088A1  2                       PHA
0088A1  2                       tay
0088A1  2                       PHa
0088A1  2                       LDX #$00
0088A1  2               p1:
0088A1  2                       LDA p4,x
0088A1  2                       INX
0088A1  2                       CMP #'$'
0088A1  2                       BEQ p2
0088A1  2                       JSR MACRO_OUTCH
0088A1  2                       JMP p1
0088A1  2               p2:
0088A1  2                       PLA
0088A1  2                       tay
0088A1  2                       PLA
0088A1  2                       tax
0088A1  2                       pla
0088A1  2                       JMP p5
0088A1  2               p4:
0088A1  2                       .BYTE message
0088A1  2               p5:
0088A1  2               .endmacro
0088A1  2               
0088A1  2               .macro          DBGFLAG      character
0088A1  2                 .if     .paramcount <> 1
0088A1  2                       .error  "Too few parameters for macro DBGFLAG"
0088A1  2                       .endif
0088A1  2                       .if DEBUG=1
0088A1  2                       PHA
0088A1  2                       LDA #character
0088A1  2                       JSR MACRO_OUTCH
0088A1  2                       pla
0088A1  2                       .endif
0088A1  2               .endmacro
0088A1  2               
0088A1  2               
0088A1  2               ;__PRTHEXBYTE__________________________________________________
0088A1  2               ; PRINT OUT ACCUMULATOR AS HEX NUMBER
0088A1  2               ;______________________________________________________________
0088A1  2               PRTHEXBYTE:
0088A1  2  48                   PHA
0088A2  2  8D 35 06             sta     STACKA
0088A5  2  8A                   txa
0088A6  2  48                   PHa
0088A7  2  98                   tya
0088A8  2  48                   PHA
0088A9  2  AD 35 06             lda     STACKA
0088AC  2  AA                   TAX				; SAVE A REGISTER
0088AD  2  4A                   LSR 				; SHIFT HIGH NIBBLE TO LOW NIBBLE
0088AE  2  4A                   LSR 				;
0088AF  2  4A                   LSR 				;
0088B0  2  4A                   LSR 				;
0088B1  2  18                   CLC               		; CLEAR CARRY
0088B2  2  20 BF 88             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
0088B5  2  8A                   TXA				; RESTORE ACCUMULATOR
0088B6  2  20 BF 88             JSR PRINT_DIGIT			; PRINT LOW NIBBLE
0088B9  2  68                   pla
0088BA  2  A8                   TAY
0088BB  2  68                   pla
0088BC  2  AA                   TAX
0088BD  2  68                   PLA
0088BE  2  60                   RTS
0088BF  2               
0088BF  2               ;__PRINT_DIGIT_________________________________________________
0088BF  2               ;
0088BF  2               ; PRINT OUT LOW NIBBLE OF ACCUMULATOR IN HEX
0088BF  2               ;
0088BF  2               ;______________________________________________________________
0088BF  2               PRINT_DIGIT:
0088BF  2  29 0F                       AND #$0F				; STRIP OFF HIGH NIBBLE
0088C1  2  09 30                       ORA #$30				; ADD $30 TO PRODUCE ASCII
0088C3  2  C9 3A                       CMP #$3A               		; IS GREATER THAN 9
0088C5  2  30 03                       BMI PRINT_DIGIT_OUT		; NO, SKIP ADD
0088C7  2  18                          CLC				; CLEAR CARRY
0088C8  2  69 07                       ADC #$07				; ADD ON FOR LETTER VALUES
0088CA  2               PRINT_DIGIT_OUT:					;
0088CA  2  4C 24 89                    JMP MACRO_OUTCH              		; PRINT OUT CHAR
0088CD  2               
0088CD  2               NEWLINE:
0088CD  2  48                           pha
0088CE  2  A9 0D                        LDA #$0D
0088D0  2  20 24 89                     JSR MACRO_OUTCH
0088D3  2  A9 0A                        LDA #$0A
0088D5  2  20 24 89                     Jsr MACRO_OUTCH
0088D8  2  68                           pla
0088D9  2  60                           rts
0088DA  2               
0088DA  2               PRTDEC:
0088DA  2  48                           PHA
0088DB  2  8D 35 06                     STA     STACKA
0088DE  2  98                           TYA
0088DF  2  48                           phA
0088E0  2  8A                           TXA
0088E1  2  48                           PHA
0088E2  2  AD 35 06                     LDA     STACKA
0088E5  2  48                           PHA
0088E6  2  A0 00                        ldy #00
0088E8  2  A2 FF                        LDX #$FF
0088EA  2  38                           SEC
0088EB  2               PrDec100:
0088EB  2  E8                           INX
0088EC  2  E9 64                        SBC #100
0088EE  2  B0 FB                        BCS PrDec100            ;Count how many 100s
0088F0  2  69 64                        ADC #100
0088F2  2  20 0E 89                     JSR PrDecDigit          ;Print the 100s
0088F5  2  A2 FF                        LDX #$FF
0088F7  2  38                           SEC                     ;Prepare for subtraction
0088F8  2               PrDec10:
0088F8  2  E8                           INX
0088F9  2  E9 0A                        SBC #10
0088FB  2  B0 FB                        BCS PrDec10             ;Count how many 10s
0088FD  2  69 0A                        ADC #10
0088FF  2  20 0E 89                     JSR PrDecDigit          ;Print the 10s
008902  2  AA                           TAX                     ;Pass 1s into X
008903  2  A0 01                        ldy #1
008905  2  20 0E 89                     JSR PrDecDigit          ;Print the 1s
008908  2  68                           PLA
008909  2  68                           pla
00890A  2  AA                           TAX
00890B  2  68                           pla
00890C  2  A8                           TAY
00890D  2  60                           RTS
00890E  2               PrDecDigit:
00890E  2  48                           PHA
00890F  2  C0 00                        cpy #$00
008911  2  D0 09                        bne PrDecDigit1
008913  2  8A                           txa
008914  2  A8                           tay
008915  2  C0 00                        cpy #$00
008917  2  D0 03                        bne PrDecDigit1
008919  2  4C 22 89                     jmp PrDecDigit2
00891C  2               PrDecDigit1:
00891C  2  8A                           TXA                     ;Save A, pass digit to A
00891D  2  09 30                        ORA #'0'
00891F  2  20 24 89                     JSR  MACRO_OUTCH        ;Convert to character and print it
008922  2               PrDecDigit2:
008922  2  68                           PLA
008923  2  60                           RTS                     ;Restore A and return
008924  2               
008924  2               
008924  2               MACRO_OUTCH:
008924  2  48                   PHA
008925  2  A5 3A                LDA     CONSOLE
008927  2  85 32                STA     farfunct
008929  2  68                   PLA
00892A  2  4C 00 88             JMP     FUNCTION_DISPATCHER
00892D  2               
00892D  1                       .INCLUDE "dosser.asm"
00892D  2               ;__SERIAL DRIVERS________________________________________________________________________________________________________________
00892D  2               ;
00892D  2               ; 	Nhyodyne serial drivers for single serial port card
00892D  2               ;
00892D  2               ;	Entry points:
00892D  2               ;		SERIALINIT  - called during OS init
00892D  2               ;		RDSER1	    - read a byte from serial port ('A' POINTS TO BYTE)
00892D  2               ;		WRSER1	    - write a byte from serial port  ('A' POINTS TO BYTE)
00892D  2               ;		RDSER1W	    - read a byte from serial port ('A' POINTS TO BYTE, WAIT FOR INPUT)
00892D  2               ;		SERIALSTATUS- GET UART STATUS
00892D  2               ;________________________________________________________________________________________________________________________________
00892D  2               ;
00892D  2               
00892D  2               
00892D  2               ;*
00892D  2               ;* HARDWARE I/O ADDRESSES
00892D  2               ;*
00892D  2               
00892D  2               ; UART 16C550 SERIAL
00892D  2               UART0           = $0368         ; DATA IN/OUT
00892D  2               UART1           = $0369         ; CHECK RX
00892D  2               UART2           = $036A         ; INTERRUPTS
00892D  2               UART3           = $036B         ; LINE CONTROL
00892D  2               UART4           = $036C         ; MODEM CONTROL
00892D  2               UART5           = $036D         ; LINE STATUS
00892D  2               UART6           = $036E         ; MODEM STATUS
00892D  2               UART7           = $036F         ; SCRATCH REG.
00892D  2               
00892D  2               
00892D  2               ;__SERIALINIT____________________________________________________________________________________________________________________
00892D  2               ;
00892D  2               ;	INITIALIZE SERIAL PORTS
00892D  2               ;________________________________________________________________________________________________________________________________
00892D  2               ;
00892D  2               SERIALINIT:
00892D  2               ;	LDA	#$80			;
00892D  2               ;	STA	UART3			; SET DLAB FLAG
00892D  2               ;	LDA	#12			; SET TO 12 = 9600 BAUD
00892D  2               ;	STA	UART0			; save baud rate
00892D  2               ;	LDA	#00			;
00892D  2               ;	STA	UART1			;
00892D  2               ;	LDA	#03			;
00892D  2               ;	STA	UART3			; SET 8 BIT DATA, 1 STOPBIT
00892D  2               ;	STA	UART4			;
00892D  2               
00892D  2  60                   RTS
00892E  2               
00892E  2               
00892E  2               
00892E  2               ;__WRSER1________________________________________________________________________________________________________________________
00892E  2               ;
00892E  2               ;	WRITE CHARACTER(A) TO UART
00892E  2               ;________________________________________________________________________________________________________________________________
00892E  2               ;
00892E  2               WRSER1:
00892E  2  48                   PHA
00892F  2               WRSER1a:
00892F  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
008932  2  29 20                AND     #$20            ; TEST IF UART IS READY TO SEND (BIT 5)
008934  2  C9 00                CMP     #$00
008936  2  F0 F7                BEQ     WRSER1a         ; NO, WAIT FOR IT
008938  2  68                   PLA
008939  2  8D 68 03             STA     UART0           ; THEN WRITE THE CHAR TO UART
00893C  2  60                   RTS
00893D  2               
00893D  2               ;__RDSER1________________________________________________________________________________________________________________________
00893D  2               ;
00893D  2               ;	READ CHARACTER FROM UART TO (A)
00893D  2               ;________________________________________________________________________________________________________________________________
00893D  2               ;
00893D  2               RDSER1:
00893D  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
008940  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
008942  2  C9 00                CMP     #$00
008944  2  F0 04                BEQ     RDSER1N         ; LOOP UNTIL DATA IS READY
008946  2  AD 68 03             LDA     UART0           ; THEN READ THE CHAR FROM THE UART
008949  2  60                   RTS
00894A  2               RDSER1N:
00894A  2  A9 00                LDA     #$00            ;
00894C  2  60                   RTS                     ;
00894D  2               
00894D  2               ;__RDSER1W_______________________________________________________________________________________________________________________
00894D  2               ;
00894D  2               ;	READ CHARACTER FROM UART TO (A) - WAIT FOR CHAR
00894D  2               ;________________________________________________________________________________________________________________________________
00894D  2               ;
00894D  2               
00894D  2               RDSER1W:
00894D  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
008950  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
008952  2  C9 00                CMP     #$00
008954  2  F0 F7                BEQ     RDSER1W         ; LOOP UNTIL DATA IS READY
008956  2  AD 68 03             LDA     UART0           ; THEN READ THE CHAR FROM THE UART
008959  2  29 7F                AND     #$7F
00895B  2  60                   RTS
00895C  2               
00895C  2               ;__SERIALSTATUS__________________________________________________________________________________________________________________
00895C  2               ;
00895C  2               ;	READ UARD STATUS
00895C  2               ;________________________________________________________________________________________________________________________________
00895C  2               ;
00895C  2               SERIALSTATUS:
00895C  2  AD 6D 03             LDA     UART5           ; READ LINE STATUS REGISTER
00895F  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
008961  2  C9 00                CMP     #$00
008963  2  F0 03                BEQ     RDSTAT1         ; NO, INDICATE NO CHAR
008965  2  A9 FF                LDA     #$FF            ; GET DATA CHAR
008967  2  60                   RTS
008968  2               RDSTAT1:
008968  2  A9 00                LDA     #$00            ; GET DATA CHAR
00896A  2  60                   RTS
00896B  2               
00896B  2               ; end
00896B  2               
00896B  1                       .INCLUDE "doside.asm"
00896B  2               ;__IDE DRIVERS___________________________________________________________________________________________________________________
00896B  2               ;
00896B  2               ; 	Nhyodyne IDE disk drivers for Z80PPIDE card
00896B  2               ;
00896B  2               ;	Entry points:
00896B  2               ;		PPIDE_INIT   	- called during OS init
00896B  2               ;		IDE_READ_SECTOR - read a sector from drive
00896B  2               ;		IDE_WRITE_SECTOR- write a sector to drive
00896B  2               ;________________________________________________________________________________________________________________________________
00896B  2               ;
00896B  2               PPIDE_PPI       = $0360         ; PORT A
00896B  2               ;
00896B  2               PPIDELO         = PPIDE_PPI+0   ; LSB
00896B  2               PPIDEHI         = PPIDE_PPI+1   ; MSB
00896B  2               PPIDECNTRL      = PPIDE_PPI+2   ; Control Signals
00896B  2               PPIDEPPIC       = PPIDE_PPI+3   ; CONTROL BYTE PPI 82C55
00896B  2               
00896B  2               PPIDE_A0_LINE   = $01           ;DIRECT FROM 8255 TO IDE INTERFACE
00896B  2               PPIDE_A1_LINE   = $02           ;DIRECT FROM 8255 TO IDE INTERFACE
00896B  2               PPIDE_A2_LINE   = $04           ;DIRECT FROM 8255 TO IDE INTERFACE
00896B  2               PPIDE_CS0_LINE  = $08           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00896B  2               PPIDE_CS1_LINE  = $10           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00896B  2               PPIDE_WR_LINE   = $20           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00896B  2               PPIDE_RD_LINE   = $40           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00896B  2               PPIDE_RST_LINE  = $80           ;INVERTER BETWEEN 8255 AND IDE INTERFACE
00896B  2               
00896B  2               PPIDE_DATA      = PPIDE_CS0_LINE
00896B  2               PPIDE_ERR       = PPIDE_CS0_LINE + PPIDE_A0_LINE
00896B  2               PPIDE_SEC_CNT   = PPIDE_CS0_LINE + PPIDE_A1_LINE
00896B  2               PPIDE_LBALOW    = PPIDE_CS0_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00896B  2               PPIDE_LBAMID    = PPIDE_CS0_LINE + PPIDE_A2_LINE
00896B  2               PPIDE_LBAHI     = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A0_LINE
00896B  2               PPIDE_DEVICE    = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00896B  2               PPIDE_COMMAND   = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00896B  2               PPIDE_STATUS    = PPIDE_CS0_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00896B  2               PPIDE_CONTROL   = PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE
00896B  2               PPIDE_ASTATUS   = PPIDE_CS1_LINE + PPIDE_A2_LINE + PPIDE_A1_LINE + PPIDE_A0_LINE
00896B  2               
00896B  2               
00896B  2               ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
00896B  2               PPIDE_CMD_RECAL = $10
00896B  2               PPIDE_CMD_READ  = $20
00896B  2               PPIDE_CMD_WRITE = $30
00896B  2               PPIDE_CMD_INIT  = $91
00896B  2               PPIDE_CMD_ID    = $EC
00896B  2               PPIDE_CMD_SPINDOWN = $E0
00896B  2               PPIDE_CMD_SPINUP = $E1
00896B  2               
00896B  2               
00896B  2               PPRD_IDE_8255   = %10010010     ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
00896B  2               PPWR_IDE_8255   = %10000000     ;ALL THREE PORTS OUTPUT
00896B  2               
00896B  2               
00896B  2               ;__PPIDE_INIT_________________________________________________________________________________________
00896B  2               ;
00896B  2               ;  INIT AND DISPLAY IDE INFO
00896B  2               ;____________________________________________________________________________________________________
00896B  2               ;
00896B  2               PPIDE_INIT:
00896B  2                       PRTDBG  "PPIDE INIT:$"
00896B  2  48 8A 48 A8          PRTS    "PPIDE :$"
00896F  2  48 A2 00 BD  
008973  2  88 89 E8 C9  
008990  2  20 CD 88             JSR     NEWLINE
008993  2  20 25 8C             JSR     IDE_PPIDETECT   ; TEST FOR PPI HARDWARE
008996  2  D0 39                BNE     IDE_ABORT       ; BAIL OUT IF NOT THERE
008998  2               ;
008998  2  48 8A 48 A8          PRTS    " IO=0x$"
00899C  2  48 A2 00 BD  
0089A0  2  B5 89 E8 C9  
0089BC  2  A9 03                LDA     #>PPIDE_PPI     ; GET BASE PORT
0089BE  2  20 A1 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
0089C1  2  A9 60                LDA     #<PPIDE_PPI     ; GET BASE PORT
0089C3  2  20 A1 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
0089C6  2               ;
0089C6  2  20 BB 8C             JSR     PPIDE_RESET     ; RESET THE BUS
0089C9  2  20 6B 8A             JSR     PPIDE_PROBE     ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
0089CC  2  B0 03                BCS     IDE_ABORT
0089CE  2  4C FE 89             JMP     IDE_PRINT_INFO
0089D1  2               IDE_ABORT:
0089D1  2  48 8A 48 A8          PRTS    " NOT PRESENT$" ; NOT PRESENT
0089D5  2  48 A2 00 BD  
0089D9  2  EE 89 E8 C9  
0089FB  2  4C 67 8A             JMP     IDE_INITA
0089FE  2               IDE_PRINT_INFO:
0089FE  2  20 CD 88             JSR     NEWLINE
008A01  2  48 8A 48 A8          PRTS    " PPIDE0: Blocks=$"
008A05  2  48 A2 00 BD  
008A09  2  1E 8A E8 C9  
008A2F  2  A9 00                LDA     #$00
008A31  2  20 F4 8A             JSR     IDE_READ_INFO   ; GET DRIVE INFO, ABORT IF ERROR
008A34  2  48 8A 48 A8          PRTS    " PPIDE1: Blocks=$"
008A38  2  48 A2 00 BD  
008A3C  2  51 8A E8 C9  
008A62  2  A9 01                LDA     #$01
008A64  2  20 F4 8A             JSR     IDE_READ_INFO   ; GET DRIVE INFO, ABORT IF ERROR
008A67  2               IDE_INITA:
008A67  2  20 CD 88             JSR     NEWLINE
008A6A  2  60                   RTS                     ; DONE
008A6B  2               ;
008A6B  2               ;__PPIDE_PROBE_______________________________________________________________________________________
008A6B  2               ;
008A6B  2               ;  PROBE FOR IDE HARDWARE
008A6B  2               ;____________________________________________________________________________________________________
008A6B  2               ;
008A6B  2               PPIDE_PROBE:
008A6B  2               ;
008A6B  2               ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
008A6B  2               ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
008A6B  2               ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
008A6B  2               ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
008A6B  2               ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
008A6B  2               ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
008A6B  2               ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
008A6B  2               ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
008A6B  2               
008A6B  2  A9 00                LDA     #$00
008A6D  2  8D 60 03             STA     PPIDELO         ; PPI PORT A, DATALO
008A70  2               
008A70  2  20 E9 8C             JSR     IDE_WAIT_NOT_BUSY; WAIT FOR BUSY TO CLEAR
008A73  2  B0 34                BCS     PPIDE_PROBE_FAIL; IF TIMEOUT, REPORT NO IDE PRESENT
008A75  2  A9 0F                LDA     #PPIDE_STATUS   ; GET STATUS
008A77  2  20 E8 8D             JSR     IDE_READ
008A7A  2  8A                   TXA
008A7B  2  29 40                AND     #%01000000
008A7D  2  C9 00                CMP     #$00
008A7F  2  F0 28                BEQ     PPIDE_PROBE_FAIL; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
008A81  2               
008A81  2               ; CHECK SIGNATURE
008A81  2  A9 0A                LDA     #PPIDE_SEC_CNT
008A83  2  20 E8 8D             JSR     IDE_READ
008A86  2  E0 01                CPX     #$01
008A88  2  D0 1F                BNE     PPIDE_PROBE_FAIL; IF not '01' THEN REPORT NO IDE PRESENT
008A8A  2  A9 0B                LDA     #PPIDE_LBALOW
008A8C  2  20 E8 8D             JSR     IDE_READ
008A8F  2  E0 01                CPX     #$01
008A91  2  D0 16                BNE     PPIDE_PROBE_FAIL; IF not '01' THEN REPORT NO IDE PRESENT
008A93  2  A9 0C                LDA     #PPIDE_LBAMID
008A95  2  20 E8 8D             JSR     IDE_READ
008A98  2  E0 00                CPX     #$00
008A9A  2  D0 0D                BNE     PPIDE_PROBE_FAIL; IF not '00' THEN REPORT NO IDE PRESENT
008A9C  2  A9 0D                LDA     #PPIDE_LBAHI
008A9E  2  20 E8 8D             JSR     IDE_READ
008AA1  2  E0 00                CPX     #$00
008AA3  2  D0 04                BNE     PPIDE_PROBE_FAIL; IF not '00' THEN REPORT NO IDE PRESENT
008AA5  2  18                   CLC
008AA6  2  4C AA 8A             JMP     PPIDE_PROBE_SUCCESS
008AA9  2               PPIDE_PROBE_FAIL:
008AA9  2  38                   SEC
008AAA  2               PPIDE_PROBE_SUCCESS:
008AAA  2  60                   RTS                     ; DONE, NOTE THAT A=0 AND Z IS SET
008AAB  2               
008AAB  2               
008AAB  2               ;___IDE_IDENTIFY_TYPE____________________________________________________________________________________
008AAB  2               ;
008AAB  2               ; 	READ THE DISK TYPE AND DETERMINE IF IT IS USABLE BY DOS/65
008AAB  2               ; 	A=IDE DEVICE (0=MST,1=SLV)
008AAB  2               ;________________________________________________________________________________________________________
008AAB  2               
008AAB  2               IDE_IDENTIFY_TYPE:
008AAB  2  48                   PHA
008AAC  2  20 E9 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008AAF  2  B0 40                BCS     IDE_IDENTIFY_TYPE_ERROR; IF TIMEOUT, REPORT ERROR
008AB1  2  A9 00                LDA     #$00
008AB3  2  8D 12 06             STA     debsehd
008AB6  2  8D 10 06             STA     debcyll         ; STORE IN TRACK (lsb)
008AB9  2  8D 11 06             STA     debcylm         ; STORE IN TRACK (msb)
008ABC  2  68                   PLA                     ; GET DRIVE TYPE
008ABD  2  20 5B 8C             JSR     IDE_READ_SECTOR_DIRTY1
008AC0  2  C9 FF                CMP     #$FF            ; IS THERE A READ ERROR?
008AC2  2  F0 2D                BEQ     IDE_IDENTIFY_TYPE_ERROR
008AC4  2  AD FE 05             LDA     hstbuf+$01FE
008AC7  2  C9 55                CMP     #$55
008AC9  2  D0 23                BNE     IDE_IDENTIFY_TYPE_OK
008ACB  2  AD FF 05             LDA     hstbuf+$01FF
008ACE  2  C9 AA                CMP     #$AA
008AD0  2  D0 1C                BNE     IDE_IDENTIFY_TYPE_OK
008AD2  2  AD C2 05             LDA     hstbuf+$01C2
008AD5  2  C9 00                CMP     #$00
008AD7  2  D0 18                BNE     IDE_IDENTIFY_TYPE_ERROR
008AD9  2  AD D2 05             LDA     hstbuf+$01D2
008ADC  2  C9 00                CMP     #$00
008ADE  2  D0 11                BNE     IDE_IDENTIFY_TYPE_ERROR
008AE0  2  AD E2 05             LDA     hstbuf+$01E2
008AE3  2  C9 00                CMP     #$00
008AE5  2  D0 0A                BNE     IDE_IDENTIFY_TYPE_ERROR
008AE7  2  AD F2 05             LDA     hstbuf+$01F2
008AEA  2  C9 00                CMP     #$00
008AEC  2  D0 03                BNE     IDE_IDENTIFY_TYPE_ERROR
008AEE  2               IDE_IDENTIFY_TYPE_OK:
008AEE  2  A9 00                LDA     #$00            ; EVERYTHING IS AWESOME
008AF0  2  60                   RTS
008AF1  2               IDE_IDENTIFY_TYPE_ERROR:
008AF1  2  A9 FF                LDA     #$FF            ; SIGNIFY ERROR
008AF3  2  60                   RTS
008AF4  2               
008AF4  2               
008AF4  2               ;*__IDE_READ_INFO___________________________________________________________________________________
008AF4  2               ;*
008AF4  2               ;*  READ IDE INFORMATION
008AF4  2               ;*	CARRY SET ON ERROR
008AF4  2               ;* 	A=MST/SLV
008AF4  2               ;*____________________________________________________________________________________________________
008AF4  2               IDE_READ_INFO:
008AF4  2                       PRTDBG  "IDE Read INFORMATION$"
008AF4  2  48                   PHA
008AF5  2  48                   PHA
008AF6  2               ; SET DRIVE BIT
008AF6  2  29 01                AND     #$01            ; ONLY WANT THE 1 BIT (MST/SLV)
008AF8  2  0A                   ASL     a               ; SHIFT 4
008AF9  2  0A                   ASL     a               ;
008AFA  2  0A                   ASL     a               ;
008AFB  2  0A                   ASL     a               ;
008AFC  2  09 E0                ORA     #$E0            ; E0=MST  F0=SLV
008AFE  2  AA                   TAX
008AFF  2  A0 00                LDY     #$00
008B01  2  A9 0E                LDA     #PPIDE_DEVICE
008B03  2  20 04 8E             JSR     IDE_WRITE
008B06  2               
008B06  2               
008B06  2  20 E9 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008B09  2  B0 52                BCS     IDE_READ_INFO_ABORT
008B0B  2  A9 0F                LDA     #PPIDE_COMMAND  ;SELECT IDE REGISTER
008B0D  2  A2 EC                LDX     #PPIDE_CMD_ID
008B0F  2  20 04 8E             JSR     IDE_WRITE       ;ASK THE DRIVE TO READ IT
008B12  2  20 15 8D             JSR     IDE_WAIT_DRQ    ;WAIT UNTIL IT'S GOT THE DATA
008B15  2  B0 46                BCS     IDE_READ_INFO_ABORT
008B17  2  20 49 8D             JSR     IDE_READ_BUFFER ; GRAB THE 256 WORDS FROM THE BUFFER
008B1A  2  48 8A 48 A8          PRTS    "0x$"
008B1E  2  48 A2 00 BD  
008B22  2  37 8B E8 C9  
008B3A  2  AD 7B 04             LDA     hstbuf+123
008B3D  2  20 A1 88             JSR     PRTHEXBYTE
008B40  2  AD 7A 04             LDA     hstbuf+122
008B43  2  20 A1 88             JSR     PRTHEXBYTE
008B46  2  AD 79 04             LDA     hstbuf+121
008B49  2  20 A1 88             JSR     PRTHEXBYTE
008B4C  2  AD 78 04             LDA     hstbuf+120
008B4F  2  20 A1 88             JSR     PRTHEXBYTE
008B52  2  68                   PLA
008B53  2  20 AB 8A             JSR     IDE_IDENTIFY_TYPE
008B56  2  C9 00                CMP     #$00
008B58  2  D0 36                BNE     IDE_READ_INFO_BADFS
008B5A  2  4C C6 8B             JMP     IDE_READ_INFO_OK
008B5D  2               IDE_READ_INFO_ABORT:
008B5D  2  68                   PLA
008B5E  2  48 8A 48 A8          PRTS    "NOT PRESENT$"  ; NOT PRESENT
008B62  2  48 A2 00 BD  
008B66  2  7B 8B E8 C9  
008B87  2  20 CD 88             JSR     NEWLINE
008B8A  2  68                   PLA
008B8B  2  20 01 8C             JSR     IDE_REMOVE_DRIVE_ASSIGNMENTS
008B8E  2  38                   SEC
008B8F  2  60                   RTS                     ;
008B90  2               IDE_READ_INFO_BADFS:
008B90  2  48 8A 48 A8          PRTS    " BAD FILESYSTEM$"; NOT PRESENT
008B94  2  48 A2 00 BD  
008B98  2  AD 8B E8 C9  
008BBD  2  20 CD 88             JSR     NEWLINE
008BC0  2  68                   PLA
008BC1  2  20 01 8C             JSR     IDE_REMOVE_DRIVE_ASSIGNMENTS
008BC4  2  38                   SEC
008BC5  2  60                   RTS                     ;
008BC6  2               IDE_READ_INFO_OK:
008BC6  2  48 8A 48 A8          PRTS    " FILE SYSTEM COMPATIBLE$"; NOT PRESENT
008BCA  2  48 A2 00 BD  
008BCE  2  E3 8B E8 C9  
008BFB  2  20 CD 88             JSR     NEWLINE
008BFE  2  68                   PLA
008BFF  2  18                   CLC
008C00  2  60                   RTS
008C01  2               
008C01  2               IDE_REMOVE_DRIVE_ASSIGNMENTS:
008C01  2  18                   CLC
008C02  2  69 30                ADC     #$30
008C04  2  A2 00                LDX     #$00
008C06  2               @1:
008C06  2  DD 17 06             CMP     dskcfg,X        ; GET device
008C09  2  F0 09                BEQ     @2
008C0B  2  E8                   INX
008C0C  2  E8                   INX
008C0D  2  E0 10                CPX     #16
008C0F  2  D0 F5                BNE     @1
008C11  2  4C 24 8C             JMP     @3
008C14  2               @2:
008C14  2  48                   PHA
008C15  2  A9 00                LDA     #$00
008C17  2  9D 17 06             STA     dskcfg,X        ; SET device
008C1A  2  E8                   INX
008C1B  2  9D 17 06             STA     dskcfg,X        ; SET device
008C1E  2  68                   PLA
008C1F  2  E8                   INX
008C20  2  E0 10                CPX     #16
008C22  2  D0 E2                BNE     @1
008C24  2               @3:
008C24  2  60                   RTS
008C25  2               
008C25  2               ;__IDE_PPIDETECT____________________________________________________________________________________
008C25  2               ;
008C25  2               ;  PROBE FOR PPI HARDWARE
008C25  2               ;____________________________________________________________________________________________________
008C25  2               ;
008C25  2               IDE_PPIDETECT:
008C25  2               ;
008C25  2               ; TEST FOR PPI EXISTENCE
008C25  2               ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
008C25  2               ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
008C25  2               ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
008C25  2               ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
008C25  2               ; INTERFERE WITH THE VALUE BEING READ.
008C25  2  20 28 8E             JSR     SET_PPI_WR
008C28  2               ;
008C28  2  A9 00                LDA     #$00            ; VALUE ZERO
008C2A  2  8D 60 03             STA     PPIDELO         ; PUSH VALUE TO PORT
008C2D  2  AD 60 03             LDA     PPIDELO         ; GET PORT VALUE
008C30  2  C9 00                CMP     #$00
008C32  2  60                   RTS                     ; AND RETURN
008C33  2               ;
008C33  2               
008C33  2               
008C33  2               ;*__IDE_READ_SECTOR___________________________________________________________________________________
008C33  2               ;*
008C33  2               ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
008C33  2               ;*
008C33  2               ;*____________________________________________________________________________________________________
008C33  2               IDE_READ_SECTOR:
008C33  2  AD 12 06             LDA     debsehd         ; STORE CURRENT PARMS
008C36  2  CD 46 06             CMP     Cdebsehd        ;
008C39  2  D0 1B                BNE     IDE_READ_SECTOR_DIRTY
008C3B  2  AD 11 06             LDA     debcylm         ;
008C3E  2  CD 45 06             CMP     Cdebcylm        ;
008C41  2  D0 13                BNE     IDE_READ_SECTOR_DIRTY
008C43  2  AD 10 06             LDA     debcyll         ;
008C46  2  CD 44 06             CMP     Cdebcyll        ;
008C49  2  D0 0B                BNE     IDE_READ_SECTOR_DIRTY
008C4B  2  AD 16 06             LDA     sekdsk          ;
008C4E  2  CD 3D 06             CMP     currentDrive    ;
008C51  2  D0 03                BNE     IDE_READ_SECTOR_DIRTY
008C53  2  A9 00                LDA     #$00            ; ZERO = 1 ON RETURN = OPERATION OK
008C55  2  60                   RTS
008C56  2               
008C56  2               IDE_READ_SECTOR_DIRTY:
008C56  2                       PRTDBG  "IDE Read Sector Buffer Dirty$"
008C56  2  20 E9 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008C59  2  B0 2D                BCS     IDE_READ_SECTOR_DIRTY_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C5B  2               IDE_READ_SECTOR_DIRTY1:
008C5B  2  20 B5 8D             JSR     IDE_SETUP_LBA   ;TELL IT WHICH SECTOR WE WANT
008C5E  2  A9 0F                LDA     #PPIDE_COMMAND  ;SELECT IDE REGISTER
008C60  2  A2 20                LDX     #PPIDE_CMD_READ
008C62  2  20 04 8E             JSR     IDE_WRITE       ;ASK THE DRIVE TO READ IT
008C65  2  20 15 8D             JSR     IDE_WAIT_DRQ    ;WAIT UNTIL IT'S GOT THE DATA
008C68  2  B0 1E                BCS     IDE_READ_SECTOR_DIRTY_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C6A  2  20 49 8D             JSR     IDE_READ_BUFFER ; GRAB THE 256 WORDS FROM THE BUFFER
008C6D  2  AD 12 06             LDA     debsehd         ; STORE CURRENT PARMS
008C70  2  8D 46 06             STA     Cdebsehd        ;
008C73  2  AD 10 06             LDA     debcyll         ;
008C76  2  8D 44 06             STA     Cdebcyll        ;
008C79  2  AD 11 06             LDA     debcylm         ;
008C7C  2  8D 45 06             STA     Cdebcylm        ;
008C7F  2  AD 16 06             LDA     sekdsk          ;
008C82  2  8D 3D 06             STA     currentDrive    ;
008C85  2               
008C85  2  A9 00                LDA     #$00            ; ZERO = 1 ON RETURN = OPERATION OK
008C87  2  60                   RTS
008C88  2               IDE_READ_SECTOR_DIRTY_ERROR:
008C88  2  A9 FF                LDA     #$FF            ; ZERO = 1 ON RETURN = OPERATION OK
008C8A  2  60                   RTS
008C8B  2               
008C8B  2               ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
008C8B  2               ;*
008C8B  2               ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
008C8B  2               ;*
008C8B  2               ;*____________________________________________________________________________________________________
008C8B  2               IDE_WRITE_SECTOR:
008C8B  2                       PRTDBG  "IDE Write Sector$"
008C8B  2  20 E9 8C             JSR     IDE_WAIT_NOT_BUSY;MAKE SURE DRIVE IS READY
008C8E  2  B0 28                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C90  2               IDE_WRITE_SECTOR_RAW:
008C90  2  20 B5 8D             JSR     IDE_SETUP_LBA   ;TELL IT WHICH SECTOR WE WANT
008C93  2  A9 0F                LDA     #PPIDE_COMMAND
008C95  2  A2 30                LDX     #PPIDE_CMD_WRITE
008C97  2  20 04 8E             JSR     IDE_WRITE       ;TELL DRIVE TO WRITE A SECTOR
008C9A  2  20 15 8D             JSR     IDE_WAIT_DRQ    ;WAIT UNIT IT WANTS THE DATA
008C9D  2  B0 19                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008C9F  2  20 7E 8D             JSR     IDE_WRITE_BUFFER;GIVE THE DATA TO THE DRIVE
008CA2  2  20 E9 8C             JSR     IDE_WAIT_NOT_BUSY;WAIT UNTIL THE WRITE IS COMPLETE
008CA5  2  B0 11                BCS     IDE_WRITE_SECTOR_ERROR; IF TIMEOUT, REPORT NO IDE PRESENT
008CA7  2  A9 FF                LDA     #$FF            ; STORE CURRENT PARMS
008CA9  2  8D 46 06             STA     Cdebsehd        ;
008CAC  2  8D 44 06             STA     Cdebcyll        ;
008CAF  2  8D 45 06             STA     Cdebcylm        ;
008CB2  2  8D 3D 06             STA     currentDrive    ;
008CB5  2               
008CB5  2  A9 00                LDA     #$00            ; ZERO ON RETURN = OPERATION OK
008CB7  2  60                   RTS
008CB8  2               IDE_WRITE_SECTOR_ERROR:
008CB8  2  A9 FF                LDA     #$FF            ; 1 ON RETURN = OPERATION FAIL
008CBA  2  60                   RTS
008CBB  2               
008CBB  2               ;*__PPIDE_RESET____________________________________________________________________________________
008CBB  2               ;*
008CBB  2               ;*  SOFT RESET IDE CHANNEL
008CBB  2               ;*
008CBB  2               ;*____________________________________________________________________________________________________
008CBB  2               PPIDE_RESET:
008CBB  2                       PRTDBG  "IDE Reset$"
008CBB  2  A9 00                LDA     #$00
008CBD  2  8D 12 06             STA     debsehd
008CC0  2  8D 10 06             STA     debcyll
008CC3  2  8D 11 06             STA     debcylm
008CC6  2  A9 FF                LDA     #$FF            ;
008CC8  2  8D 46 06             STA     Cdebsehd        ;
008CCB  2  8D 44 06             STA     Cdebcyll        ;
008CCE  2  8D 45 06             STA     Cdebcylm        ;
008CD1  2  8D 3D 06             STA     currentDrive    ;
008CD4  2               
008CD4  2  A9 80                LDA     #PPIDE_RST_LINE
008CD6  2  8D 62 03             STA     PPIDECNTRL      ; ASSERT RST LINE ON IDE INTERFACE
008CD9  2  A2 00                LDX     #$00
008CDB  2                       PRTDBG  "IDE Reset Delay$"
008CDB  2               RST_DLY:
008CDB  2  CA                   DEX
008CDC  2  E0 00                CPX     #$00
008CDE  2  D0 FB                BNE     RST_DLY
008CE0  2  A9 00                LDA     #$00
008CE2  2  8D 62 03             STA     PPIDECNTRL      ; DEASSERT RST LINE ON IDE INTERFACE
008CE5  2               
008CE5  2               ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
008CE5  2               ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
008CE5  2  20 30 8F             JSR     DSKY_REINIT
008CE8  2               
008CE8  2  60                   RTS
008CE9  2               
008CE9  2               
008CE9  2               ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
008CE9  2               ;*
008CE9  2               ;*  WAIT FOR IDE CHANNEL TO BECOME READY
008CE9  2               ;*
008CE9  2               ;*____________________________________________________________________________________________________
008CE9  2               IDE_WAIT_NOT_BUSY:
008CE9  2  48                   PHA
008CEA  2  8A                   TXA
008CEB  2  48                   PHA
008CEC  2  98                   TYA
008CED  2  48                   PHA
008CEE  2  A9 00                LDA     #$00
008CF0  2  8D 37 06             STA     FLRETRY
008CF3  2  8D 38 06             STA     FLRETRY+1
008CF6  2               IDE_WAIT_NOT_BUSY1:
008CF6  2  A9 0F                LDA     #PPIDE_STATUS   ;WAIT FOR RDY BIT TO BE SET
008CF8  2  20 E8 8D             JSR     IDE_READ
008CFB  2  8A                   TXA
008CFC  2  29 80                AND     #$80
008CFE  2  F0 0E                BEQ     IDE_WAIT_NOT_BUSY2
008D00  2  EE 37 06             INC     FLRETRY
008D03  2  D0 F1                BNE     IDE_WAIT_NOT_BUSY1
008D05  2  EE 38 06             INC     FLRETRY+1
008D08  2  D0 EC                BNE     IDE_WAIT_NOT_BUSY1
008D0A  2  38                   SEC
008D0B  2  4C 0F 8D             JMP     IDE_WAIT_NOT_BUSY3
008D0E  2               IDE_WAIT_NOT_BUSY2:
008D0E  2  18                   CLC
008D0F  2               IDE_WAIT_NOT_BUSY3:
008D0F  2  68                   PLA
008D10  2  A8                   TAY
008D11  2  68                   PLA
008D12  2  AA                   TAX
008D13  2  68                   PLA
008D14  2  60                   RTS
008D15  2               
008D15  2               ;*__IDE_WAIT_DRQ______________________________________________________________________________________
008D15  2               ;*
008D15  2               ;*	WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
008D15  2               ;*
008D15  2               ;*____________________________________________________________________________________________________
008D15  2               IDE_WAIT_DRQ:
008D15  2  48                   PHA
008D16  2  8A                   TXA
008D17  2  48                   PHA
008D18  2  98                   TYA
008D19  2  48                   PHA
008D1A  2  A9 00                LDA     #$00
008D1C  2  8D 37 06             STA     FLRETRY
008D1F  2  8D 38 06             STA     FLRETRY+1
008D22  2               IDE_WAIT_DRQ1:
008D22  2  A9 0F                LDA     #PPIDE_STATUS   ;WAIT FOR DRQ BIT TO BE SET
008D24  2  20 E8 8D             JSR     IDE_READ
008D27  2  8A                   TXA
008D28  2  29 88                AND     #%10001000      ; MASK OFF BUSY(7) AND DRQ(3)
008D2A  2  C9 08                CMP     #%00001000      ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
008D2C  2  F0 14                BEQ     IDE_WAIT_DRQ2
008D2E  2  29 01                AND     #%00000001      ; IS ERROR?
008D30  2  C9 01                CMP     #%00000001      ;
008D32  2  F0 0A                BEQ     IDE_WAIT_DRQE
008D34  2  EE 37 06             INC     FLRETRY
008D37  2  D0 E9                BNE     IDE_WAIT_DRQ1
008D39  2  EE 38 06             INC     FLRETRY+1
008D3C  2  D0 E4                BNE     IDE_WAIT_DRQ1
008D3E  2               IDE_WAIT_DRQE:
008D3E  2  38                   SEC
008D3F  2  4C 43 8D             JMP     IDE_WAIT_DRQ3
008D42  2               IDE_WAIT_DRQ2:
008D42  2  18                   CLC
008D43  2               IDE_WAIT_DRQ3:
008D43  2  68                   PLA
008D44  2  A8                   TAY
008D45  2  68                   PLA
008D46  2  AA                   TAX
008D47  2  68                   PLA
008D48  2  60                   RTS
008D49  2               
008D49  2               
008D49  2               
008D49  2               ;*__IDE_READ_BUFFER___________________________________________________________________________________
008D49  2               ;*
008D49  2               ;*  READ IDE BUFFER LITTLE ENDIAN
008D49  2               ;*
008D49  2               ;*____________________________________________________________________________________________________
008D49  2               IDE_READ_BUFFER:
008D49  2  A2 00                LDX     #$00            ; INDEX
008D4B  2               IDEBUFRD:
008D4B  2  8E 3C 06             STX     PPIDEINDEX
008D4E  2  A9 08                LDA     #PPIDE_DATA
008D50  2  20 E8 8D             JSR     IDE_READ
008D53  2  8A                   TXA
008D54  2  AE 3C 06             LDX     PPIDEINDEX
008D57  2  9D 00 04             STA     hstbuf,X        ;
008D5A  2  E8                   INX                     ;
008D5B  2  98                   TYA                     ; THEN HIGH BYTE OF WORD
008D5C  2  9D 00 04             STA     hstbuf,X        ;
008D5F  2  E8                   INX
008D60  2  E0 00                CPX     #$00            ;
008D62  2  D0 E7                BNE     IDEBUFRD        ;
008D64  2               IDEBUFRD1:
008D64  2  8E 3C 06             STX     PPIDEINDEX
008D67  2  A9 08                LDA     #PPIDE_DATA
008D69  2  20 E8 8D             JSR     IDE_READ
008D6C  2  8A                   TXA
008D6D  2  AE 3C 06             LDX     PPIDEINDEX
008D70  2  9D 00 05             STA     hstbuf+256,X    ;
008D73  2  E8                   INX                     ;
008D74  2  98                   TYA                     ; THEN HIGH BYTE OF WORD
008D75  2  9D 00 05             STA     hstbuf+256,X    ;
008D78  2  E8                   INX                     ;
008D79  2  E0 00                CPX     #$00            ;
008D7B  2  D0 E7                BNE     IDEBUFRD1       ;
008D7D  2  60                   RTS                     ;
008D7E  2               
008D7E  2               ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
008D7E  2               ;*
008D7E  2               ;*  WRITE IDE BUFFER LITTLE ENDIAN
008D7E  2               ;*
008D7E  2               ;*____________________________________________________________________________________________________
008D7E  2               IDE_WRITE_BUFFER:
008D7E  2  A2 00                LDX     #$00            ; INDEX
008D80  2               IDEBUFWT:
008D80  2  8E 3C 06             STX     PPIDEINDEX
008D83  2  BD 01 04             LDA     hstbuf+1,X      ; SECTORS ARE BIG ENDIAN
008D86  2  A8                   TAY                     ;
008D87  2  BD 00 04             LDA     hstbuf,X        ; SECTORS ARE BIG ENDIAN
008D8A  2  AA                   TAX
008D8B  2  A9 08                LDA     #PPIDE_DATA
008D8D  2  20 04 8E             JSR     IDE_WRITE
008D90  2  AE 3C 06             LDX     PPIDEINDEX
008D93  2  E8                   INX                     ;
008D94  2  E8                   INX                     ;
008D95  2  E0 00                CPX     #$00            ;
008D97  2  D0 E7                BNE     IDEBUFWT        ;
008D99  2  A2 00                LDX     #$00            ; INDEX
008D9B  2               IDEBUFWT1:
008D9B  2  8E 3C 06             STX     PPIDEINDEX
008D9E  2  BD 01 05             LDA     hstbuf+257,X    ; SECTORS ARE BIG ENDIAN
008DA1  2  A8                   TAY
008DA2  2  BD 00 05             LDA     hstbuf+256,X    ; SECTORS ARE BIG ENDIAN
008DA5  2  AA                   TAX
008DA6  2  A9 08                LDA     #PPIDE_DATA
008DA8  2  20 04 8E             JSR     IDE_WRITE
008DAB  2  AE 3C 06             LDX     PPIDEINDEX
008DAE  2  E8                   INX                     ;
008DAF  2  E8                   INX                     ;
008DB0  2  E0 00                CPX     #$00            ;
008DB2  2  D0 E7                BNE     IDEBUFWT1       ;
008DB4  2  60                   RTS                     ;
008DB5  2               
008DB5  2               ;*__IDE_SETUP_LBA_____________________________________________________________________________________
008DB5  2               ;*
008DB5  2               ;*  SETUP LBA DATA
008DB5  2               ;*  A= DRIVE DEVICE
008DB5  2               ;*____________________________________________________________________________________________________
008DB5  2               IDE_SETUP_LBA:
008DB5  2                       PRTDBG  "PPIDE SETUP LBA$"
008DB5  2  AD 3D 06             LDA     currentDrive
008DB8  2  29 01                AND     #$01            ; only want drive cfg
008DBA  2  0A                   ASL     a               ; SHIFT 4
008DBB  2  0A                   ASL     a               ;
008DBC  2  0A                   ASL     a               ;
008DBD  2  0A                   ASL     a               ;
008DBE  2  09 E0                ORA     #$E0            ; E0=MST  F0=SLV
008DC0  2  AA                   TAX
008DC1  2  A0 00                LDY     #$00
008DC3  2  A9 0E                LDA     #PPIDE_DEVICE
008DC5  2  20 04 8E             JSR     IDE_WRITE
008DC8  2               
008DC8  2  AE 11 06             LDX     debcylm
008DCB  2  A9 0D                LDA     #PPIDE_LBAHI
008DCD  2  20 04 8E             JSR     IDE_WRITE
008DD0  2               
008DD0  2  AE 10 06             LDX     debcyll         ;
008DD3  2  A9 0C                LDA     #PPIDE_LBAMID
008DD5  2  20 04 8E             JSR     IDE_WRITE
008DD8  2               
008DD8  2  AE 12 06             LDX     debsehd         ;
008DDB  2  A9 0B                LDA     #PPIDE_LBALOW
008DDD  2  20 04 8E             JSR     IDE_WRITE
008DE0  2               
008DE0  2  A2 01                LDX     #$01
008DE2  2  A9 0A                LDA     #PPIDE_SEC_CNT
008DE4  2  20 04 8E             JSR     IDE_WRITE
008DE7  2               
008DE7  2  60                   RTS
008DE8  2               
008DE8  2               
008DE8  2               ;-------------------------------------------------------------------------------
008DE8  2               
008DE8  2               ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
008DE8  2               ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
008DE8  2               ; PROGRAM WOULD NOT CALL TO THESE.
008DE8  2               
008DE8  2               ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
008DE8  2               ;INPUT A = IDE REGSITER ADDRESS
008DE8  2               ;OUTPUT X = LOWER BYTE READ FROM IDE DRIVE
008DE8  2               ;OUTPUT Y = UPPER BYTE READ FROM IDE DRIVE
008DE8  2               
008DE8  2               IDE_READ:
008DE8  2  20 20 8E             JSR     SET_PPI_RD      ; SETUP FOR A READ CYCLE
008DEB  2  8D 62 03             STA     PPIDECNTRL      ;DRIVE ADDRESS ONTO CONTROL LINES
008DEE  2  09 40                ORA     #PPIDE_RD_LINE  ; ASSERT RD PIN
008DF0  2  8D 62 03             STA     PPIDECNTRL
008DF3  2  AE 60 03             LDX     PPIDELO         ; READ LOWER BYTE
008DF6  2  AC 61 03             LDY     PPIDEHI         ; READ UPPER BYTE
008DF9  2  49 40                EOR     #PPIDE_RD_LINE  ; DE-ASSERT RD SIGNAL
008DFB  2  8D 62 03             STA     PPIDECNTRL
008DFE  2  A9 00                LDA     #$00
008E00  2  8D 62 03             STA     PPIDECNTRL      ;DEASSERT ALL CONTROL PINS
008E03  2  60                   RTS
008E04  2               
008E04  2               
008E04  2               
008E04  2               
008E04  2               ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
008E04  2               ;INPUT A = IDE REGISTER ADDRESS
008E04  2               ;INPUT REGISTER X = LSB TO WRITE
008E04  2               ;INPUT REGISTER Y = MSB TO WRITE
008E04  2               ;
008E04  2               
008E04  2               
008E04  2               IDE_WRITE:
008E04  2  20 28 8E             JSR     SET_PPI_WR      ; SETUP FOR A WRITE CYCLE
008E07  2               
008E07  2  8E 60 03             STX     PPIDELO         ; WRITE LOWER BYTE
008E0A  2  8C 61 03             STY     PPIDEHI         ; WRITE UPPER BYTE
008E0D  2               
008E0D  2  8D 62 03             STA     PPIDECNTRL      ;DRIVE ADDRESS ONTO CONTROL LINES
008E10  2               
008E10  2  09 20                ORA     #PPIDE_WR_LINE  ; ASSERT WRITE PIN
008E12  2  8D 62 03             STA     PPIDECNTRL
008E15  2               
008E15  2  49 20                EOR     #PPIDE_WR_LINE  ; DE ASSERT WR PIN
008E17  2  8D 62 03             STA     PPIDECNTRL
008E1A  2               
008E1A  2  A9 00                LDA     #$00
008E1C  2  8D 62 03             STA     PPIDECNTRL      ;DEASSERT ALL CONTROL PINS
008E1F  2  60                   RTS
008E20  2               
008E20  2               
008E20  2               ;-----------------------------------------------------------------------------------
008E20  2               ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
008E20  2               ;
008E20  2               ;------------------------------------------------------------------------------------
008E20  2               
008E20  2               SET_PPI_RD:
008E20  2  48                   PHA
008E21  2  A9 92                LDA     #PPRD_IDE_8255
008E23  2  8D 63 03             STA     PPIDEPPIC       ;CONFIG 8255 CHIP, READ MODE
008E26  2  68                   PLA
008E27  2  60                   RTS
008E28  2               
008E28  2               SET_PPI_WR:
008E28  2  48                   PHA
008E29  2  A9 80                LDA     #PPWR_IDE_8255
008E2B  2  8D 63 03             STA     PPIDEPPIC       ;CONFIG 8255 CHIP, WRITE MODE
008E2E  2  68                   PLA
008E2F  2  60                   RTS
008E30  2               
008E30  1                       .INCLUDE "dosdskyn.asm"
008E30  2               ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
008E30  2               ;
008E30  2               ; 	Nhyodyne DSKY/NG drivers
008E30  2               ;
008E30  2               ;	Entry points:
008E30  2               ;               DSKY_INIT
008E30  2               ;               DSKY_SHOW
008E30  2               ;               DSKY_BIN2SEG
008E30  2               ;               DSKY_RESET
008E30  2               ;               DSKY_STAT
008E30  2               ;               DSKY_GETKEY
008E30  2               ;               DSKY_BEEP
008E30  2               ;               DSKY_L1ON
008E30  2               ;               DSKY_L2ON
008E30  2               ;               DSKY_L1OFF
008E30  2               ;               DSKY_L2OFF
008E30  2               ;               DSKY_PUTLED
008E30  2               ;               DSKY_BLANK
008E30  2               ;________________________________________________________________________________________________________________________________
008E30  2               ;
008E30  2               ;
008E30  2               ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
008E30  2               ;
008E30  2               ; LED SEGMENTS (BIT VALUES)
008E30  2               ;
008E30  2               ;	+--01--+
008E30  2               ;	20    02
008E30  2               ;	+--40--+
008E30  2               ;	10    04
008E30  2               ;	+--08--+  80
008E30  2               ;
008E30  2               ; KEY CODE MAP (KEY CODES) CSCCCRRR
008E30  2               ;                          ||||||||
008E30  2               ;                          |||||+++-- ROW
008E30  2               ;                          ||+++----- COL
008E30  2               ;                          |+-------- SHIFT
008E30  2               ;                          +--------- CONTROL
008E30  2               ;
008E30  2               ;	00	08	10	18	23
008E30  2               ;	01	09	11	19	22
008E30  2               ;	02	0A	12	1A	21
008E30  2               ;	03	0B	13	1B	20
008E30  2               ;	04	0C	14	1C	SHIFT
008E30  2               ;	05	0D	15	1D	CTRL
008E30  2               ;
008E30  2               ; LED BIT MAP (BIT VALUES)
008E30  2               ;
008E30  2               ;	$08	$09	$0A	$0B	$0C	$0D	$0E	$0F
008E30  2               ;	---	---	---	---	---	---	---	---
008E30  2               ;	01	01	01	01	01
008E30  2               ;	02	02	02	02	02
008E30  2               ;	04      04      04      04	04
008E30  2               ;	08      08      08      08	08
008E30  2               ;	10      10      10      10	10
008E30  2               ;	20      20      20      20	20	L1	L2 	BUZZ
008E30  2               ;
008E30  2               DSKY_PPI        = $0360         ; PORT
008E30  2               DSKY_PPIA       = DSKY_PPI + 0  ; PORT A
008E30  2               DSKY_PPIB       = DSKY_PPI + 1  ; PORT B
008E30  2               DSKY_PPIC       = DSKY_PPI + 2  ; PORT C
008E30  2               DSKY_PPIX       = DSKY_PPI + 3  ; PPI CONTROL PORT
008E30  2               ;
008E30  2               DSKY_PPIX_RD    = %10010010     ; PPIX VALUE FOR READS
008E30  2               DSKY_PPIX_WR    = %10000010     ; PPIX VALUE FOR WRITES
008E30  2               ;
008E30  2               ; PIO CHANNEL C:
008E30  2               ;
008E30  2               ;	7	6	5	4	3	2	1	0
008E30  2               ;	RES	0	0	CS	CS	/RD	/WR	A0
008E30  2               ;
008E30  2               ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
008E30  2               ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
008E30  2               ;
008E30  2               DSKY_PPI_IDLE   = %00000110
008E30  2               ;
008E30  2               DSKY_CMD_CLR    = %11011111     ; CLEAR (ALL OFF)
008E30  2               DSKY_CMD_CLRX   = %11010011     ; CLEAR (ALL ON)
008E30  2               DSKY_CMD_WDSP   = %10010000     ; WRITE DISPLAY RAM
008E30  2               DSKY_CMD_RDSP   = %01110000     ; READ DISPLAY RAM
008E30  2               DSKY_CMD_CLK    = %00100000     ; SET CLK PRESCALE
008E30  2               DSKY_CMD_FIFO   = %01000000     ; READ FIFO
008E30  2               ;
008E30  2               DSKY_PRESCL     = DSKYOSC/100000; PRESCALER
008E30  2               ;
008E30  2               ;__DSKY_INIT_________________________________________________________________________________________
008E30  2               ;
008E30  2               ;  DISPLAY DSKY INFO
008E30  2               ;____________________________________________________________________________________________________
008E30  2               ;
008E30  2               DSKY_INIT:
008E30  2                       PRTDBG  "DSKY INIT:$"
008E30  2  20 00 8F             JSR     DSKY_PREINIT
008E33  2  48 8A 48 A8          PRTS    "DSKY:$"
008E37  2  48 A2 00 BD  
008E3B  2  50 8E E8 C9  
008E56  2  20 CD 88             JSR     NEWLINE
008E59  2               
008E59  2               ;
008E59  2  48 8A 48 A8          PRTS    " IO=0x$"
008E5D  2  48 A2 00 BD  
008E61  2  76 8E E8 C9  
008E7D  2  A9 03                LDA     #>DSKY_PPI      ; GET BASE PORT
008E7F  2  20 A1 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
008E82  2  A9 60                LDA     #<DSKY_PPI      ; GET BASE PORT
008E84  2  20 A1 88             JSR     PRTHEXBYTE      ; PRINT BASE PORT
008E87  2  48 8A 48 A8          PRTS    " MODE=$"
008E8B  2  48 A2 00 BD  
008E8F  2  A4 8E E8 C9  
008EAB  2  48 8A 48 A8          PRTS    "NG$"           ; PRINT DSKY TYPE
008EAF  2  48 A2 00 BD  
008EB3  2  C8 8E E8 C9  
008ECB  2               ;
008ECB  2  AD 43 06             LDA     DSKY_PRESENT    ; PRESENT?
008ECE  2  C9 FF                CMP     #$FF            ; SET FLAGS
008ED0  2  F0 2A                BEQ     DSKY_INITA
008ED2  2  48 8A 48 A8          PRTS    " NOT PRESENT$" ; NOT PRESENT
008ED6  2  48 A2 00 BD  
008EDA  2  EF 8E E8 C9  
008EFC  2               DSKY_INITA:
008EFC  2  20 CD 88             JSR     NEWLINE
008EFF  2  60                   RTS                     ; DONE
008F00  2               ;
008F00  2               ;__DSKY_PREINIT______________________________________________________________________________________
008F00  2               ;
008F00  2               ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
008F00  2               ;____________________________________________________________________________________________________
008F00  2               ; HARDWARE RESET 8279 BY PULSING RESET LINE
008F00  2               DSKY_PREINIT:
008F00  2               ; CHECK FOR PPI
008F00  2  20 45 8F             JSR     DSKY_PPIDETECT  ; TEST FOR PPI HARDWARE
008F03  2  D0 2A                BNE     DSKY_ABORT      ; BAIL OUT IF NOT THERE
008F05  2               
008F05  2               ; SETUP PPI TO DEFAULT MODE
008F05  2  20 3E 91             JSR     DSKY_PPIRD
008F08  2               ; INIT 8279 VALUES TO IDLE STATE
008F08  2  A9 06                LDA     #DSKY_PPI_IDLE
008F0A  2  8D 62 03             STA     DSKY_PPIC
008F0D  2               ; PULSE RESET SIGNAL ON 8279
008F0D  2  09 80                ORA     #%10000000
008F0F  2  8D 62 03             STA     DSKY_PPIC
008F12  2  29 7F                AND     #%01111111
008F14  2  8D 62 03             STA     DSKY_PPIC
008F17  2               ; INITIALIZE 8279
008F17  2  20 30 8F             JSR     DSKY_REINIT
008F1A  2               ; NOW SEE IF A DSKYNG IS REALLY THERE...
008F1A  2  A9 A5                LDA     #$A5
008F1C  2  A0 00                LDY     #$00
008F1E  2  20 93 90             JSR     DSKY_PUTBYTE
008F21  2  A0 00                LDY     #$00
008F23  2  20 AF 90             JSR     DSKY_GETBYTE
008F26  2  C9 A5                CMP     #$A5
008F28  2  D0 05                BNE     DSKY_ABORT      ; BAIL OUT IF MISCOMPARE
008F2A  2  A9 FF                LDA     #$FF
008F2C  2  8D 43 06             STA     DSKY_PRESENT
008F2F  2               DSKY_ABORT:
008F2F  2  60                   RTS
008F30  2               ;
008F30  2               DSKY_REINIT:
008F30  2  20 50 91             JSR     DSKY_PPIIDLE
008F33  2               ; SET CLOCK SCALER TO 20
008F33  2  A9 2A                LDA     #DSKY_CMD_CLK | DSKY_PRESCL
008F35  2  20 13 90             JSR     DSKY_CMD
008F38  2               ; FALL THRU
008F38  2               ;
008F38  2               DSKY_RESET:
008F38  2               ; RESET DSKY -- CLEAR RAM AND FIFO
008F38  2  A9 DF                LDA     #DSKY_CMD_CLR
008F3A  2  20 13 90             JSR     DSKY_CMD
008F3D  2               ;
008F3D  2               ; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
008F3D  2               ; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
008F3D  2               ; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
008F3D  2               ; IS USED TO IMPLEMENT A TIMEOUT.
008F3D  2  A2 00                LDX     #0              ; TIMEOUT LOOP COUNTER
008F3F  2               DSKY_RESET1:
008F3F  2  48                   PHA                     ; SAVE COUNTER
008F40  2  68                   PLA                     ; RECOVER COUNTER
008F41  2  CA                   DEX
008F42  2  D0 FB                BNE     DSKY_RESET1     ; LOOP TILL TIMEOUT
008F44  2               ;
008F44  2               DSKY_RESET2:
008F44  2  60                   RTS
008F45  2               ;
008F45  2               ;
008F45  2               ;
008F45  2               ;__DSKY_PPIDETECT____________________________________________________________________________________
008F45  2               ;
008F45  2               ;  PROBE FOR PPI HARDWARE
008F45  2               ;____________________________________________________________________________________________________
008F45  2               ;
008F45  2               DSKY_PPIDETECT:
008F45  2               ;
008F45  2               ; TEST FOR PPI EXISTENCE
008F45  2               ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
008F45  2               ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
008F45  2               ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
008F45  2               ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
008F45  2               ; INTERFERE WITH THE VALUE BEING READ.
008F45  2  20 27 91             JSR     DSKY_PPIWR
008F48  2               ;
008F48  2  A9 00                LDA     #$00            ; VALUE ZERO
008F4A  2  8D 60 03             STA     DSKY_PPIA       ; PUSH VALUE TO PORT
008F4D  2  AD 60 03             LDA     DSKY_PPIA       ; GET PORT VALUE
008F50  2  C9 00                CMP     #$00
008F52  2  60                   RTS                     ; AND RETURN
008F53  2               ;
008F53  2               ;
008F53  2               KY_0            = $00
008F53  2               KY_1            = $01
008F53  2               KY_2            = $02
008F53  2               KY_3            = $03
008F53  2               KY_4            = $04
008F53  2               KY_5            = $05
008F53  2               KY_6            = $06
008F53  2               KY_7            = $07
008F53  2               KY_8            = $08
008F53  2               KY_9            = $09
008F53  2               KY_A            = $0A
008F53  2               KY_B            = $0B
008F53  2               KY_C            = $0C
008F53  2               KY_D            = $0D
008F53  2               KY_E            = $0E
008F53  2               KY_F            = $0F
008F53  2               KY_FW           = $10           ; FORWARD
008F53  2               KY_BK           = $11           ; BACKWARD
008F53  2               KY_CL           = $12           ; CLEAR
008F53  2               KY_EN           = $13           ; ENTER
008F53  2               KY_DE           = $14           ; DEPOSIT
008F53  2               KY_EX           = $15           ; EXAMINE
008F53  2               KY_GO           = $16           ; GO
008F53  2               KY_BO           = $17           ; BOOT
008F53  2               KY_F4           = $18           ; F4
008F53  2               KY_F3           = $19           ; F3
008F53  2               KY_F2           = $20           ; F2
008F53  2               KY_F1           = $21           ; F1
008F53  2               ;
008F53  2               ;__DSKY_STAT_________________________________________________________________________________________
008F53  2               ;
008F53  2               ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
008F53  2               ;____________________________________________________________________________________________________
008F53  2               ;
008F53  2               DSKY_STAT:
008F53  2  AD 43 06             LDA     DSKY_PRESENT    ; DOES IT EXIST?
008F56  2  C9 FF                CMP     #$FF            ; SET FLAGS
008F58  2  D0 05                BNE     DSKY_STATA      ; ABORT WITH A=0 IF NOT THERE
008F5A  2  20 4C 90             JSR     DSKY_ST
008F5D  2  29 0F                AND     #$0F            ; ISOLATE THE CUR FIFO LEN
008F5F  2               DSKY_STATA:
008F5F  2  60                   RTS
008F60  2               ;
008F60  2               ;__DSKY_GETKEY_____________________________________________________________________________________
008F60  2               ;
008F60  2               ;  WAIT FOR A DSKY KEYPRESS AND RETURN
008F60  2               ;____________________________________________________________________________________________________
008F60  2               ;
008F60  2               DSKY_GETKEY:
008F60  2  AD 43 06             LDA     DSKY_PRESENT    ; DOES IT EXIST?
008F63  2  C9 FF                CMP     #$FF            ; SET FLAGS
008F65  2  D0 24                BNE     DSKY_GETKEY1A   ; ABORT WITH A=0 IF NOT THERE
008F67  2  20 53 8F             JSR     DSKY_STAT
008F6A  2  F0 F4                BEQ     DSKY_GETKEY     ; LOOP IF NOTHING THERE
008F6C  2  A9 40                LDA     #DSKY_CMD_FIFO
008F6E  2  20 13 90             JSR     DSKY_CMD
008F71  2  20 51 90             JSR     DSKY_DIN
008F74  2  49 C0                EOR     #%11000000      ; FLIP POLARITY OF SHIFT/CTL BITS
008F76  2  48                   PHA
008F77  2  29 3F                AND     #$3F            ; STRIP SHIFT/CTL BITS FOR LOOKUP
008F79  2  8D 40 06             STA     DSKY_TEMP_VAL
008F7C  2  A2 00                LDX     #0              ; INDEX
008F7E  2               DSKY_GETKEY1:
008F7E  2  BD 9A 8F             LDA     DSKY_KEYMAP,X
008F81  2  CD 40 06             CMP     DSKY_TEMP_VAL   ; MATCH?
008F84  2  F0 09                BEQ     DSKY_GETKEY2    ; FOUND, DONE
008F86  2  E8                   INX
008F87  2  E0 1C                CPX     #28
008F89  2  D0 F3                BNE     DSKY_GETKEY1    ; LOOP UNTIL EOT
008F8B  2               DSKY_GETKEY1A:
008F8B  2  68                   PLA
008F8C  2  A9 FF                LDA     #$FF            ; NOT FOUND ERR, RETURN $FF
008F8E  2  60                   RTS
008F8F  2               DSKY_GETKEY2:
008F8F  2               ; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
008F8F  2               ; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
008F8F  2  68                   PLA                     ; RESTORE RAW VALUE
008F90  2  25 C0                AND     %11000000       ; ISOLATE SHIFT/CTRL BITS
008F92  2  8D 40 06             STA     DSKY_TEMP_VAL
008F95  2  8A                   TXA
008F96  2  0D 40 06             ORA     DSKY_TEMP_VAL   ; COMBINE WITH INDEX VALUE
008F99  2  60                   RTS
008F9A  2               ;
008F9A  2               ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
008F9A  2               ;
008F9A  2               DSKY_KEYMAP:
008F9A  2               ; POS	$00  $01  $02  $03  $04  $05  $06  $07
008F9A  2               ; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
008F9A  2  0D 04 0C 14          .BYTE   $0D, $04, $0C, $14, $03, $0B, $13, $02
008F9E  2  03 0B 13 02  
008FA2  2               ;
008FA2  2               ; POS	$08  $09  $0A  $0B  $0C  $0D  $0E  $0F
008FA2  2               ; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
008FA2  2  0A 12 01 09          .BYTE   $0A, $12, $01, $09, $11, $00, $08, $10
008FA6  2  11 00 08 10  
008FAA  2               ;
008FAA  2               ; POS	$10  $11  $12  $13  $14  $15  $16  $17
008FAA  2               ; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
008FAA  2  05 15 1D 1C          .BYTE   $05, $15, $1D, $1C, $1B, $1A, $19, $18
008FAE  2  1B 1A 19 18  
008FB2  2               
008FB2  2               ; POS	$18  $19  $20  $21
008FB2  2               ; KEY   [F4] [F3] [F2] [F1]
008FB2  2  23 22 21 20          .BYTE   $23, $22, $21, $20
008FB6  2               
008FB6  2               ;
008FB6  2               ;
008FB6  2               ;__DSKY_BIN2SEG________________________________________________________________________________________
008FB6  2               ;
008FB6  2               ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
008FB6  2               ;
008FB6  2               ; DSKY_BUF: 32 BIT BINARY
008FB6  2               ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
008FB6  2               ;____________________________________________________________________________________________________
008FB6  2               ;
008FB6  2               DSKY_BIN2SEG:
008FB6  2  A2 00                LDX     #$00
008FB8  2               DSKY_BIN2SEG1:
008FB8  2  BD 08 06             LDA     DSKY_HEXBUF,X   ; FIRST NIBBLE
008FBB  2  4A                   LSR     A
008FBC  2  4A                   LSR     A
008FBD  2  4A                   LSR     A
008FBE  2  4A                   LSR     A
008FBF  2  8E 35 06             STX     STACKA          ; STORE READ INDEX
008FC2  2  AA                   TAX                     ; MOVE DIGIT TO LOOKUP INDEX
008FC3  2  BD 53 91             LDA     DSKY_HEXMAP,X   ; GET DECODED DIGIT INTO A
008FC6  2  AE 35 06             LDX     STACKA          ; GET READ INDEX
008FC9  2  48                   PHA
008FCA  2  8A                   TXA
008FCB  2  0A                   ASL     a
008FCC  2  AA                   TAX
008FCD  2  68                   PLA
008FCE  2  9D 00 06             STA     DSKY_BUF,X      ;STORE HIGH BYTE IN OUT BUFFER
008FD1  2  AE 35 06             LDX     STACKA          ; GET READ INDEX
008FD4  2  BD 08 06             LDA     DSKY_HEXBUF,X   ; SECOND NIBBLE
008FD7  2               
008FD7  2  29 0F                AND     #$0F
008FD9  2  8E 35 06             STX     STACKA          ; STORE READ INDEX
008FDC  2  AA                   TAX
008FDD  2  BD 53 91             LDA     DSKY_HEXMAP,X   ; GET DECODED DIGIT INTO A
008FE0  2  AE 35 06             LDX     STACKA          ; GET READ INDEX
008FE3  2  48                   PHA
008FE4  2  8A                   TXA                     ; GET READ INDEX
008FE5  2  0A                   ASL     a
008FE6  2  AA                   TAX
008FE7  2  E8                   INX
008FE8  2  68                   PLA
008FE9  2  9D 00 06             STA     DSKY_BUF,X      ;STORE HIGH BYTE IN OUT BUFFER
008FEC  2  AE 35 06             LDX     STACKA          ; GET READ INDEX
008FEF  2  E8                   INX
008FF0  2  E0 04                CPX     #4
008FF2  2  D0 C4                BNE     DSKY_BIN2SEG1
008FF4  2  60                   RTS
008FF5  2               ;
008FF5  2               ;__DSKY_SHOW___________________________________________________________________________________________
008FF5  2               ; DSKY SHOW BUFFER
008FF5  2               ;______________________________________________________________________________________________________
008FF5  2               ;
008FF5  2               DSKY_SHOW:
008FF5  2  48                   PHA
008FF6  2  8A                   TXA
008FF7  2  48                   PHA
008FF8  2  98                   TYA
008FF9  2  48                   PHA
008FFA  2  A2 00                LDX     #0
008FFC  2               DSKY_SHOW1:
008FFC  2  BD 00 06             LDA     DSKY_BUF,X
008FFF  2  8E 35 06             STX     STACKA
009002  2  AC 35 06             LDY     STACKA
009005  2  20 93 90             JSR     DSKY_PUTBYTE
009008  2  E8                   INX
009009  2  E0 08                CPX     #8
00900B  2  D0 EF                BNE     DSKY_SHOW1
00900D  2  68                   PLA
00900E  2  A8                   TAY
00900F  2  68                   PLA
009010  2  AA                   TAX
009011  2  68                   PLA
009012  2  60                   RTS
009013  2               
009013  2               ;______________________________________________________________________________________________________
009013  2               ; DSKYNG OUTPUT ROUTINES
009013  2               ;______________________________________________________________________________________________________
009013  2               
009013  2               ; SEND DSKY COMMAND BYTE IN REGISTER A
009013  2               DSKY_CMD:
009013  2  48                   PHA
009014  2  A9 01                LDA     #$01
009016  2  4C 1C 90             JMP     DSKY_DOUT2
009019  2               ;
009019  2               ; SEND DSKY DATA BYTE IN REGISTER A
009019  2               ; TRASHES BC
009019  2               ;
009019  2               DSKY_DOUT:
009019  2  48                   PHA
00901A  2  A9 00                LDA     #$00
00901C  2               ;
00901C  2               DSKY_DOUT2:
00901C  2               ; SET PPI LINE CONFIG TO WRITE MODE
00901C  2  20 27 91             JSR     DSKY_PPIWR
00901F  2               ;
00901F  2               ; SET ADDRESS FIRST
00901F  2  09 06                ORA     #DSKY_PPI_IDLE
009021  2  8D 62 03             STA     DSKY_PPIC
009024  2               ;
009024  2               ; ASSERT 8279 /CS
009024  2  09 18                ORA     #%00011000
009026  2  8D 62 03             STA     DSKY_PPIC
009029  2               ;
009029  2               ; PPIC WORKING VALUE TO DSKY_TEMP_VAL
009029  2  8D 40 06             STA     DSKY_TEMP_VAL
00902C  2               ;
00902C  2               ; ASSERT DATA BYTE VALUE
00902C  2  68                   PLA
00902D  2  8D 60 03             STA     DSKY_PPIA
009030  2               ;
009030  2               ; PULSE /WR
009030  2  AD 40 06             LDA     DSKY_TEMP_VAL
009033  2  29 FD                AND     #%11111101
009035  2  8D 62 03             STA     DSKY_PPIC
009038  2  EA                   NOP                     ; MAY NOT BE NEEDED
009039  2  09 02                ORA     #%00000010
00903B  2  8D 62 03             STA     DSKY_PPIC
00903E  2               ;
00903E  2               ; DEASSERT /CS
00903E  2  29 E7                AND     #%11100111
009040  2  8D 62 03             STA     DSKY_PPIC
009043  2               ;
009043  2               ; CLEAR ADDRESS BIT
009043  2  29 E6                AND     #%11100110
009045  2  8D 62 03             STA     DSKY_PPIC
009048  2               ;
009048  2               ; DONE
009048  2  20 50 91             JSR     DSKY_PPIIDLE
00904B  2  60                   RTS
00904C  2               ;
00904C  2               ;==================================================================================================
00904C  2               ; DSKYNG OUTPUT ROUTINES
00904C  2               ;==================================================================================================
00904C  2               ;
00904C  2               ; RETURN DSKY STATUS VALUE IN A
00904C  2               ;
00904C  2               DSKY_ST:
00904C  2  A9 01                LDA     #$01
00904E  2  4C 53 90             JMP     DSKY_DIN2
009051  2               ;
009051  2               ; RETURN NEXT DATA VALUE IN A
009051  2               ;
009051  2               DSKY_DIN:
009051  2  A9 00                LDA     #$00
009053  2               ;
009053  2               DSKY_DIN2:
009053  2               ; SET PPI LINE CONFIG TO READ MODE
009053  2  20 3E 91             JSR     DSKY_PPIRD
009056  2               ;
009056  2               ; SET ADDRESS FIRST
009056  2  09 06                ORA     #DSKY_PPI_IDLE
009058  2  8D 62 03             STA     DSKY_PPIC
00905B  2               ;
00905B  2               ; ASSERT 8279 /CS
00905B  2  09 18                ORA     #%00011000
00905D  2  8D 62 03             STA     DSKY_PPIC
009060  2               ;
009060  2               ; ASSERT /RD
009060  2  29 7B                AND     #%01111011
009062  2  8D 62 03             STA     DSKY_PPIC
009065  2               ;
009065  2  8D 40 06             STA     DSKY_TEMP_VAL
009068  2               ; GET VALUE
009068  2  AD 60 03             LDA     DSKY_PPIA
00906B  2  48                   PHA
00906C  2               
00906C  2  AD 40 06             LDA     DSKY_TEMP_VAL
00906F  2               ; DEASSERT /RD
00906F  2  09 04                ORA     #%00000100
009071  2  8D 62 03             STA     DSKY_PPIC
009074  2               ;
009074  2               ; DEASSERT /CS
009074  2  29 E7                AND     #%11100111
009076  2  8D 62 03             STA     DSKY_PPIC
009079  2               ;
009079  2               ; CLEAR ADDRESS BIT
009079  2  29 E6                AND     #%11100110
00907B  2  8D 62 03             STA     DSKY_PPIC
00907E  2               ;
00907E  2               ; DONE
00907E  2  20 50 91             JSR     DSKY_PPIIDLE
009081  2  68                   PLA
009082  2  60                   RTS
009083  2               
009083  2               ;__DSKY_BLANK_____________________________________________________________________________________
009083  2               ;
009083  2               ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
009083  2               ;
009083  2               ;_________________________________________________________________________________________________
009083  2               ;
009083  2               DSKY_BLANK:
009083  2  A9 90                LDA     #DSKY_CMD_WDSP
009085  2  20 13 90             JSR     DSKY_CMD
009088  2  A2 10                LDX     #16
00908A  2               DSKY_BLANK1:
00908A  2  A9 FF                LDA     #$FF
00908C  2  20 19 90             JSR     DSKY_DOUT
00908F  2  CA                   DEX
009090  2  D0 F8                BNE     DSKY_BLANK1
009092  2  60                   RTS
009093  2               ;
009093  2               ;__DSKY_PUTBYTE____________________________________________________________________________________
009093  2               ;
009093  2               ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
009093  2               ; AT LOCATION IN REGISTER Y, VALUE IN A.
009093  2               ;
009093  2               ;__________________________________________________________________________________________________
009093  2               ;
009093  2               DSKY_PUTBYTE:
009093  2  8D 35 06             STA     STACKA
009096  2  48                   PHA
009097  2  98                   TYA
009098  2  48                   PHA
009099  2  AD 35 06             LDA     STACKA
00909C  2  48                   PHA
00909D  2  18                   CLC
00909E  2  98                   TYA
00909F  2  69 90                ADC     #DSKY_CMD_WDSP
0090A1  2  A8                   TAY
0090A2  2  20 13 90             JSR     DSKY_CMD
0090A5  2  68                   PLA
0090A6  2  49 FF                EOR     #$FF
0090A8  2  20 19 90             JSR     DSKY_DOUT
0090AB  2  68                   PLA
0090AC  2  A8                   TAY
0090AD  2  68                   PLA
0090AE  2  60                   RTS
0090AF  2               ;
0090AF  2               ;__DSKY_GETBYTE___________________________________________________________________________________
0090AF  2               ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
0090AF  2               ; AT LOCATION IN REGISTER Y, VALUE RETURNED IN A
0090AF  2               ;
0090AF  2               ;_________________________________________________________________________________________________
0090AF  2               ;
0090AF  2               DSKY_GETBYTE:
0090AF  2  18                   CLC
0090B0  2  98                   TYA
0090B1  2  69 70                ADC     #DSKY_CMD_RDSP
0090B3  2  A8                   TAY
0090B4  2  20 13 90             JSR     DSKY_CMD
0090B7  2  20 51 90             JSR     DSKY_DIN
0090BA  2  49 FF                EOR     #$FF
0090BC  2  60                   RTS
0090BD  2               
0090BD  2               ;
0090BD  2               ;__DSKY_PUTLED____________________________________________________________________________________
0090BD  2               ;
0090BD  2               ;	This function is intended to update the LEDs.
0090BD  2               ;	VALUES SHOULD BE IN DSKY_BUF
0090BD  2               ;_________________________________________________________________________________________________
0090BD  2               ;
0090BD  2               DSKY_PUTLED:
0090BD  2  48                   PHA
0090BE  2  8A                   TXA
0090BF  2  48                   PHA
0090C0  2  98                   TYA
0090C1  2  48                   PHA
0090C2  2  A0 00                LDY     #$00
0090C4  2  A2 00                LDX     #$00
0090C6  2               DSKY_PUTLED_1:
0090C6  2  BD 00 06             LDA     DSKY_BUF,X      ; GET BYTE
0090C9  2  20 93 90             JSR     DSKY_PUTBYTE    ; SEND IT TO DSKY
0090CC  2  C8                   INY                     ; LOOP TIL DONE
0090CD  2  E8                   INX
0090CE  2  C0 08                CPY     #8
0090D0  2  D0 F4                BNE     DSKY_PUTLED_1
0090D2  2  68                   PLA                     ; RESTORE REGISTERS
0090D3  2  A8                   TAY
0090D4  2  68                   PLA
0090D5  2  AA                   TAX
0090D6  2  68                   PLA
0090D7  2  60                   RTS
0090D8  2               ;
0090D8  2               ;__DSKY_BEEP______________________________________________________________________________________
0090D8  2               ;	This function is intended to beep the speaker on the DSKY
0090D8  2               ;_________________________________________________________________________________________________
0090D8  2               ;
0090D8  2               DSKY_BEEP:
0090D8  2  48                   PHA
0090D9  2  8A                   TXA
0090DA  2  48                   PHA
0090DB  2  98                   TYA
0090DC  2  48                   PHA
0090DD  2               
0090DD  2  A0 0F                LDY     #$0F
0090DF  2  20 AF 90             JSR     DSKY_GETBYTE
0090E2  2  09 20                ORA     #$20
0090E4  2  A9 20                LDA     #$20
0090E6  2  A0 0F                LDY     #$0F
0090E8  2  20 93 90             JSR     DSKY_PUTBYTE
0090EB  2               
0090EB  2               ;;; 	timer . . .
0090EB  2  A2 8F                LDX     #$8F
0090ED  2  A0 FF                LDY     #$FF
0090EF  2               DSKY_BEEP1:
0090EF  2  88                   DEY
0090F0  2  D0 FD                BNE     DSKY_BEEP1
0090F2  2  CA                   DEX
0090F3  2  D0 FA                BNE     DSKY_BEEP1
0090F5  2               
0090F5  2  A0 0F                LDY     #$0F
0090F7  2  20 AF 90             JSR     DSKY_GETBYTE
0090FA  2  29 DF                AND     #$DF
0090FC  2  A9 DF                LDA     #$DF
0090FE  2  A0 0F                LDY     #$0F
009100  2  20 93 90             JSR     DSKY_PUTBYTE
009103  2               
009103  2  68                   PLA                     ; RESTORE REGISTERS
009104  2  A8                   TAY
009105  2  68                   PLA
009106  2  AA                   TAX
009107  2  68                   PLA
009108  2  60                   RTS
009109  2               ;___DSKYNG_DSPL______________________________________________________________________________________
009109  2               ;
009109  2               ;	This function is intended to turn on or off the DSKY L1 & L2 leds
009109  2               ;
009109  2               ;   A= LED# (0 or 1)
009109  2               ;   X= On(1) or Off(0)
009109  2               ;_________________________________________________________________________________________________
009109  2               ;
009109  2               DSKY_DSPL:
009109  2  8C 3F 06             STY     DSKY_Y_STORAGE
00910C  2  18                   CLC
00910D  2  29 01                AND     #$01
00910F  2  69 0D                ADC     #$0D
009111  2  A8                   TAY
009112  2  20 AF 90             JSR     DSKY_GETBYTE
009115  2  E0 00                CPX     #$00
009117  2  F0 05                BEQ     :+
009119  2  09 20                ORA     #$20
00911B  2  4C 20 91             JMP     DSKY_DSPL_1
00911E  2               :
00911E  2  29 DF                AND     #$DF
009120  2               DSKY_DSPL_1:
009120  2  20 93 90             JSR     DSKY_PUTBYTE
009123  2  AC 3F 06             LDY     DSKY_Y_STORAGE
009126  2  60                   RTS
009127  2               
009127  2               ;
009127  2               ;_________________________________________________________________________________________________
009127  2               ; DSKYNG LINE CONTROL ROUTINES
009127  2               ;
009127  2               ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
009127  2               ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
009127  2               ;
009127  2               ;_________________________________________________________________________________________________
009127  2               ;
009127  2               DSKY_PPIWR:
009127  2  48                   PHA
009128  2               ;
009128  2               ; CHECK FOR WRITE MODE
009128  2  AD 41 06             LDA     DSKY_PPIX_VAL
00912B  2  C9 82                CMP     #DSKY_PPIX_WR
00912D  2  F0 0D                BEQ     DSKY_PPIWR1
00912F  2               ;
00912F  2               ; SET PPI TO WRITE MODE
00912F  2  A9 82                LDA     #DSKY_PPIX_WR
009131  2  8D 63 03             STA     DSKY_PPIX
009134  2  8D 41 06             STA     DSKY_PPIX_VAL
009137  2               ;
009137  2               ; RESTORE PORT C (MAY NOT BE NEEDED)
009137  2  A9 06                LDA     #DSKY_PPI_IDLE
009139  2  8D 62 03             STA     DSKY_PPIC
00913C  2               ;
00913C  2               DSKY_PPIWR1:
00913C  2               ;
00913C  2  68                   PLA
00913D  2  60                   RTS
00913E  2               ;
00913E  2               ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
00913E  2               ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
00913E  2               ;
00913E  2               DSKY_PPIRD:
00913E  2  48                   PHA
00913F  2               ;
00913F  2               ; CHECK FOR READ MODE
00913F  2  AD 41 06             LDA     DSKY_PPIX_VAL
009142  2  C9 92                CMP     #DSKY_PPIX_RD
009144  2  F0 08                BEQ     DSKY_PPIRD1
009146  2               ;
009146  2               ; SET PPI TO READ MODE
009146  2  A9 92                LDA     #DSKY_PPIX_RD
009148  2  8D 63 03             STA     DSKY_PPIX
00914B  2  8D 41 06             STA     DSKY_PPIX_VAL
00914E  2               ;
00914E  2               DSKY_PPIRD1:
00914E  2  68                   PLA
00914F  2  60                   RTS
009150  2               ;
009150  2               ; RELEASE USE OF PPI
009150  2               ;
009150  2               DSKY_PPIIDLE:
009150  2  4C 3E 91             JMP     DSKY_PPIRD      ; SAME AS READ MODE
009153  2               ;
009153  2               ;__STORAGE_________________________________________________________________________________________
009153  2               ; CODES FOR NUMERICS
009153  2               ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
009153  2               ; SET HIGH BIT TO SHOW DECIMAL POINT
009153  2               ;_________________________________________________________________________________________________
009153  2               ;
009153  2               DSKY_HEXMAP:
009153  2  3F                   .BYTE   $3F             ; 0
009154  2  06                   .BYTE   $06             ; 1
009155  2  5B                   .BYTE   $5B             ; 2
009156  2  4F                   .BYTE   $4F             ; 3
009157  2  66                   .BYTE   $66             ; 4
009158  2  6D                   .BYTE   $6D             ; 5
009159  2  7D                   .BYTE   $7D             ; 6
00915A  2  07                   .BYTE   $07             ; 7
00915B  2  7F                   .BYTE   $7F             ; 8
00915C  2  67                   .BYTE   $67             ; 9
00915D  2  77                   .BYTE   $77             ; A
00915E  2  7C                   .BYTE   $7C             ; B
00915F  2  39                   .BYTE   $39             ; C
009160  2  5E                   .BYTE   $5E             ; D
009161  2  79                   .BYTE   $79             ; E
009162  2  71                   .BYTE   $71             ; F
009163  2               
009163  1                       .INCLUDE "dosmd.asm"
009163  2               ;__MD DRIVERS____________________________________________________________________________________________________________________
009163  2               ;
009163  2               ; 	Nhyodyne Memory disk drivers
009163  2               ;
009163  2               ;	Entry points:
009163  2               ;		MD_SHOW         - called during OS init
009163  2               ;		MD_READ_SECTOR  - read a sector from drive
009163  2               ;		MD_WRITE_SECTOR - write a sector to drive
009163  2               ;________________________________________________________________________________________________________________________________
009163  2               ;
009163  2               ; RAM BANK $0C is RAM area for Drivers
009163  2               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
009163  2               ; RAM BANK $0F is fixed bank $0000-$7FFF
009163  2               ;
009163  2               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
009163  2               ;
009163  2               ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
009163  2               ;       A15 IS INVERTED FOR THE NYHODYNE 65C02 CPU . . .
009163  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
009163  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009163  2               ;	: : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
009163  2               ;	:-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
009163  2               ;
009163  2               ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
009163  2               ;
009163  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
009163  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009163  2               ;	: : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
009163  2               ;	: : :-------------0 = UNDEFINED DEFAULT IS 0
009163  2               ;	: :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
009163  2               ;	:-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
009163  2               
009163  2               
009163  2               ;__MD_SHOW___________________________________________________________________________________________
009163  2               ;
009163  2               ;  Display info on MD devices
009163  2               ;____________________________________________________________________________________________________
009163  2               ;
009163  2               MD_SHOW:
009163  2                       PRTDBG  "MD INIT:$"
009163  2  48 8A 48 A8          PRTS    "MD: UNITS=2 RAMDISK=256KB ROMDISK=384KB$"
009167  2  48 A2 00 BD  
00916B  2  80 91 E8 C9  
0091A8  2  20 CD 88             JSR     NEWLINE
0091AB  2  60                   RTS
0091AC  2               
0091AC  2               ;*__MD_READ_SECTOR____________________________________________________________________________________
0091AC  2               ;*
0091AC  2               ;*  READ MD SECTOR INTO BUFFER
0091AC  2               ;*
0091AC  2               ;*____________________________________________________________________________________________________
0091AC  2               MD_READ_SECTOR:
0091AC  2                       PRTDBG  "MD Read Sector$"
0091AC  2  AD 28 06             LDA     DSKUNIT
0091AF  2  29 01                AND     #$01            ; only want drive cfg
0091B1  2  0A                   ASL     a               ; SHIFT 6
0091B2  2  0A                   ASL     a               ;
0091B3  2  0A                   ASL     a               ;
0091B4  2  0A                   ASL     a               ;
0091B5  2  0A                   ASL     a               ;
0091B6  2  0A                   ASL     a               ;
0091B7  2  29 5F                AND     #%01011111      ; TOGGLE READ
0091B9  2  AA                   TAX                     ; STASH CONTROL WORD
0091BA  2  20 FE 91             JSR     MD_CONVERT_SECTOR
0091BD  2  8A                   TXA
0091BE  2  29 40                AND     #%01000000
0091C0  2  C9 00                CMP     #$00            ; read if ram
0091C2  2  F0 0C                BEQ     :+
0091C4  2  EE 10 06             INC     debcyll         ; if rom, inc bank by 4 ()
0091C7  2  EE 10 06             INC     debcyll
0091CA  2  EE 10 06             INC     debcyll
0091CD  2  EE 10 06             INC     debcyll
0091D0  2               :
0091D0  2  AD 10 06             LDA     debcyll         ; GET BANK
0091D3  2  AC 12 06             LDY     debsehd         ; GET PAGE
0091D6  2                       PRTDBG  "DO PAGER RD$"
0091D6  2  20 00 02             JSR     MD_PAGERA
0091D9  2                       PRTDBG  "PAGER RETURN$"
0091D9  2  A9 FF                LDA     #$FF
0091DB  2  8D 3D 06             STA     currentDrive
0091DE  2  A9 00                LDA     #$00
0091E0  2  60                   RTS
0091E1  2               
0091E1  2               
0091E1  2               ;*__MD_WRITE_SECTOR___________________________________________________________________________________
0091E1  2               ;*
0091E1  2               ;*  WRITE MD SECTOR FROM BUFFER
0091E1  2               ;*
0091E1  2               ;*____________________________________________________________________________________________________
0091E1  2               MD_WRITE_SECTOR:
0091E1  2                       PRTDBG  "MD Write Sector$"
0091E1  2  AD 28 06             LDA     DSKUNIT
0091E4  2  29 01                AND     #$01            ; only want drive cfg
0091E6  2  C9 00                CMP     #$00            ; NO WRITE FOR ROM
0091E8  2  F0 03                BEQ     MD_WRITE_SECTOR_RAM
0091EA  2  A9 FF                LDA     #$FF
0091EC  2  60                   RTS
0091ED  2               MD_WRITE_SECTOR_RAM:
0091ED  2  20 FE 91             JSR     MD_CONVERT_SECTOR
0091F0  2  A2 20                LDX     #%00100000      ; TOGGLE WRITE RAM (LO)
0091F2  2  AD 10 06             LDA     debcyll         ; GET BANK
0091F5  2  AC 12 06             LDY     debsehd         ; GET PAGE
0091F8  2                       PRTDBG  "DO PAGER WR$"
0091F8  2  20 00 02             JSR     MD_PAGERA
0091FB  2                       PRTDBG  "PAGER RETURN$"
0091FB  2  A9 00                LDA     #$00
0091FD  2  60                   RTS
0091FE  2               
0091FE  2               ;___MD_CONVERT_SECTOR___________________________________________________________________________________
0091FE  2               ;
0091FE  2               ; 	TRANSLATE SECTORS INTO MD FORMAT
0091FE  2               ;________________________________________________________________________________________________________
0091FE  2               MD_CONVERT_SECTOR:
0091FE  2                       PRTDBG  "CONVERT SECTOR$"
0091FE  2  48                   PHA
0091FF  2  8A                   TXA
009200  2  48                   PHA
009201  2  AD 0E 06             LDA     seksec          ; LOAD SECTOR # (LOW BYTE)
009204  2  4A                   LSR     A               ; DIVIDE BY 2 (FOR BLOCKING)
009205  2  29 1E                AND     #$1E            ; CLEAR UPPER 3 BITS AND ALWAYS GET EVENS (TO MAKE DEBLOCKING WORK PROPERLY)
009207  2  8D 12 06             STA     debsehd         ; STORE IN SECTOR/HEAD
00920A  2  AD 0C 06             LDA     sektrk          ; LOAD TRACK # (LOW BYTE)
00920D  2  29 03                AND     #$03            ; BOTTOM 2 BITS ARE PART OF PAGE (PAGES ARE 32k)
00920F  2  0A                   ASL     a               ; MOVE TO HIGH BITS
009210  2  0A                   ASL     a
009211  2  0A                   ASL     a
009212  2  0A                   ASL     a
009213  2  0A                   ASL     a
009214  2  09 80                ORA     #$80            ; PAGES ARE ALWAYS IN UPPER BANK
009216  2  0D 12 06             ORA     debsehd         ; STORE IN SECTOR/HEAD
009219  2  8D 12 06             STA     debsehd         ; STORE IN SECTOR/HEAD
00921C  2                                               ; AT THIS POINT PAGE REGISTER SHOULD BE
00921C  2                                               ; SET
00921C  2  AD 0C 06             LDA     sektrk          ; LOAD TRACK #
00921F  2  4A                   LSR     a               ; LOSE BOTTOM TWO BITS
009220  2  4A                   LSR     a
009221  2  8D 10 06             STA     debcyll         ; THIS SHOULD BE BANK#
009224  2               
009224  2  68                   PLA
009225  2  AA                   TAX
009226  2  68                   PLA
009227  2  60                   RTS
009228  2               
009228  1                       .INCLUDE "dosflp.asm"
009228  2               ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
009228  2               ;
009228  2               ; 	DOS/65 floppy drivers for MBC FDC card
009228  2               ;
009228  2               ;	Entry points:
009228  2               ;		FL_SETUP        - called during OS init
009228  2               ;		FL_READ_SECTOR	- read a sector from drive
009228  2               ;		FL_WRITE_SECTOR	- write a sector to drive
009228  2               ;
009228  2               ;________________________________________________________________________________________________________________________________
009228  2               ;
009228  2               ;*
009228  2               ;* HARDWARE I/O ADDRESSES
009228  2               ;*
009228  2               FDC_MSR         = $0330         ; ADDRESS OF MAIN STATUS REGISTER
009228  2               FDC_DATA        = $0331         ; FLOPPY DATA REGISTER
009228  2               FDC_RESET       = $0333         ; FLOPPY RESET
009228  2               FDC_DCR         = $0335         ; LOAD CONTROL REGISTER
009228  2               FDC_DOR         = $0336         ; CONFIGURATION CONTROL REGISTER
009228  2               FDC_TC          = $0337         ; TERMINAL COUNT
009228  2               
009228  2               ;
009228  2               ; FDC COMMANDS
009228  2               ;
009228  2               CFD_READ        = %00000110     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_READDEL     = %00001100     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_WRITE       = %00000101     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_WRITEDEL    = %00001001     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_READTRK     = %00000010     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_READID      = %00001010     ; CMD,HDS/DS --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_FMTTRK      = %00001101     ; CMD,HDS/DS,N,SC,GPL,D --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_SCANEQ      = %00010001     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_SCANLOEQ    = %00011001     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_SCANHIEQ    = %00011101     ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
009228  2               CFD_RECAL       = %00000111     ; CMD,DS --> <EMPTY>
009228  2               CFD_SENSEINT    = %00001000     ; CMD --> ST0,PCN
009228  2               CFD_SPECIFY     = %00000011     ; CMD,SRT/HUT,HLT/ND --> <EMPTY>
009228  2               CFD_DRVSTAT     = %00000100     ; CMD,HDS/DS --> ST3
009228  2               CFD_SEEK        = %00001111     ; CMD,HDS/DS --> <EMPTY>
009228  2               CFD_VERSION     = %00010000     ; CMD --> ST0
009228  2               
009228  2               CFD_MFM         = %01000000     ;
009228  2               
009228  2               ;
009228  2               ;
009228  2               ; Specify Command:
009228  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
009228  2               ; |Byte |  7  |	 6  |  5  |  4	|  3  |	 2  |  1  |  0	|
009228  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
009228  2               ; |  0	|  0  |	 0  |  0  |  0	|  0  |	 0  |  1  |  1	|
009228  2               ; |  1	| ----- STEP RATE ----- | -- HEAD UNLOAD TIME - |
009228  2               ; |  2	| ------------ HEAD LOAD TIME ----------- | NDM |
009228  2               ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
009228  2               ;
009228  2               ;
009228  2               ; Step Rate (milliseconds):		 Head Unload Time (milliseconds):	Head Load Time (milliseconds):
009228  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
009228  2               ; |	 |	   BITRATE	     |	 |	|	  BITRATE	    |	|      |	 BITRATE	   |
009228  2               ; |  VAL | 1.0M | 500K | 300K | 250K |	 |  VAL | 1.0M | 500K | 300K | 250K |	|  VAL | 1.0M | 500K | 300K | 250K |
009228  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
009228  2               ; |    0 |  8.0 | 16.0 | 26.7 | 32.0 |	 |    0 |  128 |  256 |	 426 |	512 |	|    0 |  128 |	 256 |	426 |  512 |
009228  2               ; |    1 |  7.5 | 15.0 | 25.0 | 30.0 |	 |    1 |    8 |   16 | 26.7 |	 32 |	|    1 |    1 |	   2 |	3.3 |	 4 |
009228  2               ; |    2 |  7.0 | 14.0 | 23.3 | 28.0 |	 |    2 |   16 |   32 | 53.3 |	 64 |	|    2 |    2 |	   4 |	6.7 |	 8 |
009228  2               ; |  ... |  ... |  ... |  ... |	 ... |	 |  ... |  ... |  ... |	 ... |	... |	|  ... |  ... |	 ... |	... |  ... |
009228  2               ; |   14 |  1.0 |  2.0 |  3.3 |	 4.0 |	 |   14 |  112 |  224 |	 373 |	448 |	|  126 |  126 |	 252 |	420 |  504 |
009228  2               ; |   15 |  0.5 |  1.0 |  1.7 |	 2.0 |	 |   15 |  120 |  240 |	 400 |	480 |	|  127 |  127 |	 254 |	423 |  508 |
009228  2               ; +------+------+------+------+------+	 +------+------+------+------+------+	+------+------+------+------+------+
009228  2               ;
009228  2               ; IBM PS/2 CALLS FOR:
009228  2               ;   STEP RATE: 3ms (6ms FOR ALL 41mm OR 720K DRIVES)
009228  2               ;   HEAD LOAD TIME: 15ms
009228  2               
009228  2               DOR_INIT        = %00001100     ; SOFT RESET INACTIVE, DMA ENABLED
009228  2               DOR_BR250       = DOR_INIT
009228  2               DOR_BR500       = DOR_INIT
009228  2               
009228  2               
009228  2               
009228  2               FLOPPY_RETRIES  = 6             ; HOW ABOUT SIX RETIRES?
009228  2               FLOPPY_RETRIES1 = 2             ; TWO ITERATIONS OF RECAL?
009228  2               
009228  2               ;__FL_SETUP______________________________________________________________________________________________________________________
009228  2               ;
009228  2               ;	SETUP FLOPPY DRIVE SETTINGS
009228  2               ;________________________________________________________________________________________________________________________________
009228  2               ;
009228  2               FL_SETUP:
009228  2  A9 00                LDA     #$00            ; RESET TRACK/CYL/SEC STORAGE
00922A  2  8D 11 06             STA     debcylm         ;
00922D  2  8D 10 06             STA     debcyll         ;
009230  2  8D 12 06             STA     debsehd         ;
009233  2  A9 FF                LDA     #$FF            ; SET CACHE TO INVALID
009235  2  8D 45 06             STA     Cdebcylm        ;
009238  2  8D 44 06             STA     Cdebcyll        ;
00923B  2  8D 46 06             STA     Cdebsehd        ;
00923E  2               
00923E  2  48 8A 48 A8          PRTS    "FD: MODE=MBC$"
009242  2  48 A2 00 BD  
009246  2  5B 92 E8 C9  
009268  2               ;
009268  2  48 8A 48 A8          PRTS    " IO=0x$"
00926C  2  48 A2 00 BD  
009270  2  85 92 E8 C9  
00928C  2  A9 03                LDA     #>FDC_MSR
00928E  2  20 A1 88             JSR     PRTHEXBYTE
009291  2  A9 30                LDA     #<FDC_MSR
009293  2  20 A1 88             JSR     PRTHEXBYTE
009296  2  20 17 96             JSR     FD_DETECT       ; CHECK FOR FDC
009299  2  C9 00                CMP     #$00
00929B  2  F0 30                BEQ     :+              ; CONTINUE IF FOUND
00929D  2  48 8A 48 A8          PRTS    " NOT PRESENT$" ; NOT ZERO, H/W NOT PRESENT
0092A1  2  48 A2 00 BD  
0092A5  2  BA 92 E8 C9  
0092C7  2  20 CD 88             JSR     NEWLINE
0092CA  2  A9 FF                LDA     #$FF
0092CC  2  60                   RTS                     ; BAIL OUT
0092CD  2               :
0092CD  2  48 8A 48 A8          PRTS    " PRESENT$"     ; NOT ZERO, H/W NOT PRESENT
0092D1  2  48 A2 00 BD  
0092D5  2  EA 92 E8 C9  
0092F3  2  20 CD 88             JSR     NEWLINE
0092F6  2  A9 0C                LDA     #DOR_INIT       ; RESET SETTINGS
0092F8  2  8D 36 03             STA     FDC_DOR
0092FB  2               
0092FB  2  20 B5 95             JSR     CHECKINT        ;
0092FE  2  A9 03                LDA     #CFD_SPECIFY    ; SPECIFY COMMAND
009300  2  20 71 95             JSR     PFDATA          ; OUTPUT TO FDC
009303  2  A9 7F                LDA     #$7F            ; 6 MS STEP, 480 MS HEAD UNLOAD
009305  2  20 71 95             JSR     PFDATA          ; OUTPUT TO FDC
009308  2  A9 05                LDA     #$05            ; 508 MS HEAD LOAD, NON-DMA MODE
00930A  2  20 71 95             JSR     PFDATA          ; OUTPUT TO FDC
00930D  2               
00930D  2  20 B5 95             JSR     CHECKINT        ; SEND SEVERAL INTERRUPTS TO ENSURE PROPER STATE
009310  2  20 B5 95             JSR     CHECKINT        ;
009313  2  20 B5 95             JSR     CHECKINT        ;
009316  2  20 B5 95             JSR     CHECKINT        ;
009319  2  20 B5 95             JSR     CHECKINT        ;
00931C  2  20 B5 95             JSR     CHECKINT        ;
00931F  2               
00931F  2  A9 00                LDA     #$00
009321  2  8D 16 06             STA     sekdsk
009324  2  A9 10                LDA     #%00010000
009326  2  8D 28 06             STA     DSKUNIT
009329  2  20 46 95             JSR     RECAL           ;
00932C  2  A9 27                LDA     #39             ;
00932E  2  8D 10 06             STA     debcyll         ;
009331  2  20 29 95             JSR     SETTRK1
009334  2  20 46 95             JSR     RECAL           ;
009337  2               
009337  2  A9 01                LDA     #$01
009339  2  8D 16 06             STA     sekdsk
00933C  2  A9 21                LDA     #%00100001
00933E  2  8D 28 06             STA     DSKUNIT
009341  2  20 46 95             JSR     RECAL           ;
009344  2  A9 27                LDA     #39             ;
009346  2  8D 10 06             STA     debcyll         ;
009349  2  20 29 95             JSR     SETTRK1
00934C  2  20 46 95             JSR     RECAL           ;
00934F  2  A9 0C                LDA     #DOR_INIT       ; RESET SETTINGS
009351  2  8D 36 03             STA     FDC_DOR
009354  2  60                   RTS
009355  2               
009355  2               
009355  2               ;__FL_READ_SECTOR________________________________________________________________________________________________________________
009355  2               ;
009355  2               ; 	READ A FLOPPY SECTOR
009355  2               ;________________________________________________________________________________________________________________________________
009355  2               ;
009355  2               ;
009355  2               FL_READ_SECTOR:
009355  2  AD 42 06             LDA     FLOPPY_DETCT
009358  2  C9 00                CMP     #$00
00935A  2  F0 01                BEQ     :+
00935C  2  60                   RTS
00935D  2               :
00935D  2  A9 00                LDA     #$00
00935F  2  8D 37 06             STA     FLRETRY         ; BLANK RETRIES
009362  2  8D 38 06             STA     FLRETRY1
009365  2  A9 0C                LDA     #DOR_INIT
009367  2  0D 28 06             ORA     DSKUNIT         ;
00936A  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
00936D  2  AD 11 06             LDA     debcylm         ;
009370  2  CD 45 06             CMP     Cdebcylm        ;
009373  2  D0 1B                BNE     READFL_DIRTY
009375  2  AD 10 06             LDA     debcyll         ;
009378  2  CD 44 06             CMP     Cdebcyll        ;
00937B  2  D0 13                BNE     READFL_DIRTY
00937D  2  AD 12 06             LDA     debsehd         ;
009380  2  CD 46 06             CMP     Cdebsehd        ;
009383  2  D0 0B                BNE     READFL_DIRTY
009385  2  AD 16 06             LDA     sekdsk
009388  2  CD 3D 06             CMP     currentDrive    ;
00938B  2  D0 03                BNE     READFL_DIRTY
00938D  2               ; SECTOR ALREADY IN CACHE, DEBLOCK
00938D  2  A9 00                LDA     #$00
00938F  2  60                   RTS
009390  2               READFL_DIRTY:
009390  2  AD 11 06             LDA     debcylm         ; STORE CURRENT PARMS
009393  2  8D 45 06             STA     Cdebcylm        ;
009396  2  AD 10 06             LDA     debcyll         ;
009399  2  8D 44 06             STA     Cdebcyll        ;
00939C  2  AD 12 06             LDA     debsehd         ;
00939F  2  8D 46 06             STA     Cdebsehd        ;
0093A2  2  AD 16 06             LDA     sekdsk
0093A5  2  8D 3D 06             STA     currentDrive    ;
0093A8  2               
0093A8  2               
0093A8  2               READFL1:
0093A8  2  A9 46                LDA     #CFD_READ|CFD_MFM; BIT 6 SETS MFM, 06H IS READ COMMAND
0093AA  2  8D 3B 06             STA     FCMD            ; SET COMMAND
0093AD  2  20 3A 94             JSR     DSKOP           ; DO DISK OPERATION
0093B0  2               
0093B0  2  C9 00                CMP     #$00
0093B2  2  F0 2E                BEQ     READFLDONE      ; OPERATION SUCCESSFUL
0093B4  2  EE 37 06             INC     FLRETRY         ; LET'S RETRY
0093B7  2  AD 37 06             LDA     FLRETRY
0093BA  2  C9 06                CMP     #FLOPPY_RETRIES
0093BC  2  D0 EA                BNE     READFL1
0093BE  2  20 46 95             JSR     RECAL           ; AFTER X RETRIES, LET'S RECAL THE HEAD
0093C1  2  20 17 95             JSR     SETTRACK        ;
0093C4  2  A9 00                LDA     #$00            ;
0093C6  2  8D 37 06             STA     FLRETRY         ; MORE RETRIES!
0093C9  2  EE 38 06             INC     FLRETRY1
0093CC  2  AD 38 06             LDA     FLRETRY1
0093CF  2  C9 02                CMP     #FLOPPY_RETRIES1
0093D1  2  D0 D5                BNE     READFL1
0093D3  2               
0093D3  2  A9 FF                LDA     #$FF            ; RETRIES FAILED, INVALIDATE CACHE AND REPORT ERROR
0093D5  2  8D 45 06             STA     Cdebcylm        ;
0093D8  2  8D 44 06             STA     Cdebcyll        ;
0093DB  2  8D 46 06             STA     Cdebsehd        ;
0093DE  2  8D 3D 06             STA     currentDrive    ;
0093E1  2  60                   RTS                     ; A = $FF ON RETURN = OPERATION ERROR
0093E2  2               READFLDONE:
0093E2  2  A9 00                LDA     #$00            ; A = 0 ON RETURN = OPERATION OK
0093E4  2  60                   RTS
0093E5  2               
0093E5  2               ;__FL_WRITE_SECTOR_______________________________________________________________________________________________________________
0093E5  2               ;
0093E5  2               ; 	WRITE A FLOPPY SECTOR
0093E5  2               ;________________________________________________________________________________________________________________________________
0093E5  2               ;
0093E5  2               FL_WRITE_SECTOR:
0093E5  2  AD 42 06             LDA     FLOPPY_DETCT
0093E8  2  C9 00                CMP     #$00
0093EA  2  F0 01                BEQ     :+
0093EC  2  60                   RTS
0093ED  2               :
0093ED  2  A9 00                LDA     #$00
0093EF  2  8D 37 06             STA     FLRETRY         ; BLANK RETRIES
0093F2  2  8D 38 06             STA     FLRETRY1
0093F5  2  A9 FF                LDA     #$FF
0093F7  2  8D 45 06             STA     Cdebcylm        ; INVALIDATE CACHE
0093FA  2  8D 44 06             STA     Cdebcyll        ;
0093FD  2  8D 46 06             STA     Cdebsehd        ;
009400  2               
009400  2               WRITEFL1:
009400  2  A9 45                LDA     #CFD_WRITE|CFD_MFM; BIT 6 SETS MFM, 05H IS WRITE COMMAND
009402  2  8D 3B 06             STA     FCMD
009405  2  20 3A 94             JSR     DSKOP
009408  2               
009408  2  C9 00                CMP     #$00
00940A  2  F0 2B                BEQ     WRITEFLDONE
00940C  2  EE 37 06             INC     FLRETRY
00940F  2  AD 37 06             LDA     FLRETRY
009412  2  C9 06                CMP     #FLOPPY_RETRIES
009414  2  D0 EA                BNE     WRITEFL1
009416  2  20 46 95             JSR     RECAL
009419  2  20 17 95             JSR     SETTRACK
00941C  2  A9 00                LDA     #$00
00941E  2  8D 37 06             STA     FLRETRY
009421  2  EE 38 06             INC     FLRETRY1
009424  2  AD 38 06             LDA     FLRETRY1
009427  2  C9 02                CMP     #FLOPPY_RETRIES1
009429  2  D0 D5                BNE     WRITEFL1
00942B  2  A9 FF                LDA     #$FF            ; INVALIDATE CACHE
00942D  2  8D 45 06             STA     Cdebcylm        ;
009430  2  8D 44 06             STA     Cdebcyll        ;
009433  2  8D 46 06             STA     Cdebsehd        ;
009436  2  60                   RTS                     ; A = $FF ON RETURN = OPERATION ERROR
009437  2               WRITEFLDONE:
009437  2  A9 00                LDA     #$00            ; A = 0 ON RETURN = OPERATION OK
009439  2  60                   RTS
00943A  2               
00943A  2               
00943A  2               ;__DSKOP__________________________________________________________________________________________________________________________
00943A  2               ;
00943A  2               ; 	PERFORM A DISK OPERATION
00943A  2               ;________________________________________________________________________________________________________________________________
00943A  2               ;
00943A  2               DSKOP:
00943A  2  78                   SEI
00943B  2  20 B5 95             JSR     CHECKINT        ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
00943E  2  C9 FF                CMP     #$FF            ; DID IT RETURN WITH ERROR CODE?
009440  2  F0 10                BEQ     DSKEXIT         ; IF YES, EXIT WITH ERROR CODE
009442  2               ;
009442  2  20 17 95             JSR     SETTRACK        ; PERFORM SEEK TO TRACK
009445  2               ;
009445  2  AD 3B 06             LDA     FCMD            ; WHAT COMMAND IS PENDING?
009448  2  C9 46                CMP     #CFD_READ|CFD_MFM; IS IT A READ COMMAND?
00944A  2  D0 03                BNE     GWRR_POLL       ;
00944C  2  4C A7 94             JMP     RDD_POLL        ;
00944F  2               GWRR_POLL:
00944F  2  4C ED 94             JMP     WRR_POLL        ;
009452  2               DSKEXIT:
009452  2  A9 00                LDA     #0              ; SET MOTOR OFF
009454  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
009457  2  A9 FF                LDA     #$FF            ; SET IF ERROR
009459  2  58                   CLI
00945A  2  60                   RTS
00945B  2               
00945B  2               SNDFDWR:
00945B  2  18                   CLC
00945C  2  AD 28 06             LDA     DSKUNIT         ; GET DISK UNIT NUMBER
00945F  2  29 01                AND     #$01            ; MASK FOR TWO DRIVES.
009461  2  8D 31 06             STA     slicetmp        ; PARK IT IN TEMP
009464  2  AD 11 06             LDA     debcylm         ; GET HEAD SELECTION
009467  2  29 01                AND     #$01            ; INSURE SINGLE BIT
009469  2  0A                   ASL     A               ;
00946A  2  0A                   ASL     A               ; MOVE HEAD TO BIT 2 POSITION
00946B  2  0D 31 06             ORA     slicetmp        ; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
00946E  2  8D 31 06             STA     slicetmp        ; STORE IN UNIT
009471  2  AD 3B 06             LDA     FCMD            ;
009474  2  20 71 95             JSR     PFDATA          ; PUSH COMMAND TO I8272
009477  2  AD 31 06             LDA     slicetmp        ;
00947A  2  20 71 95             JSR     PFDATA          ;
00947D  2  AD 10 06             LDA     debcyll         ;
009480  2  20 71 95             JSR     PFDATA          ;
009483  2  AD 11 06             LDA     debcylm         ;
009486  2  20 71 95             JSR     PFDATA          ;
009489  2  18                   CLC                     ;
00948A  2  AD 12 06             LDA     debsehd         ;
00948D  2  69 01                ADC     #$01            ;
00948F  2  20 71 95             JSR     PFDATA          ;
009492  2  A9 02                LDA     #$02            ;
009494  2  20 71 95             JSR     PFDATA          ; WHAT DENSITY
009497  2  A9 09                LDA     #$09            ;
009499  2  20 71 95             JSR     PFDATA          ; ASSUME SC (SECTOR COUNT)  EOT
00949C  2  A9 1B                LDA     #$1B            ;
00949E  2  20 71 95             JSR     PFDATA          ; WHAT GAP IS NEEDED
0094A1  2  A9 FF                LDA     #$FF            ; DTL, IS THE LAST COMMAND BYTE TO I8272
0094A3  2  20 9C 95             JSR     PFDATAS
0094A6  2  60                   RTS
0094A7  2               
0094A7  2               
0094A7  2               ; PERFORM READ
0094A7  2               ; FROM READ TO READ MUST NOT EXCEED 25US WORST CASE MIN. (AT 2MHZ IS 2,000,000 CYCLES PER SECOND == 50 CYCLE BUDGET.)
0094A7  2               ;
0094A7  2               RDD_POLL:
0094A7  2  A2 00                LDX     #$00
0094A9  2  A0 00                LDY     #$00
0094AB  2  20 5B 94             JSR     SNDFDWR         ;
0094AE  2               RDS1:
0094AE  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS  (4 CYCLES)
0094B1  2  10 FB                BPL     RDS1            ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
0094B3  2  29 20                AND     #%00100000      ; EXECUTION MODE? (2 CYCLES)
0094B5  2  F0 1D                BEQ     DSKOPEND        ; NO, ERROR
0094B7  2               RDS1A:
0094B7  2  AD 31 03             LDA     FDC_DATA        ; GET DATA (4 CYCLES)
0094BA  2  99 00 04             STA     hstbuf,Y        ; WRITE IT (5 CYCLES)
0094BD  2  C8                   INY                     ; (2 CYCLES)
0094BE  2  D0 EE                BNE     RDS1            ; KEEP GOING (UP TO 4 CYCLES)   TOTAL =
0094C0  2  A2 00                LDX     #$00
0094C2  2               RDS2:
0094C2  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
0094C5  2  10 FB                BPL     RDS2            ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
0094C7  2  29 20                AND     #%00100000      ; EXECUTION MODE?
0094C9  2  F0 09                BEQ     DSKOPEND        ; NO, ERROR
0094CB  2               RDS2A:
0094CB  2  AD 31 03             LDA     FDC_DATA        ; GET DATA
0094CE  2  99 00 05             STA     hstbuf+256,Y    ; WRITE IT
0094D1  2  C8                   INY
0094D2  2  D0 EE                BNE     RDS2            ; KEEP GOING
0094D4  2               DSKOPEND:
0094D4  2  AD 37 03             LDA     FDC_TC
0094D7  2  20 63 96             JSR     FDDELAY
0094DA  2               ;
0094DA  2  20 FE 95             JSR     GFDATA          ;GET ERROR TYPE
0094DD  2  8D 3A 06             STA     FLERR
0094E0  2               ;* CLEAR OUT ANY REMAINING DATA
0094E0  2               RESUL3:
0094E0  2  20 FE 95             JSR     GFDATA          ;READ BYTE FROM FDC
0094E3  2  C9 00                CMP     #$00
0094E5  2  D0 F9                BNE     RESUL3          ;CLEAR THEM ALL
0094E7  2  AD 3A 06             LDA     FLERR           ;
0094EA  2  29 C0                AND     #%11000000      ;
0094EC  2  60                   RTS
0094ED  2               
0094ED  2               
0094ED  2               WRR_POLL:
0094ED  2  20 5B 94             JSR     SNDFDWR         ;
0094F0  2               WRS1:   ;
0094F0  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
0094F3  2  10 FB                BPL     WRS1            ; NOT READY
0094F5  2  29 20                AND     #%00100000      ; EXECUTION MODE?
0094F7  2  F0 1B                BEQ     WRS3            ; NO, ERROR
0094F9  2  B9 00 04             LDA     hstbuf,Y        ; WRITE IT
0094FC  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
0094FF  2  C8                   INY
009500  2  D0 EE                BNE     WRS1            ; DO NEXT
009502  2               WRS2:   ;
009502  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
009505  2  10 FB                BPL     WRS2            ; NOT READY
009507  2  29 20                AND     #%00100000      ; EXECUTION MODE?
009509  2  F0 09                BEQ     WRS3            ; NO, ERROR
00950B  2  B9 00 05             LDA     hstbuf+256,Y    ; WRITE IT
00950E  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
009511  2  C8                   INY
009512  2  D0 EE                BNE     WRS2            ; DO NEXT
009514  2               WRS3:
009514  2  4C D4 94             JMP     DSKOPEND        ;
009517  2               
009517  2               
009517  2               ;__SETTRACK__________________________________________________________________________________________________________________________
009517  2               ;
009517  2               ; 	SEEK TO A TRACK ON GIVEN UNIT
009517  2               ; 	A: TRACK #
009517  2               ;________________________________________________________________________________________________________________________________
009517  2               ;
009517  2               SETTRACK:
009517  2  A9 0C                LDA     #DOR_INIT
009519  2  0D 28 06             ORA     DSKUNIT         ; SET MOTOR ON
00951C  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
00951F  2               
00951F  2               ; ANY INTERUPT PENDING
00951F  2               ; IF YES FIND OUT WHY/CLEAR
00951F  2  20 B5 95             JSR     CHECKINT        ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
009522  2  C9 FF                CMP     #$FF            ; DID IT RTSURN WITH ERROR CODE?
009524  2  D0 03                BNE     SETTRK1
009526  2  4C 70 95             JMP     SETTRKEXIT      ;
009529  2               
009529  2               ;
009529  2               SETTRK1:
009529  2  AD 10 06             LDA     debcyll         ; GET TRACK
00952C  2  C9 00                CMP     #$00            ;
00952E  2  F0 16                BEQ     RECAL           ; IF 0 PERFORM RECAL INSTEAD OF SEEK
009530  2  A9 0F                LDA     #CFD_SEEK       ; SEEK COMMAND
009532  2  20 71 95             JSR     PFDATA          ; PUSH COMMAND
009535  2  AD 28 06             LDA     DSKUNIT         ; SAY WHICH UNIT
009538  2  29 01                AND     #$01
00953A  2  20 71 95             JSR     PFDATA          ; SEND THAT
00953D  2  AD 10 06             LDA     debcyll         ; TO WHAT TRACK
009540  2  20 71 95             JSR     PFDATA          ; SEND THAT TOO
009543  2  4C 5B 95             JMP     WAINT           ; WAIT FOR INTERRUPT SAYING DONE
009546  2               RECAL:
009546  2  A9 0C                LDA     #DOR_INIT
009548  2  0D 28 06             ORA     DSKUNIT         ; SET MOTOR ON
00954B  2  8D 36 03             STA     FDC_DOR         ; OUTPUT TO CONTROLLER
00954E  2  A9 07                LDA     #CFD_RECAL      ; RECAL TO TRACK 0
009550  2  20 71 95             JSR     PFDATA          ; SEND IT
009553  2  AD 28 06             LDA     DSKUNIT         ; SAY WHICH UNIT
009556  2  29 01                AND     #$01
009558  2  20 71 95             JSR     PFDATA          ; SEND THAT TOO
00955B  2               ;
00955B  2               WAINT:
00955B  2  48                   PHA
00955C  2  8A                   TXA
00955D  2  48                   PHA
00955E  2  A2 64                LDX     #100
009560  2  20 68 96             JSR     FDVDELAY
009563  2  68                   PLA
009564  2  AA                   TAX
009565  2  68                   PLA
009566  2               :
009566  2  20 B5 95             JSR     CHECKINT
009569  2  AD 30 03             LDA     FDC_MSR         ; READ SEEK STATUS
00956C  2  29 0F                AND     #%00001111      ; ANY DRIVES SEEKING?
00956E  2  D0 F6                BNE     :-              ; YES, WAIT FOR THEM
009570  2               ;
009570  2               SETTRKEXIT:
009570  2  60                   RTS
009571  2               
009571  2               ;__PFDATA__________________________________________________________________________________________________________________________
009571  2               ;
009571  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE
009571  2               ;
009571  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
009571  2               ;	RQM  DIO
009571  2               ;	0	0	BUSY
009571  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
009571  2               ;	1	1	BYTE FOR READ BY HOST PENDING
009571  2               ;	0	1	BUSY
009571  2               ;
009571  2               ;________________________________________________________________________________________________________________________________
009571  2               ;
009571  2               PFDATA:
009571  2  48                   PHA                     ; SAVE DATA BYTE
009572  2  A0 00                LDY     #$00
009574  2               WRF1:
009574  2  AD 30 03             LDA     FDC_MSR         ; READ FDC STATUS
009577  2  AA                   TAX
009578  2  29 80                AND     #$80            ;
00957A  2  D0 07                BNE     :+
00957C  2  C8                   INY
00957D  2  D0 F5                BNE     WRF1            ; FDC IS NOT READY, WAIT FOR IT
00957F  2  68                   PLA
009580  2  A9 FF                LDA     #$FF
009582  2  60                   RTS
009583  2               :
009583  2  8A                   TXA
009584  2  29 40                AND     #$40            ; TEST DIO BIT
009586  2  D0 0E                BNE     WRF2            ; FDC IS OUT OF SYNC
009588  2  68                   PLA                     ; RESTORE DATA
009589  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
00958C  2  20 63 96             JSR     FDDELAY
00958F  2  20 63 96             JSR     FDDELAY
009592  2  20 63 96             JSR     FDDELAY
009595  2  60                   RTS
009596  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
009596  2               WRF2:
009596  2  AD 31 03             LDA     FDC_DATA        ; READ DATA REGISTER
009599  2  4C 74 95             JMP     WRF1            ; AND CONTINUE
00959C  2               
00959C  2               ;__PFDATAS_________________________________________________________________________________________________________________________
00959C  2               ;
00959C  2               ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
00959C  2               ;
00959C  2               ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
00959C  2               ;	RQM  DIO
00959C  2               ;	0	0	BUSY
00959C  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
00959C  2               ;	1	1	BYTE FOR READ BY HOST PENDING
00959C  2               ;	0	1	BUSY
00959C  2               ;
00959C  2               ;________________________________________________________________________________________________________________________________
00959C  2               ;
00959C  2               PFDATAS:
00959C  2  48                   PHA                     ; SAVE DATA BYTE
00959D  2               WRF1S:
00959D  2  AD 30 03             LDA     FDC_MSR         ; READ FDC STATUS
0095A0  2  AA                   TAX
0095A1  2  29 80                AND     #$80            ;
0095A3  2  F0 F8                BEQ     WRF1S           ; FDC IS NOT READY, WAIT FOR IT
0095A5  2  8A                   TXA
0095A6  2  29 40                AND     #$40            ; TEST DIO BIT
0095A8  2  D0 05                BNE     WRF2S           ; FDC IS OUT OF SYNC
0095AA  2  68                   PLA                     ; RESTORE DATA
0095AB  2  8D 31 03             STA     FDC_DATA        ; WRITE TO FDC
0095AE  2  60                   RTS
0095AF  2               ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
0095AF  2               WRF2S:
0095AF  2  AD 31 03             LDA     FDC_DATA        ; READ DATA REGISTER
0095B2  2  4C 9D 95             JMP     WRF1S           ; AND CONTINUE
0095B5  2               
0095B5  2               
0095B5  2               
0095B5  2               ;__CHECKINT__________________________________________________________________________________________________________________________
0095B5  2               ;
0095B5  2               ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
0095B5  2               ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
0095B5  2               ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
0095B5  2               ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
0095B5  2               ;________________________________________________________________________________________________________________________________
0095B5  2               ;
0095B5  2               CHECKINT:
0095B5  2  A0 00                LDY     #$00
0095B7  2               :
0095B7  2  AD 30 03             LDA     FDC_MSR         ; READING OR WRITING IS KEYS TO D7 RQM
0095BA  2  29 80                AND     #$80
0095BC  2  D0 09                BNE     :+              ; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
0095BE  2  20 63 96             JSR     FDDELAY
0095C1  2  C8                   INY
0095C2  2  D0 F3                BNE     :-
0095C4  2  4C CF 95             JMP     ERRCLR
0095C7  2               
0095C7  2               :
0095C7  2  AD 30 03             LDA     FDC_MSR         ; READING OR WRITING IS KEYS TO D7 RQM
0095CA  2  29 40                AND     #$40            ; WAITING FOR INPUT?
0095CC  2  F0 16                BEQ     SENDINT
0095CE  2  60                   RTS
0095CF  2               
0095CF  2               ERRCLR:
0095CF  2  A0 00                LDY     #$00
0095D1  2               :
0095D1  2  AD 31 03             LDA     FDC_DATA        ; CLEAR THE JUNK OUT OF DATA REGISTER
0095D4  2  AD 30 03             LDA     FDC_MSR         ; CHECK WITH RQM
0095D7  2  29 80                AND     #$80            ; IF STILL NOT READY, READ OUT MORE JUNK
0095D9  2  D0 06                BNE     :+              ;
0095DB  2  20 63 96             JSR     FDDELAY
0095DE  2  C8                   INY
0095DF  2  D0 F0                BNE     :-
0095E1  2               :
0095E1  2  A9 FF                LDA     #$FF            ; RETURN ERROR CODE -1
0095E3  2               ;
0095E3  2  60                   RTS
0095E4  2               
0095E4  2               ;__SENDINT__________________________________________________________________________________________________________________________
0095E4  2               ;
0095E4  2               ; SENSE INTERRUPT COMMAND
0095E4  2               ;________________________________________________________________________________________________________________________________
0095E4  2               ;
0095E4  2               SENDINT:
0095E4  2  A9 08                LDA     #CFD_SENSEINT   ; SENSE INTERRUPT COMMAND
0095E6  2  20 71 95             JSR     PFDATA          ; SEND IT
0095E9  2  20 FE 95             JSR     GFDATA          ; GET RESULTS
0095EC  2  8D 39 06             STA     ST0             ; STORE THAT
0095EF  2  29 C0                AND     #$C0            ; MASK OFF INTERRUPT STATUS BITS
0095F1  2  C9 80                CMP     #$80            ; CHECK IF INVALID COMMAND
0095F3  2  F0 08                BEQ     ENDSENDINT      ; YES, EXIT
0095F5  2  20 FE 95             JSR     GFDATA          ; GET ANOTHER (STATUS CODE 1)
0095F8  2  AD 39 06             LDA     ST0             ; GET FIRST ONE
0095FB  2  29 C0                AND     #$C0            ; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
0095FD  2               ENDSENDINT:
0095FD  2  60                   RTS                     ; ANYTHING ELSE IS AN ERROR
0095FE  2               
0095FE  2               
0095FE  2               ;__GFDATA__________________________________________________________________________________________________________________________
0095FE  2               ;
0095FE  2               ; GET DATA FROM FLOPPY CONTROLLER
0095FE  2               ;
0095FE  2               ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
0095FE  2               ;	RQM  DIO
0095FE  2               ;	0	0	BUSY
0095FE  2               ;	1	0	WRITE TO DATA REGISTER PERMITTED
0095FE  2               ;	1	1	BYTE FOR READ BY HOST PENDING
0095FE  2               ;	0	1	BUSY
0095FE  2               ;
0095FE  2               ;________________________________________________________________________________________________________________________________
0095FE  2               ;
0095FE  2               GFDATA:
0095FE  2  A0 00                LDY     #$00
009600  2               :
009600  2  AD 30 03             LDA     FDC_MSR         ; GET STATUS
009603  2  AA                   TAX                     ;
009604  2  29 80                AND     #%10000000      ; NOT READY, WAIT
009606  2  D0 06                BNE     :+              ;
009608  2  C8                   INY
009609  2  D0 F5                BNE     :-
00960B  2  A9 00                LDA     #$00
00960D  2  60                   RTS
00960E  2               :
00960E  2  8A                   TXA
00960F  2  29 40                AND     #%01000000      ; ANY DATA FOR US?
009611  2  F0 03                BEQ     GFDATA1         ; NO, SKIP IT
009613  2  AD 31 03             LDA     FDC_DATA        ; GET FDC DATA
009616  2               GFDATA1:
009616  2  60                   RTS
009617  2               
009617  2               ;__FD_DETECT______________________________________________________________________________________________________________________
009617  2               ;
009617  2               ; 	DETECT FLOPPY HARDWARE
009617  2               ;________________________________________________________________________________________________________________________________
009617  2               FD_DETECT:
009617  2               ; BLINDLY RESET FDC (WHICH MAY OR MAY NOT EXIST)
009617  2  20 45 96             JSR     FC_RESETFDC     ; RESET FDC
00961A  2               
00961A  2  AD 30 03             LDA     FDC_MSR         ; READ MSR
00961D  2  C9 80                CMP     #$80
00961F  2  F0 0A                BEQ     FD_DETECT1      ; $80 IS OK
009621  2  C9 D0                CMP     #$D0
009623  2  F0 06                BEQ     FD_DETECT1      ; $D0 IS OK
009625  2  A9 FF                LDA     #$FF            ; NOT OK
009627  2  8D 42 06             STA     FLOPPY_DETCT
00962A  2  60                   RTS
00962B  2               ;
00962B  2               FD_DETECT1:
00962B  2  A2 64                LDX     #100
00962D  2  20 68 96             JSR     FDVDELAY        ; WAIT A BIT FOR FDC
009630  2  AD 30 03             LDA     FDC_MSR         ; READ MSR AGAIN
009633  2  C9 80                CMP     #$80
009635  2  F0 08                BEQ     :+              ; $80 IS OK
009637  2  C9 D0                CMP     #$D0
009639  2  A9 FF                LDA     #$FF            ; NOT OK
00963B  2  8D 42 06             STA     FLOPPY_DETCT
00963E  2  60                   RTS
00963F  2               :
00963F  2  A9 00                LDA     #$00            ; OK
009641  2  8D 42 06             STA     FLOPPY_DETCT
009644  2  60                   RTS
009645  2               
009645  2               FC_RESETFDC:
009645  2  AD 33 03             LDA     FDC_RESET
009648  2  AD 33 03             LDA     FDC_RESET
00964B  2  A2 96                LDX     #150
00964D  2  20 68 96             JSR     FDVDELAY        ; WAIT A BIT FOR FDC
009650  2               
009650  2  A9 00                LDA     #$00
009652  2  8D 36 03             STA     FDC_DOR
009655  2  20 63 96             JSR     FDDELAY
009658  2  A9 0C                LDA     #DOR_INIT
00965A  2  8D 36 03             STA     FDC_DOR
00965D  2  A2 96                LDX     #150            ;
00965F  2  20 68 96             JSR     FDVDELAY
009662  2  60                   RTS
009663  2               
009663  2               
009663  2               FDDELAY:
009663  2  48                   PHA
009664  2  68                   PLA
009665  2  48                   PHA
009666  2  68                   PLA
009667  2  60                   RTS
009668  2               FDVDELAY:
009668  2  48                   PHA
009669  2  68                   PLA
00966A  2  48                   PHA
00966B  2  68                   PLA
00966C  2  CA                   DEX
00966D  2  E0 00                CPX     #$00
00966F  2  D0 F7                BNE     FDVDELAY
009671  2  60                   RTS
009672  2               
009672  1                       .INCLUDE "dospager.asm"
009672  2               ;__pager_________________________________________________________________________________________________________________________
009672  2               ;
009672  2               ; 	Nhyodyne Memory page management code
009672  2               ;
009672  2               ;	Entry points:
009672  2               ;		PAGER_INIT          - called during OS init
009672  2               ;________________________________________________________________________________________________________________________________
009672  2               ;
009672  2               ; RAM BANK $0C is RAM area for Drivers
009672  2               ; RAM BANK $0E is operating bank for DOS/65 $8000-$FFFF
009672  2               ; RAM BANK $0F is fixed bank $0000-$7FFF
009672  2               ;
009672  2               ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
009672  2               ;
009672  2               ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
009672  2               ;       A15 IS INVERTED FOR THE NYHODYNE 65C02 CPU . . .
009672  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
009672  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009672  2               ;	: : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0 x
009672  2               ;	: : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0 X
009672  2               ;	: : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
009672  2               ;	:-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
009672  2               ;
009672  2               ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
009672  2               ;
009672  2               ;	7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
009672  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009672  2               ;	: : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
009672  2               ;	: : :-------------0 = UNDEFINED DEFAULT IS 0
009672  2               ;	: :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
009672  2               ;	:-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
009672  2               
009672  2               
009672  2               ;__PAGER_INIT___________________________________________________________________________________________
009672  2               ;
009672  2               ;  INIT -- Copy code into $0200-$02FF for controling banking and copying
009672  2               ;____________________________________________________________________________________________________
009672  2               PAGER_INIT:
009672  2  A2 00                LDX     #$00
009674  2               :
009674  2  BD 80 96             LDA     md_pagecode,X
009677  2  9D 00 02             STA     MD_PAGERA,X
00967A  2  E8                   INX
00967B  2  E0 00                CPX     #$00
00967D  2  D0 F5                BNE     :-
00967F  2  60                   RTS
009680  2               
009680  2               ;       X=Control Word
009680  2               ;	7 6 5 4  3 2 1 0
009680  2               ;	^ ^ ^ ^  ^ ^ ^ ^
009680  2               ;       X : : X  X X X X    = UNUSED
009680  2               ;	X : :-------------0 = Read=0, Write=1
009680  2               ;	X :---------------0 = RAM=0, ROM=1
009680  2               ;
009680  2               ;       A= bank
009680  2               ;       Y= page
009680  2               ;
009680  2               md_pagecode:
009680  2  48                   PHA
009681  2  84 ED                STY     DEST+1     ; setup copy from pointer
009683  2  8A                   TXA
009684  2  29 80                AND     #$80
009686  2  A8                   TAY
009687  2  84 EC                STY     DEST
009689  2  8A                   TXA
00968A  2  29 20                AND     #%00100000
00968C  2  C9 00                CMP     #$00
00968E  2  D0 4F                BNE     MD_PAGE_WRITE
009690  2               ; PERFORM READ HERE
009690  2  8A                   TXA
009691  2  29 40                AND     #%01000000
009693  2  C9 00                CMP     #$00
009695  2  D0 0E                BNE     MD_PAGE_ROREAD
009697  2               ; DO RAM READ
009697  2  A9 80                LDA     #$80
009699  2  8D 7C 03             STA     MPCL_ROM
00969C  2  68                   PLA
00969D  2  09 80                ORA     #$80
00969F  2  8D 78 03             STA     MPCL_RAM
0096A2  2  18                   CLC
0096A3  2  90 0B                BCC     MD_PAGE_COPYFRM
0096A5  2               MD_PAGE_ROREAD:
0096A5  2  A9 00                LDA     #$00
0096A7  2  8D 78 03             STA     MPCL_RAM
0096AA  2  68                   PLA
0096AB  2  29 7F                AND     #$7F
0096AD  2  8D 7C 03             STA     MPCL_ROM
0096B0  2               MD_PAGE_COPYFRM:
0096B0  2               ; DO THE COPY
0096B0  2  A2 00                LDX     #$00
0096B2  2  A0 00                LDY     #$00
0096B4  2               :
0096B4  2  B1 EC                LDA     (DEST),Y
0096B6  2  9D 00 04             STA     hstbuf,X
0096B9  2  E8                   INX
0096BA  2  C8                   INY
0096BB  2  E0 00                CPX     #$00
0096BD  2  D0 F5                BNE     :-
0096BF  2  A2 00                LDX     #$00
0096C1  2  A0 00                LDY     #$00
0096C3  2  E6 ED                INC     DEST+1
0096C5  2               :
0096C5  2  B1 EC                LDA     (DEST),Y
0096C7  2  9D 00 05             STA     hstbuf+$100,X
0096CA  2  E8                   INX
0096CB  2  C8                   INY
0096CC  2  E0 00                CPX     #$00
0096CE  2  D0 F5                BNE     :-
0096D0  2  A9 80                LDA     #$80
0096D2  2  8D 7C 03             STA     MPCL_ROM
0096D5  2  EA                   NOP
0096D6  2  EA                   NOP
0096D7  2  A9 8C                LDA     #$8C
0096D9  2  8D 78 03             STA     MPCL_RAM
0096DC  2  EA                   NOP
0096DD  2  EA                   NOP
0096DE  2  60                   RTS
0096DF  2               MD_PAGE_WRITE:
0096DF  2  68                   PLA
0096E0  2  09 80                ORA     #%10000000
0096E2  2  8D 78 03             STA     MPCL_RAM
0096E5  2               ; DO THE COPY
0096E5  2  A2 00                LDX     #$00
0096E7  2  A0 00                LDY     #$00
0096E9  2               :
0096E9  2  BD 00 04             LDA     hstbuf,X
0096EC  2  91 EC                STA     (DEST),Y
0096EE  2  E8                   INX
0096EF  2  C8                   INY
0096F0  2  E0 00                CPX     #$00
0096F2  2  D0 F5                BNE     :-
0096F4  2  A2 00                LDX     #$00
0096F6  2  A0 00                LDY     #$00
0096F8  2  E6 ED                INC     DEST+1
0096FA  2               :
0096FA  2  BD 00 05             LDA     hstbuf+$100,X
0096FD  2  91 EC                STA     (DEST),Y
0096FF  2  E8                   INX
009700  2  C8                   INY
009701  2  E0 00                CPX     #$00
009703  2  D0 F5                BNE     :-
009705  2  A9 8C                LDA     #$8C
009707  2  8D 78 03             STA     MPCL_RAM
00970A  2  EA                   NOP
00970B  2  EA                   NOP
00970C  2  60                   RTS
00970D  2               md_pagecodeend:
00970D  2               farcall:
00970D  2                       .IF     USEROM=1
00970D  2                           PHA
00970D  2                           LDA     #$80
00970D  2                           STA     MPCL_ROM
00970D  2                           NOP
00970D  2                           NOP
00970D  2                           LDA     #$8C
00970D  2                           STA     MPCL_RAM
00970D  2                           NOP
00970D  2                           NOP
00970D  2                           PLA
00970D  2                           JSR     BANKED_DRIVER_DISPATCHER
00970D  2                           PHA
00970D  2                           LDA     #$00
00970D  2                           STA     MPCL_RAM
00970D  2                           NOP
00970D  2                           NOP
00970D  2                           STA     MPCL_ROM
00970D  2                           NOP
00970D  2                           NOP
00970D  2                           PLA
00970D  2                           RTS
00970D  2               md_farrun:
00970D  2                           LDA     #$80
00970D  2                           STA     MPCL_ROM
00970D  2                           NOP
00970D  2                           NOP
00970D  2                           LDA     $00
00970D  2                           STA     MPCL_RAM
00970D  2                           NOP
00970D  2                           NOP
00970D  2                           JMP     ($0001)
00970D  2                       .ELSE
00970D  2  48                       PHA
00970E  2  A9 8C                    LDA     #$8C
009710  2  8D 78 03                 STA     MPCL_RAM
009713  2  EA                       NOP
009714  2  EA                       NOP
009715  2  68                       PLA
009716  2  20 00 88                 JSR     BANKED_DRIVER_DISPATCHER
009719  2  48                       PHA
00971A  2  A9 8E                    LDA     #$8E
00971C  2  8D 78 03                 STA     MPCL_RAM
00971F  2  68                       PLA
009720  2  60                       RTS
009721  2                       .ENDIF
009721  2               
009721  1               
009721  1               
009721  1               
009721  1               ;__DFT_CONSOLE___________________________________________________________________________________________________________________
009721  1               ;
009721  1               ;	      TRANSFER CONSOLE COMMAND TO DESIGNATED CONSOLE
009721  1               ;________________________________________________________________________________________________________________________________
009721  1               DFT_CONSOLE:
009721  1  48                   PHA
009722  1  A5 3A                LDA     CONSOLE
009724  1  18                   CLC
009725  1  65 32                ADC     farfunct
009727  1  85 32                STA     farfunct
009729  1  68                   PLA
00972A  1  4C 00 88             JMP     FUNCTION_DISPATCHER
00972D  1               
00972D  1               
00972D  1               drv_noop:
00972D  1  60                   RTS
00972E  1                       .END
