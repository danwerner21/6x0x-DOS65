ca65 V2.18 - Ubuntu 2.19-1
Main file   : copy201.asm
Current file: copy201.asm

000000r 1               ;COPY
000000r 1               ;VERSION 2.01-A
000000r 1               ;RELEASED:	18 MAY 1996
000000r 1               ;LAST REVISION:
000000r 1               ;	27 MARCH 2008
000000r 1               ;		REFORMATTED FOR TASM & ASM 2.10
000000r 1               ;		ELIMINATED PAGE ZERO 0 & 1
000000r 1               ;		CORRECTED REFERENCES TO SIMLNG TO CCMLNG
000000r 1               ;PROGRAM TO COPY FILES FROM ONE LOCATION TO ANOTHER.
000000r 1               ;SYNTAX IS
000000r 1               ;	COPY FROMUFN TOUFN
000000r 1               ;WHERE THE TOUFN MAY SIMPLY BE A DRIVE
000000r 1               ;SPECIFICATION IN WHICH CASE THE DESTINATION
000000r 1               ;WILL HAVE THE SAME NAME AS THE SOURCE.
000000r 1               ;KEY DIFFERENCES BETWEEN THIS AND PRIOR VERSIONS IS
000000r 1               ;USE OF THE FROM TO SYNTAX AND INCORPORATION OF CODE
000000r 1               ;TO ENSURE CCM IS PRESERVED SO A RTS CAN BE DONE
000000r 1               ;AT THE END RATHER THAN A WARM BOOT.
000000r 1               ;FIXED PARAMETERS
000000r 1               DFLFCB          = $107          ;DEFAULT FCB
000000r 1               PEM             = $103          ;PEM ENTRY
000000r 1               BOOT            = $100          ;WARM BOOT
000000r 1               TEA             = $800          ;EXECUTION ORG
000000r 1               CCMLNG          = 2048          ;CCM LENGTH
000000r 1               ;PAGE ZERO VARIABLES
000000r 1               NAMED           = $02           ;"TO" FILE NAMED IF <128
000000r 1               TOIND           = $03           ;"TO" FILE INDEX
000000r 1               FRMIND          = $05           ;"FROM" FILE INDEX
000000r 1               EOFFLG          = $07           ;EOF FLAG IF >127
000000r 1               BUFLNG          = $08           ;BUFFER LENGTH
000000r 1               ;MAIN PROGRAM
000000r 1                       .FEATURE labels_without_colons
000000r 1                       .SEGMENT "TEA"
000000r 1                       .ORG    $0800
000800  1  38                   SEC                     ;CALCULATE
000801  1  AD 04 01             LDA     PEM+1           ;AMOUNT
000804  1  E9 1D                SBC     #(BUFFER & $ff) ;OF FREE MEMORY
000806  1  29 80                AND     #$80            ;IN MOD 128
000808  1  85 08                STA     BUFLNG          ;AND
00080A  1  AD 05 01             LDA     PEM+2           ;SAVE
00080D  1  E9 0A                SBC     #((BUFFER / $100)& $FF);FOR
00080F  1  85 09                STA     BUFLNG+1        ;READ/WRITE
000811  1  38                   SEC                     ;NOW BACK UP BEFORE SIM
000812  1  A5 08                LDA     BUFLNG
000814  1  E9 00                SBC     #(CCMLNG*256/256) & $FF
000816  1  85 08                STA     BUFLNG
000818  1  A5 09                LDA     BUFLNG+1
00081A  1  E9 08                SBC     #CCMLNG/256
00081C  1  85 09                STA     BUFLNG+1
00081E  1  18                   CLC                     ;NOW
00081F  1  A5 08                LDA     BUFLNG          ;ADD
000821  1  69 1D                ADC     #(BUFFER & $ff) ;START
000823  1  85 08                STA     BUFLNG          ;BACK
000825  1  A5 09                LDA     BUFLNG+1        ;TO
000827  1  69 0A                ADC     #((BUFFER / $100)& $FF);GET
000829  1  85 09                STA     BUFLNG+1        ;MAX INDEX
00082B  1               ;CHECK FOR AMBIGUOUS NAMES
00082B  1  A9 3F                LDA     #'?'            ;GET A ?
00082D  1  A2 0B                LDX     #11             ;SET INDEX
00082F  1               TSTAMB
00082F  1  DD 07 01             CMP     DFLFCB,X        ;TEST TO
000832  1  D0 03                BNE     *+5             ;OK IF NOT
000834  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
000837  1  DD 17 01             CMP     DFLFCB+16,X     ;NOW TRY FFROM
00083A  1  D0 03                BNE     *+5             ;ALSO OK IF NOT
00083C  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
00083F  1  CA                   DEX                     ;DROP INDEX
000840  1  D0 ED                BNE     TSTAMB          ;LOOP IF MORE
000842  1               ;NOW MAKE SURE SOURCE IS AMED
000842  1  A9 20                LDA     #' '            ;GET A SPACE
000844  1  CD 08 01             CMP     DFLFCB+1        ;TRY NAME
000847  1  D0 08                BNE     NOTZIP          ;OK IF DIFFERENT
000849  1  CD 10 01             CMP     DFLFCB+9        ;NOW TRY TYPE
00084C  1  D0 03                BNE     NOTZIP          ;ALSO OK IF DIFF
00084E  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
000851  1               ;NOW SEE IF DESTINATION NOT NAMED
000851  1               NOTZIP
000851  1  86 02                STX     NAMED           ;SAY NAMED FOR NOW
000853  1  CD 18 01             CMP     DFLFCB+17       ;TRY NAME
000856  1  D0 07                BNE     ISNAMD          ;OK IF DIFF
000858  1  CD 20 01             CMP     DFLFCB+25       ;NOW TRY TYPE
00085B  1  D0 02                BNE     ISNAMD          ;ALSO OK IF DIFF
00085D  1  C6 02                DEC     NAMED           ;ELSE MAKE NEG
00085F  1               ;SET UP FCBS
00085F  1               ISNAMD
00085F  1  A2 0B                LDX     #11             ;SET INDEX
000861  1               MOVNME
000861  1  BD 07 01             LDA     DFLFCB,X        ;GET FROM
000864  1  9D BA 09             STA     FRMFCB,X        ;AND SET
000867  1  24 02                BIT     NAMED           ;TEST FLAG
000869  1  30 03                BMI     NMESME          ;BRANCH IF NO NAME
00086B  1  BD 17 01             LDA     DFLFCB+16,X     ;ELSE GET TO
00086E  1               NMESME
00086E  1  9D DB 09             STA     TOFCB,X         ;SAVE "TO" NAME
000871  1  9D FC 09             STA     ENDFCB,X        ;AND IN END
000874  1  CA                   DEX                     ;DROP COUNT
000875  1  D0 EA                BNE     MOVNME          ;LOOP IF MORE
000877  1               ;MAKE SURE DRIVES ARE RIGHT
000877  1  AD 17 01             LDA     DFLFCB+16       ;GET TO
00087A  1  8D DB 09             STA     TOFCB           ;AND SET
00087D  1  8D FC 09             STA     ENDFCB          ;BOTH TO AND END
000880  1  AD 07 01             LDA     DFLFCB          ;AND SAME
000883  1  8D BA 09             STA     FRMFCB          ;FOR FROM
000886  1               ;CLEAR REST OF FCBS
000886  1  8A                   TXA                     ;CLEAR A
000887  1  A2 20                LDX     #32             ;SET INDEX
000889  1               CLRFCB
000889  1  9D DB 09             STA     TOFCB,X         ;CLEAR
00088C  1  9D FC 09             STA     ENDFCB,X        ;ALL
00088F  1  9D BA 09             STA     FRMFCB,X        ;FCBS
000892  1  CA                   DEX                     ;DROP COUNT
000893  1  E0 0B                CPX     #11             ;SEE IF AT NAME
000895  1  D0 F2                BNE     CLRFCB          ;LOOP IF MORE
000897  1               ;MAKE "TO" A TEMP
000897  1  A2 03                LDX     #3              ;SET INDEX
000899  1  A9 24                LDA     #'$'            ;GET BYTE
00089B  1               TMPLPE
00089B  1  9D E3 09             STA     TOFCB+8,X       ;INSERT
00089E  1  CA                   DEX                     ;DROP COUNT
00089F  1  D0 FA                BNE     TMPLPE          ;LOOP IF MORE
0008A1  1               ;TRY TO OPEN SOURCE
0008A1  1  20 26 09             JSR     SFMFCB          ;POINT TO FCB
0008A4  1  20 F9 08             JSR     OPNFIL          ;OPEN IT
0008A7  1  10 03                BPL     *+5             ;OK
0008A9  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
0008AC  1               ;SETUP DESTINATION
0008AC  1  20 21 09             JSR     STOFCB          ;POINT TO "TO"
0008AF  1  20 03 09             JSR     DLTFIL          ;DELETE IT
0008B2  1  20 21 09             JSR     STOFCB          ;POINT AGAIN
0008B5  1  20 12 09             JSR     CRTFIL          ;MAKE IT
0008B8  1  10 03                BPL     *+5             ;OK
0008BA  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
0008BD  1  20 21 09             JSR     STOFCB          ;ONE MORE TIME
0008C0  1  20 F9 08             JSR     OPNFIL          ;AND OPEN
0008C3  1  10 03                BPL     *+5             ;OK
0008C5  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
0008C8  1               ;DO THE MOVE
0008C8  1  A9 00                LDA     #0              ;CLEAR EOF
0008CA  1  85 07                STA     EOFFLG          ;FLAG
0008CC  1               DOMOVE
0008CC  1  20 3C 09             JSR     RDEBUF          ;READ BUFFER
0008CF  1  20 71 09             JSR     WRTBUF          ;NOW WRITE IT
0008D2  1  24 07                BIT     EOFFLG          ;TEST FLAG
0008D4  1  10 F6                BPL     DOMOVE          ;LOOP IF NOT
0008D6  1  20 21 09             JSR     STOFCB          ;POINT TO "TO"
0008D9  1  20 FE 08             JSR     CLSFIL          ;CLOSE IT
0008DC  1  10 03                BPL     *+5             ;OK
0008DE  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
0008E1  1               ;DELETE OLD "END" AND RENAME "TO"
0008E1  1  20 2B 09             JSR     SENFCB          ;POINT TO IT
0008E4  1  20 03 09             JSR     DLTFIL          ;DELETE IT
0008E7  1  A2 0B                LDX     #11             ;NOW MOVE
0008E9  1               RNMLPE
0008E9  1  BD FC 09             LDA     ENDFCB,X        ;"END"
0008EC  1  9D EB 09             STA     TOFCB+16,X      ;TO
0008EF  1  CA                   DEX                     ;"TO"
0008F0  1  D0 F7                BNE     RNMLPE          ;FCB
0008F2  1  20 21 09             JSR     STOFCB          ;POINT TO IT
0008F5  1  20 17 09             JSR     RNMFIL          ;AND RENAME
0008F8  1  60                   RTS                     ;DONE
0008F9  1               ;SUBROUTINES
0008F9  1               ;OPEN FILE
0008F9  1               OPNFIL
0008F9  1  A2 0F                LDX     #15
0008FB  1  4C 03 01             JMP     PEM
0008FE  1               ;CLOSE FILE
0008FE  1               CLSFIL
0008FE  1  A2 10                LDX     #16
000900  1  4C 03 01             JMP     PEM
000903  1               ;DELETE FILE
000903  1               DLTFIL
000903  1  A2 13                LDX     #19
000905  1  4C 03 01             JMP     PEM
000908  1               ;READ RECORD
000908  1               RDERCR
000908  1  A2 14                LDX     #20
00090A  1  4C 03 01             JMP     PEM
00090D  1               ;WRITE RECORD
00090D  1               WRTRCR
00090D  1  A2 15                LDX     #21
00090F  1  4C 03 01             JMP     PEM
000912  1               ;CREATE FILE
000912  1               CRTFIL
000912  1  A2 16                LDX     #22
000914  1  4C 03 01             JMP     PEM
000917  1               ;RENAME FILE
000917  1               RNMFIL
000917  1  A2 17                LDX     #23
000919  1  4C 03 01             JMP     PEM
00091C  1               ;SET BUFFER
00091C  1               SETBUF
00091C  1  A2 1A                LDX     #26
00091E  1  4C 03 01             JMP     PEM
000921  1               ;SET DEST FCB
000921  1               STOFCB
000921  1  A9 DB                LDA     #(TOFCB & $ff)
000923  1  A0 09                LDY     #((TOFCB / $100)& $FF)
000925  1  60                   RTS
000926  1               ;SET SOURCE FCB
000926  1               SFMFCB
000926  1  A9 BA                LDA     #(FRMFCB & $ff)
000928  1  A0 09                LDY     #((FRMFCB / $100)& $FF)
00092A  1  60                   RTS
00092B  1               ;SET END FCB
00092B  1               SENFCB
00092B  1  A9 FC                LDA     #(ENDFCB & $ff)
00092D  1  A0 09                LDY     #((ENDFCB / $100)& $FF)
00092F  1  60                   RTS
000930  1               ;DISK ERROR EXIT
000930  1               BADFIL
000930  1  A9 A5                LDA     #(ERRMSG & $ff)
000932  1  A0 09                LDY     #((ERRMSG / $100)& $FF)
000934  1  A2 09                LDX     #9
000936  1  20 03 01             JSR     PEM
000939  1  4C 00 01             JMP     BOOT
00093C  1               ;READ BUFFER
00093C  1               ;IF EOF THEN SET FLAG
00093C  1               RDEBUF
00093C  1  A9 1D                LDA     #(BUFFER & $ff) ;SET
00093E  1  A0 0A                LDY     #((BUFFER / $100)& $FF);INDEX
000940  1  85 05                STA     FRMIND          ;TO BUFFER
000942  1  84 06                STY     FRMIND+1        ;START
000944  1               RDELPE
000944  1  A5 05                LDA     FRMIND          ;GET INDEX
000946  1  A4 06                LDY     FRMIND+1        ;AND
000948  1  20 1C 09             JSR     SETBUF          ;SET BUFFER
00094B  1  20 26 09             JSR     SFMFCB          ;POINT TO FCB
00094E  1  20 08 09             JSR     RDERCR          ;READ A RECORD
000951  1  F0 08                BEQ     RDEOK           ;OK IF ZERO
000953  1  10 03                BPL     *+5             ;EOF IF POSITIVE
000955  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
000958  1  C6 07                DEC     EOFFLG          ;SET FLAG
00095A  1  60                   RTS                     ;AND QUIT
00095B  1               RDEOK
00095B  1  18                   CLC                     ;NOW
00095C  1  A5 05                LDA     FRMIND          ;ADD
00095E  1  69 80                ADC     #128            ;128
000960  1  85 05                STA     FRMIND          ;TO
000962  1  90 02                BCC     *+4             ;INDEX
000964  1  E6 06                INC     FRMIND+1        ;FOR NEXT
000966  1  C5 08                CMP     BUFLNG          ;COMPARE TO LOW
000968  1  D0 DA                BNE     RDELPE          ;LOOP IF OK
00096A  1  A5 06                LDA     FRMIND+1        ;GET HIGH
00096C  1  C5 09                CMP     BUFLNG+1        ;COMPARE IT
00096E  1  D0 D4                BNE     RDELPE          ;ALSO LOOP IF MORE
000970  1  60                   RTS
000971  1               ;WRITE BUFFER
000971  1               WRTBUF
000971  1  A9 1D                LDA     #(BUFFER & $ff) ;SET
000973  1  A0 0A                LDY     #((BUFFER / $100)& $FF);INDEX
000975  1  85 03                STA     TOIND           ;TO
000977  1  84 04                STY     TOIND+1         ;START
000979  1               WRTLPE
000979  1  A5 03                LDA     TOIND           ;GET CURRENT
00097B  1  A4 04                LDY     TOIND+1         ;INDEX
00097D  1  20 1C 09             JSR     SETBUF          ;AND SET
000980  1  A5 03                LDA     TOIND           ;COMPARE INDEX
000982  1  C5 05                CMP     FRMIND          ;TO READ
000984  1  D0 07                BNE     DOWRT           ;OK IF DIFF
000986  1  A5 04                LDA     TOIND+1         ;DO SAME
000988  1  C5 06                CMP     FRMIND+1        ;FOR HIGH
00098A  1  D0 01                BNE     DOWRT           ;INDEX
00098C  1  60                   RTS                     ;ELSE DONE
00098D  1               DOWRT
00098D  1  20 21 09             JSR     STOFCB          ;POINT TO FCB
000990  1  20 0D 09             JSR     WRTRCR          ;WRITE RECORD
000993  1  F0 03                BEQ     *+5             ;OK
000995  1  4C 30 09             JMP     BADFIL          ;ELSE ERROR
000998  1  18                   CLC                     ;NOW
000999  1  A5 03                LDA     TOIND           ;ADD
00099B  1  69 80                ADC     #128            ;128
00099D  1  85 03                STA     TOIND           ;TO INDEX
00099F  1  90 D8                BCC     WRTLPE          ;WITH
0009A1  1  E6 04                INC     TOIND+1         ;CARRY
0009A3  1  D0 D4                BNE     WRTLPE          ;AND LOOP
0009A5  1               ;MESSAGES
0009A5  1               ERRMSG
0009A5  1  44 4F 53 20          .BYTE   "DOS ERROR - ABORTING$"
0009A9  1  45 52 52 4F  
0009AD  1  52 20 2D 20  
0009BA  1               ;SOURCE FCB
0009BA  1               FRMFCB
0009BA  1  xx xx xx xx          .RES    33
0009BE  1  xx xx xx xx  
0009C2  1  xx xx xx xx  
0009DB  1               ;DESTINATION FCB
0009DB  1               TOFCB
0009DB  1  xx xx xx xx          .RES    33
0009DF  1  xx xx xx xx  
0009E3  1  xx xx xx xx  
0009FC  1               ;END FCB
0009FC  1               ENDFCB
0009FC  1  xx xx xx xx          .RES    33
000A00  1  xx xx xx xx  
000A04  1  xx xx xx xx  
000A1D  1               ;BUFFER
000A1D  1               BUFFER
000A1D  1                       .END
