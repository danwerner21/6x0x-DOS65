ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic.asm
Current file: dbasic.asm

000000r 1                       .IFDEF  DUODYNE
000000r 1               .P816
000000r 1               
000000r 1                       .MACRO  INDEX16         ; Set 16bit Index Registers
000000r 1                       REP     #$10            ; 16 bit Index registers
000000r 1                       .I16
000000r 1                       .ENDMACRO
000000r 1                       .MACRO  INDEX8          ; Set 8bit Index Registers
000000r 1                       SEP     #$10            ; 8 bit Index registers
000000r 1                       .I8
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  ACCUMULATOR16   ; Set 16bit Index Registers
000000r 1                       REP     #$20            ; 16 bit Index registers
000000r 1                       .A16
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  ACCUMULATOR8    ; Set 8bit Index Registers
000000r 1                       SEP     #$20            ; 8 bit Index registers
000000r 1                       .A8
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  ACCUMULATORINDEX16; Set 16bit Index Registers
000000r 1                       REP     #$30            ; 16 bit Index registers
000000r 1                       .A16
000000r 1                       .I16
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  ACCUMULATORINDEX8; Set 8bit Index Registers
000000r 1                       SEP     #$30            ; 8 bit Index registers
000000r 1                       .A8
000000r 1                       .I8
000000r 1                       .ENDMACRO
000000r 1               
000000r 1               
000000r 1                       .MACRO  LDAINDIRECTY PARM1
000000r 1                       PHB
000000r 1                       PHX
000000r 1                       LDX     #$01
000000r 1                       LDA     <PARM1,X
000000r 1                       CMP     #$00
000000r 1                       BNE     *+6
000000r 1                       LDX     #00
000000r 1                       PHX
000000r 1                       PLB
000000r 1                       PLX
000000r 1                       LDA     (<PARM1),Y      ;
000000r 1                       STA     <TMPFLG
000000r 1                       PLB
000000r 1                       LDA     <TMPFLG
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  STAINDIRECTY PARM1
000000r 1                       PHB
000000r 1                       PHX
000000r 1                       PHA
000000r 1                       LDX     #$01
000000r 1                       LDA     <PARM1,X
000000r 1                       CMP     #$00
000000r 1                       BNE     *+6
000000r 1                       LDX     #00
000000r 1                       PHX
000000r 1                       PLB
000000r 1                       PLA
000000r 1                       PLX
000000r 1                       STA     (<PARM1),Y      ;
000000r 1                       PLB
000000r 1                       STA     <TMPFLG
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  FETCHINDIRECTY PARM1
000000r 1                       PHB
000000r 1                       PHA
000000r 1                       PHX
000000r 1                       LDX     #$01
000000r 1                       LDA     <PARM1,X
000000r 1                       CMP     #$00
000000r 1                       BNE     *+6
000000r 1                       LDX     #00
000000r 1                       PHX
000000r 1                       PLB
000000r 1                       PLX
000000r 1                       LDA     (<PARM1),Y      ;
000000r 1                       STA     <TMPFLG
000000r 1                       PLA
000000r 1                       PLB
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  CMPINDIRECTY  PARM1
000000r 1                       PHB
000000r 1                       PHA
000000r 1                       PHX
000000r 1                       LDX     #$01
000000r 1                       LDA     <PARM1,X
000000r 1                       CMP     #$00
000000r 1                       BNE     *+6
000000r 1                       LDX     #00
000000r 1                       PHX
000000r 1                       PLB
000000r 1                       PLX
000000r 1                       LDA     (<PARM1),Y      ;
000000r 1                       STA     <TMPFLG
000000r 1                       PLA
000000r 1                       PLB
000000r 1                       CMP     <TMPFLG         ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  ADCINDIRECTY  PARM1
000000r 1                       PHB
000000r 1                       PHA
000000r 1                       PHX
000000r 1                       LDX     #$01
000000r 1                       LDA     <PARM1,X
000000r 1                       CMP     #$00
000000r 1                       BNE     *+6
000000r 1                       LDX     #00
000000r 1                       PHX
000000r 1                       PLB
000000r 1                       PLX
000000r 1                       LDA     (<PARM1),Y      ;
000000r 1                       STA     <TMPFLG
000000r 1                       PLA
000000r 1                       PLB
000000r 1                       CLC
000000r 1                       ADC     <TMPFLG         ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBEQ  PARM1
000000r 1                       BNE     *+5
000000r 1                       JMP     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBNE PARM1
000000r 1                       BEQ     *+5
000000r 1                       JMP     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBCC  PARM1
000000r 1                       BCC     *+4
000000r 1                       BRA     *+5
000000r 1                       JMP     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBCS PARM1
000000r 1                       BCS     *+4
000000r 1                       BRA     *+5
000000r 1                       JMP     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .ELSE
000000r 1               
000000r 1                       .MACRO  LDAINDIRECTY PARM1
000000r 1                       LDA     (PARM1),Y       ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  STAINDIRECTY PARM1
000000r 1                       STA     (PARM1),Y       ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  FETCHINDIRECTY PARM1
000000r 1                       LDA     (PARM1),Y       ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  CMPINDIRECTY  PARM1
000000r 1                       CMP     (<PARM1),Y      ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  ADCINDIRECTY  PARM1
000000r 1                       ADC     (PARM1),Y       ;
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBEQ  PARM1
000000r 1                       BEQ     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBNE  PARM1
000000r 1                       BNE     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBCC  PARM1
000000r 1                       BCC     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .MACRO  LBCS PARM1
000000r 1                       BCS     PARM1
000000r 1                       .ENDMACRO
000000r 1               
000000r 1                       .ENDIF
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.23  ADDED "KILL" COMMAND TO RETURN TO DOS/65
000000r 1               
000000r 1               ; zero page use ..
000000r 1               
000000r 1               LAB_WARM        = $00           ; BASIC warm start entry point
000000r 1               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
000000r 1               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
000000r 1               TMPFLG          = $04
000000r 1               Usrjmp          = $0A           ; USR function JMP address
000000r 1               Usrjpl          = Usrjmp+1      ; USR function JMP vector low byte
000000r 1               Usrjph          = Usrjmp+2      ; USR function JMP vector high byte
000000r 1               Nullct          = $0D           ; nulls output after each line
000000r 1               TPos            = $0E           ; BASIC terminal position byte
000000r 1               TWidth          = $0F           ; BASIC terminal width byte
000000r 1               Iclim           = $10           ; input column limit
000000r 1               Itempl          = $11           ; temporary integer low byte
000000r 1               Itemph          = Itempl+1      ; temporary integer high byte
000000r 1               
000000r 1               nums_1          = Itempl        ; number to bin/hex string convert MSB
000000r 1               nums_2          = nums_1+1      ; number to bin/hex string convert
000000r 1               nums_3          = nums_1+2      ; number to bin/hex string convert LSB
000000r 1               
000000r 1               Srchc           = $5B           ; search character
000000r 1               Temp3           = Srchc         ; temp byte used in number routines
000000r 1               Scnquo          = $5C           ; scan-between-quotes flag
000000r 1               Asrch           = Scnquo        ; alt search character
000000r 1               
000000r 1               XOAw_l          = Srchc         ; eXclusive OR, OR and AND word low byte
000000r 1               XOAw_h          = Scnquo        ; eXclusive OR, OR and AND word high byte
000000r 1               
000000r 1               Ibptr           = $5D           ; input buffer pointer
000000r 1               Dimcnt          = Ibptr         ; # of dimensions
000000r 1               Tindx           = Ibptr         ; token index
000000r 1               
000000r 1               Defdim          = $5E           ; default DIM flag
000000r 1               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
000000r 1               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
000000r 1               Gclctd          = $60           ; garbage collected flag
000000r 1               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
000000r 1               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
000000r 1               
000000r 1               Cflag           = $63           ; comparison evaluation flag
000000r 1               
000000r 1               TabSiz          = $64           ; TAB step size (was input flag)
000000r 1               
000000r 1               next_s          = $65           ; next descriptor stack address
000000r 1               
000000r 1               ; these two bytes form a word pointer to the item
000000r 1               ; currently on top of the descriptor stack
000000r 1               last_sl         = $66           ; last descriptor stack address low byte
000000r 1               last_sh         = $67           ; last descriptor stack address high byte (always $00)
000000r 1               
000000r 1               des_sk          = $68           ; descriptor stack start address (temp strings)
000000r 1               
000000r 1               ;			= $70		; End of descriptor stack
000000r 1               
000000r 1               ut1_pl          = $71           ; utility pointer 1 low byte
000000r 1               ut1_ph          = ut1_pl+1      ; utility pointer 1 high byte
000000r 1               ut2_pl          = $73           ; utility pointer 2 low byte
000000r 1               ut2_ph          = ut2_pl+1      ; utility pointer 2 high byte
000000r 1               
000000r 1               Temp_2          = ut1_pl        ; temp byte for block move
000000r 1               
000000r 1               FACt_1          = $75           ; FAC temp mantissa1
000000r 1               FACt_2          = FACt_1+1      ; FAC temp mantissa2
000000r 1               FACt_3          = FACt_2+1      ; FAC temp mantissa3
000000r 1               
000000r 1               dims_l          = FACt_2        ; array dimension size low byte
000000r 1               dims_h          = FACt_3        ; array dimension size high byte
000000r 1               
000000r 1               TempB           = $78           ; temp page 0 byte
000000r 1               
000000r 1               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
000000r 1               Smemh           = Smeml+1       ; start of mem high byte	(Start-of-Basic)
000000r 1               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
000000r 1               Svarh           = Svarl+1       ; start of vars high byte	(Start-of-Variables)
000000r 1               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
000000r 1               Sarryh          = Sarryl+1      ; var mem end high byte		(Start-of-Arrays)
000000r 1               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
000000r 1               Earryh          = Earryl+1      ; array mem end high byte	(End-of-Arrays)
000000r 1               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
000000r 1               Sstorh          = Sstorl+1      ; string storage high byte	(String storage (moving down))
000000r 1               Sutill          = $83           ; string utility ptr low byte
000000r 1               Sutilh          = Sutill+1      ; string utility ptr high byte
000000r 1               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
000000r 1               Ememh           = Ememl+1       ; end of mem high byte		(Limit-of-memory)
000000r 1               Clinel          = $87           ; current line low byte		(Basic line number)
000000r 1               Clineh          = Clinel+1      ; current line high byte	(Basic line number)
000000r 1               Blinel          = $89           ; break line low byte		(Previous Basic line number)
000000r 1               Blineh          = Blinel+1      ; break line high byte		(Previous Basic line number)
000000r 1               
000000r 1               Cpntrl          = $8B           ; continue pointer low byte
000000r 1               Cpntrh          = Cpntrl+1      ; continue pointer high byte
000000r 1               
000000r 1               Dlinel          = $8D           ; current DATA line low byte
000000r 1               Dlineh          = Dlinel+1      ; current DATA line high byte
000000r 1               
000000r 1               Dptrl           = $8F           ; DATA pointer low byte
000000r 1               Dptrh           = Dptrl+1       ; DATA pointer high byte
000000r 1               
000000r 1               Rdptrl          = $91           ; read pointer low byte
000000r 1               Rdptrh          = Rdptrl+1      ; read pointer high byte
000000r 1               
000000r 1               Varnm1          = $93           ; current var name 1st byte
000000r 1               Varnm2          = Varnm1+1      ; current var name 2nd byte
000000r 1               
000000r 1               Cvaral          = $95           ; current var address low byte
000000r 1               Cvarah          = Cvaral+1      ; current var address high byte
000000r 1               
000000r 1               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
000000r 1               Frnxth          = Frnxtl+1      ; var pointer for FOR/NEXT high byte
000000r 1               
000000r 1               Tidx1           = Frnxtl        ; temp line index
000000r 1               
000000r 1               Lvarpl          = Frnxtl        ; let var pointer low byte
000000r 1               Lvarph          = Frnxth        ; let var pointer high byte
000000r 1               
000000r 1               prstk           = $99           ; precedence stacked flag
000000r 1               
000000r 1               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
000000r 1               ; bit 2 set if >
000000r 1               ; bit 1 set if =
000000r 1               ; bit 0 set if <
000000r 1               
000000r 1               func_l          = $9C           ; function pointer low byte
000000r 1               func_h          = func_l+1      ; function pointer high byte
000000r 1               
000000r 1               garb_l          = func_l        ; garbage collection working pointer low byte
000000r 1               garb_h          = func_h        ; garbage collection working pointer high byte
000000r 1               
000000r 1               des_2l          = $9E           ; string descriptor_2 pointer low byte
000000r 1               des_2h          = des_2l+1      ; string descriptor_2 pointer high byte
000000r 1               
000000r 1               g_step          = $A0           ; garbage collect step size
000000r 1               
000000r 1               Fnxjmp          = $A1           ; jump vector for functions
000000r 1               Fnxjpl          = Fnxjmp+1      ; functions jump vector low byte
000000r 1               Fnxjph          = Fnxjmp+2      ; functions jump vector high byte
000000r 1               
000000r 1               g_indx          = Fnxjpl        ; garbage collect temp index
000000r 1               
000000r 1               FAC2_r          = $A3           ; FAC2 rounding byte
000000r 1               
000000r 1               Adatal          = $A4           ; array data pointer low byte
000000r 1               Adatah          = Adatal+1      ; array data pointer high  byte
000000r 1               
000000r 1               Nbendl          = Adatal        ; new block end pointer low byte
000000r 1               Nbendh          = Adatah        ; new block end pointer high  byte
000000r 1               
000000r 1               Obendl          = $A6           ; old block end pointer low byte
000000r 1               Obendh          = Obendl+1      ; old block end pointer high  byte
000000r 1               
000000r 1               numexp          = $A8           ; string to float number exponent count
000000r 1               expcnt          = $A9           ; string to float exponent count
000000r 1               
000000r 1               numbit          = numexp        ; bit count for array element calculations
000000r 1               
000000r 1               numdpf          = $AA           ; string to float decimal point flag
000000r 1               expneg          = $AB           ; string to float eval exponent -ve flag
000000r 1               
000000r 1               Astrtl          = numdpf        ; array start pointer low byte
000000r 1               Astrth          = expneg        ; array start pointer high  byte
000000r 1               
000000r 1               Histrl          = numdpf        ; highest string low byte
000000r 1               Histrh          = expneg        ; highest string high  byte
000000r 1               
000000r 1               Baslnl          = numdpf        ; BASIC search line pointer low byte
000000r 1               Baslnh          = expneg        ; BASIC search line pointer high  byte
000000r 1               
000000r 1               Fvar_l          = numdpf        ; find/found variable pointer low byte
000000r 1               Fvar_h          = expneg        ; find/found variable pointer high  byte
000000r 1               
000000r 1               Ostrtl          = numdpf        ; old block start pointer low byte
000000r 1               Ostrth          = expneg        ; old block start pointer high  byte
000000r 1               
000000r 1               Vrschl          = numdpf        ; variable search pointer low byte
000000r 1               Vrschh          = expneg        ; variable search pointer high  byte
000000r 1               
000000r 1               FAC1_e          = $AC           ; FAC1 exponent
000000r 1               FAC1_1          = FAC1_e+1      ; FAC1 mantissa1
000000r 1               FAC1_2          = FAC1_e+2      ; FAC1 mantissa2
000000r 1               FAC1_3          = FAC1_e+3      ; FAC1 mantissa3
000000r 1               FAC1_s          = FAC1_e+4      ; FAC1 sign (b7)
000000r 1               
000000r 1               str_ln          = FAC1_e        ; string length
000000r 1               str_pl          = FAC1_1        ; string pointer low byte
000000r 1               str_ph          = FAC1_2        ; string pointer high byte
000000r 1               
000000r 1               des_pl          = FAC1_2        ; string descriptor pointer low byte
000000r 1               des_ph          = FAC1_3        ; string descriptor pointer high byte
000000r 1               
000000r 1               mids_l          = FAC1_3        ; MID$ string temp length byte
000000r 1               
000000r 1               negnum          = $B1           ; string to float eval -ve flag
000000r 1               numcon          = $B1           ; series evaluation constant count
000000r 1               
000000r 1               FAC1_o          = $B2           ; FAC1 overflow byte
000000r 1               
000000r 1               FAC2_e          = $B3           ; FAC2 exponent
000000r 1               FAC2_1          = FAC2_e+1      ; FAC2 mantissa1
000000r 1               FAC2_2          = FAC2_e+2      ; FAC2 mantissa2
000000r 1               FAC2_3          = FAC2_e+3      ; FAC2 mantissa3
000000r 1               FAC2_s          = FAC2_e+4      ; FAC2 sign (b7)
000000r 1               
000000r 1               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
000000r 1               FAC1_r          = $B9           ; FAC1 rounding byte
000000r 1               
000000r 1               ssptr_l         = FAC_sc        ; string start pointer low byte
000000r 1               ssptr_h         = FAC1_r        ; string start pointer high byte
000000r 1               
000000r 1               sdescr          = FAC_sc        ; string descriptor pointer
000000r 1               
000000r 1               csidx           = $BA           ; line crunch save index
000000r 1               Asptl           = csidx         ; array size/pointer low byte
000000r 1               Aspth           = $BB           ; array size/pointer high byte
000000r 1               
000000r 1               Btmpl           = Asptl         ; BASIC pointer temp low byte
000000r 1               Btmph           = Aspth         ; BASIC pointer temp low byte
000000r 1               
000000r 1               Cptrl           = Asptl         ; BASIC pointer temp low byte
000000r 1               Cptrh           = Aspth         ; BASIC pointer temp low byte
000000r 1               
000000r 1               Sendl           = Asptl         ; BASIC pointer temp low byte
000000r 1               Sendh           = Aspth         ; BASIC pointer temp low byte
000000r 1               
000000r 1               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
000000r 1               
000000r 1               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
000000r 1               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
000000r 1               Bpntrh          = Bpntrl+1      ; BASIC execute (get byte) pointer high byte
000000r 1               Bpntrp          = Bpntrl+2      ; BASIC execute (get byte) pointer PAGE byte
000000r 1               ;			= $E0		; end of get BASIC char subroutine
000000r 1               Rbyte4          = $E1           ; extra PRNG byte
000000r 1               Rbyte1          = Rbyte4+1      ; most significant PRNG byte
000000r 1               Rbyte2          = Rbyte4+2      ; middle PRNG byte
000000r 1               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
000000r 1               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
000000r 1               ; bit	function
000000r 1               ; ===	========
000000r 1               ; 7	interrupt enabled
000000r 1               ; 6	interrupt setup
000000r 1               ; 5	interrupt happened
000000r 1               ;			= $E6		; NMI handler addr low byte
000000r 1               ;			= $E7		; NMI handler addr high byte
000000r 1               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
000000r 1               ;			= $E9		; IRQ handler addr low byte
000000r 1               ;			= $EA		; IRQ handler addr high byte
000000r 1               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
000000r 1               Decss           = $EF           ; number to decimal string start
000000r 1               Decssp1         = Decss+1       ; number to decimal string start
000000r 1               TEMPW           = $FD
000000r 1               ;			= $FF		; decimal string end
000000r 1               
000000r 1                       .IFDEF  DUODYNE
000000r 1               STACK_BOTTOM    = $4000         ; stack bottom, no offset
000000r 1               STACK           = $5FFF         ; stack top, no offset
000000r 1                       .ENDIF
000000r 1               
000000r 1               ; token values needed for BASIC
000000r 1               
000000r 1               ; primary command tokens (can start a statement)
000000r 1               
000000r 1               TK_END          = $80           ; END token
000000r 1               TK_FOR          = TK_END+1      ; FOR token
000000r 1               TK_NEXT         = TK_FOR+1      ; NEXT token
000000r 1               TK_DATA         = TK_NEXT+1     ; DATA token
000000r 1               TK_INPUT        = TK_DATA+1     ; INPUT token
000000r 1               TK_DIM          = TK_INPUT+1    ; DIM token
000000r 1               TK_READ         = TK_DIM+1      ; READ token
000000r 1               TK_LET          = TK_READ+1     ; LET token
000000r 1               TK_DEC          = TK_LET+1      ; DEC token
000000r 1               TK_GOTO         = TK_DEC+1      ; GOTO token
000000r 1               TK_RUN          = TK_GOTO+1     ; RUN token
000000r 1               TK_IF           = TK_RUN+1      ; IF token
000000r 1               TK_RESTORE      = TK_IF+1       ; RESTORE token
000000r 1               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
000000r 1               TK_RETIRQ       = TK_GOSUB+1    ; RETIRQ token
000000r 1               TK_RETNMI       = TK_RETIRQ+1   ; RETNMI token
000000r 1               TK_RETURN       = TK_RETNMI+1   ; RETURN token
000000r 1               TK_REM          = TK_RETURN+1   ; REM token
000000r 1               TK_STOP         = TK_REM+1      ; STOP token
000000r 1               TK_ON           = TK_STOP+1     ; ON token
000000r 1               TK_NULL         = TK_ON+1       ; NULL token
000000r 1               TK_INC          = TK_NULL+1     ; INC token
000000r 1               TK_WAIT         = TK_INC+1      ; WAIT token
000000r 1               TK_LOAD         = TK_WAIT+1     ; LOAD token
000000r 1               TK_SAVE         = TK_LOAD+1     ; SAVE token
000000r 1               TK_DEF          = TK_SAVE+1     ; DEF token
000000r 1               TK_POKE         = TK_DEF+1      ; POKE token
000000r 1               TK_DOKE         = TK_POKE+1     ; DOKE token
000000r 1               TK_CALL         = TK_DOKE+1     ; CALL token
000000r 1               TK_DO           = TK_CALL+1     ; DO token
000000r 1               TK_LOOP         = TK_DO+1       ; LOOP token
000000r 1               TK_PRINT        = TK_LOOP+1     ; PRINT token
000000r 1               TK_CONT         = TK_PRINT+1    ; CONT token
000000r 1               TK_LIST         = TK_CONT+1     ; LIST token
000000r 1               TK_CLEAR        = TK_LIST+1     ; CLEAR token
000000r 1               TK_NEW          = TK_CLEAR+1    ; NEW token
000000r 1               TK_WIDTH        = TK_NEW+1      ; WIDTH token
000000r 1               TK_GET          = TK_WIDTH+1    ; GET token
000000r 1               TK_SWAP         = TK_GET+1      ; SWAP token
000000r 1               TK_BITSET       = TK_SWAP+1     ; BITSET token
000000r 1               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
000000r 1               TK_IRQ          = TK_BITCLR+1   ; IRQ token
000000r 1               TK_NMI          = TK_IRQ+1      ; NMI token
000000r 1               TK_KILL         = TK_NMI+1      ; NMI token
000000r 1               
000000r 1               ; secondary command tokens, can't start a statement
000000r 1               
000000r 1               TK_TAB          = TK_KILL+1     ; TAB token
000000r 1               TK_ELSE         = TK_TAB+1      ; ELSE token
000000r 1               TK_TO           = TK_ELSE+1     ; TO token
000000r 1               TK_FN           = TK_TO+1       ; FN token
000000r 1               TK_SPC          = TK_FN+1       ; SPC token
000000r 1               TK_THEN         = TK_SPC+1      ; THEN token
000000r 1               TK_NOT          = TK_THEN+1     ; NOT token
000000r 1               TK_STEP         = TK_NOT+1      ; STEP token
000000r 1               TK_UNTIL        = TK_STEP+1     ; UNTIL token
000000r 1               TK_WHILE        = TK_UNTIL+1    ; WHILE token
000000r 1               TK_OFF          = TK_WHILE+1    ; OFF token
000000r 1               
000000r 1               ; opperator tokens
000000r 1               
000000r 1               TK_PLUS         = TK_OFF+1      ; + token
000000r 1               TK_MINUS        = TK_PLUS+1     ; - token
000000r 1               TK_MUL          = TK_MINUS+1    ; * token
000000r 1               TK_DIV          = TK_MUL+1      ; / token
000000r 1               TK_POWER        = TK_DIV+1      ; ^ token
000000r 1               TK_AND          = TK_POWER+1    ; AND token
000000r 1               TK_EOR          = TK_AND+1      ; EOR token
000000r 1               TK_OR           = TK_EOR+1      ; OR token
000000r 1               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
000000r 1               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
000000r 1               TK_GT           = TK_LSHIFT+1   ; > token
000000r 1               TK_EQUAL        = TK_GT+1       ; = token
000000r 1               TK_LT           = TK_EQUAL+1    ; < token
000000r 1               
000000r 1               ; functions tokens
000000r 1               
000000r 1               TK_SGN          = TK_LT+1       ; SGN token
000000r 1               TK_INT          = TK_SGN+1      ; INT token
000000r 1               TK_ABS          = TK_INT+1      ; ABS token
000000r 1               TK_USR          = TK_ABS+1      ; USR token
000000r 1               TK_FRE          = TK_USR+1      ; FRE token
000000r 1               TK_POS          = TK_FRE+1      ; POS token
000000r 1               TK_SQR          = TK_POS+1      ; SQR token
000000r 1               TK_RND          = TK_SQR+1      ; RND token
000000r 1               TK_LOG          = TK_RND+1      ; LOG token
000000r 1               TK_EXP          = TK_LOG+1      ; EXP token
000000r 1               TK_COS          = TK_EXP+1      ; COS token
000000r 1               TK_SIN          = TK_COS+1      ; SIN token
000000r 1               TK_TAN          = TK_SIN+1      ; TAN token
000000r 1               TK_ATN          = TK_TAN+1      ; ATN token
000000r 1               TK_PEEK         = TK_ATN+1      ; PEEK token
000000r 1               TK_DEEK         = TK_PEEK+1     ; DEEK token
000000r 1               TK_SADD         = TK_DEEK+1     ; SADD token
000000r 1               TK_LEN          = TK_SADD+1     ; LEN token
000000r 1               TK_STRS         = TK_LEN+1      ; STR$ token
000000r 1               TK_VAL          = TK_STRS+1     ; VAL token
000000r 1               TK_ASC          = TK_VAL+1      ; ASC token
000000r 1               TK_UCASES       = TK_ASC+1      ; UCASE$ token
000000r 1               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
000000r 1               TK_CHRS         = TK_LCASES+1   ; CHR$ token
000000r 1               TK_HEXS         = TK_CHRS+1     ; HEX$ token
000000r 1               TK_BINS         = TK_HEXS+1     ; BIN$ token
000000r 1               TK_BITTST       = TK_BINS+1     ; BITTST token
000000r 1               TK_MAX          = TK_BITTST+1   ; MAX token
000000r 1               TK_MIN          = TK_MAX+1      ; MIN token
000000r 1               TK_PI           = TK_MIN+1      ; PI token
000000r 1               TK_TWOPI        = TK_PI+1       ; TWOPI token
000000r 1               TK_VPTR         = TK_TWOPI+1    ; VARPTR token
000000r 1               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
000000r 1               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
000000r 1               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
000000r 1               
000000r 1               ; offsets from a base of X or Y
000000r 1               
000000r 1               PLUS_0          = $00           ; X or Y plus 0
000000r 1               PLUS_1          = $01           ; X or Y plus 1
000000r 1               PLUS_2          = $02           ; X or Y plus 2
000000r 1               PLUS_3          = $03           ; X or Y plus 3
000000r 1               
000000r 1               LAB_STAK        = $0100         ; stack bottom, no offset
000000r 1               
000000r 1               LAB_SKFE        = LAB_STAK+$FE
000000r 1               ; flushed stack address
000000r 1               LAB_SKFF        = LAB_STAK+$FF
000000r 1               ; flushed stack address
000000r 1               
000000r 1               ccflag          = $0600         ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
000000r 1               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
000000r 1               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
000000r 1               
000000r 1               VEC_CC          = ccnull+1      ; ctrl c check vector
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; This start can be changed to suit your system (TEA START)
000000r 1               
000000r 1                       .FEATURE labels_without_colons
000000r 1                       .SEGMENT "TEA"
000000r 1                       .ORG    $0800
000800  1               
000800  1               BASICBEGIN:
000800  1  AD 04 01             LDA     $0104
000803  1  8D B2 3C             STA     PEMVEC
000806  1  AD 05 01             LDA     $0105
000809  1  8D B3 3C             STA     PEMVEC+1
00080C  1               
00080C  1               
00080C  1               LAB_COLD:
00080C  1  A0 04                LDY     #PG2_TABE-PG2_TABS-1
00080E  1               ; byte count-1
00080E  1               LAB_2D13:
00080E  1  B9 39 35             LDA     PG2_TABS,Y      ; get byte
000811  1  99 00 06             STA     ccflag,Y        ; store in page 2
000814  1  88                   DEY                     ; decrement count
000815  1  10 F7                BPL     LAB_2D13        ; loop if not done
000817  1               
000817  1  A2 FF                LDX     #$FF            ; set byte
000819  1  86 88                STX     Clineh          ; set current line high byte (set immediate mode)
00081B  1               
00081B  1  A9 4C                LDA     #$4C            ; code for JMP
00081D  1  85 A1                STA     Fnxjmp          ; save for jump vector for functions
00081F  1               
00081F  1               ; copy block from LAB_2CEE to $00BC - $00D3
00081F  1               
00081F  1  A0 1D                LDY     #StrTab-LAB_2CEE; set byte count
000821  1               LAB_2D4E:
000821  1  BE 3D 35             LDX     LAB_2CEE-1,Y    ; get byte from table
000824  1  96 BB                STX     LAB_IGBY-1,Y    ; save byte in page zero
000826  1  88                   DEY                     ; decrement count
000827  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
000829  1               
000829  1               ; copy block from StrTab to $0000 - $0012
000829  1               
000829  1               LAB_GMEM:
000829  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
00082B  1               TabLoop:
00082B  1  BE 5B 35             LDX     StrTab,Y        ; get byte from table
00082E  1  96 00                STX     PLUS_0,Y        ; save byte in page zero
000830  1  88                   DEY                     ; decrement count
000831  1  10 F8                BPL     TabLoop         ; loop if not all done
000833  1               
000833  1               
000833  1                       .IFDEF  DUODYNE
000833  1  8B                   PHB
000834  1  68                   PLA
000835  1  85 C5                STA     Bpntrp          ; SET LAB_GBYT PAGE POINTER TO DATA BANK
000837  1                       .ELSE
000837  1                       TXS                     ; reset stack pointer
000837  1                       .ENDIF
000837  1               
000837  1               
000837  1               ; set-up start values
000837  1               
000837  1  A9 00                LDA     #$00            ; clear A
000839  1  85 E5                STA     NmiBase         ; clear NMI handler enabled flag
00083B  1  85 E8                STA     IrqBase         ; clear IRQ handler enabled flag
00083D  1  85 B2                STA     FAC1_o          ; clear FAC1 overflow byte
00083F  1  85 67                STA     last_sh         ; clear descriptor stack top item pointer high byte
000841  1               
000841  1  A9 0E                LDA     #$0E            ; set default tab size
000843  1  85 64                STA     TabSiz          ; save it
000845  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
000847  1  85 A0                STA     g_step          ; save it
000849  1  A2 68                LDX     #des_sk         ; descriptor stack start
00084B  1  86 65                STX     next_s          ; set descriptor stack pointer
00084D  1  20 0A 14             JSR     LAB_CRLF        ; print CR/LF
000850  1               ;	LDA	#<LAB_MSZM		; point to memory size message (low addr)
000850  1               ;	LDY	#>LAB_MSZM		; point to memory size message (high addr)
000850  1               ;	JSR	LAB_18C3		; print null terminated string from memory
000850  1               ;	JSR	LAB_INLN		; print "? " and get BASIC input
000850  1               ;	STX	Bpntrl		; set BASIC execute pointer low byte
000850  1               ;	STY	Bpntrh		; set BASIC execute pointer high byte
000850  1               ;	JSR	LAB_GBYT		; get last byte back
000850  1               
000850  1               ;	BNE	LAB_2DAA		; branch if not null (user typed something)
000850  1               
000850  1  A0 00                LDY     #$00            ; else clear Y
000852  1               ; character was null so get memory size the hard way
000852  1               ; we get here with Y=0 and Itempl/h = Ram_base
000852  1               LAB_2D93:
000852  1  E6 11                INC     Itempl          ; increment temporary integer low byte
000854  1  D0 08                BNE     LAB_2D99        ; branch if no overflow
000856  1               
000856  1  E6 12                INC     Itemph          ; increment temporary integer high byte
000858  1  A5 12                LDA     Itemph          ; get high byte
00085A  1  C9 D0                CMP     #>Ram_top       ; compare with top of RAM+1
00085C  1  F0 63                BEQ     LAB_2DB6        ; branch if match (end of user RAM)
00085E  1               
00085E  1               LAB_2D99:
00085E  1  A9 55                LDA     #$55            ; set test byte
000860  1  8B DA 48 A2          STAINDIRECTY Itempl     ; save via temporary integer
000864  1  01 B5 11 C9  
000868  1  00 D0 04 A2  
000876  1  8B 48 DA A2          CMPINDIRECTY Itempl     ; compare via temporary integer
00087A  1  01 B5 11 C9  
00087E  1  00 D0 04 A2  
00088E  1  D0 31                BNE     LAB_2DB6        ; branch if fail
000890  1               
000890  1  0A                   ASL     A               ; shift test byte left (now $AA)
000891  1  8B DA 48 A2          STAINDIRECTY Itempl     ; save via temporary integer
000895  1  01 B5 11 C9  
000899  1  00 D0 04 A2  
0008A7  1  8B 48 DA A2          CMPINDIRECTY Itempl     ; compare via temporary integer
0008AB  1  01 B5 11 C9  
0008AF  1  00 D0 04 A2  
0008BF  1  F0 91                BEQ     LAB_2D93        ; if ok go do next byte
0008C1  1               
0008C1  1               ;	BNE	LAB_2DB6		; branch if fail
0008C1  1               
0008C1  1               ;LAB_2DAA
0008C1  1               ;	JSR	LAB_2887		; get FAC1 from string
0008C1  1               ;	LDA	FAC1_e		; get FAC1 exponent
0008C1  1               ;	CMP	#$98			; compare with exponent = 2^24
0008C1  1               ;	BCS	LAB_GMEM		; if too large go try again
0008C1  1               ;
0008C1  1               ;	JSR	LAB_F2FU		; save integer part of FAC1 in temporary integer
0008C1  1               ;					; (no range check)
0008C1  1               
0008C1  1               LAB_2DB6:
0008C1  1  A5 11                LDA     Itempl          ; get temporary integer low byte
0008C3  1  A4 12                LDY     Itemph          ; get temporary integer high byte
0008C5  1  C0 01                CPY     #<Ram_base+1    ; compare with start of RAM+$100 high byte
0008C7  1  90 02 80 03          LBCC    LAB_GMEM        ; if too small go try again
0008CB  1  4C 29 08     
0008CE  1               
0008CE  1               
0008CE  1               ; uncomment these lines if you want to check on the high limit of memory. Note if
0008CE  1               ; Ram_top is set too low then this will fail. default is ignore it and assume the
0008CE  1               ; users know what they're doing!
0008CE  1               
0008CE  1               ;	CPY	#>Ram_top		; compare with top of RAM high byte
0008CE  1               ;	BCC	MEM_OK		; branch if < RAM top
0008CE  1               
0008CE  1               ;	BNE	LAB_GMEM		; if too large go try again
0008CE  1               ; else was = so compare low bytes
0008CE  1               ;	CMP	#<Ram_top		; compare with top of RAM low byte
0008CE  1               ;	BEQ	MEM_OK		; branch if = RAM top
0008CE  1               
0008CE  1               ;	BCS	LAB_GMEM		; if too large go try again
0008CE  1               
0008CE  1               ;MEM_OK
0008CE  1  85 85                STA     Ememl           ; set end of mem low byte
0008D0  1  84 86                STY     Ememh           ; set end of mem high byte
0008D2  1  85 81                STA     Sstorl          ; set bottom of string space low byte
0008D4  1  84 82                STY     Sstorh          ; set bottom of string space high byte
0008D6  1               
0008D6  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
0008D8  1  A2 41                LDX     #>Ram_base      ; set start addr high byte
0008DA  1  84 79                STY     Smeml           ; save start of mem low byte
0008DC  1  86 7A                STX     Smemh           ; save start of mem high byte
0008DE  1               
0008DE  1               ; this line is only needed if Ram_base is not $xx00
0008DE  1               
0008DE  1               ;	LDY	#$00			; clear Y
0008DE  1  98                   TYA                     ; clear A
0008DF  1  8B DA 48 A2          STAINDIRECTY Smeml      ; clear first byte
0008E3  1  01 B5 79 C9  
0008E7  1  00 D0 04 A2  
0008F5  1  E6 79                INC     Smeml           ; increment start of mem low byte
0008F7  1               
0008F7  1               ; these two lines are only needed if Ram_base is $xxFF
0008F7  1               
0008F7  1               ;	BNE	LAB_2E05		; branch if no rollover
0008F7  1               
0008F7  1               ;	INC	Smemh			; increment start of mem high byte
0008F7  1               LAB_2E05:
0008F7  1  20 0A 14             JSR     LAB_CRLF        ; print CR/LF
0008FA  1  20 96 0D             JSR     LAB_1463        ; do "NEW" and "CLEAR"
0008FD  1  A5 85                LDA     Ememl           ; get end of mem low byte
0008FF  1  38                   SEC                     ; set carry for subtract
000900  1  E5 79                SBC     Smeml           ; subtract start of mem low byte
000902  1  AA                   TAX                     ; copy to X
000903  1  A5 86                LDA     Ememh           ; get end of mem high byte
000905  1  E5 7A                SBC     Smemh           ; subtract start of mem high byte
000907  1  20 54 2E             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
00090A  1  A9 7D                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
00090C  1  A0 35                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
00090E  1  20 52 14             JSR     LAB_18C3        ; print null terminated string from memory
000911  1  A9 15                LDA     #<LAB_1274      ; warm start vector low byte
000913  1  A0 0A                LDY     #>LAB_1274      ; warm start vector high byte
000915  1  85 01                STA     Wrmjpl          ; save warm start vector low byte
000917  1  84 02                STY     Wrmjph          ; save warm start vector high byte
000919  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
00091C  1               
00091C  1               ; open up space in memory
00091C  1               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
00091C  1               
00091C  1               ; Nbendl,Nbendh - new block end address (A/Y)
00091C  1               ; Obendl,Obendh - old block end address
00091C  1               ; Ostrtl,Ostrth - old block start address
00091C  1               
00091C  1               ; returns with ..
00091C  1               
00091C  1               ; Nbendl,Nbendh - new block start address (high byte - $100)
00091C  1               ; Obendl,Obendh - old block start address (high byte - $100)
00091C  1               ; Ostrtl,Ostrth - old block start address (unchanged)
00091C  1               
00091C  1               LAB_11CF:
00091C  1  20 C6 09             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
00091F  1               ; addr to check is in AY (low/high)
00091F  1  85 7F                STA     Earryl          ; save new array mem end low byte
000921  1  84 80                STY     Earryh          ; save new array mem end high byte
000923  1               
000923  1               ; open up space in memory
000923  1               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
000923  1               ; don't set array end
000923  1               
000923  1               LAB_11D6:
000923  1  38                   SEC                     ; set carry for subtract
000924  1  A5 A6                LDA     Obendl          ; get block end low byte
000926  1  E5 AA                SBC     Ostrtl          ; subtract block start low byte
000928  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
000929  1  A5 A7                LDA     Obendh          ; get block end high byte
00092B  1  E5 AB                SBC     Ostrth          ; subtract block start high byte
00092D  1  AA                   TAX                     ; copy block length high byte to X
00092E  1  E8                   INX                     ; +1 to allow for count=0 exit
00092F  1  98                   TYA                     ; copy block length low byte to A
000930  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
000932  1               
000932  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
000932  1               
000932  1  38                   SEC                     ; set carry for add + 1, two's complement
000933  1  49 FF                EOR     #$FF            ; invert low byte for subtract
000935  1  65 A6                ADC     Obendl          ; add block end low byte
000937  1               
000937  1  85 A6                STA     Obendl          ; save corrected old block end low byte
000939  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
00093B  1               
00093B  1  C6 A7                DEC     Obendh          ; else decrement block end high byte
00093D  1  38                   SEC                     ; set carry for add + 1, two's complement
00093E  1               LAB_11F3:
00093E  1  98                   TYA                     ; get MOD(block length/$100) byte
00093F  1  49 FF                EOR     #$FF            ; invert low byte for subtract
000941  1  65 A4                ADC     Nbendl          ; add destination end low byte
000943  1  85 A4                STA     Nbendl          ; save modified new block end low byte
000945  1  B0 30                BCS     LAB_1203        ; branch if no underflow
000947  1               
000947  1  C6 A5                DEC     Nbendh          ; else decrement block end high byte
000949  1  90 2C                BCC     LAB_1203        ; branch always
00094B  1               
00094B  1               LAB_11FF:
00094B  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00094F  1  B5 A6 C9 00  
000953  1  D0 04 A2 00  
000961  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
000965  1  01 B5 A4 C9  
000969  1  00 D0 04 A2  
000977  1               LAB_1203:
000977  1  88                   DEY                     ; decrement index
000978  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
00097A  1               
00097A  1               ; now do Y=0 indexed byte
00097A  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00097E  1  B5 A6 C9 00  
000982  1  D0 04 A2 00  
000990  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
000994  1  01 B5 A4 C9  
000998  1  00 D0 04 A2  
0009A6  1               LAB_120A:
0009A6  1  C6 A7                DEC     Obendh          ; decrement source pointer high byte
0009A8  1  C6 A5                DEC     Nbendh          ; decrement destination pointer high byte
0009AA  1  CA                   DEX                     ; decrement block count
0009AB  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
0009AD  1               
0009AD  1  60                   RTS
0009AE  1               
0009AE  1               ; check room on stack for A bytes
0009AE  1               ; stack too deep? do OM error
0009AE  1               
0009AE  1               LAB_1212:
0009AE  1                       .IFDEF  DUODYNE
0009AE  1  C2 20                ACCUMULATOR16
0009B0  1  29 FF 00             AND     #$00FF
0009B3  1  18                   CLC
0009B4  1  69 00 40             ADC     #STACK_BOTTOM
0009B7  1  85 FD                STA     <TEMPW
0009B9  1  3B                   TSC
0009BA  1  C5 FD                CMP     <TEMPW
0009BC  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
0009BE  1  E2 20                ACCUMULATOR8
0009C0  1  60                   RTS
0009C1  1               LAB_1213:
0009C1  1  E2 20                ACCUMULATOR8
0009C3  1  4C F5 09             JMP     LAB_OMER
0009C6  1                       .ELSE
0009C6  1                       STA     TempB           ; save result in temp byte
0009C6  1                       TSX                     ; copy stack
0009C6  1                       CPX     TempB           ; compare new "limit" with stack
0009C6  1                       BCC     LAB_OMER        ; if stack < limit do "Out of memory" error then warm start
0009C6  1                       RTS
0009C6  1                       .ENDIF
0009C6  1               
0009C6  1               
0009C6  1               ; check available memory, "Out of memory" error if no room
0009C6  1               ; addr to check is in AY (low/high)
0009C6  1               
0009C6  1               LAB_121F:
0009C6  1  C4 82                CPY     Sstorh          ; compare bottom of string mem high byte
0009C8  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
0009CA  1               
0009CA  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
0009CC  1               
0009CC  1               ; high byte was =, now do low byte
0009CC  1  C5 81                CMP     Sstorl          ; compare with bottom of string mem low byte
0009CE  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
0009D0  1               
0009D0  1               ; addr is > string storage ptr (oops!)
0009D0  1               LAB_1229:
0009D0  1  48                   PHA                     ; push addr low byte
0009D1  1  A2 08                LDX     #$08            ; set index to save Adatal to expneg inclusive
0009D3  1  98                   TYA                     ; copy addr high byte (to push on stack)
0009D4  1               
0009D4  1               ; save misc numeric work area
0009D4  1               LAB_122D:
0009D4  1  48                   PHA                     ; push byte
0009D5  1  B5 A3                LDA     Adatal-1,X      ; get byte from Adatal to expneg ( ,$00 not pushed)
0009D7  1  CA                   DEX                     ; decrement index
0009D8  1  10 FA                BPL     LAB_122D        ; loop until all done
0009DA  1               
0009DA  1  20 E0 20             JSR     LAB_GARB        ; garbage collection routine
0009DD  1               
0009DD  1               ; restore misc numeric work area
0009DD  1  A2 00                LDX     #$00            ; clear the index to restore bytes
0009DF  1               LAB_1238:
0009DF  1  68                   PLA                     ; pop byte
0009E0  1  95 A4                STA     Adatal,X        ; save byte to Adatal to expneg
0009E2  1  E8                   INX                     ; increment index
0009E3  1  E0 08                CPX     #$08            ; compare with end + 1
0009E5  1  30 F8                BMI     LAB_1238        ; loop if more to do
0009E7  1               
0009E7  1  68                   PLA                     ; pop addr high byte
0009E8  1  A8                   TAY                     ; copy back to Y
0009E9  1  68                   PLA                     ; pop addr low byte
0009EA  1  C4 82                CPY     Sstorh          ; compare bottom of string mem high byte
0009EC  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
0009EE  1               
0009EE  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
0009F0  1               
0009F0  1               ; high byte was =, now do low byte
0009F0  1  C5 81                CMP     Sstorl          ; compare with bottom of string mem low byte
0009F2  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
0009F4  1               
0009F4  1               ; ok exit, carry clear
0009F4  1               LAB_124B:
0009F4  1  60                   RTS
0009F5  1               
0009F5  1               ; do "Out of memory" error then warm start
0009F5  1               
0009F5  1               LAB_OMER:
0009F5  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0009F7  1               
0009F7  1               ; do error #X, then warm start
0009F7  1               
0009F7  1               LAB_XERR:
0009F7  1  20 0A 14             JSR     LAB_CRLF        ; print CR/LF
0009FA  1               
0009FA  1  BD FA 3A             LDA     LAB_BAER,X      ; get error message pointer low byte
0009FD  1  BC FB 3A             LDY     LAB_BAER+1,X    ; get error message pointer high byte
000A00  1  20 52 14             JSR     LAB_18C3        ; print null terminated string from memory
000A03  1               
000A03  1  20 F7 0D             JSR     LAB_1491        ; flush stack and clear continue flag
000A06  1  A9 37                LDA     #<LAB_EMSG      ; point to " Error" low addr
000A08  1  A0 3C                LDY     #>LAB_EMSG      ; point to " Error" high addr
000A0A  1               LAB_1269:
000A0A  1  20 52 14             JSR     LAB_18C3        ; print null terminated string from memory
000A0D  1  A4 88                LDY     Clineh          ; get current line high byte
000A0F  1  C8                   INY                     ; increment it
000A10  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
000A12  1               
000A12  1               ; else print line number
000A12  1  20 49 2E             JSR     LAB_2953        ; print " in line [LINE #]"
000A15  1               
000A15  1               ; BASIC warm start entry point
000A15  1               ; wait for Basic command
000A15  1               
000A15  1               LAB_1274:
000A15  1               ; clear ON IRQ/NMI bytes
000A15  1  A9 00                LDA     #$00            ; clear A
000A17  1  85 E8                STA     IrqBase         ; clear enabled byte
000A19  1  85 E5                STA     NmiBase         ; clear enabled byte
000A1B  1  A9 48                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
000A1D  1  A0 3C                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
000A1F  1               
000A1F  1  20 52 14             JSR     LAB_18C3        ; go do print string
000A22  1               
000A22  1               ; wait for Basic command (no "Ready")
000A22  1               
000A22  1               LAB_127D:
000A22  1  20 D4 0B             JSR     LAB_1357        ; call for BASIC input
000A25  1               LAB_1280:
000A25  1  86 C3                STX     Bpntrl          ; set BASIC execute pointer low byte
000A27  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
000A29  1                       .IFDEF  DUODYNE
000A29  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000A2D  1                       .ELSE
000A2D  1                       JSR     LAB_GBYT        ; scan memory
000A2D  1                       .ENDIF
000A2D  1  F0 F3                BEQ     LAB_127D        ; loop while null
000A2F  1               
000A2F  1               ; got to interpret input line now ..
000A2F  1               
000A2F  1  A2 FF                LDX     #$FF            ; current line to null value
000A31  1  86 88                STX     Clineh          ; set current line high byte
000A33  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
000A35  1               
000A35  1               ; no line number .. immediate mode
000A35  1  20 03 0C             JSR     LAB_13A6        ; crunch keywords into Basic tokens
000A38  1  4C 6E 0F             JMP     LAB_15F6        ; go scan and interpret code
000A3B  1               
000A3B  1               ; handle new BASIC line
000A3B  1               
000A3B  1               LAB_1295:
000A3B  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000A3E  1  20 03 0C             JSR     LAB_13A6        ; crunch keywords into Basic tokens
000A41  1  84 5D                STY     Ibptr           ; save index pointer to end of crunched line
000A43  1  20 01 0D             JSR     LAB_SSLN        ; search BASIC for temp integer line number
000A46  1  90 6C                BCC     LAB_12E6        ; branch if not found
000A48  1               
000A48  1               ; aroooogah! line # already exists! delete it
000A48  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
000A4A  1  B1 AA                LDA     (Baslnl),Y      ; get next line pointer high byte
000A4C  1  85 72                STA     ut1_ph          ; save it
000A4E  1  A5 7B                LDA     Svarl           ; get start of vars low byte
000A50  1  85 71                STA     ut1_pl          ; save it
000A52  1  A5 AB                LDA     Baslnh          ; get found line pointer high byte
000A54  1  85 74                STA     ut2_ph          ; save it
000A56  1  A5 AA                LDA     Baslnl          ; get found line pointer low byte
000A58  1  88                   DEY                     ; decrement index
000A59  1  F1 AA                SBC     (Baslnl),Y      ; subtract next line pointer low byte
000A5B  1  18                   CLC                     ; clear carry for add
000A5C  1  65 7B                ADC     Svarl           ; add start of vars low byte
000A5E  1  85 7B                STA     Svarl           ; save new start of vars low byte
000A60  1  85 73                STA     ut2_pl          ; save destination pointer low byte
000A62  1  A5 7C                LDA     Svarh           ; get start of vars high byte
000A64  1  69 FF                ADC     #$FF            ; -1 + carry
000A66  1  85 7C                STA     Svarh           ; save start of vars high byte
000A68  1  E5 AB                SBC     Baslnh          ; subtract found line pointer high byte
000A6A  1  AA                   TAX                     ; copy to block count
000A6B  1  38                   SEC                     ; set carry for subtract
000A6C  1  A5 AA                LDA     Baslnl          ; get found line pointer low byte
000A6E  1  E5 7B                SBC     Svarl           ; subtract start of vars low byte
000A70  1  A8                   TAY                     ; copy to bytes in first block count
000A71  1  B0 03                BCS     LAB_12D0        ; branch if overflow
000A73  1               
000A73  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
000A74  1  C6 74                DEC     ut2_ph          ; decrement destination high byte
000A76  1               LAB_12D0:
000A76  1  18                   CLC                     ; clear carry for add
000A77  1  65 71                ADC     ut1_pl          ; add source pointer low byte
000A79  1  90 03                BCC     LAB_12D8        ; branch if no overflow
000A7B  1               
000A7B  1  C6 72                DEC     ut1_ph          ; else decrement source pointer high byte
000A7D  1  18                   CLC                     ; clear carry
000A7E  1               
000A7E  1               ; close up memory to delete old line
000A7E  1               LAB_12D8:
000A7E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from source
000A82  1  B5 71 C9 00  
000A86  1  D0 04 A2 00  
000A94  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; copy to destination
000A98  1  01 B5 73 C9  
000A9C  1  00 D0 04 A2  
000AAA  1  C8                   INY                     ; increment index
000AAB  1  D0 D1                BNE     LAB_12D8        ; while <> 0 do this block
000AAD  1               
000AAD  1  E6 72                INC     ut1_ph          ; increment source pointer high byte
000AAF  1  E6 74                INC     ut2_ph          ; increment destination pointer high byte
000AB1  1  CA                   DEX                     ; decrement block count
000AB2  1  D0 CA                BNE     LAB_12D8        ; loop until all done
000AB4  1               
000AB4  1               ; got new line in buffer and no existing same #
000AB4  1               LAB_12E6:
000AB4  1  AD 81 40             LDA     Ibuffs          ; get byte from start of input buffer
000AB7  1  D0 03 4C 4B          LBEQ    LAB_1319        ; if null line just go flush stack/vars and exit
000ABB  1  0B           
000ABC  1               
000ABC  1               ; got new line and it isn't empty line
000ABC  1  A5 85                LDA     Ememl           ; get end of mem low byte
000ABE  1  A4 86                LDY     Ememh           ; get end of mem high byte
000AC0  1  85 81                STA     Sstorl          ; set bottom of string space low byte
000AC2  1  84 82                STY     Sstorh          ; set bottom of string space high byte
000AC4  1  A5 7B                LDA     Svarl           ; get start of vars low byte	(end of BASIC)
000AC6  1  85 A6                STA     Obendl          ; save old block end low byte
000AC8  1  A4 7C                LDY     Svarh           ; get start of vars high byte	(end of BASIC)
000ACA  1  84 A7                STY     Obendh          ; save old block end high byte
000ACC  1  65 5D                ADC     Ibptr           ; add input buffer pointer	(also buffer length)
000ACE  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
000AD0  1               
000AD0  1  C8                   INY                     ; else increment high byte
000AD1  1               LAB_1301:
000AD1  1  85 A4                STA     Nbendl          ; save new block end low byte	(move to, low byte)
000AD3  1  84 A5                STY     Nbendh          ; save new block end high byte
000AD5  1  20 1C 09             JSR     LAB_11CF        ; open up space in memory
000AD8  1               ; old start pointer Ostrtl,Ostrth set by the find line call
000AD8  1  A5 7F                LDA     Earryl          ; get array mem end low byte
000ADA  1  A4 80                LDY     Earryh          ; get array mem end high byte
000ADC  1  85 7B                STA     Svarl           ; save start of vars low byte
000ADE  1  84 7C                STY     Svarh           ; save start of vars high byte
000AE0  1  A4 5D                LDY     Ibptr           ; get input buffer pointer	(also buffer length)
000AE2  1  88                   DEY                     ; adjust for loop type
000AE3  1               LAB_1311:
000AE3  1  B9 7D 40             LDA     Ibuffs-4,Y      ; get byte from crunched line
000AE6  1  8B DA 48 A2          STAINDIRECTY Baslnl     ; save it to program memory
000AEA  1  01 B5 AA C9  
000AEE  1  00 D0 04 A2  
000AFC  1  88                   DEY                     ; decrement count
000AFD  1  C0 03                CPY     #$03            ; compare with first byte-1
000AFF  1  D0 E2                BNE     LAB_1311        ; continue while count <> 3
000B01  1               
000B01  1  A5 12                LDA     Itemph          ; get line # high byte
000B03  1  8B DA 48 A2          STAINDIRECTY Baslnl     ; save it to program memory
000B07  1  01 B5 AA C9  
000B0B  1  00 D0 04 A2  
000B19  1  88                   DEY                     ; decrement count
000B1A  1  A5 11                LDA     Itempl          ; get line # low byte
000B1C  1  8B DA 48 A2          STAINDIRECTY Baslnl     ; save it to program memory
000B20  1  01 B5 AA C9  
000B24  1  00 D0 04 A2  
000B32  1  88                   DEY                     ; decrement count
000B33  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
000B35  1               ; byte then a zero already here would stop the chain rebuild
000B35  1               ; as it would think it was the [EOT] marker.
000B35  1  8B DA 48 A2          STAINDIRECTY Baslnl     ; save it to program memory
000B39  1  01 B5 AA C9  
000B3D  1  00 D0 04 A2  
000B4B  1               
000B4B  1               LAB_1319:
000B4B  1  20 D3 0D             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
000B4E  1  A6 79                LDX     Smeml           ; get start of mem low byte
000B50  1  A5 7A                LDA     Smemh           ; get start of mem high byte
000B52  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
000B54  1               LAB_1325:
000B54  1  86 71                STX     ut1_pl          ; set line start pointer low byte
000B56  1  85 72                STA     ut1_ph          ; set line start pointer high byte
000B58  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get it
000B5C  1  B5 71 C9 00  
000B60  1  D0 04 A2 00  
000B6E  1  F0 54                BEQ     LAB_133E        ; exit if end of program
000B70  1               
000B70  1               ; rebuild chaining of Basic lines
000B70  1               
000B70  1  A0 04                LDY     #$04            ; point to first code byte of line
000B72  1               ; there is always 1 byte + [EOL] as null entries are deleted
000B72  1               LAB_1330:
000B72  1  C8                   INY                     ; next code byte
000B73  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
000B77  1  B5 71 C9 00  
000B7B  1  D0 04 A2 00  
000B89  1  D0 E7                BNE     LAB_1330        ; loop if not [EOL]
000B8B  1               
000B8B  1  38                   SEC                     ; set carry for add + 1
000B8C  1  98                   TYA                     ; copy end index
000B8D  1  65 71                ADC     ut1_pl          ; add to line start pointer low byte
000B8F  1  AA                   TAX                     ; copy to X
000B90  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
000B92  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; set next line pointer low byte
000B96  1  01 B5 71 C9  
000B9A  1  00 D0 04 A2  
000BA8  1  98                   TYA                     ; clear A
000BA9  1  65 72                ADC     ut1_ph          ; add line start pointer high byte + carry
000BAB  1  C8                   INY                     ; increment index to high byte
000BAC  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; save next line pointer low byte
000BB0  1  01 B5 71 C9  
000BB4  1  00 D0 04 A2  
000BC2  1  90 90                BCC     LAB_1325        ; go do next line, branch always, carry clear
000BC4  1               
000BC4  1               
000BC4  1               LAB_133E:
000BC4  1  4C 22 0A             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
000BC7  1               
000BC7  1               ; print "? " and get BASIC input
000BC7  1               
000BC7  1               LAB_INLN:
000BC7  1  20 7E 14             JSR     LAB_18E3        ; print "?" character
000BCA  1  20 7B 14             JSR     LAB_18E0        ; print " "
000BCD  1  D0 05                BNE     LAB_1357        ; call for BASIC input and return
000BCF  1               
000BCF  1               ; receive line from keyboard
000BCF  1               
000BCF  1               ; $08 as delete key (BACKSPACE on standard keyboard)
000BCF  1               LAB_134B:
000BCF  1  20 80 14             JSR     LAB_PRNA        ; go print the character
000BD2  1  CA                   DEX                     ; decrement the buffer counter (delete)
000BD3  1  2C                   .BYTE   $2C             ; make LDX into BIT abs
000BD4  1               
000BD4  1               ; call for BASIC input (main entry point)
000BD4  1               
000BD4  1               LAB_1357:
000BD4  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
000BD6  1               LAB_1359:
000BD6  1  20 76 3C             JSR     V_INPT          ; call scan input device
000BD9  1  90 FB                BCC     LAB_1359        ; loop if no byte
000BDB  1               
000BDB  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
000BDB  1               
000BDB  1  C9 07                CMP     #$07            ; compare with [BELL]
000BDD  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
000BDF  1               
000BDF  1  C9 0D                CMP     #$0D            ; compare with [CR]
000BE1  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
000BE3  1               
000BE3  1  E0 00                CPX     #$00            ; compare pointer with $00
000BE5  1  D0 04                BNE     LAB_1374        ; branch if not empty
000BE7  1               
000BE7  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
000BE7  1               
000BE7  1  C9 21                CMP     #$21            ; compare with [SP]+1
000BE9  1  90 EB                BCC     LAB_1359        ; if < ignore character
000BEB  1               
000BEB  1               LAB_1374:
000BEB  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
000BED  1  F0 E0                BEQ     LAB_134B        ; go delete last character
000BEF  1               
000BEF  1               LAB_1378:
000BEF  1  E0 47                CPX     #Ibuffe-Ibuffs  ; compare character count with max
000BF1  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
000BF3  1               
000BF3  1  9D 81 40             STA     Ibuffs,X        ; else store in buffer
000BF6  1  E8                   INX                     ; increment pointer
000BF7  1               LAB_137F:
000BF7  1  20 80 14             JSR     LAB_PRNA        ; go print the character
000BFA  1  D0 DA                BNE     LAB_1359        ; always loop for next character
000BFC  1               
000BFC  1               LAB_1384:
000BFC  1  4C 01 14             JMP     LAB_1866        ; do CR/LF exit to BASIC
000BFF  1               
000BFF  1               ; announce buffer full
000BFF  1               
000BFF  1               LAB_138E:
000BFF  1  A9 07                LDA     #$07            ; [BELL] character into A
000C01  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
000C03  1               ; branch always
000C03  1               
000C03  1               ; crunch keywords into Basic tokens
000C03  1               ; position independent buffer version ..
000C03  1               ; faster, dictionary search version ....
000C03  1               
000C03  1               LAB_13A6:
000C03  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
000C05  1               
000C05  1  38                   SEC                     ; set carry for subtract
000C06  1  A5 C3                LDA     Bpntrl          ; get basic execute pointer low byte
000C08  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
000C0A  1  AA                   TAX                     ; copy result to X (index past line # if any)
000C0B  1               
000C0B  1  86 60                STX     Oquote          ; clear open quote/DATA flag
000C0D  1               LAB_13AC:
000C0D  1  BD 81 40             LDA     Ibuffs,X        ; get byte from input buffer
000C10  1  F0 7E                BEQ     LAB_13EC        ; if null save byte then exit
000C12  1               
000C12  1  C9 5F                CMP     #'_'            ; compare with "_"
000C14  1  B0 7A                BCS     LAB_13EC        ; if >= go save byte then continue crunching
000C16  1               
000C16  1  C9 3C                CMP     #'<'            ; compare with "<"
000C18  1  B0 11                BCS     LAB_13CC        ; if >= go crunch now
000C1A  1               
000C1A  1  C9 30                CMP     #'0'            ; compare with "0"
000C1C  1  B0 72                BCS     LAB_13EC        ; if >= go save byte then continue crunching
000C1E  1               
000C1E  1  85 5C                STA     Scnquo          ; save buffer byte as search character
000C20  1  C9 22                CMP     #$22            ; is it quote character?
000C22  1  D0 03 4C B5          LBEQ    LAB_1410        ; branch if so (copy quoted string)
000C26  1  0C           
000C27  1               
000C27  1  C9 2A                CMP     #'*'            ; compare with "*"
000C29  1  90 65                BCC     LAB_13EC        ; if < go save byte then continue crunching
000C2B  1               
000C2B  1               ; else crunch now
000C2B  1               LAB_13CC:
000C2B  1  24 60                BIT     Oquote          ; get open quote/DATA token flag
000C2D  1  70 61                BVS     LAB_13EC        ; branch if b6 of Oquote set (was DATA)
000C2F  1               ; go save byte then continue crunching
000C2F  1               
000C2F  1  86 78                STX     TempB           ; save buffer read index
000C31  1  84 BA                STY     csidx           ; copy buffer save index
000C33  1  A0 56                LDY     #<TAB_1STC      ; get keyword first character table low address
000C35  1  84 73                STY     ut2_pl          ; save pointer low byte
000C37  1  A0 37                LDY     #>TAB_1STC      ; get keyword first character table high address
000C39  1  84 74                STY     ut2_ph          ; save pointer high byte
000C3B  1  A0 00                LDY     #$00            ; clear table pointer
000C3D  1               
000C3D  1               LAB_13D0:
000C3D  1  8B 48 DA A2          CMPINDIRECTY ut2_pl     ; compare with keyword first character table byte
000C41  1  01 B5 73 C9  
000C45  1  00 D0 04 A2  
000C55  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
000C57  1               
000C57  1  90 35                BCC     LAB_13EA        ; if < keyword first character table byte go restore
000C59  1               ; Y and save to crunched
000C59  1               
000C59  1  C8                   INY                     ; else increment pointer
000C5A  1  D0 E1                BNE     LAB_13D0        ; and loop (branch always)
000C5C  1               
000C5C  1               ; have matched first character of some keyword
000C5C  1               
000C5C  1               LAB_13D1:
000C5C  1  98                   TYA                     ; copy matching index
000C5D  1  0A                   ASL     A               ; *2 (bytes per pointer)
000C5E  1  AA                   TAX                     ; copy to new index
000C5F  1  BD 75 37             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
000C62  1  85 73                STA     ut2_pl          ; save pointer low byte
000C64  1  BD 76 37             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
000C67  1  85 74                STA     ut2_ph          ; save pointer high byte
000C69  1               
000C69  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
000C6B  1               
000C6B  1  A6 78                LDX     TempB           ; restore buffer read index
000C6D  1               
000C6D  1               LAB_13D6:
000C6D  1  C8                   INY                     ; next table byte
000C6E  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get byte from table
000C72  1  B5 73 C9 00  
000C76  1  D0 04 A2 00  
000C84  1               LAB_13D8:
000C84  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
000C86  1               
000C86  1  E8                   INX                     ; next buffer byte
000C87  1  DD 81 40             CMP     Ibuffs,X        ; compare with byte from input buffer
000C8A  1  F0 E1                BEQ     LAB_13D6        ; go compare next if match
000C8C  1               
000C8C  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
000C8E  1               
000C8E  1               LAB_13EA:
000C8E  1  A4 BA                LDY     csidx           ; restore save index
000C90  1               
000C90  1               ; save crunched to output
000C90  1               LAB_13EC:
000C90  1  E8                   INX                     ; increment buffer index (to next input byte)
000C91  1  C8                   INY                     ; increment save index (to next output byte)
000C92  1  99 81 40             STA     Ibuffs,Y        ; save byte to output
000C95  1  C9 00                CMP     #$00            ; set the flags, set carry
000C97  1  F0 5D                BEQ     LAB_142A        ; do exit if was null [EOL]
000C99  1               
000C99  1               ; A holds token or byte here
000C99  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
000C9B  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
000C9D  1               
000C9D  1               ; A now holds token-$3A
000C9D  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
000C9F  1  D0 02                BNE     LAB_1401        ; branch if not DATA
000CA1  1               
000CA1  1               ; token was : or DATA
000CA1  1               LAB_13FF:
000CA1  1  85 60                STA     Oquote          ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
000CA3  1               LAB_1401:
000CA3  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
000CA5  1  F0 03 4C 0D          LBNE    LAB_13AC        ; If wasn't REM then go crunch rest of line
000CA9  1  0C           
000CAA  1               
000CAA  1  85 5C                STA     Asrch           ; else was REM so set search for [EOL]
000CAC  1               
000CAC  1               ; loop for REM, "..." etc.
000CAC  1               LAB_1408:
000CAC  1  BD 81 40             LDA     Ibuffs,X        ; get byte from input buffer
000CAF  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
000CB1  1               
000CB1  1  C5 5C                CMP     Asrch           ; compare with stored character
000CB3  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
000CB5  1               
000CB5  1               ; entry for copy string in quotes, don't crunch
000CB5  1               LAB_1410:
000CB5  1  C8                   INY                     ; increment buffer save index
000CB6  1  99 81 40             STA     Ibuffs,Y        ; save byte to output
000CB9  1  E8                   INX                     ; increment buffer read index
000CBA  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
000CBC  1               
000CBC  1               ; not found keyword this go
000CBC  1               LAB_1417:
000CBC  1  A6 78                LDX     TempB           ; compare has failed, restore buffer index (start byte!)
000CBE  1               
000CBE  1               ; now find the end of this word in the table
000CBE  1               LAB_141B:
000CBE  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get table byte
000CC2  1  B5 73 C9 00  
000CC6  1  D0 04 A2 00  
000CD4  1  08                   PHP                     ; save status
000CD5  1  C8                   INY                     ; increment table index
000CD6  1  28                   PLP                     ; restore byte status
000CD7  1  10 E5                BPL     LAB_141B        ; if not end of keyword go do next
000CD9  1               
000CD9  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get byte from keyword table
000CDD  1  B5 73 C9 00  
000CE1  1  D0 04 A2 00  
000CEF  1  D0 93                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
000CF1  1               
000CF1  1               ; reached end of table with no match
000CF1  1  BD 81 40             LDA     Ibuffs,X        ; restore byte from input buffer
000CF4  1  10 98                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
000CF6  1               ; go save byte in output and continue crunching
000CF6  1               
000CF6  1               ; reached [EOL]
000CF6  1               LAB_142A:
000CF6  1  C8                   INY                     ; increment pointer
000CF7  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
000CF8  1  99 81 40             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
000CFB  1  C8                   INY                     ; adjust for line copy
000CFC  1  C8                   INY                     ; adjust for line copy
000CFD  1  C8                   INY                     ; adjust for line copy
000CFE  1  C6 C3                DEC     Bpntrl          ; allow for increment (change if buffer starts at $xxFF)
000D00  1  60                   RTS
000D01  1               
000D01  1               ; search Basic for temp integer line number from start of mem
000D01  1               
000D01  1               LAB_SSLN:
000D01  1  A5 79                LDA     Smeml           ; get start of mem low byte
000D03  1  A6 7A                LDX     Smemh           ; get start of mem high byte
000D05  1               
000D05  1               ; search Basic for temp integer line number from AX
000D05  1               ; returns carry set if found
000D05  1               ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
000D05  1               
000D05  1               ; old 541 new 507
000D05  1               
000D05  1               LAB_SHLN:
000D05  1  A0 01                LDY     #$01            ; set index
000D07  1  85 AA                STA     Baslnl          ; save low byte as current
000D09  1  86 AB                STX     Baslnh          ; save high byte as current
000D0B  1  8B DA A2 01          LDAINDIRECTY Baslnl     ; get pointer high byte from addr
000D0F  1  B5 AA C9 00  
000D13  1  D0 04 A2 00  
000D21  1  F0 6F                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
000D23  1               
000D23  1  A0 03                LDY     #$03            ; set index to line # high byte
000D25  1  8B DA A2 01          LDAINDIRECTY Baslnl     ; get line # high byte
000D29  1  B5 AA C9 00  
000D2D  1  D0 04 A2 00  
000D3B  1  88                   DEY                     ; decrement index (point to low byte)
000D3C  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000D3E  1  D0 18                BNE     LAB_1455        ; if <> skip low byte check
000D40  1               
000D40  1  8B DA A2 01          LDAINDIRECTY Baslnl     ; get line # low byte
000D44  1  B5 AA C9 00  
000D48  1  D0 04 A2 00  
000D56  1  C5 11                CMP     Itempl          ; compare with temporary integer low byte
000D58  1               LAB_1455:
000D58  1  B0 36                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
000D5A  1               
000D5A  1               LAB_1456:
000D5A  1  88                   DEY                     ; decrement index to next line ptr high byte
000D5B  1  8B DA A2 01          LDAINDIRECTY Baslnl     ; get next line pointer high byte
000D5F  1  B5 AA C9 00  
000D63  1  D0 04 A2 00  
000D71  1  AA                   TAX                     ; copy to X
000D72  1  88                   DEY                     ; decrement index to next line ptr low byte
000D73  1  8B DA A2 01          LDAINDIRECTY Baslnl     ; get next line pointer low byte
000D77  1  B5 AA C9 00  
000D7B  1  D0 04 A2 00  
000D89  1  90 02 80 03          LBCC    LAB_SHLN        ; go search for line # in temp (Itempl/Itemph) from AX
000D8D  1  4C 05 0D     
000D90  1               ; (carry always clear)
000D90  1               
000D90  1               LAB_145E:
000D90  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
000D92  1               
000D92  1               LAB_145F:
000D92  1  18                   CLC                     ; clear found flag
000D93  1               LAB_1460:
000D93  1  60                   RTS
000D94  1               
000D94  1               ; perform NEW
000D94  1               
000D94  1               LAB_NEW:
000D94  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
000D96  1               
000D96  1               LAB_1463:
000D96  1  A9 00                LDA     #$00            ; clear A
000D98  1  A8                   TAY                     ; clear Y
000D99  1  8B DA 48 A2          STAINDIRECTY Smeml      ; clear first line, next line pointer, low byte
000D9D  1  01 B5 79 C9  
000DA1  1  00 D0 04 A2  
000DAF  1  C8                   INY                     ; increment index
000DB0  1  8B DA 48 A2          STAINDIRECTY Smeml      ; clear first line, next line pointer, high byte
000DB4  1  01 B5 79 C9  
000DB8  1  00 D0 04 A2  
000DC6  1  18                   CLC                     ; clear carry
000DC7  1  A5 79                LDA     Smeml           ; get start of mem low byte
000DC9  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
000DCB  1  85 7B                STA     Svarl           ; save start of vars low byte
000DCD  1  A5 7A                LDA     Smemh           ; get start of mem high byte
000DCF  1  69 00                ADC     #$00            ; add any carry
000DD1  1  85 7C                STA     Svarh           ; save start of vars high byte
000DD3  1               
000DD3  1               ; reset execution to start, clear vars and flush stack
000DD3  1               
000DD3  1               LAB_1477:
000DD3  1  18                   CLC                     ; clear carry
000DD4  1  A5 79                LDA     Smeml           ; get start of mem low byte
000DD6  1  69 FF                ADC     #$FF            ; -1
000DD8  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000DDA  1  A5 7A                LDA     Smemh           ; get start of mem high byte
000DDC  1  69 FF                ADC     #$FF            ; -1+carry
000DDE  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
000DE0  1               
000DE0  1               ; "CLEAR" command gets here
000DE0  1               
000DE0  1               LAB_147A:
000DE0  1  A5 85                LDA     Ememl           ; get end of mem low byte
000DE2  1  A4 86                LDY     Ememh           ; get end of mem high byte
000DE4  1  85 81                STA     Sstorl          ; set bottom of string space low byte
000DE6  1  84 82                STY     Sstorh          ; set bottom of string space high byte
000DE8  1  A5 7B                LDA     Svarl           ; get start of vars low byte
000DEA  1  A4 7C                LDY     Svarh           ; get start of vars high byte
000DEC  1  85 7D                STA     Sarryl          ; save var mem end low byte
000DEE  1  84 7E                STY     Sarryh          ; save var mem end high byte
000DF0  1  85 7F                STA     Earryl          ; save array mem end low byte
000DF2  1  84 80                STY     Earryh          ; save array mem end high byte
000DF4  1  20 C7 0F             JSR     LAB_161A        ; perform RESTORE command
000DF7  1               
000DF7  1               ; flush stack and clear continue flag
000DF7  1               
000DF7  1               LAB_1491:
000DF7  1                       .IFDEF  DUODYNE
000DF7  1  C2 30                ACCUMULATORINDEX16
000DF9  1  FA                   PLX                     ; pull return address low byte
000DFA  1  A9 FF 5F             LDA     #STACK          ; get the stack address
000DFD  1  1B                   TCS                     ; and set the stack to it
000DFE  1  DA                   PHX
000DFF  1  E2 30                ACCUMULATORINDEX8
000E01  1                       .ELSE
000E01  1                       LDX     #des_sk         ; set descriptor stack pointer
000E01  1                       STX     next_s          ; save descriptor stack pointer
000E01  1                       PLA                     ; pull return address low byte
000E01  1                       TAX                     ; copy return address low byte
000E01  1                       PLA                     ; pull return address high byte
000E01  1                       STX     LAB_SKFE        ; save to cleared stack
000E01  1                       STA     LAB_SKFF        ; save to cleared stack
000E01  1                       LDX     #$FD            ; new stack pointer
000E01  1                       TXS                     ; reset stack
000E01  1                       .ENDIF
000E01  1  A9 00                LDA     #$00            ; clear byte
000E03  1  85 8C                STA     Cpntrh          ; clear continue pointer high byte
000E05  1  85 61                STA     Sufnxf          ; clear subscript/FNX flag
000E07  1               LAB_14A6:
000E07  1  60                   RTS
000E08  1               
000E08  1               ; perform CLEAR
000E08  1               
000E08  1               LAB_CLEAR:
000E08  1  F0 D6                BEQ     LAB_147A        ; if no following token go do "CLEAR"
000E0A  1               
000E0A  1               ; else there was a following token (go do syntax error)
000E0A  1  60                   RTS
000E0B  1               
000E0B  1               ; perform LIST [n][-m]
000E0B  1               ; bigger, faster version (a _lot_ faster)
000E0B  1               
000E0B  1               LAB_LIST:
000E0B  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
000E0D  1               
000E0D  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
000E0F  1               
000E0F  1  C9 B8                CMP     #TK_MINUS       ; compare with token for -
000E11  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
000E13  1               
000E13  1               ; LIST [[n][-m]]
000E13  1               ; this bit sets the n , if present, as the start and end
000E13  1               LAB_14BD:
000E13  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000E16  1  20 01 0D             JSR     LAB_SSLN        ; search BASIC for temp integer line number
000E19  1               ; (pointer in Baslnl/Baslnh)
000E19  1                       .IFDEF  DUODYNE
000E19  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000E1D  1                       .ELSE
000E1D  1                       JSR     LAB_GBYT        ; scan memory
000E1D  1                       .ENDIF
000E1D  1               
000E1D  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
000E1F  1               
000E1F  1               ; this bit checks the - is present
000E1F  1  C9 B8                CMP     #TK_MINUS       ; compare with token for -
000E21  1  D0 64                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
000E23  1               
000E23  1               ; LIST [n]-m
000E23  1               ; the - was there so set m as the end value
000E23  1                       .IFDEF  DUODYNE
000E23  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000E27  1                       .ELSE
000E27  1                       JSR     LAB_IGBY        ; increment and scan memory
000E27  1                       .ENDIF
000E27  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000E2A  1  D0 5B                BNE     LAB_152B        ; exit if not ok
000E2C  1               
000E2C  1               LAB_14D4:
000E2C  1  A5 11                LDA     Itempl          ; get temporary integer low byte
000E2E  1  05 12                ORA     Itemph          ; OR temporary integer high byte
000E30  1  D0 06                BNE     LAB_14E2        ; branch if start set
000E32  1               
000E32  1  A9 FF                LDA     #$FF            ; set for -1
000E34  1  85 11                STA     Itempl          ; set temporary integer low byte
000E36  1  85 12                STA     Itemph          ; set temporary integer high byte
000E38  1               LAB_14E2:
000E38  1  A0 01                LDY     #$01            ; set index for line
000E3A  1  84 60                STY     Oquote          ; clear open quote flag
000E3C  1  20 0A 14             JSR     LAB_CRLF        ; print CR/LF
000E3F  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
000E41  1               ; pointer initially set by search at LAB_14BD
000E41  1  D0 03 4C 87          LBEQ    LAB_152B        ; if null all done so exit
000E45  1  0E           
000E46  1  20 92 0F             JSR     LAB_1629        ; do CRTL-C check vector
000E49  1               
000E49  1  C8                   INY                     ; increment index for line
000E4A  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
000E4C  1  AA                   TAX                     ; copy to X
000E4D  1  C8                   INY                     ; increment index
000E4E  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
000E50  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000E52  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
000E54  1               
000E54  1  E4 11                CPX     Itempl          ; compare with temporary integer low byte
000E56  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
000E58  1               
000E58  1               LAB_14FF:                       ; else ..
000E58  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
000E5A  1               
000E5A  1               LAB_1501:
000E5A  1  84 97                STY     Tidx1           ; save index for line
000E5C  1  20 54 2E             JSR     LAB_295E        ; print XA as unsigned integer
000E5F  1  A9 20                LDA     #$20            ; space is the next character
000E61  1               LAB_1508:
000E61  1  A4 97                LDY     Tidx1           ; get index for line
000E63  1  29 7F                AND     #$7F            ; mask top out bit of character
000E65  1               LAB_150C:
000E65  1  20 80 14             JSR     LAB_PRNA        ; go print the character
000E68  1  C9 22                CMP     #$22            ; was it " character
000E6A  1  D0 06                BNE     LAB_1519        ; branch if not
000E6C  1               
000E6C  1               ; we are either entering or leaving a pair of quotes
000E6C  1  A5 60                LDA     Oquote          ; get open quote flag
000E6E  1  49 FF                EOR     #$FF            ; toggle it
000E70  1  85 60                STA     Oquote          ; save it back
000E72  1               LAB_1519:
000E72  1  C8                   INY                     ; increment index
000E73  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
000E75  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
000E77  1  A8                   TAY                     ; else clear index
000E78  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
000E7A  1  AA                   TAX                     ; copy to X
000E7B  1  C8                   INY                     ; increment index
000E7C  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
000E7E  1  86 AA                STX     Baslnl          ; set pointer to line low byte
000E80  1  85 AB                STA     Baslnh          ; set pointer to line high byte
000E82  1  F0 03 4C 38          LBNE    LAB_14E2        ; go do next line if not [EOT]
000E86  1  0E           
000E87  1               ; else ..
000E87  1               LAB_152B:
000E87  1  60                   RTS
000E88  1               
000E88  1               LAB_152E:
000E88  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
000E8A  1               
000E8A  1               ; else was token byte so uncrunch it (maybe)
000E8A  1  24 60                BIT     Oquote          ; test the open quote flag
000E8C  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
000E8E  1               
000E8E  1  A2 39                LDX     #>LAB_KEYT      ; get table address high byte
000E90  1  0A                   ASL     A               ; *2
000E91  1  0A                   ASL     A               ; *4
000E92  1  90 02                BCC     LAB_152F        ; branch if no carry
000E94  1               
000E94  1  E8                   INX                     ; else increment high byte
000E95  1  18                   CLC                     ; clear carry for add
000E96  1               LAB_152F:
000E96  1  69 5E                ADC     #<LAB_KEYT      ; add low byte
000E98  1  90 01                BCC     LAB_1530        ; branch if no carry
000E9A  1               
000E9A  1  E8                   INX                     ; else increment high byte
000E9B  1               LAB_1530:
000E9B  1  85 73                STA     ut2_pl          ; save table pointer low byte
000E9D  1  86 74                STX     ut2_ph          ; save table pointer high byte
000E9F  1  84 97                STY     Tidx1           ; save index for line
000EA1  1  A0 00                LDY     #$00            ; clear index
000EA3  1  B1 73                LDA     (<ut2_pl),Y     ; get length
000EA5  1  AA                   TAX                     ; copy length
000EA6  1  C8                   INY                     ; increment index
000EA7  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
000EA9  1  CA                   DEX                     ; decrement length
000EAA  1  D0 03 4C 61          LBEQ    LAB_1508        ; if no more characters exit and print
000EAE  1  0E           
000EAF  1               
000EAF  1  20 80 14             JSR     LAB_PRNA        ; go print the character
000EB2  1  C8                   INY                     ; increment index
000EB3  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
000EB5  1  48                   PHA                     ; save it for now
000EB6  1  C8                   INY                     ; increment index
000EB7  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
000EB9  1  A0 00                LDY     #$00
000EBB  1  85 74                STA     ut2_ph          ; save keyword pointer high byte
000EBD  1  68                   PLA                     ; pull low byte
000EBE  1  85 73                STA     ut2_pl          ; save keyword pointer low byte
000EC0  1               LAB_1540:
000EC0  1  B1 73                LDA     (<ut2_pl),Y     ; get character
000EC2  1  CA                   DEX                     ; decrement character count
000EC3  1  D0 03 4C 61          LBEQ    LAB_1508        ; if last character exit and print
000EC7  1  0E           
000EC8  1               
000EC8  1  20 80 14             JSR     LAB_PRNA        ; go print the character
000ECB  1  C8                   INY                     ; increment index
000ECC  1  D0 F2                BNE     LAB_1540        ; loop for next character
000ECE  1               
000ECE  1               ; perform FOR
000ECE  1               
000ECE  1               LAB_FOR:
000ECE  1  A9 80                LDA     #$80            ; set FNX
000ED0  1  85 61                STA     Sufnxf          ; set subscript/FNX flag
000ED2  1  20 4D 12             JSR     LAB_LET         ; go do LET
000ED5  1  68                   PLA                     ; pull return address
000ED6  1  68                   PLA                     ; pull return address
000ED7  1  A9 10                LDA     #$10            ; we need 16d bytes !
000ED9  1  20 AE 09             JSR     LAB_1212        ; check room on stack for A bytes
000EDC  1  20 2B 11             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
000EDF  1  18                   CLC                     ; clear carry for add
000EE0  1  98                   TYA                     ; copy index to A
000EE1  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000EE3  1  48                   PHA                     ; push onto stack
000EE4  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
000EE6  1  69 00                ADC     #$00            ; add carry
000EE8  1  48                   PHA                     ; push onto stack
000EE9  1  A5 88                LDA     Clineh          ; get current line high byte
000EEB  1  48                   PHA                     ; push onto stack
000EEC  1  A5 87                LDA     Clinel          ; get current line low byte
000EEE  1  48                   PHA                     ; push onto stack
000EEF  1  A9 AE                LDA     #TK_TO          ; get "TO" token
000EF1  1  20 C2 17             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
000EF4  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
000EF7  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
000EFA  1               ; else do type mismatch
000EFA  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
000EFC  1  09 7F                ORA     #$7F            ; set all non sign bits
000EFE  1  25 AD                AND     FAC1_1          ; and FAC1 mantissa1
000F00  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
000F02  1  A9 0D                LDA     #<LAB_159F      ; set return address low byte
000F04  1  A0 0F                LDY     #>LAB_159F      ; set return address high byte
000F06  1  85 71                STA     ut1_pl          ; save return address low byte
000F08  1  84 72                STY     ut1_ph          ; save return address high byte
000F0A  1  4C 54 17             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
000F0D  1               
000F0D  1               LAB_159F:
000F0D  1  A9 24                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
000F0F  1  A0 36                LDY     #>LAB_259C      ; set 1 pointer high addr
000F11  1  20 2D 2B             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
000F14  1                       .IFDEF  DUODYNE
000F14  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000F18  1                       .ELSE
000F18  1                       JSR     LAB_GBYT        ; scan memory
000F18  1                       .ENDIF
000F18  1               
000F18  1  C9 B3                CMP     #TK_STEP        ; compare with STEP token
000F1A  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
000F1C  1               
000F1C  1               ;.was step so ..
000F1C  1                       .IFDEF  DUODYNE
000F1C  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000F20  1                       .ELSE
000F20  1                       JSR     LAB_IGBY        ; increment and scan memory
000F20  1                       .ENDIF
000F20  1               
000F20  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
000F23  1               ; else do type mismatch
000F23  1               LAB_15B3:
000F23  1  20 39 2C             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
000F26  1  85 B0                STA     FAC1_s          ; set FAC1 sign (b7)
000F28  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
000F28  1               ; compare the FOR value and the TO value and return +1 if
000F28  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
000F28  1               ; here (+/-1) is then compared to that result and if they
000F28  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
000F28  1               ; the loop is done
000F28  1  20 49 17             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
000F2B  1  A5 98                LDA     Frnxth          ; get var pointer for FOR/NEXT high byte
000F2D  1  48                   PHA                     ; push on stack
000F2E  1  A5 97                LDA     Frnxtl          ; get var pointer for FOR/NEXT low byte
000F30  1  48                   PHA                     ; push on stack
000F31  1  A9 81                LDA     #TK_FOR         ; get FOR token
000F33  1  48                   PHA                     ; push on stack
000F34  1               
000F34  1               ; interpreter inner loop
000F34  1               
000F34  1               LAB_15C2:
000F34  1  20 92 0F             JSR     LAB_1629        ; do CRTL-C check vector
000F37  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
000F39  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
000F3B  1               
000F3B  1  A6 88                LDX     Clineh          ; continue line is $FFxx for immediate mode
000F3D  1               ; ($00xx for RUN from immediate mode)
000F3D  1  E8                   INX                     ; increment it (now $00 if immediate mode)
000F3E  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
000F40  1               
000F40  1  85 8B                STA     Cpntrl          ; save continue pointer low byte
000F42  1  84 8C                STY     Cpntrh          ; save continue pointer high byte
000F44  1               LAB_15D1:
000F44  1  A0 00                LDY     #$00            ; clear index
000F46  1  B1 C3                LDA     (Bpntrl),Y      ; get next byte
000F48  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
000F4A  1               
000F4A  1  C9 3A                CMP     #':'            ; compare with ":"
000F4C  1  F0 20                BEQ     LAB_15F6        ; branch if = (statement separator)
000F4E  1               
000F4E  1               LAB_15D9:
000F4E  1  4C D5 17             JMP     LAB_SNER        ; else syntax error then warm start
000F51  1               
000F51  1               ; have reached [EOL]
000F51  1               LAB_15DC:
000F51  1  A0 02                LDY     #$02            ; set index
000F53  1  B1 C3                LDA     (Bpntrl),Y      ; get next line pointer high byte
000F55  1  18                   CLC                     ; clear carry for no "BREAK" message
000F56  1  D0 03 4C B9          LBEQ    LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
000F5A  1  0F           
000F5B  1               ; marker)
000F5B  1               
000F5B  1  C8                   INY                     ; increment index
000F5C  1  B1 C3                LDA     (Bpntrl),Y      ; get line # low byte
000F5E  1  85 87                STA     Clinel          ; save current line low byte
000F60  1  C8                   INY                     ; increment index
000F61  1  B1 C3                LDA     (Bpntrl),Y      ; get line # high byte
000F63  1  85 88                STA     Clineh          ; save current line high byte
000F65  1  98                   TYA                     ; A now = 4
000F66  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000F68  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000F6A  1  90 02                BCC     LAB_15F6        ; branch if no overflow
000F6C  1               
000F6C  1  E6 C4                INC     Bpntrh          ; else increment BASIC execute pointer high byte
000F6E  1               LAB_15F6:
000F6E  1                       .IFDEF  DUODYNE
000F6E  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000F72  1                       .ELSE
000F72  1                       JSR     LAB_IGBY        ; increment and scan memory
000F72  1                       .ENDIF
000F72  1               
000F72  1               
000F72  1               LAB_15F9:
000F72  1  20 78 0F             JSR     LAB_15FF        ; go interpret BASIC code from (Bpntrl)
000F75  1               
000F75  1               LAB_15FC:
000F75  1  4C 34 0F             JMP     LAB_15C2        ; loop
000F78  1               
000F78  1               ; interpret BASIC code from (Bpntrl)
000F78  1               
000F78  1               LAB_15FF:
000F78  1  F0 5B                BEQ     LAB_1628        ; exit if zero [EOL]
000F7A  1               
000F7A  1               LAB_1602:
000F7A  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
000F7B  1  B0 03                BCS     LAB_1609        ; branch if was token
000F7D  1               
000F7D  1  4C 4D 12             JMP     LAB_LET         ; else go do implied LET
000F80  1               
000F80  1               LAB_1609:
000F80  1               TK_TABUSE       = (TK_TAB-$80)*2
000F80  1  C9 58                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
000F82  1  B0 CA                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
000F84  1               ; only tokens before TAB can start a line
000F84  1  A8                   TAY                     ; copy to index
000F85  1  B9 4C 36             LDA     LAB_CTBL+1,Y    ; get vector high byte
000F88  1  48                   PHA                     ; onto stack
000F89  1  B9 4B 36             LDA     LAB_CTBL,Y      ; get vector low byte
000F8C  1  48                   PHA                     ; onto stack
000F8D  1                       .IFDEF  DUODYNE
000F8D  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000F91  1                       .ELSE
000F91  1                       JSR     LAB_IGBY        ; increment and scan memory
000F91  1                       .ENDIF
000F91  1  60                   RTS
000F92  1               ; then "return" to vector
000F92  1               
000F92  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
000F92  1               ; key press is detected.
000F92  1               
000F92  1               LAB_1629:
000F92  1                       .IFDEF  DUODYNE
000F92  1  DA                   PHX
000F93  1  A2 00                LDX     #$00
000F95  1  FC 03 06             JSR     (VEC_CC,X)      ; ctrl c check vector
000F98  1  FA                   PLX
000F99  1  60                   RTS
000F9A  1                       .ELSE
000F9A  1                       JMP     (VEC_CC)        ; ctrl c check vector
000F9A  1                       .ENDIF
000F9A  1               
000F9A  1               
000F9A  1               ; if there was a key press it gets back here ..
000F9A  1               
000F9A  1               LAB_1636:
000F9A  1  C9 03                CMP     #$03            ; compare with CTRL-C
000F9C  1               
000F9C  1               ; perform STOP
000F9C  1               
000F9C  1               LAB_STOP:
000F9C  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
000F9E  1               ; else just END
000F9E  1               ; END
000F9E  1               
000F9E  1               LAB_END:
000F9E  1  18                   CLC                     ; clear the carry, indicate a normal program end
000F9F  1               LAB_163B:
000F9F  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
000FA1  1               
000FA1  1  A5 C4                LDA     Bpntrh          ; get the BASIC execute pointer high byte
000FA3  1  49 40                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
000FA5  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
000FA7  1               ; (can't continue in immediate mode)
000FA7  1               
000FA7  1               ; else ..
000FA7  1  49 40                EOR     #>Ibuffs        ; correct the bits
000FA9  1  A4 C3                LDY     Bpntrl          ; get BASIC execute pointer low byte
000FAB  1  84 8B                STY     Cpntrl          ; save continue pointer low byte
000FAD  1  85 8C                STA     Cpntrh          ; save continue pointer high byte
000FAF  1               LAB_1647:
000FAF  1  A5 87                LDA     Clinel          ; get current line low byte
000FB1  1  A4 88                LDY     Clineh          ; get current line high byte
000FB3  1  85 89                STA     Blinel          ; save break line low byte
000FB5  1  84 8A                STY     Blineh          ; save break line high byte
000FB7  1               LAB_164F:
000FB7  1  68                   PLA                     ; pull return address low
000FB8  1  68                   PLA                     ; pull return address high
000FB9  1               LAB_1651:
000FB9  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
000FBB  1               
000FBB  1               ; else ..
000FBB  1  A9 2F                LDA     #<LAB_BMSG      ; point to "Break" low byte
000FBD  1  A0 3C                LDY     #>LAB_BMSG      ; point to "Break" high byte
000FBF  1  4C 0A 0A             JMP     LAB_1269        ; print "Break" and do warm start
000FC2  1               
000FC2  1               LAB_165E:
000FC2  1  4C 15 0A             JMP     LAB_1274        ; go do warm start
000FC5  1               
000FC5  1               ; perform RESTORE
000FC5  1               
000FC5  1               LAB_RESTORE:
000FC5  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
000FC7  1               
000FC7  1               LAB_161A:
000FC7  1  38                   SEC                     ; set carry for subtract
000FC8  1  A5 79                LDA     Smeml           ; get start of mem low byte
000FCA  1  E9 01                SBC     #$01            ; -1
000FCC  1  A4 7A                LDY     Smemh           ; get start of mem high byte
000FCE  1  B0 01                BCS     LAB_1624        ; branch if no underflow
000FD0  1               
000FD0  1               LAB_uflow:
000FD0  1  88                   DEY                     ; else decrement high byte
000FD1  1               LAB_1624:
000FD1  1  85 8F                STA     Dptrl           ; save DATA pointer low byte
000FD3  1  84 90                STY     Dptrh           ; save DATA pointer high byte
000FD5  1               LAB_1628:
000FD5  1  60                   RTS
000FD6  1               
000FD6  1               ; is RESTORE n
000FD6  1               LAB_RESTOREn:
000FD6  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000FD9  1  20 2E 11             JSR     LAB_SNBL        ; scan for next BASIC line
000FDC  1  A5 88                LDA     Clineh          ; get current line high byte
000FDE  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000FE0  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
000FE2  1               
000FE2  1  98                   TYA                     ; else copy line index to A
000FE3  1  38                   SEC                     ; set carry (+1)
000FE4  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000FE6  1  A6 C4                LDX     Bpntrh          ; get BASIC execute pointer high byte
000FE8  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
000FEA  1               
000FEA  1  E8                   INX                     ; increment high byte
000FEB  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
000FED  1               
000FED  1               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
000FED  1               
000FED  1               LAB_reset_search:
000FED  1  A5 79                LDA     Smeml           ; get start of mem low byte
000FEF  1  A6 7A                LDX     Smemh           ; get start of mem high byte
000FF1  1               
000FF1  1               ; search for line # in temp (Itempl/Itemph) from (AX)
000FF1  1               
000FF1  1               LAB_go_search:
000FF1  1               
000FF1  1  20 05 0D             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
000FF4  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
000FF6  1               
000FF6  1  4C 00 11             JMP     LAB_16F7        ; else go do "Undefined statement" error
000FF9  1               
000FF9  1               LAB_line_found:
000FF9  1               ; carry already set for subtract
000FF9  1  A5 AA                LDA     Baslnl          ; get pointer low byte
000FFB  1  E9 01                SBC     #$01            ; -1
000FFD  1  A4 AB                LDY     Baslnh          ; get pointer high byte
000FFF  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
001001  1               
001001  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
001003  1               ; return (branch always)
001003  1               
001003  1               ; perform NULL
001003  1               
001003  1               LAB_NULL:
001003  1  20 39 26             JSR     LAB_GTBY        ; get byte parameter
001006  1  86 0D                STX     Nullct          ; save new NULL count
001008  1               LAB_167A:
001008  1  60                   RTS
001009  1               
001009  1               ; perform CONT
001009  1               
001009  1               LAB_CONT:
001009  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
00100B  1               
00100B  1  A4 8C                LDY     Cpntrh          ; get continue pointer high byte
00100D  1  D0 05                BNE     LAB_166C        ; go do continue if we can
00100F  1               
00100F  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
001011  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
001014  1               
001014  1               ; we can continue so ..
001014  1               LAB_166C:
001014  1  A9 93                LDA     #TK_ON          ; set token for ON
001016  1  20 5A 33             JSR     LAB_IRQ         ; set IRQ flags
001019  1  A9 93                LDA     #TK_ON          ; set token for ON
00101B  1  20 5D 33             JSR     LAB_NMI         ; set NMI flags
00101E  1               
00101E  1  84 C4                STY     Bpntrh          ; save BASIC execute pointer high byte
001020  1  A5 8B                LDA     Cpntrl          ; get continue pointer low byte
001022  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
001024  1  A5 89                LDA     Blinel          ; get break line low byte
001026  1  A4 8A                LDY     Blineh          ; get break line high byte
001028  1  85 87                STA     Clinel          ; set current line low byte
00102A  1  84 88                STY     Clineh          ; set current line high byte
00102C  1  60                   RTS
00102D  1               
00102D  1               ; perform RUN
00102D  1               
00102D  1               LAB_RUN:
00102D  1  D0 03                BNE     LAB_1696        ; branch if RUN n
00102F  1  4C D3 0D             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
001032  1               ; return
001032  1               
001032  1               ; does RUN n
001032  1               
001032  1               LAB_1696:
001032  1  20 E0 0D             JSR     LAB_147A        ; go do "CLEAR"
001035  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
001037  1               
001037  1               ; perform DO
001037  1               
001037  1               LAB_DO:
001037  1  A9 05                LDA     #$05            ; need 5 bytes for DO
001039  1  20 AE 09             JSR     LAB_1212        ; check room on stack for A bytes
00103C  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
00103E  1  48                   PHA                     ; push on stack
00103F  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001041  1  48                   PHA                     ; push on stack
001042  1  A5 88                LDA     Clineh          ; get current line high byte
001044  1  48                   PHA                     ; push on stack
001045  1  A5 87                LDA     Clinel          ; get current line low byte
001047  1  48                   PHA                     ; push on stack
001048  1  A9 9D                LDA     #TK_DO          ; token for DO
00104A  1  48                   PHA                     ; push on stack
00104B  1                       .IFDEF  DUODYNE
00104B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00104F  1                       .ELSE
00104F  1                       JSR     LAB_GBYT        ; scan memory
00104F  1                       .ENDIF
00104F  1               
00104F  1  4C 34 0F             JMP     LAB_15C2        ; go do interpreter inner loop
001052  1               
001052  1               ; perform GOSUB
001052  1               
001052  1               LAB_GOSUB:
001052  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
001054  1  20 AE 09             JSR     LAB_1212        ; check room on stack for A bytes
001057  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
001059  1  48                   PHA                     ; push on stack
00105A  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
00105C  1  48                   PHA                     ; push on stack
00105D  1  A5 88                LDA     Clineh          ; get current line high byte
00105F  1  48                   PHA                     ; push on stack
001060  1  A5 87                LDA     Clinel          ; get current line low byte
001062  1  48                   PHA                     ; push on stack
001063  1  A9 8D                LDA     #TK_GOSUB       ; token for GOSUB
001065  1  48                   PHA                     ; push on stack
001066  1               LAB_16B0:
001066  1                       .IFDEF  DUODYNE
001066  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00106A  1                       .ELSE
00106A  1                       JSR     LAB_GBYT        ; scan memory
00106A  1                       .ENDIF
00106A  1               
00106A  1  20 70 10             JSR     LAB_GOTO        ; perform GOTO n
00106D  1  4C 34 0F             JMP     LAB_15C2        ; go do interpreter inner loop
001070  1               ; (can't RTS, we used the stack!)
001070  1               
001070  1               ; perform GOTO
001070  1               
001070  1               LAB_GOTO:
001070  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer
001073  1  20 2E 11             JSR     LAB_SNBL        ; scan for next BASIC line
001076  1  A5 88                LDA     Clineh          ; get current line high byte
001078  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
00107A  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
00107C  1               
00107C  1  98                   TYA                     ; else copy line index to A
00107D  1  38                   SEC                     ; set carry (+1)
00107E  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
001080  1  A6 C4                LDX     Bpntrh          ; get BASIC execute pointer high byte
001082  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
001084  1               
001084  1  E8                   INX                     ; increment high byte
001085  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
001087  1               
001087  1               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
001087  1               
001087  1               LAB_16D0:
001087  1  A5 79                LDA     Smeml           ; get start of mem low byte
001089  1  A6 7A                LDX     Smemh           ; get start of mem high byte
00108B  1               
00108B  1               ; search for line # in temp (Itempl/Itemph) from (AX)
00108B  1               
00108B  1               LAB_16D4:
00108B  1  20 05 0D             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
00108E  1  90 70                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
001090  1               ; (unspecified statement)
001090  1               
001090  1               ; carry already set for subtract
001090  1  A5 AA                LDA     Baslnl          ; get pointer low byte
001092  1  E9 01                SBC     #$01            ; -1
001094  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
001096  1  A5 AB                LDA     Baslnh          ; get pointer high byte
001098  1  E9 00                SBC     #$00            ; subtract carry
00109A  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
00109C  1               LAB_16E5:
00109C  1  60                   RTS
00109D  1               
00109D  1               LAB_DONOK:
00109D  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
00109F  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
0010A2  1               
0010A2  1               ; perform LOOP
0010A2  1               
0010A2  1               LAB_LOOP:
0010A2  1  A8                   TAY                     ; save following token
0010A3  1                       .IFDEF  DUODYNE
0010A3  1  A3 03                LDA     3,S             ; get token byte from stack
0010A5  1  C9 9D                CMP     #TK_DO          ; compare with DO token
0010A7  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
0010A9  1               
0010A9  1               ; FIXUP STACK
0010A9  1  C2 10                INDEX16
0010AB  1  BA                   TSX
0010AC  1  E8                   INX                     ; dump calling routine return address
0010AD  1  E8                   INX                     ; dump calling routine return address
0010AE  1  9A                   TXS                     ; correct stack
0010AF  1  E2 10                INDEX8
0010B1  1                       .ELSE
0010B1  1                       TSX                     ; copy stack pointer
0010B1  1                       LDA     LAB_STAK+3,X    ; get token byte from stack
0010B1  1                       CMP     #TK_DO          ; compare with DO token
0010B1  1                       BNE     LAB_DONOK       ; branch if no matching DO
0010B1  1               
0010B1  1                       INX                     ; dump calling routine return address
0010B1  1                       INX                     ; dump calling routine return address
0010B1  1                       TXS                     ; correct stack
0010B1  1                       .ENDIF
0010B1  1  98                   TYA                     ; get saved following token back
0010B2  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
0010B4  1               ; (stack pointer in X)
0010B4  1               
0010B4  1  C9 3A                CMP     #':'            ; could be ':'
0010B6  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
0010B8  1               
0010B8  1  E9 B4                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
0010BA  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
0010BB  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
0010BD  1               
0010BD  1  CA                   DEX                     ; decrement result
0010BE  1  D0 68                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
0010C0  1               ; only if the token was WHILE will this fail
0010C0  1               
0010C0  1  CA                   DEX                     ; set invert result byte
0010C1  1               DoRest:
0010C1  1  86 98                STX     Frnxth          ; save invert result byte
0010C3  1                       .IFDEF  DUODYNE
0010C3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0010C7  1                       .ELSE
0010C7  1                       JSR     LAB_IGBY        ; increment and scan memory
0010C7  1                       .ENDIF
0010C7  1               
0010C7  1  20 AF 16             JSR     LAB_EVEX        ; evaluate expression
0010CA  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0010CC  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
0010CE  1               
0010CE  1  A9 FF                LDA     #$FF            ; else set all bits
0010D0  1               DoCmp:
0010D0  1                       .IFNDEF DUODYNE
0010D0  1                       TSX                     ; copy stack pointer
0010D0  1                       .ENDIF
0010D0  1  45 98                EOR     Frnxth          ; EOR with invert byte
0010D2  1  D0 1B                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
0010D4  1               
0010D4  1               ; loop condition wasn't met so do it again
0010D4  1               LoopAlways:
0010D4  1  BD 02 01             LDA     LAB_STAK+2,X    ; get current line low byte
0010D7  1  85 87                STA     Clinel          ; save current line low byte
0010D9  1  BD 03 01             LDA     LAB_STAK+3,X    ; get current line high byte
0010DC  1  85 88                STA     Clineh          ; save current line high byte
0010DE  1  BD 04 01             LDA     LAB_STAK+4,X    ; get BASIC execute pointer low byte
0010E1  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
0010E3  1  BD 05 01             LDA     LAB_STAK+5,X    ; get BASIC execute pointer high byte
0010E6  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
0010E8  1                       .IFDEF  DUODYNE
0010E8  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0010EC  1                       .ELSE
0010EC  1                       JSR     LAB_GBYT        ; scan memory
0010EC  1                       .ENDIF
0010EC  1               
0010EC  1  4C 34 0F             JMP     LAB_15C2        ; go do interpreter inner loop
0010EF  1               
0010EF  1               ; clear stack and back to interpreter loop
0010EF  1               LoopDone:
0010EF  1                       .IFDEF  DUODYNE
0010EF  1  C2 10                INDEX16
0010F1  1  BA                   TSX
0010F2  1  E8                   INX                     ; dump DO token
0010F3  1  E8                   INX                     ; dump current line low byte
0010F4  1  E8                   INX                     ; dump current line high byte
0010F5  1  E8                   INX                     ; dump BASIC execute pointer low byte
0010F6  1  E8                   INX                     ; dump BASIC execute pointer high byte
0010F7  1  9A                   TXS                     ; correct stack
0010F8  1  E2 10                INDEX8
0010FA  1                       .ELSE
0010FA  1                       INX                     ; dump DO token
0010FA  1                       INX                     ; dump current line low byte
0010FA  1                       INX                     ; dump current line high byte
0010FA  1                       INX                     ; dump BASIC execute pointer low byte
0010FA  1                       INX                     ; dump BASIC execute pointer high byte
0010FA  1                       TXS                     ; correct stack
0010FA  1                       .ENDIF
0010FA  1  4C 1A 11             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
0010FD  1               
0010FD  1               ; do the return without gosub error
0010FD  1               
0010FD  1               LAB_16F4:
0010FD  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
0010FF  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
001100  1               
001100  1               LAB_16F7
001100  1               ; do undefined statement error
001100  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
001102  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
001105  1               
001105  1               ; perform RETURN
001105  1               
001105  1               LAB_RETURN:
001105  1  D0 95                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
001107  1               
001107  1               LAB_16E8:
001107  1  68                   PLA                     ; dump calling routine return address
001108  1  68                   PLA                     ; dump calling routine return address
001109  1  68                   PLA                     ; pull token
00110A  1  C9 8D                CMP     #TK_GOSUB       ; compare with GOSUB token
00110C  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
00110E  1               
00110E  1               LAB_16FF:
00110E  1  68                   PLA                     ; pull current line low byte
00110F  1  85 87                STA     Clinel          ; save current line low byte
001111  1  68                   PLA                     ; pull current line high byte
001112  1  85 88                STA     Clineh          ; save current line high byte
001114  1  68                   PLA                     ; pull BASIC execute pointer low byte
001115  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
001117  1  68                   PLA                     ; pull BASIC execute pointer high byte
001118  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
00111A  1               
00111A  1               ; now do the DATA statement as we could be returning into
00111A  1               ; the middle of an ON <var> GOSUB n,m,p,q line
00111A  1               ; (the return address used by the DATA statement is the one
00111A  1               ; pushed before the GOSUB was executed!)
00111A  1               
00111A  1               ; perform DATA
00111A  1               
00111A  1               LAB_DATA:
00111A  1  20 2B 11             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
00111D  1               
00111D  1               ; set BASIC execute pointer
00111D  1               LAB_170F:
00111D  1  98                   TYA                     ; copy index to A
00111E  1  18                   CLC                     ; clear carry for add
00111F  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
001121  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
001123  1  90 02                BCC     LAB_1719        ; skip next if no carry
001125  1               
001125  1  E6 C4                INC     Bpntrh          ; else increment BASIC execute pointer high byte
001127  1               LAB_1719:
001127  1  60                   RTS
001128  1               
001128  1               LAB_16FC:
001128  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
00112B  1               
00112B  1               ; scan for next BASIC statement ([:] or [EOL])
00112B  1               ; returns Y as index to [:] or [EOL]
00112B  1               
00112B  1               LAB_SNBS:
00112B  1  A2 3A                LDX     #':'            ; set look for character = ":"
00112D  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
00112E  1               
00112E  1               ; scan for next BASIC line
00112E  1               ; returns Y as index to [EOL]
00112E  1               
00112E  1               LAB_SNBL:
00112E  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
001130  1  A0 00                LDY     #$00            ; set search character = [EOL]
001132  1  84 5C                STY     Asrch           ; store search character
001134  1               LAB_1725:
001134  1  8A                   TXA                     ; get alt search character
001135  1  45 5C                EOR     Asrch           ; toggle search character, effectively swap with $00
001137  1  85 5C                STA     Asrch           ; save swapped search character
001139  1               LAB_172D:
001139  1  B1 C3                LDA     (Bpntrl),Y      ; get next byte
00113B  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
00113D  1               
00113D  1  C5 5C                CMP     Asrch           ; compare with search character
00113F  1  F0 E6                BEQ     LAB_1719        ; exit if found
001141  1               
001141  1  C8                   INY                     ; increment index
001142  1  C9 22                CMP     #$22            ; compare current character with open quote
001144  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
001146  1               
001146  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
001148  1               
001148  1               ; perform IF
001148  1               
001148  1               LAB_IF:
001148  1  20 AF 16             JSR     LAB_EVEX        ; evaluate the expression
00114B  1                       .IFDEF  DUODYNE
00114B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00114F  1                       .ELSE
00114F  1                       JSR     LAB_GBYT        ; scan memory
00114F  1                       .ENDIF
00114F  1               
00114F  1  C9 B1                CMP     #TK_THEN        ; compare with THEN token
001151  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
001153  1               
001153  1               ; wasn't IF .. THEN so must be IF .. GOTO
001153  1  C9 89                CMP     #TK_GOTO        ; compare with GOTO token
001155  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
001157  1               
001157  1  A6 C3                LDX     Bpntrl          ; save the basic pointer low byte
001159  1  A4 C4                LDY     Bpntrh          ; save the basic pointer high byte
00115B  1                       .IFDEF  DUODYNE
00115B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00115F  1                       .ELSE
00115F  1                       JSR     LAB_IGBY        ; increment and scan memory
00115F  1                       .ENDIF
00115F  1               
00115F  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
001161  1               
001161  1  86 C3                STX     Bpntrl          ; restore the basic pointer low byte
001163  1  84 C4                STY     Bpntrh          ; restore the basic pointer high byte
001165  1               LAB_174B:
001165  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
001167  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
001169  1               
001169  1                       .IFDEF  DUODYNE
001169  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00116D  1                       .ELSE
00116D  1                       JSR     LAB_IGBY        ; increment and scan memory
00116D  1                       .ENDIF
00116D  1               
00116D  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
00116F  1               
00116F  1               LAB_174C:
00116F  1  4C 70 10             JMP     LAB_GOTO        ; else was numeric so do GOTO n
001172  1               
001172  1               ; is var or keyword
001172  1               LAB_174D:
001172  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
001174  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (Bpntrl)
001176  1               ; and return to this code to process any following code
001176  1               
001176  1  4C 7A 0F             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (Bpntrl)
001179  1               ; but don't return here
001179  1               
001179  1               LAB_174G:
001179  1  20 78 0F             JSR     LAB_15FF        ; interpret BASIC code from (Bpntrl)
00117C  1               
00117C  1               ; the IF was executed and there may be a following ELSE so the code needs to return
00117C  1               ; here to check and ignore the ELSE if present
00117C  1               
00117C  1  A0 00                LDY     #$00            ; clear the index
00117E  1  B1 C3                LDA     (Bpntrl),Y      ; get the next BASIC byte
001180  1  C9 AD                CMP     #TK_ELSE        ; compare it with the token for ELSE
001182  1  D0 03 4C 1A          LBEQ    LAB_DATA        ; if ELSE ignore the following statement
001186  1  11           
001187  1               
001187  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
001187  1               ; following ELSE will, correctly, cause a syntax error
001187  1               
001187  1  60                   RTS                     ; else return to the interpreter inner loop
001188  1               
001188  1               ; perform ELSE after IF
001188  1               
001188  1               LAB_174E:
001188  1  A0 00                LDY     #$00            ; clear the BASIC byte index
00118A  1  A2 01                LDX     #$01            ; clear the nesting depth
00118C  1               LAB_1750:
00118C  1  C8                   INY                     ; increment the BASIC byte index
00118D  1  B1 C3                LDA     (Bpntrl),Y      ; get the next BASIC byte
00118F  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
001191  1               
001191  1  C9 8B                CMP     #TK_IF          ; compare the byte with the token for IF
001193  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
001195  1               
001195  1  E8                   INX                     ; else increment the nesting depth ..
001196  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
001198  1               
001198  1               LAB_1752:
001198  1  C9 AD                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
00119A  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
00119C  1               
00119C  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
00119D  1  D0 ED                BNE     LAB_1750        ; loop if still nested
00119F  1               
00119F  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
0011A0  1               
0011A0  1               ; found the matching ELSE, now do <{n|statement}>
0011A0  1               
0011A0  1               LAB_1753:
0011A0  1  98                   TYA                     ; else copy line index to A
0011A1  1  18                   CLC                     ; clear carry for add
0011A2  1  65 C3                ADC     Bpntrl          ; add the BASIC execute pointer low byte
0011A4  1  85 C3                STA     Bpntrl          ; save the BASIC execute pointer low byte
0011A6  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
0011A8  1               
0011A8  1  E6 C4                INC     Bpntrh          ; else increment the BASIC execute pointer high byte
0011AA  1               LAB_1754:
0011AA  1                       .IFDEF  DUODYNE
0011AA  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0011AE  1                       .ELSE
0011AE  1                       JSR     LAB_GBYT        ; scan memory
0011AE  1                       .ENDIF
0011AE  1               
0011AE  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
0011B0  1               ; the code will return to the interpreter loop at the
0011B0  1               ; tail end of the GOTO <n>
0011B0  1               
0011B0  1  4C 78 0F             JMP     LAB_15FF        ; interpret BASIC code from (Bpntrl)
0011B3  1               ; the code will return to the interpreter loop at the
0011B3  1               ; tail end of the <statement>
0011B3  1               
0011B3  1               ; perform REM, skip (rest of) line
0011B3  1               
0011B3  1               LAB_REM:
0011B3  1  20 2E 11             JSR     LAB_SNBL        ; scan for next BASIC line
0011B6  1  4C 1D 11             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
0011B9  1               
0011B9  1               LAB_16FD:
0011B9  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
0011BC  1               
0011BC  1               ; perform ON
0011BC  1               
0011BC  1               LAB_ON:
0011BC  1  C9 A9                CMP     #TK_IRQ         ; was it IRQ token ?
0011BE  1  D0 03                BNE     LAB_NOIN        ; if not go check NMI
0011C0  1               
0011C0  1  4C 80 33             JMP     LAB_SIRQ        ; else go set-up IRQ
0011C3  1               
0011C3  1               LAB_NOIN:
0011C3  1  C9 AA                CMP     #TK_NMI         ; was it NMI token ?
0011C5  1  D0 03                BNE     LAB_NONM        ; if not go do normal ON command
0011C7  1               
0011C7  1  4C 84 33             JMP     LAB_SNMI        ; else go set-up NMI
0011CA  1               
0011CA  1               LAB_NONM:
0011CA  1  20 39 26             JSR     LAB_GTBY        ; get byte parameter
0011CD  1  48                   PHA                     ; push GOTO/GOSUB token
0011CE  1  C9 8D                CMP     #TK_GOSUB       ; compare with GOSUB token
0011D0  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
0011D2  1               
0011D2  1  C9 89                CMP     #TK_GOTO        ; compare with GOTO token
0011D4  1               LAB_1767:
0011D4  1  D0 E3                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
0011D6  1               
0011D6  1               
0011D6  1               ; next character was GOTO or GOSUB
0011D6  1               
0011D6  1               LAB_176B:
0011D6  1  C6 AF                DEC     FAC1_3          ; decrement index (byte value)
0011D8  1  D0 04                BNE     LAB_1773        ; branch if not zero
0011DA  1               
0011DA  1  68                   PLA                     ; pull GOTO/GOSUB token
0011DB  1  4C 7A 0F             JMP     LAB_1602        ; go execute it
0011DE  1               
0011DE  1               LAB_1773:
0011DE  1                       .IFDEF  DUODYNE
0011DE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0011E2  1                       .ELSE
0011E2  1                       JSR     LAB_IGBY        ; increment and scan memory
0011E2  1                       .ENDIF
0011E2  1               
0011E2  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
0011E5  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
0011E5  1               ; just BNE LAB_176B for the loop. should be quicker ..
0011E5  1               ; no we can't, what if we meet a colon or [EOL]?)
0011E5  1  C9 2C                CMP     #$2C            ; compare next character with ","
0011E7  1  F0 ED                BEQ     LAB_176B        ; loop if ","
0011E9  1               
0011E9  1               LAB_177E:
0011E9  1  68                   PLA                     ; else pull keyword token (run out of options)
0011EA  1               ; also dump +/-1 pointer low byte and exit
0011EA  1               LAB_177F:
0011EA  1  60                   RTS
0011EB  1               
0011EB  1               ; takes n * 106 + 11 cycles where n is the number of digits
0011EB  1               
0011EB  1               ; get fixed-point number into temp integer
0011EB  1               
0011EB  1               LAB_GFPN:
0011EB  1  A2 00                LDX     #$00            ; clear reg
0011ED  1  86 11                STX     Itempl          ; clear temporary integer low byte
0011EF  1               LAB_1785:
0011EF  1  86 12                STX     Itemph          ; save temporary integer high byte
0011F1  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
0011F3  1               ; not 0-9
0011F3  1               
0011F3  1  E0 19                CPX     #$19            ; compare high byte with $19
0011F5  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
0011F6  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
0011F8  1               ; bit does *$0A, = 64000, compare at target will fail
0011F8  1               ; and do syntax error
0011F8  1               
0011F8  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
0011FA  1  A8                   TAY                     ; copy binary digit
0011FB  1  A5 11                LDA     Itempl          ; get temporary integer low byte
0011FD  1  0A                   ASL     A               ; *2 low byte
0011FE  1  26 12                ROL     Itemph          ; *2 high byte
001200  1  0A                   ASL     A               ; *2 low byte
001201  1  26 12                ROL     Itemph          ; *2 high byte, *4
001203  1  65 11                ADC     Itempl          ; + low byte, *5
001205  1  85 11                STA     Itempl          ; save it
001207  1  8A                   TXA                     ; get high byte copy to A
001208  1  65 12                ADC     Itemph          ; + high byte, *5
00120A  1  06 11                ASL     Itempl          ; *2 low byte, *10d
00120C  1  2A                   ROL     A               ; *2 high byte, *10d
00120D  1  AA                   TAX                     ; copy high byte back to X
00120E  1  98                   TYA                     ; get binary digit back
00120F  1  65 11                ADC     Itempl          ; add number low byte
001211  1  85 11                STA     Itempl          ; save number low byte
001213  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
001215  1               
001215  1  E8                   INX                     ; else increment high byte
001216  1               LAB_17B3:
001216  1                       .IFDEF  DUODYNE
001216  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00121A  1                       .ELSE
00121A  1                       JSR     LAB_IGBY        ; increment and scan memory
00121A  1                       .ENDIF
00121A  1               
00121A  1  4C EF 11             JMP     LAB_1785        ; loop for next character
00121D  1               
00121D  1               ; perform DEC
00121D  1               
00121D  1               LAB_DEC:
00121D  1  A9 28                LDA     #<LAB_2AFD      ; set -1 pointer low byte
00121F  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
001220  1               
001220  1               ; perform INC
001220  1               
001220  1               LAB_INC:
001220  1  A9 24                LDA     #<LAB_259C      ; set 1 pointer low byte
001222  1               LAB_17B5:
001222  1  48                   PHA                     ; save +/-1 pointer low byte
001223  1               LAB_17B7:
001223  1  20 AC 19             JSR     LAB_GVAR        ; get var address
001226  1  A6 5F                LDX     Dtypef          ; get data type flag, $FF=string, $00=numeric
001228  1  30 20                BMI     IncrErr         ; exit if string
00122A  1               
00122A  1  85 97                STA     Lvarpl          ; save var address low byte
00122C  1  84 98                STY     Lvarph          ; save var address high byte
00122E  1  20 2D 2B             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
001231  1  68                   PLA                     ; get +/-1 pointer low byte
001232  1  48                   PHA                     ; save +/-1 pointer low byte
001233  1  A0 36                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
001235  1  20 18 28             JSR     LAB_246C        ; add (AY) to FAC1
001238  1  20 A3 2B             JSR     LAB_PFAC        ; pack FAC1 into variable (Lvarpl)
00123B  1               
00123B  1                       .IFDEF  DUODYNE
00123B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00123F  1                       .ELSE
00123F  1                       JSR     LAB_GBYT        ; scan memory
00123F  1                       .ENDIF
00123F  1               
00123F  1  C9 2C                CMP     #','            ; compare with ","
001241  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
001243  1               
001243  1               ; was "," so another INCR variable to do
001243  1                       .IFDEF  DUODYNE
001243  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001247  1                       .ELSE
001247  1                       JSR     LAB_IGBY        ; increment and scan memory
001247  1                       .ENDIF
001247  1               
001247  1  4C 23 12             JMP     LAB_17B7        ; go do next var
00124A  1               
00124A  1               IncrErr:
00124A  1  4C AA 16             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
00124D  1               
00124D  1               ; perform LET
00124D  1               
00124D  1               LAB_LET:
00124D  1  20 AC 19             JSR     LAB_GVAR        ; get var address
001250  1  85 97                STA     Lvarpl          ; save var address low byte
001252  1  84 98                STY     Lvarph          ; save var address high byte
001254  1  A9 C2                LDA     #TK_EQUAL       ; get = token
001256  1  20 C2 17             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
001259  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
00125B  1  48                   PHA                     ; push data type flag
00125C  1  20 AF 16             JSR     LAB_EVEX        ; evaluate expression
00125F  1  68                   PLA                     ; pop data type flag
001260  1  2A                   ROL     A               ; set carry if type = string
001261  1  20 A1 16             JSR     LAB_CKTM        ; type match check, set C for string
001264  1  D0 03                BNE     LAB_17D5        ; branch if string
001266  1               
001266  1  4C A3 2B             JMP     LAB_PFAC        ; pack FAC1 into variable (Lvarpl) and return
001269  1               
001269  1               ; string LET
001269  1               
001269  1               LAB_17D5:
001269  1  A0 02                LDY     #$02            ; set index to pointer high byte
00126B  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
00126F  1  B5 AE C9 00  
001273  1  D0 04 A2 00  
001281  1  C5 82                CMP     Sstorh          ; compare bottom of string space high byte
001283  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
001285  1               
001285  1  D0 1B                BNE     LAB_17E6        ; branch if >
001287  1               ; else was equal so compare low bytes
001287  1  88                   DEY                     ; decrement index
001288  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
00128C  1  B5 AE C9 00  
001290  1  D0 04 A2 00  
00129E  1  C5 81                CMP     Sstorl          ; compare bottom of string space low byte
0012A0  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
0012A2  1               
0012A2  1               ; pointer was >= to bottom of string space pointer
0012A2  1               LAB_17E6:
0012A2  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
0012A4  1  C4 7C                CPY     Svarh           ; compare start of vars high byte
0012A6  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
0012A8  1               
0012A8  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
0012AA  1               
0012AA  1               ; else high bytes were equal so ..
0012AA  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0012AC  1  C5 7B                CMP     Svarl           ; compare start of vars low byte
0012AE  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
0012B0  1               
0012B0  1               LAB_17F4:
0012B0  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0012B2  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
0012B4  1  4C E1 12             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
0012B7  1               
0012B7  1               ; make space and copy string
0012B7  1               LAB_17FB:
0012B7  1  A0 00                LDY     #$00            ; index to length
0012B9  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
0012BD  1  B5 AE C9 00  
0012C1  1  D0 04 A2 00  
0012CF  1  20 1F 20             JSR     LAB_209C        ; copy string
0012D2  1  A5 9E                LDA     des_2l          ; get descriptor pointer low byte
0012D4  1  A4 9F                LDY     des_2h          ; get descriptor pointer high byte
0012D6  1  85 B8                STA     ssptr_l         ; save descriptor pointer low byte
0012D8  1  84 B9                STY     ssptr_h         ; save descriptor pointer high byte
0012DA  1  20 1F 23             JSR     LAB_228A        ; copy string from descriptor (sdescr) to (Sutill)
0012DD  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
0012DF  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
0012E1  1               
0012E1  1               ; clean stack and assign value to string variable
0012E1  1               LAB_1811:
0012E1  1  85 9E                STA     des_2l          ; save descriptor_2 pointer low byte
0012E3  1  84 9F                STY     des_2h          ; save descriptor_2 pointer high byte
0012E5  1  20 21 24             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
0012E8  1  A0 00                LDY     #$00            ; index to length
0012EA  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
0012EE  1  B5 9E C9 00  
0012F2  1  D0 04 A2 00  
001300  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
001304  1  01 B5 97 C9  
001308  1  00 D0 04 A2  
001316  1  C8                   INY                     ; index to string pointer low byte
001317  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
00131B  1  B5 9E C9 00  
00131F  1  D0 04 A2 00  
00132D  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
001331  1  01 B5 97 C9  
001335  1  00 D0 04 A2  
001343  1  C8                   INY                     ; index to string pointer high byte
001344  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
001348  1  B5 9E C9 00  
00134C  1  D0 04 A2 00  
00135A  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
00135E  1  01 B5 97 C9  
001362  1  00 D0 04 A2  
001370  1  60                   RTS
001371  1               
001371  1               ; perform GET
001371  1               
001371  1               LAB_GET:
001371  1  20 AC 19             JSR     LAB_GVAR        ; get var address
001374  1  85 97                STA     Lvarpl          ; save var address low byte
001376  1  84 98                STY     Lvarph          ; save var address high byte
001378  1  20 46 33             JSR     INGET           ; get input byte
00137B  1  A6 5F                LDX     Dtypef          ; get data type flag, $FF=string, $00=numeric
00137D  1  30 07                BMI     LAB_GETS        ; go get string character
00137F  1               
00137F  1               ; was numeric get
00137F  1  A8                   TAY                     ; copy character to Y
001380  1  20 9B 1E             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001383  1  4C A3 2B             JMP     LAB_PFAC        ; pack FAC1 into variable (Lvarpl) and return
001386  1               
001386  1               LAB_GETS:
001386  1  48                   PHA                     ; save character
001387  1  A9 01                LDA     #$01            ; string is single byte
001389  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
00138B  1               
00138B  1  68                   PLA                     ; string is null
00138C  1               LAB_IsByte:
00138C  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
00138F  1               ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
00138F  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
001391  1               
001391  1  68                   PLA                     ; get character back
001392  1  A0 00                LDY     #$00            ; clear index
001394  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001398  1  01 B5 AD C9  
00139C  1  00 D0 04 A2  
0013AA  1               LAB_NoSt:
0013AA  1  20 86 20             JSR     LAB_RTST        ; check for space on descriptor stack then put address
0013AD  1               ; and length on descriptor stack and update stack pointers
0013AD  1               
0013AD  1  4C 69 12             JMP     LAB_17D5        ; do string LET and return
0013B0  1               
0013B0  1               ; perform PRINT
0013B0  1               
0013B0  1               LAB_1829:
0013B0  1  20 55 14             JSR     LAB_18C6        ; print string from Sutill/Sutilh
0013B3  1               LAB_182C:
0013B3  1                       .IFDEF  DUODYNE
0013B3  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0013B7  1                       .ELSE
0013B7  1                       JSR     LAB_GBYT        ; scan memory
0013B7  1                       .ENDIF
0013B7  1               
0013B7  1               
0013B7  1               ; PRINT
0013B7  1               
0013B7  1               LAB_PRINT:
0013B7  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
0013B9  1               
0013B9  1               LAB_1831:
0013B9  1  C9 AC                CMP     #TK_TAB         ; compare with TAB( token
0013BB  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
0013BD  1               
0013BD  1  C9 B0                CMP     #TK_SPC         ; compare with SPC( token
0013BF  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
0013C1  1               
0013C1  1  C9 2C                CMP     #','            ; compare with ","
0013C3  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
0013C5  1               
0013C5  1  C9 3B                CMP     #$3B            ; compare with ";"
0013C7  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
0013C9  1               
0013C9  1  20 AF 16             JSR     LAB_EVEX        ; evaluate expression
0013CC  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
0013CE  1  30 E0                BMI     LAB_1829        ; branch if string
0013D0  1               
0013D0  1  20 67 2E             JSR     LAB_296E        ; convert FAC1 to string
0013D3  1  20 31 20             JSR     LAB_20AE        ; print " terminated string to Sutill/Sutilh
0013D6  1  A0 00                LDY     #$00            ; clear index
0013D8  1               
0013D8  1               ; don't check fit if terminal width byte is zero
0013D8  1               
0013D8  1  A5 0F                LDA     TWidth          ; get terminal width byte
0013DA  1  F0 20                BEQ     LAB_185E        ; skip check if zero
0013DC  1                       .IFDEF  DUODYNE
0013DC  1  8B 48 DA A2          FETCHINDIRECTY des_pl   ; subtract string length
0013E0  1  01 B5 AE C9  
0013E4  1  00 D0 04 A2  
0013F2  1  38                   SEC                     ; set carry for subtract
0013F3  1  E5 0E                SBC     TPos            ; subtract terminal position
0013F5  1  E5 04                SBC     <TMPFLG         ; subtract string length
0013F7  1                       .ELSE
0013F7  1                       SEC                     ; set carry for subtract
0013F7  1                       SBC     TPos            ; subtract terminal position
0013F7  1                       SBC     (des_pl),Y      ; subtract string length
0013F7  1                       .ENDIF
0013F7  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
0013F9  1  20 0A 14             JSR     LAB_CRLF        ; else print CR/LF
0013FC  1               LAB_185E:
0013FC  1  20 55 14             JSR     LAB_18C6        ; print string from Sutill/Sutilh
0013FF  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
001401  1               
001401  1               ; CR/LF return to BASIC from BASIC input handler
001401  1               
001401  1               LAB_1866:
001401  1  A9 00                LDA     #$00            ; clear byte
001403  1  9D 81 40             STA     Ibuffs,X        ; null terminate input
001406  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
001408  1  A0 40                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
00140A  1               
00140A  1               ; print CR/LF
00140A  1               
00140A  1               LAB_CRLF:
00140A  1  A9 0D                LDA     #$0D            ; load [CR]
00140C  1  20 80 14             JSR     LAB_PRNA        ; go print the character
00140F  1  A9 0A                LDA     #$0A            ; load [LF]
001411  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
001413  1               
001413  1               LAB_188B:
001413  1  A5 0E                LDA     TPos            ; get terminal position
001415  1  C5 10                CMP     Iclim           ; compare with input column limit
001417  1  90 05                BCC     LAB_1897        ; branch if less
001419  1               
001419  1  20 0A 14             JSR     LAB_CRLF        ; else print CR/LF (next line)
00141C  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
00141E  1               
00141E  1               LAB_1897:
00141E  1  38                   SEC                     ; set carry for subtract
00141F  1               LAB_1898:
00141F  1  E5 64                SBC     TabSiz          ; subtract TAB size
001421  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
001423  1               
001423  1  49 FF                EOR     #$FF            ; complement it
001425  1  69 01                ADC     #$01            ; +1 (twos complement)
001427  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
001429  1               
001429  1               ; do TAB/SPC
001429  1               LAB_18A2:
001429  1  48                   PHA                     ; save token
00142A  1  20 35 26             JSR     LAB_SGBY        ; scan and get byte parameter
00142D  1  C9 29                CMP     #$29            ; is next character )
00142F  1  F0 03 4C C7          LBNE    LAB_1910        ; if not do syntax error then warm start
001433  1  14           
001434  1               
001434  1  68                   PLA                     ; get token back
001435  1  C9 AC                CMP     #TK_TAB         ; was it TAB ?
001437  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
001439  1               
001439  1               ; calculate TAB offset
001439  1  8A                   TXA                     ; copy integer value to A
00143A  1  E5 0E                SBC     TPos            ; subtract terminal position
00143C  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
00143E  1               
00143E  1               ; print A spaces
00143E  1               LAB_18B6:
00143E  1  AA                   TAX                     ; copy result to X
00143F  1               LAB_18B7:
00143F  1  8A                   TXA                     ; set flags on size for SPC
001440  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
001442  1               
001442  1               ; print X spaces
001442  1               LAB_18BA:
001442  1  20 7B 14             JSR     LAB_18E0        ; print " "
001445  1  CA                   DEX                     ; decrement count
001446  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
001448  1               
001448  1               ; continue with PRINT processing
001448  1               LAB_18BD:
001448  1                       .IFDEF  DUODYNE
001448  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00144C  1                       .ELSE
00144C  1                       JSR     LAB_IGBY        ; increment and scan memory
00144C  1                       .ENDIF
00144C  1               
00144C  1  F0 03 4C B9          LBNE    LAB_1831        ; if more to print go do it
001450  1  13           
001451  1               
001451  1  60                   RTS
001452  1               
001452  1               ; print null terminated string from memory
001452  1               
001452  1               LAB_18C3:
001452  1  20 31 20             JSR     LAB_20AE        ; print " terminated string to Sutill/Sutilh
001455  1               
001455  1               ; print string from Sutill/Sutilh
001455  1               
001455  1               LAB_18C6:
001455  1  20 B0 23             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001458  1               ; space returns with A = length, X=$71=pointer low byte,
001458  1               ; Y=$72=pointer high byte
001458  1  A0 00                LDY     #$00            ; reset index
00145A  1  AA                   TAX                     ; copy length to X
00145B  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
00145D  1               
00145D  1               LAB_18CD:
00145D  1               
00145D  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
001461  1  B5 71 C9 00  
001465  1  D0 04 A2 00  
001473  1  20 80 14             JSR     LAB_PRNA        ; go print the character
001476  1  C8                   INY                     ; increment index
001477  1  CA                   DEX                     ; decrement count
001478  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
00147A  1               
00147A  1  60                   RTS
00147B  1               
00147B  1               ; Print single format character
00147B  1               ; print " "
00147B  1               
00147B  1               LAB_18E0:
00147B  1  A9 20                LDA     #$20            ; load " "
00147D  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
00147E  1               
00147E  1               ; print "?" character
00147E  1               
00147E  1               LAB_18E3:
00147E  1  A9 3F                LDA     #$3F            ; load "?" character
001480  1               
001480  1               ; print character in A
001480  1               ; now includes the null handler
001480  1               ; also includes infinite line length code
001480  1               ; note! some routines expect this one to exit with Zb=0
001480  1               
001480  1               LAB_PRNA:
001480  1  C9 20                CMP     #' '            ; compare with " "
001482  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
001484  1               
001484  1               ; else printable character
001484  1  48                   PHA                     ; save the character
001485  1               
001485  1               ; don't check fit if terminal width byte is zero
001485  1               
001485  1  A5 0F                LDA     TWidth          ; get terminal width
001487  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
001489  1               
001489  1               ; is "infinite line" so check TAB position
001489  1               
001489  1  A5 0E                LDA     TPos            ; get position
00148B  1  E5 64                SBC     TabSiz          ; subtract TAB size, carry set by CMP #$20 above
00148D  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
00148F  1               
00148F  1  85 0E                STA     TPos            ; else reset position
001491  1  F0 07                BEQ     LAB_18F7        ; go print character
001493  1               
001493  1               LAB_18F0:
001493  1  C5 0E                CMP     TPos            ; compare with terminal character position
001495  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
001497  1               
001497  1  20 0A 14             JSR     LAB_CRLF        ; else print CR/LF
00149A  1               LAB_18F7:
00149A  1  E6 0E                INC     TPos            ; increment terminal position
00149C  1  68                   PLA                     ; get character back
00149D  1               LAB_18F9:
00149D  1  20 9A 3C             JSR     V_OUTP          ; output byte via output vector
0014A0  1  C9 0D                CMP     #$0D            ; compare with [CR]
0014A2  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
0014A4  1               
0014A4  1               ; else print nullct nulls after the [CR]
0014A4  1  86 78                STX     TempB           ; save buffer index
0014A6  1  A6 0D                LDX     Nullct          ; get null count
0014A8  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
0014AA  1               
0014AA  1  A9 00                LDA     #$00            ; load [NULL]
0014AC  1               LAB_1880:
0014AC  1  20 80 14             JSR     LAB_PRNA        ; go print the character
0014AF  1  CA                   DEX                     ; decrement count
0014B0  1  D0 FA                BNE     LAB_1880        ; loop if not all done
0014B2  1               
0014B2  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
0014B4  1               LAB_1886:
0014B4  1  86 0E                STX     TPos            ; clear terminal position (X always = zero when we get here)
0014B6  1  A6 78                LDX     TempB           ; restore buffer index
0014B8  1               LAB_188A:
0014B8  1  29 FF                AND     #$FF            ; set the flags
0014BA  1               LAB_188C:
0014BA  1  60                   RTS
0014BB  1               
0014BB  1               ; handle bad input data
0014BB  1               
0014BB  1               LAB_1904:
0014BB  1  A5 62                LDA     Imode           ; get input mode flag, $00=INPUT, $00=READ
0014BD  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
0014BF  1               
0014BF  1  A5 8D                LDA     Dlinel          ; get current DATA line low byte
0014C1  1  A4 8E                LDY     Dlineh          ; get current DATA line high byte
0014C3  1  85 87                STA     Clinel          ; save current line low byte
0014C5  1  84 88                STY     Clineh          ; save current line high byte
0014C7  1               LAB_1910:
0014C7  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
0014CA  1               
0014CA  1               ; mode was INPUT
0014CA  1               LAB_1913:
0014CA  1  A9 63                LDA     #<LAB_REDO      ; point to redo message (low addr)
0014CC  1  A0 3C                LDY     #>LAB_REDO      ; point to redo message (high addr)
0014CE  1  20 52 14             JSR     LAB_18C3        ; print null terminated string from memory
0014D1  1  A5 8B                LDA     Cpntrl          ; get continue pointer low byte
0014D3  1  A4 8C                LDY     Cpntrh          ; get continue pointer high byte
0014D5  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
0014D7  1  84 C4                STY     Bpntrh          ; save BASIC execute pointer high byte
0014D9  1  60                   RTS
0014DA  1               
0014DA  1               ; perform INPUT
0014DA  1               
0014DA  1               LAB_INPUT:
0014DA  1  C9 22                CMP     #$22            ; compare next byte with open quote
0014DC  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
0014DE  1               
0014DE  1  20 8E 17             JSR     LAB_1BC1        ; print "..." string
0014E1  1  A9 3B                LDA     #$3B            ; load A with ";"
0014E3  1  20 C2 17             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0014E6  1  20 55 14             JSR     LAB_18C6        ; print string from Sutill/Sutilh
0014E9  1               
0014E9  1               ; done with prompt, now get data
0014E9  1               LAB_1934:
0014E9  1  20 9F 1E             JSR     LAB_CKRN        ; check not Direct, back here if ok
0014EC  1  20 C7 0B             JSR     LAB_INLN        ; print "? " and get BASIC input
0014EF  1  A9 00                LDA     #$00            ; set mode = INPUT
0014F1  1  CD 81 40             CMP     Ibuffs          ; test first byte in buffer
0014F4  1  D0 0A                BNE     LAB_1953        ; branch if not null input
0014F6  1               
0014F6  1  18                   CLC                     ; was null input so clear carry to exit program
0014F7  1  4C AF 0F             JMP     LAB_1647        ; go do BREAK exit
0014FA  1               
0014FA  1               ; perform READ
0014FA  1               
0014FA  1               LAB_READ:
0014FA  1  A6 8F                LDX     Dptrl           ; get DATA pointer low byte
0014FC  1  A4 90                LDY     Dptrh           ; get DATA pointer high byte
0014FE  1  A9 80                LDA     #$80            ; set mode = READ
001500  1               
001500  1               LAB_1953:
001500  1  85 62                STA     Imode           ; set input mode flag, $00=INPUT, $80=READ
001502  1  86 91                STX     Rdptrl          ; save READ pointer low byte
001504  1  84 92                STY     Rdptrh          ; save READ pointer high byte
001506  1               
001506  1               ; READ or INPUT next variable from list
001506  1               LAB_195B:
001506  1  20 AC 19             JSR     LAB_GVAR        ; get (var) address
001509  1  85 97                STA     Lvarpl          ; save address low byte
00150B  1  84 98                STY     Lvarph          ; save address high byte
00150D  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
00150F  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
001511  1  85 11                STA     Itempl          ; save as temporary integer low byte
001513  1  84 12                STY     Itemph          ; save as temporary integer high byte
001515  1  A6 91                LDX     Rdptrl          ; get READ pointer low byte
001517  1  A4 92                LDY     Rdptrh          ; get READ pointer high byte
001519  1  86 C3                STX     Bpntrl          ; set BASIC execute pointer low byte
00151B  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
00151D  1                       .IFDEF  DUODYNE
00151D  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001521  1                       .ELSE
001521  1                       JSR     LAB_GBYT        ; scan memory
001521  1                       .ENDIF
001521  1               
001521  1  D0 12                BNE     LAB_1988        ; branch if not null
001523  1               
001523  1               ; pointer was to null entry
001523  1  24 62                BIT     Imode           ; test input mode flag, $00=INPUT, $80=READ
001525  1  30 6C                BMI     LAB_19DD        ; branch if READ
001527  1               
001527  1               ; mode was INPUT
001527  1  20 7E 14             JSR     LAB_18E3        ; print "?" character (double ? for extended input)
00152A  1  20 C7 0B             JSR     LAB_INLN        ; print "? " and get BASIC input
00152D  1  86 C3                STX     Bpntrl          ; set BASIC execute pointer low byte
00152F  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
001531  1               LAB_1985:
001531  1                       .IFDEF  DUODYNE
001531  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001535  1                       .ELSE
001535  1                       JSR     LAB_GBYT        ; scan memory
001535  1                       .ENDIF
001535  1               
001535  1               LAB_1988:
001535  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
001537  1  10 24                BPL     LAB_19B0        ; branch if numeric
001539  1               
001539  1               ; else get string
001539  1  85 5B                STA     Srchc           ; save search character
00153B  1  C9 22                CMP     #$22            ; was it " ?
00153D  1  F0 07                BEQ     LAB_1999        ; branch if so
00153F  1               
00153F  1  A9 3A                LDA     #':'            ; else search character is ":"
001541  1  85 5B                STA     Srchc           ; set new search character
001543  1  A9 2C                LDA     #','            ; other search character is ","
001545  1  18                   CLC                     ; clear carry for add
001546  1               LAB_1999:
001546  1  85 5C                STA     Asrch           ; set second search character
001548  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
00154A  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
00154C  1               
00154C  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
00154E  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
001550  1               
001550  1  C8                   INY                     ; else increment high byte
001551  1               LAB_19A4:
001551  1  20 37 20             JSR     LAB_20B4        ; print Srchc or Asrch terminated string to Sutill/Sutilh
001554  1  20 BB 26             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (Btmpl/Btmph)
001557  1  20 69 12             JSR     LAB_17D5        ; go do string LET
00155A  1  4C 63 15             JMP     LAB_19B6        ; go check string terminator
00155D  1               
00155D  1               ; get numeric INPUT
00155D  1               LAB_19B0:
00155D  1  20 5A 2D             JSR     LAB_2887        ; get FAC1 from string
001560  1  20 A3 2B             JSR     LAB_PFAC        ; pack FAC1 into (Lvarpl)
001563  1               LAB_19B6:
001563  1                       .IFDEF  DUODYNE
001563  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001567  1                       .ELSE
001567  1                       JSR     LAB_GBYT        ; scan memory
001567  1                       .ENDIF
001567  1               
001567  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
001569  1               
001569  1  C9 2C                CMP     #','            ; else compare with ","
00156B  1  F0 03                BEQ     LAB_19C2        ; branch if ","
00156D  1               
00156D  1  4C BB 14             JMP     LAB_1904        ; else go handle bad input data
001570  1               
001570  1               ; got good input data
001570  1               LAB_19C2:
001570  1                       .IFDEF  DUODYNE
001570  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001574  1                       .ELSE
001574  1                       JSR     LAB_IGBY        ; increment and scan memory
001574  1                       .ENDIF
001574  1               
001574  1               LAB_19C5:
001574  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
001576  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
001578  1  85 91                STA     Rdptrl          ; save for now
00157A  1  84 92                STY     Rdptrh          ; save for now
00157C  1  A5 11                LDA     Itempl          ; get temporary integer low byte (temp BASIC execute ptr)
00157E  1  A4 12                LDY     Itemph          ; get temporary integer high byte (temp BASIC execute ptr)
001580  1  85 C3                STA     Bpntrl          ; set BASIC execute pointer low byte
001582  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
001584  1                       .IFDEF  DUODYNE
001584  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001588  1                       .ELSE
001588  1                       JSR     LAB_GBYT        ; scan memory
001588  1                       .ENDIF
001588  1               
001588  1  D0 03 4C BF          LBEQ    LAB_1A03        ; if null go do extra ignored message
00158C  1  15           
00158D  1               
00158D  1  20 D1 17             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
001590  1  4C 06 15             JMP     LAB_195B        ; go INPUT next variable from list
001593  1               
001593  1               ; find next DATA statement or do "Out of DATA" error
001593  1               LAB_19DD:
001593  1  20 2B 11             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
001596  1  C8                   INY                     ; increment index
001597  1  AA                   TAX                     ; copy character ([:] or [EOL])
001598  1  D0 15                BNE     LAB_19F6        ; branch if [:]
00159A  1               
00159A  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
00159C  1  C8                   INY                     ; increment index, now points to next line pointer high byte
00159D  1  B1 C3                LDA     (Bpntrl),Y      ; get next line pointer high byte
00159F  1  D0 03 4C 2D          LBEQ    LAB_1A54        ; branch if end (eventually does error X)
0015A3  1  16           
0015A4  1               
0015A4  1  C8                   INY                     ; increment index
0015A5  1  B1 C3                LDA     (Bpntrl),Y      ; get next line # low byte
0015A7  1  85 8D                STA     Dlinel          ; save current DATA line low byte
0015A9  1  C8                   INY                     ; increment index
0015AA  1  B1 C3                LDA     (Bpntrl),Y      ; get next line # high byte
0015AC  1  C8                   INY                     ; increment index
0015AD  1  85 8E                STA     Dlineh          ; save current DATA line high byte
0015AF  1               LAB_19F6:
0015AF  1  B1 C3                LDA     (Bpntrl),Y      ; get byte
0015B1  1  C8                   INY                     ; increment index
0015B2  1  AA                   TAX                     ; copy to X
0015B3  1  20 1D 11             JSR     LAB_170F        ; set BASIC execute pointer
0015B6  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
0015B8  1  D0 03 4C 31          LBEQ    LAB_1985        ; was "DATA" so go do next READ
0015BC  1  15           
0015BD  1               
0015BD  1  D0 D4                BNE     LAB_19DD        ; go find next statement if not "DATA"
0015BF  1               
0015BF  1               ; end of INPUT/READ routine
0015BF  1               
0015BF  1               LAB_1A03:
0015BF  1  A5 91                LDA     Rdptrl          ; get temp READ pointer low byte
0015C1  1  A4 92                LDY     Rdptrh          ; get temp READ pointer high byte
0015C3  1  A6 62                LDX     Imode           ; get input mode flag, $00=INPUT, $80=READ
0015C5  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
0015C7  1               
0015C7  1  4C D1 0F             JMP     LAB_1624        ; save AY as DATA pointer and return
0015CA  1               
0015CA  1               ; we were getting INPUT
0015CA  1               LAB_1A0E:
0015CA  1  A0 00                LDY     #$00            ; clear index
0015CC  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
0015D0  1  B5 91 C9 00  
0015D4  1  D0 04 A2 00  
0015E2  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
0015E4  1               
0015E4  1  60                   RTS
0015E5  1               
0015E5  1               ; user typed too much
0015E5  1               LAB_1A1B:
0015E5  1  A9 52                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
0015E7  1  A0 3C                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
0015E9  1  4C 52 14             JMP     LAB_18C3        ; print null terminated string from memory and return
0015EC  1               
0015EC  1               ; search the stack for FOR activity
0015EC  1               ; exit with z=1 if FOR else exit with z=0
0015EC  1               
0015EC  1               LAB_11A1:
0015EC  1                       .IFDEF  DUODYNE
0015EC  1  C2 10                INDEX16
0015EE  1                       .ENDIF
0015EE  1  BA                   TSX                     ; copy stack pointer
0015EF  1  E8                   INX                     ; +1 pass return address
0015F0  1  E8                   INX                     ; +2 pass return address
0015F1  1  E8                   INX                     ; +3 pass calling routine return address
0015F2  1  E8                   INX                     ; +4 pass calling routine return address
0015F3  1               LAB_11A6:
0015F3  1                       .IFDEF  DUODYNE
0015F3  1  B5 01                LDA     1,X             ; get token byte from stack
0015F5  1                       .ELSE
0015F5  1                       LDA     LAB_STAK+1,X    ; get token byte from stack
0015F5  1                       .ENDIF
0015F5  1  C9 81                CMP     #TK_FOR         ; is it FOR token
0015F7  1  D0 1F                BNE     LAB_11CE        ; exit if not FOR token
0015F9  1               
0015F9  1               ; was FOR token
0015F9  1  A5 98                LDA     Frnxth          ; get var pointer for FOR/NEXT high byte
0015FB  1  D0 08                BNE     LAB_11BB        ; branch if not null
0015FD  1                       .IFDEF  DUODYNE
0015FD  1  B5 02                LDA     2,X             ; get FOR variable pointer low byte
0015FF  1                       .ELSE
0015FF  1                       LDA     LAB_STAK+2,X    ; get FOR variable pointer low byte
0015FF  1                       .ENDIF
0015FF  1  85 97                STA     Frnxtl          ; save var pointer for FOR/NEXT low byte
001601  1                       .IFDEF  DUODYNE
001601  1  B5 03                LDA     3,X             ; get FOR variable pointer high byte
001603  1                       .ELSE
001603  1                       LDA     LAB_STAK+3,X    ; get FOR variable pointer high byte
001603  1                       .ENDIF
001603  1  85 98                STA     Frnxth          ; save var pointer for FOR/NEXT high byte
001605  1               LAB_11BB:
001605  1                       .IFDEF  DUODYNE
001605  1  D5 03                CMP     3,X             ; compare var pointer with stacked var pointer (high byte)
001607  1                       .ELSE
001607  1                       CMP     LAB_STAK+3,X    ; compare var pointer with stacked var pointer (high byte)
001607  1                       .ENDIF
001607  1  D0 06                BNE     LAB_11C7        ; branch if no match
001609  1               
001609  1  A5 97                LDA     Frnxtl          ; get var pointer for FOR/NEXT low byte
00160B  1                       .IFDEF  DUODYNE
00160B  1  D5 02                CMP     2,X             ; compare var pointer with stacked var pointer (low byte)
00160D  1                       .ELSE
00160D  1                       CMP     LAB_STAK+2,X    ; compare var pointer with stacked var pointer (low byte)
00160D  1                       .ENDIF
00160D  1  F0 09                BEQ     LAB_11CE        ; exit if match found
00160F  1               
00160F  1               LAB_11C7:
00160F  1                       .IFDEF  DUODYNE
00160F  1  E2 10                INDEX8
001611  1                       .ENDIF
001611  1  8A                   TXA                     ; copy index
001612  1  18                   CLC                     ; clear carry for add
001613  1  69 10                ADC     #$10            ; add FOR stack use size
001615  1  AA                   TAX                     ; copy back to index
001616  1  D0 DB                BNE     LAB_11A6        ; loop if not at start of stack
001618  1               
001618  1               LAB_11CE:
001618  1  60                   RTS
001619  1               
001619  1               ; perform NEXT
001619  1               
001619  1               LAB_NEXT:
001619  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
00161B  1               
00161B  1  A0 00                LDY     #$00            ; else clear Y
00161D  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
00161F  1               
00161F  1               ; NEXT var
00161F  1               
00161F  1               LAB_1A46:
00161F  1  20 AC 19             JSR     LAB_GVAR        ; get variable address
001622  1               LAB_1A49:
001622  1  85 97                STA     Frnxtl          ; store variable pointer low byte
001624  1  84 98                STY     Frnxth          ; store variable pointer high byte
001626  1               ; (both cleared if no variable defined)
001626  1  20 EC 15             JSR     LAB_11A1        ; search the stack for FOR activity
001629  1  F0 04                BEQ     LAB_1A56        ; branch if found
00162B  1               
00162B  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
00162D  1               LAB_1A54:
00162D  1  F0 7D                BEQ     LAB_1ABE        ; do error #X, then warm start
00162F  1               
00162F  1               LAB_1A56:
00162F  1                       .IFDEF  DUODYNE
00162F  1  C2 30                ACCUMULATORINDEX16
001631  1  A6 FD                LDX     <TEMPW
001633  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
001634  1  8A                   TXA                     ; copy stack pointer
001635  1  18                   CLC                     ; CLEAR carry
001636  1  69 09 00             ADC     #$0009          ; point to TO var
001639  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
00163B  1  38                   SEC
00163C  1  E9 05 00             SBC     #$0005          ; point to STEP var
00163F  1  85 FD                STA     <TEMPW
001641  1               
001641  1  E2 30                ACCUMULATORINDEX8
001643  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
001645  1               
001645  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
001646  1  DA                   PHX
001647  1  A2 00                LDX     #$00
001649  1  DA                   PHX
00164A  1  AB                   PLB
00164B  1  FA                   PLX
00164C  1  20 2D 2B             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
00164F  1  AB                   PLB
001650  1               
001650  1  A3 08                LDA     8,S             ; get step sign
001652  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
001654  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
001656  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
001658  1  20 18 28             JSR     LAB_246C        ; add (FOR variable) to FAC1
00165B  1  20 A3 2B             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
00165E  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
001660  1               
001660  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
001661  1  DA                   PHX
001662  1  A2 00                LDX     #$00
001664  1  DA                   PHX
001665  1  AB                   PLB
001666  1  FA                   PLX
001667  1               
001667  1  20 69 2C             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
00166A  1  AB                   PLB
00166B  1                       .ELSE
00166B  1                       TXS                     ; set stack pointer, X set by search, dumps return addresses
00166B  1               
00166B  1                       TXA                     ; copy stack pointer
00166B  1                       SEC                     ; set carry for subtract
00166B  1                       SBC     #$F7            ; point to TO var
00166B  1                       STA     ut2_pl          ; save pointer to TO var for compare
00166B  1                       ADC     #$FB            ; point to STEP var
00166B  1               
00166B  1                       LDY     #>LAB_STAK      ; point to stack page high byte
00166B  1                       JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
00166B  1                       TSX                     ; get stack pointer back
00166B  1                       LDA     LAB_STAK+8,X    ; get step sign
00166B  1                       STA     FAC1_s          ; save FAC1 sign (b7)
00166B  1                       LDA     Frnxtl          ; get FOR variable pointer low byte
00166B  1                       LDY     Frnxth          ; get FOR variable pointer high byte
00166B  1                       JSR     LAB_246C        ; add (FOR variable) to FAC1
00166B  1                       JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
00166B  1                       LDY     #>LAB_STAK      ; point to stack page high byte
00166B  1                       JSR     LAB_27FA        ; compare FAC1 with (Y,ut2_pl) (TO value)
00166B  1                       TSX                     ; get stack pointer back
00166B  1                       .ENDIF
00166B  1  DD 08 01             CMP     LAB_STAK+8,X    ; compare step sign
00166E  1  F0 17                BEQ     LAB_1A9B        ; branch if = (loop complete)
001670  1               
001670  1               ; loop back and do it all again
001670  1  BD 0D 01             LDA     LAB_STAK+$0D,X  ; get FOR line low byte
001673  1  85 87                STA     Clinel          ; save current line low byte
001675  1  BD 0E 01             LDA     LAB_STAK+$0E,X  ; get FOR line high byte
001678  1  85 88                STA     Clineh          ; save current line high byte
00167A  1  BD 10 01             LDA     LAB_STAK+$10,X  ; get BASIC execute pointer low byte
00167D  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
00167F  1  BD 0F 01             LDA     LAB_STAK+$0F,X  ; get BASIC execute pointer high byte
001682  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
001684  1               LAB_1A98:
001684  1  4C 34 0F             JMP     LAB_15C2        ; go do interpreter inner loop
001687  1               
001687  1               ; loop complete so carry on
001687  1               LAB_1A9B:
001687  1  8A                   TXA                     ; stack copy to A
001688  1  69 0F                ADC     #$0F            ; add $10 ($0F+carry) to dump FOR structure
00168A  1  AA                   TAX                     ; copy back to index
00168B  1  9A                   TXS                     ; copy to stack pointer
00168C  1                       .IFDEF  DUODYNE
00168C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001690  1                       .ELSE
001690  1                       JSR     LAB_GBYT        ; scan memory
001690  1                       .ENDIF
001690  1               
001690  1  C9 2C                CMP     #','            ; compare with ","
001692  1  D0 F0                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
001694  1               
001694  1               ; was "," so another NEXT variable to do
001694  1                       .IFDEF  DUODYNE
001694  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001698  1                       .ELSE
001698  1                       JSR     LAB_IGBY        ; increment and scan memory
001698  1                       .ENDIF
001698  1               
001698  1  20 1F 16             JSR     LAB_1A46        ; do NEXT (var)
00169B  1               
00169B  1               ; evaluate expression and check is numeric, else do type mismatch
00169B  1               
00169B  1               LAB_EVNM:
00169B  1  20 AF 16             JSR     LAB_EVEX        ; evaluate expression
00169E  1               
00169E  1               ; check if source is numeric, else do type mismatch
00169E  1               
00169E  1               LAB_CTNM:
00169E  1  18                   CLC                     ; destination is numeric
00169F  1  24                   .BYTE   $24             ; makes next line BIT $38
0016A0  1               
0016A0  1               ; check if source is string, else do type mismatch
0016A0  1               
0016A0  1               LAB_CTST:
0016A0  1  38                   SEC                     ; required type is string
0016A1  1               
0016A1  1               ; type match check, set C for string, clear C for numeric
0016A1  1               
0016A1  1               LAB_CKTM:
0016A1  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
0016A3  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
0016A5  1               
0016A5  1               ; else data type was numeric
0016A5  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
0016A7  1               LAB_1AB9:
0016A7  1  60                   RTS
0016A8  1               
0016A8  1               ; data type was string, now check required type
0016A8  1               LAB_1ABA:
0016A8  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
0016AA  1               
0016AA  1               ; else do type mismatch error
0016AA  1               LAB_1ABC:
0016AA  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
0016AC  1               LAB_1ABE:
0016AC  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
0016AF  1               
0016AF  1               ; evaluate expression
0016AF  1               
0016AF  1               LAB_EVEX:
0016AF  1  A6 C3                LDX     Bpntrl          ; get BASIC execute pointer low byte
0016B1  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
0016B3  1               
0016B3  1  C6 C4                DEC     Bpntrh          ; else decrement BASIC execute pointer high byte
0016B5  1               LAB_1AC7:
0016B5  1  C6 C3                DEC     Bpntrl          ; decrement BASIC execute pointer low byte
0016B7  1               
0016B7  1               LAB_EVEZ:
0016B7  1  A9 00                LDA     #$00            ; set null precedence (flag done)
0016B9  1               LAB_1ACC:
0016B9  1  48                   PHA                     ; push precedence byte
0016BA  1  A9 02                LDA     #$02            ; 2 bytes
0016BC  1  20 AE 09             JSR     LAB_1212        ; check room on stack for A bytes
0016BF  1  20 9D 17             JSR     LAB_GVAL        ; get value from line
0016C2  1  A9 00                LDA     #$00            ; clear A
0016C4  1  85 9B                STA     comp_f          ; clear compare function flag
0016C6  1               LAB_1ADB:
0016C6  1                       .IFDEF  DUODYNE
0016C6  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0016CA  1                       .ELSE
0016CA  1                       JSR     LAB_GBYT        ; scan memory
0016CA  1                       .ENDIF
0016CA  1               
0016CA  1               LAB_1ADE:
0016CA  1  38                   SEC                     ; set carry for subtract
0016CB  1  E9 C1                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
0016CD  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
0016CF  1               
0016CF  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
0016D1  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
0016D3  1               
0016D3  1               ; was token for > = or < (A = 0, 1 or 2)
0016D3  1  C9 01                CMP     #$01            ; compare with token for =
0016D5  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
0016D6  1               ; (A = 0, 3 or 5)
0016D6  1  49 01                EOR     #$01            ; toggle b0
0016D8  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
0016D8  1  45 9B                EOR     comp_f          ; EOR with compare function flag bits
0016DA  1  C5 9B                CMP     comp_f          ; compare with compare function flag
0016DC  1  90 68                BCC     LAB_1B53        ; if <(comp_f) do syntax error then warm start
0016DE  1               ; was more than one <, = or >)
0016DE  1               
0016DE  1  85 9B                STA     comp_f          ; save new compare function flag
0016E0  1                       .IFDEF  DUODYNE
0016E0  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0016E4  1                       .ELSE
0016E4  1                       JSR     LAB_IGBY        ; increment and scan memory
0016E4  1                       .ENDIF
0016E4  1               
0016E4  1  4C CA 16             JMP     LAB_1ADE        ; go do next character
0016E7  1               
0016E7  1               ; token is < ">" or > "<" tokens
0016E7  1               LAB_1AFA:
0016E7  1  A6 9B                LDX     comp_f          ; get compare function flag
0016E9  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
0016EB  1               
0016EB  1  B0 79                BCS     LAB_1B78        ; go do functions
0016ED  1               
0016ED  1               ; else was <  TK_GT so is operator or lower
0016ED  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
0016EF  1  90 75                BCC     LAB_1B78        ; branch if < + operator
0016F1  1               
0016F1  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
0016F1  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
0016F3  1               
0016F3  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
0016F5  1  10 03                BPL     LAB_1B0B        ; branch if not string
0016F7  1               
0016F7  1               ; will only be $00 if type is string and token was +
0016F7  1  4C B7 22             JMP     LAB_224D        ; add strings, string 1 is in descriptor des_pl, string 2
0016FA  1               ; is in line, and return
0016FA  1               
0016FA  1               LAB_1B0B:
0016FA  1  85 71                STA     ut1_pl          ; save it
0016FC  1  0A                   ASL     A               ; *2
0016FD  1  65 71                ADC     ut1_pl          ; *3
0016FF  1  A8                   TAY                     ; copy to index
001700  1               LAB_1B13:
001700  1  68                   PLA                     ; pull previous precedence
001701  1  D9 2F 37             CMP     LAB_OPPT,Y      ; compare with precedence byte
001704  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
001706  1               
001706  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001709  1               LAB_1B1C:
001709  1  48                   PHA                     ; save precedence
00170A  1               LAB_1B1D:
00170A  1  20 32 17             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
00170D  1  68                   PLA                     ; restore precedence
00170E  1  A4 99                LDY     prstk           ; get precedence stacked flag
001710  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
001712  1               
001712  1  AA                   TAX                     ; copy precedence (set flags)
001713  1  F0 76                BEQ     LAB_1B9D        ; exit if done
001715  1               
001715  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
001717  1               
001717  1               LAB_1B2A:
001717  1  26 5F                ROL     Dtypef          ; shift data type flag into Cb
001719  1  8A                   TXA                     ; copy compare function flag
00171A  1  85 5F                STA     Dtypef          ; clear data type flag, X is 0xxx xxxx
00171C  1  2A                   ROL     A               ; shift data type into compare function byte b0
00171D  1  A6 C3                LDX     Bpntrl          ; get BASIC execute pointer low byte
00171F  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
001721  1               
001721  1  C6 C4                DEC     Bpntrh          ; else decrement BASIC execute pointer high byte
001723  1               LAB_1B34:
001723  1  C6 C3                DEC     Bpntrl          ; decrement BASIC execute pointer low byte
001725  1               TK_LT_PLUS      = TK_LT-TK_PLUS
001725  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
001727  1  85 9B                STA     comp_f          ; save new compare function flag
001729  1  D0 D5                BNE     LAB_1B13        ; branch always
00172B  1               
00172B  1               LAB_1B3C:
00172B  1  D9 2F 37             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
00172E  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
001730  1               
001730  1  90 D7                BCC     LAB_1B1C        ; branch always
001732  1               
001732  1               ;.get vector, execute function then continue evaluation
001732  1               
001732  1               LAB_1B43:
001732  1  B9 31 37             LDA     LAB_OPPT+2,Y    ; get function vector high byte
001735  1  48                   PHA                     ; onto stack
001736  1  B9 30 37             LDA     LAB_OPPT+1,Y    ; get function vector low byte
001739  1  48                   PHA                     ; onto stack
00173A  1               ; now push sign, round FAC1 and put on stack
00173A  1  20 49 17             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
00173D  1               ; the function
00173D  1  A5 9B                LDA     comp_f          ; get compare function flag
00173F  1  48                   PHA                     ; push compare evaluation byte
001740  1  B9 2F 37             LDA     LAB_OPPT,Y      ; get precedence byte
001743  1  4C B9 16             JMP     LAB_1ACC        ; continue evaluating expression
001746  1               
001746  1               LAB_1B53:
001746  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
001749  1               
001749  1               ; push sign, round FAC1 and put on stack
001749  1               
001749  1               LAB_1B5B:
001749  1  68                   PLA                     ; get return addr low byte
00174A  1  85 71                STA     ut1_pl          ; save it
00174C  1  E6 71                INC     ut1_pl          ; increment it (was ret-1 pushed? yes!)
00174E  1               ; note! no check is made on the high byte! if the calling
00174E  1               ; routine assembles to a page edge then this all goes
00174E  1               ; horribly wrong !!!
00174E  1  68                   PLA                     ; get return addr high byte
00174F  1  85 72                STA     ut1_ph          ; save it
001751  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
001753  1  48                   PHA                     ; push sign
001754  1               
001754  1               ; round FAC1 and put on stack
001754  1               
001754  1               LAB_1B66:
001754  1  20 29 2C             JSR     LAB_27BA        ; round FAC1
001757  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
001759  1  48                   PHA                     ; push on stack
00175A  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00175C  1  48                   PHA                     ; push on stack
00175D  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
00175F  1  48                   PHA                     ; push on stack
001760  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
001762  1  48                   PHA                     ; push on stack
001763  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
001766  1               
001766  1               
001766  1               ; do functions
001766  1               
001766  1               LAB_1B78:
001766  1  A0 FF                LDY     #$FF            ; flag function
001768  1  68                   PLA                     ; pull precedence byte
001769  1               LAB_1B7B:
001769  1  F0 20                BEQ     LAB_1B9D        ; exit if done
00176B  1               
00176B  1               LAB_1B7D:
00176B  1  C9 64                CMP     #$64            ; compare previous precedence with $64
00176D  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
00176F  1               
00176F  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001772  1               LAB_1B84:
001772  1  84 99                STY     prstk           ; save precedence stacked flag
001774  1               
001774  1               ; pop FAC2 and return
001774  1               LAB_1B86:
001774  1  68                   PLA                     ; pop byte
001775  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
001776  1  85 63                STA     Cflag           ; save comparison evaluation flag
001778  1  68                   PLA                     ; pop exponent
001779  1  85 B3                STA     FAC2_e          ; save FAC2 exponent
00177B  1  68                   PLA                     ; pop mantissa1
00177C  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
00177E  1  68                   PLA                     ; pop mantissa2
00177F  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
001781  1  68                   PLA                     ; pop mantissa3
001782  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
001784  1  68                   PLA                     ; pop sign
001785  1  85 B7                STA     FAC2_s          ; save FAC2 sign (b7)
001787  1  45 B0                EOR     FAC1_s          ; EOR FAC1 sign (b7)
001789  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
00178B  1               LAB_1B9D:
00178B  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
00178D  1  60                   RTS
00178E  1               
00178E  1               ; print "..." string to string util area
00178E  1               
00178E  1               LAB_1BC1:
00178E  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001790  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
001792  1  69 00                ADC     #$00            ; add carry to low byte
001794  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
001796  1               
001796  1  C8                   INY                     ; increment high byte
001797  1               LAB_1BCA:
001797  1  20 31 20             JSR     LAB_20AE        ; print " terminated string to Sutill/Sutilh
00179A  1  4C BB 26             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
00179D  1               
00179D  1               ; get value from line
00179D  1               
00179D  1               LAB_GVAL:
00179D  1                       .IFDEF  DUODYNE
00179D  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0017A1  1                       .ELSE
0017A1  1                       JSR     LAB_IGBY        ; increment and scan memory
0017A1  1                       .ENDIF
0017A1  1               
0017A1  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
0017A3  1               
0017A3  1               ; else numeric string found (e.g. 123)
0017A3  1               LAB_1BA9:
0017A3  1  4C 5A 2D             JMP     LAB_2887        ; get FAC1 from string and return
0017A6  1               
0017A6  1               ; get value from line .. continued
0017A6  1               
0017A6  1               ; wasn't a number so ..
0017A6  1               LAB_1BAC:
0017A6  1  AA                   TAX                     ; set the flags
0017A7  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
0017A9  1               
0017A9  1               ; else it is either a string, number, variable or (<expr>)
0017A9  1  C9 24                CMP     #'$'            ; compare with "$"
0017AB  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
0017AD  1               
0017AD  1  C9 25                CMP     #'%'            ; else compare with "%"
0017AF  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
0017B1  1               
0017B1  1  C9 2E                CMP     #'.'            ; compare with "."
0017B3  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
0017B5  1               
0017B5  1               ; it wasn't any sort of number so ..
0017B5  1  C9 22                CMP     #$22            ; compare with "
0017B7  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
0017B9  1               
0017B9  1               ; wasn't any sort of number so ..
0017B9  1               
0017B9  1               ; evaluate expression within parentheses
0017B9  1               
0017B9  1  C9 28                CMP     #'('            ; compare with "("
0017BB  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
0017BD  1               
0017BD  1               LAB_1BF7:
0017BD  1  20 B7 16             JSR     LAB_EVEZ        ; evaluate expression, no decrement
0017C0  1               
0017C0  1               ; all the 'scan for' routines return the character after the sought character
0017C0  1               
0017C0  1               ; scan for ")" , else do syntax error then warm start
0017C0  1               
0017C0  1               LAB_1BFB:
0017C0  1  A9 29                LDA     #$29            ; load A with ")"
0017C2  1               
0017C2  1               ; scan for CHR$(A) , else do syntax error then warm start
0017C2  1               
0017C2  1               LAB_SCCA:
0017C2  1  A0 00                LDY     #$00            ; clear index
0017C4  1  D1 C3                CMP     (Bpntrl),Y      ; check next byte is = A
0017C6  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
0017C8  1                       .IFDEF  DUODYNE
0017C8  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0017CC  1                       .ELSE
0017CC  1                       JSR     LAB_IGBY        ; increment and scan memory
0017CC  1                       .ENDIF
0017CC  1  60                   RTS
0017CD  1               ; scan for "(" , else do syntax error then warm start
0017CD  1               
0017CD  1               LAB_1BFE:
0017CD  1  A9 28                LDA     #$28            ; load A with "("
0017CF  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0017D1  1               ; (branch always)
0017D1  1               
0017D1  1               ; scan for "," , else do syntax error then warm start
0017D1  1               
0017D1  1               LAB_1C01:
0017D1  1  A9 2C                LDA     #$2C            ; load A with ","
0017D3  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0017D5  1               ; (branch always)
0017D5  1               
0017D5  1               ; syntax error then warm start
0017D5  1               
0017D5  1               LAB_SNER:
0017D5  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
0017D7  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
0017DA  1               
0017DA  1               ; get value from line .. continued
0017DA  1               ; do tokens
0017DA  1               
0017DA  1               LAB_1BD0:
0017DA  1  C9 B8                CMP     #TK_MINUS       ; compare with token for -
0017DC  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
0017DE  1               
0017DE  1               ; wasn't -n so ..
0017DE  1  C9 B7                CMP     #TK_PLUS        ; compare with token for +
0017E0  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
0017E2  1               
0017E2  1  C9 B2                CMP     #TK_NOT         ; compare with token for NOT
0017E4  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
0017E6  1               
0017E6  1               ; was NOT token
0017E6  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
0017E6  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
0017E8  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
0017EA  1               
0017EA  1               ; do = compare
0017EA  1               
0017EA  1               LAB_EQUAL:
0017EA  1  20 54 1B             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0017ED  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0017EF  1  49 FF                EOR     #$FF            ; invert it
0017F1  1  A8                   TAY                     ; copy it
0017F2  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0017F4  1  49 FF                EOR     #$FF            ; invert it
0017F6  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0017F9  1               
0017F9  1               ; get value from line .. continued
0017F9  1               
0017F9  1               ; wasn't +, -, or NOT so ..
0017F9  1               LAB_1BE7:
0017F9  1  C9 AF                CMP     #TK_FN          ; compare with token for FN
0017FB  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
0017FD  1               
0017FD  1  4C EC 1E             JMP     LAB_201E        ; go evaluate FNx
001800  1               
001800  1               ; get value from line .. continued
001800  1               
001800  1               ; wasn't +, -, NOT or FN so ..
001800  1               LAB_1BEE:
001800  1  E9 C4                SBC     #TK_SGN         ; subtract with token for SGN
001802  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
001804  1               
001804  1  4C D5 17             JMP     LAB_SNER        ; else do syntax error
001807  1               
001807  1               ; set-up for functions
001807  1               
001807  1               LAB_1C11:
001807  1               TK_GT_PLUS      = TK_GT-TK_PLUS
001807  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
001809  1               LAB_1C13:
001809  1  68                   PLA                     ; dump return address low byte
00180A  1  68                   PLA                     ; dump return address high byte
00180B  1  4C 0A 17             JMP     LAB_1B1D        ; execute function then continue evaluation
00180E  1               
00180E  1               ; variable name set-up
00180E  1               ; get (var), return value in FAC_1 and $ flag
00180E  1               
00180E  1               LAB_1C18:
00180E  1  20 AC 19             JSR     LAB_GVAR        ; get (var) address
001811  1  85 AE                STA     FAC1_2          ; save address low byte in FAC1 mantissa2
001813  1  84 AF                STY     FAC1_3          ; save address high byte in FAC1 mantissa3
001815  1  A6 5F                LDX     Dtypef          ; get data type flag, $FF=string, $00=numeric
001817  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
001819  1               
001819  1               LAB_1C24:
001819  1  4C 2D 2B             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
00181C  1               
00181C  1               LAB_1C25:
00181C  1  60                   RTS
00181D  1               
00181D  1               ; get value from line .. continued
00181D  1               ; only functions left so ..
00181D  1               
00181D  1               ; set up function references
00181D  1               
00181D  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
00181D  1               ; to process function calls. now the function vector is computed and pushed on the stack
00181D  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
00181D  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
00181D  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
00181D  1               ; the function code
00181D  1               
00181D  1               ; this also removes some less than elegant code that was used to bypass type checking
00181D  1               ; for functions that returned strings
00181D  1               
00181D  1               LAB_1C27:
00181D  1  0A                   ASL     A               ; *2 (2 bytes per function address)
00181E  1  A8                   TAY                     ; copy to index
00181F  1               
00181F  1  B9 EA 36             LDA     LAB_FTBM,Y      ; get function jump vector high byte
001822  1  48                   PHA                     ; push functions jump vector high byte
001823  1  B9 E9 36             LDA     LAB_FTBL,Y      ; get function jump vector low byte
001826  1  48                   PHA                     ; push functions jump vector low byte
001827  1               
001827  1  B9 A4 36             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
00182A  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
00182C  1               
00182C  1  48                   PHA                     ; push functions pre process vector high byte
00182D  1  B9 A3 36             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
001830  1  48                   PHA                     ; push functions pre process vector low byte
001831  1               
001831  1               LAB_1C56:
001831  1  60                   RTS                     ; do function, or pre process, call
001832  1               
001832  1               ; process string expression in parenthesis
001832  1               
001832  1               LAB_PPFS:
001832  1  20 BD 17             JSR     LAB_1BF7        ; process expression in parenthesis
001835  1  4C A0 16             JMP     LAB_CTST        ; check if source is string then do function,
001838  1               ; else do type mismatch
001838  1               
001838  1               ; process numeric expression in parenthesis
001838  1               
001838  1               LAB_PPFN:
001838  1  20 BD 17             JSR     LAB_1BF7        ; process expression in parenthesis
00183B  1  4C 9E 16             JMP     LAB_CTNM        ; check if source is numeric then do function,
00183E  1               ; else do type mismatch
00183E  1               
00183E  1               ; set numeric data type and increment BASIC execute pointer
00183E  1               
00183E  1               LAB_PPBI:
00183E  1  46 5F                LSR     Dtypef          ; clear data type flag, $FF=string, $00=numeric
001840  1                       .IFDEF  DUODYNE
001840  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001844  1                       .ELSE
001844  1                       JSR     LAB_IGBY        ; increment and scan memory
001844  1                       .ENDIF
001844  1  60                   RTS
001845  1               
001845  1               ; process string for LEFT$, RIGHT$ or MID$
001845  1               
001845  1               LAB_LRMS:
001845  1  20 B7 16             JSR     LAB_EVEZ        ; evaluate (should be string) expression
001848  1  20 D1 17             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00184B  1  20 A0 16             JSR     LAB_CTST        ; check if source is string, else do type mismatch
00184E  1               
00184E  1  68                   PLA                     ; get function jump vector low byte
00184F  1  AA                   TAX                     ; save functions jump vector low byte
001850  1  68                   PLA                     ; get function jump vector high byte
001851  1  A8                   TAY                     ; save functions jump vector high byte
001852  1  A5 AF                LDA     des_ph          ; get descriptor pointer high byte
001854  1  48                   PHA                     ; push string pointer high byte
001855  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
001857  1  48                   PHA                     ; push string pointer low byte
001858  1  98                   TYA                     ; get function jump vector high byte back
001859  1  48                   PHA                     ; save functions jump vector high byte
00185A  1  8A                   TXA                     ; get function jump vector low byte back
00185B  1  48                   PHA                     ; save functions jump vector low byte
00185C  1  20 39 26             JSR     LAB_GTBY        ; get byte parameter
00185F  1  8A                   TXA                     ; copy byte parameter to A
001860  1  60                   RTS                     ; go do function
001861  1               
001861  1               ; process numeric expression(s) for BIN$ or HEX$
001861  1               
001861  1               LAB_BHSS:
001861  1  20 B7 16             JSR     LAB_EVEZ        ; process expression
001864  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001867  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
001869  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
00186B  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
00186D  1               
00186D  1  20 04 2D             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
001870  1  A2 02                LDX     #$02            ; 3 bytes to do
001872  1               LAB_CFAC:
001872  1  B5 AD                LDA     FAC1_1,X        ; get byte from FAC1
001874  1  95 11                STA     nums_1,X        ; save byte to temp
001876  1  CA                   DEX                     ; decrement index
001877  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
001879  1               
001879  1                       .IFDEF  DUODYNE
001879  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00187D  1                       .ELSE
00187D  1                       JSR     LAB_GBYT        ; scan memory
00187D  1                       .ENDIF
00187D  1               
00187D  1  A2 00                LDX     #$00            ; set default to no leading "0"s
00187F  1  C9 29                CMP     #')'            ; compare with close bracket
001881  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
001883  1               
001883  1  20 CA 26             JSR     LAB_SCGB        ; scan for "," and get byte
001886  1                       .IFDEF  DUODYNE
001886  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00188A  1                       .ELSE
00188A  1                       JSR     LAB_GBYT        ; scan memory
00188A  1                       .ENDIF
00188A  1               
00188A  1  C9 29                CMP     #')'            ; is next character )
00188C  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
00188E  1               
00188E  1               LAB_1C54:
00188E  1  60                   RTS                     ; else do function
00188F  1               
00188F  1               LAB_BHER:
00188F  1  4C 30 1C             JMP     LAB_FCER        ; do function call error then warm start
001892  1               
001892  1               ; perform EOR
001892  1               
001892  1               ; added operator format is the same as AND or OR, precedence is the same as OR
001892  1               
001892  1               ; this bit worked first time but it took a while to sort out the operator table
001892  1               ; pointers and offsets afterwards!
001892  1               
001892  1               LAB_EOR:
001892  1  20 B9 18             JSR     GetFirst        ; get first integer expression (no sign check)
001895  1  45 5B                EOR     XOAw_l          ; EOR with expression 1 low byte
001897  1  A8                   TAY                     ; save in Y
001898  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00189A  1  45 5C                EOR     XOAw_h          ; EOR with expression 1 high byte
00189C  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00189F  1               
00189F  1               ; perform OR
00189F  1               
00189F  1               LAB_OR:
00189F  1  20 B9 18             JSR     GetFirst        ; get first integer expression (no sign check)
0018A2  1  05 5B                ORA     XOAw_l          ; OR with expression 1 low byte
0018A4  1  A8                   TAY                     ; save in Y
0018A5  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0018A7  1  05 5C                ORA     XOAw_h          ; OR with expression 1 high byte
0018A9  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0018AC  1               
0018AC  1               ; perform AND
0018AC  1               
0018AC  1               LAB_AND:
0018AC  1  20 B9 18             JSR     GetFirst        ; get first integer expression (no sign check)
0018AF  1  25 5B                AND     XOAw_l          ; AND with expression 1 low byte
0018B1  1  A8                   TAY                     ; save in Y
0018B2  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0018B4  1  25 5C                AND     XOAw_h          ; AND with expression 1 high byte
0018B6  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0018B9  1               
0018B9  1               ; get first value for OR, AND or EOR
0018B9  1               
0018B9  1               GetFirst:
0018B9  1  20 54 1B             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0018BC  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0018BE  1  85 5C                STA     XOAw_h          ; save it
0018C0  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0018C2  1  85 5B                STA     XOAw_l          ; save it
0018C4  1  20 1D 28             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0018C7  1  20 54 1B             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0018CA  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0018CC  1               LAB_1C95:
0018CC  1  60                   RTS
0018CD  1               
0018CD  1               ; perform comparisons
0018CD  1               
0018CD  1               ; do < compare
0018CD  1               
0018CD  1               LAB_LTHAN:
0018CD  1  20 A1 16             JSR     LAB_CKTM        ; type match check, set C for string
0018D0  1  B0 13                BCS     LAB_1CAE        ; branch if string
0018D2  1               
0018D2  1               ; do numeric < compare
0018D2  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
0018D4  1  09 7F                ORA     #$7F            ; set all non sign bits
0018D6  1  25 B4                AND     FAC2_1          ; and FAC2 mantissa1 (AND in sign bit)
0018D8  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
0018DA  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
0018DC  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
0018DE  1  20 67 2C             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
0018E1  1  AA                   TAX                     ; copy result
0018E2  1  4C 16 19             JMP     LAB_1CE1        ; go evaluate result
0018E5  1               
0018E5  1               ; do string < compare
0018E5  1               LAB_1CAE:
0018E5  1  46 5F                LSR     Dtypef          ; clear data type flag, $FF=string, $00=numeric
0018E7  1  C6 9B                DEC     comp_f          ; clear < bit in compare function flag
0018E9  1  20 B0 23             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
0018EC  1               ; space returns with A = length, X=pointer low byte,
0018EC  1               ; Y=pointer high byte
0018EC  1  85 AC                STA     str_ln          ; save length
0018EE  1  86 AD                STX     str_pl          ; save string pointer low byte
0018F0  1  84 AE                STY     str_ph          ; save string pointer high byte
0018F2  1  A5 B5                LDA     FAC2_2          ; get descriptor pointer low byte
0018F4  1  A4 B6                LDY     FAC2_3          ; get descriptor pointer high byte
0018F6  1  20 B4 23             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0018F9  1               ; returns with A = length, X=pointer low byte,
0018F9  1               ; Y=pointer high byte
0018F9  1  86 B5                STX     FAC2_2          ; save string pointer low byte
0018FB  1  84 B6                STY     FAC2_3          ; save string pointer high byte
0018FD  1  AA                   TAX                     ; copy length
0018FE  1  38                   SEC                     ; set carry for subtract
0018FF  1  E5 AC                SBC     str_ln          ; subtract string 1 length
001901  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
001903  1               
001903  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
001905  1  90 04                BCC     LAB_1CD6        ; branch if so
001907  1               
001907  1  A6 AC                LDX     str_ln          ; get string 1 length
001909  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
00190B  1               LAB_1CD6:
00190B  1  85 B0                STA     FAC1_s          ; save length compare
00190D  1  A0 FF                LDY     #$FF            ; set index
00190F  1  E8                   INX                     ; adjust for loop
001910  1               LAB_1CDB:
001910  1  C8                   INY                     ; increment index
001911  1  CA                   DEX                     ; decrement count
001912  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
001914  1               
001914  1  A6 B0                LDX     FAC1_s          ; get length compare back
001916  1               LAB_1CE1:
001916  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
001918  1               
001918  1  18                   CLC                     ; flag str 1 <= str 2
001919  1  90 36                BCC     LAB_1CF2        ; go evaluate result
00191B  1               
00191B  1               LAB_1CE6:
00191B  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
00191F  1  B5 B5 C9 00  
001923  1  D0 04 A2 00  
001931  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
001935  1  01 B5 AD C9  
001939  1  00 D0 04 A2  
001949  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
00194B  1               
00194B  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
00194D  1  B0 02                BCS     LAB_1CF2        ; branch if so
00194F  1               
00194F  1  A2 01                LDX     #$01            ;  set str 1 > string 2
001951  1               LAB_1CF2:
001951  1  E8                   INX                     ; x = 0, 1 or 2
001952  1  8A                   TXA                     ; copy to A
001953  1  2A                   ROL     A               ; *2 (1, 2 or 4)
001954  1  25 63                AND     Cflag           ; AND with comparison evaluation flag
001956  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
001958  1               
001958  1  A9 FF                LDA     #$FF            ; else set result true
00195A  1               LAB_1CFB:
00195A  1  4C 4A 2C             JMP     LAB_27DB        ; save A as integer byte and return
00195D  1               
00195D  1               LAB_1CFE:
00195D  1  20 D1 17             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
001960  1               
001960  1               ; perform DIM
001960  1               
001960  1               LAB_DIM:
001960  1  AA                   TAX                     ; copy "DIM" flag to X
001961  1  20 B2 19             JSR     LAB_1D10        ; search for variable
001964  1                       .IFDEF  DUODYNE
001964  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001968  1                       .ELSE
001968  1                       JSR     LAB_GBYT        ; scan memory
001968  1                       .ENDIF
001968  1               
001968  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
00196A  1               
00196A  1  60                   RTS
00196B  1               
00196B  1               ; perform << (left shift)
00196B  1               
00196B  1               LAB_LSHIFT:
00196B  1  20 A1 19             JSR     GetPair         ; get integer expression and byte (no sign check)
00196E  1  A5 AE                LDA     FAC1_2          ; get expression high byte
001970  1  A6 78                LDX     TempB           ; get shift count
001972  1  F0 22                BEQ     NoShift         ; branch if zero
001974  1               
001974  1  E0 10                CPX     #$10            ; compare bit count with 16d
001976  1  B0 23                BCS     TooBig          ; branch if >=
001978  1               
001978  1               Ls_loop:
001978  1  06 AF                ASL     FAC1_3          ; shift low byte
00197A  1  2A                   ROL     A               ; shift high byte
00197B  1  CA                   DEX                     ; decrement bit count
00197C  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
00197E  1               
00197E  1  A4 AF                LDY     FAC1_3          ; get expression low byte
001980  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
001983  1               
001983  1               ; perform >> (right shift)
001983  1               
001983  1               LAB_RSHIFT:
001983  1  20 A1 19             JSR     GetPair         ; get integer expression and byte (no sign check)
001986  1  A5 AE                LDA     FAC1_2          ; get expression high byte
001988  1  A6 78                LDX     TempB           ; get shift count
00198A  1  F0 0A                BEQ     NoShift         ; branch if zero
00198C  1               
00198C  1  E0 10                CPX     #$10            ; compare bit count with 16d
00198E  1  B0 0B                BCS     TooBig          ; branch if >=
001990  1               
001990  1               Rs_loop:
001990  1  4A                   LSR     A               ; shift high byte
001991  1  66 AF                ROR     FAC1_3          ; shift low byte
001993  1  CA                   DEX                     ; decrement bit count
001994  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
001996  1               
001996  1               NoShift:
001996  1  A4 AF                LDY     FAC1_3          ; get expression low byte
001998  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00199B  1               
00199B  1               TooBig:
00199B  1  A9 00                LDA     #$00            ; clear high byte
00199D  1  A8                   TAY                     ; copy to low byte
00199E  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0019A1  1               
0019A1  1               GetPair:
0019A1  1  20 3C 26             JSR     LAB_EVBY        ; evaluate byte expression, result in X
0019A4  1  86 78                STX     TempB           ; save it
0019A6  1  20 1D 28             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0019A9  1  4C 54 1B             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
0019AC  1               
0019AC  1               ; search for variable
0019AC  1               
0019AC  1               ; return pointer to variable in Cvaral/Cvarah
0019AC  1               
0019AC  1               LAB_GVAR:
0019AC  1  A2 00                LDX     #$00            ; set DIM flag = $00
0019AE  1                       .IFDEF  DUODYNE
0019AE  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0019B2  1                       .ELSE
0019B2  1                       JSR     LAB_GBYT        ; scan memory
0019B2  1                       .ENDIF
0019B2  1               
0019B2  1               LAB_1D10:
0019B2  1  86 5E                STX     Defdim          ; save DIM flag
0019B4  1               LAB_1D12:
0019B4  1  85 93                STA     Varnm1          ; save 1st character
0019B6  1  29 7F                AND     #$7F            ; clear FN flag bit
0019B8  1  20 53 1A             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0019BB  1  B0 03                BCS     LAB_1D1F        ; branch if ok
0019BD  1               
0019BD  1  4C D5 17             JMP     LAB_SNER        ; else syntax error then warm start
0019C0  1               
0019C0  1               ; was variable name so ..
0019C0  1               LAB_1D1F:
0019C0  1  A2 00                LDX     #$00            ; clear 2nd character temp
0019C2  1  86 5F                STX     Dtypef          ; clear data type flag, $FF=string, $00=numeric
0019C4  1                       .IFDEF  DUODYNE
0019C4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0019C8  1                       .ELSE
0019C8  1                       JSR     LAB_IGBY        ; increment and scan memory
0019C8  1                       .ENDIF
0019C8  1               
0019C8  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
0019CA  1               
0019CA  1               ; 2nd character wasn't "0" to "9" so ..
0019CA  1  20 53 1A             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0019CD  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
0019CF  1               
0019CF  1               LAB_1D2D:
0019CF  1  AA                   TAX                     ; copy 2nd character
0019D0  1               
0019D0  1               ; ignore further (valid) characters in the variable name
0019D0  1               LAB_1D2E:
0019D0  1                       .IFDEF  DUODYNE
0019D0  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0019D4  1                       .ELSE
0019D4  1                       JSR     LAB_IGBY        ; increment and scan memory
0019D4  1                       .ENDIF
0019D4  1               
0019D4  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
0019D6  1               
0019D6  1  20 53 1A             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0019D9  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
0019DB  1               
0019DB  1               ; check if string variable
0019DB  1               LAB_1D38:
0019DB  1  C9 24                CMP     #'$'            ; compare with "$"
0019DD  1  D0 0C                BNE     LAB_1D47        ; branch if not string
0019DF  1               
0019DF  1               ; to introduce a new variable type (% suffix for integers say) then this branch
0019DF  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
0019DF  1               
0019DF  1               ; type is string
0019DF  1  A9 FF                LDA     #$FF            ; set data type = string
0019E1  1  85 5F                STA     Dtypef          ; set data type flag, $FF=string, $00=numeric
0019E3  1  8A                   TXA                     ; get 2nd character back
0019E4  1  09 80                ORA     #$80            ; set top bit (indicate string var)
0019E6  1  AA                   TAX                     ; copy back to 2nd character temp
0019E7  1                       .IFDEF  DUODYNE
0019E7  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0019EB  1                       .ELSE
0019EB  1                       JSR     LAB_IGBY        ; increment and scan memory
0019EB  1                       .ENDIF
0019EB  1               
0019EB  1               
0019EB  1               ; after we have determined the variable type we need to come back here to determine
0019EB  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
0019EB  1               
0019EB  1               
0019EB  1               LAB_1D47:                       ; gets here with character after var name in A
0019EB  1  86 94                STX     Varnm2          ; save 2nd character
0019ED  1  05 61                ORA     Sufnxf          ; or with subscript/FNX flag (or FN name)
0019EF  1  C9 28                CMP     #'('            ; compare with "("
0019F1  1  D0 03                BNE     LAB_1D53        ; branch if not "("
0019F3  1               
0019F3  1  4C 69 1B             JMP     LAB_1E17        ; go find, or make, array
0019F6  1               
0019F6  1               ; either find or create var
0019F6  1               ; var name (1st two characters only!) is in Varnm1,Varnm2
0019F6  1               
0019F6  1               ; variable name wasn't var(... so look for plain var
0019F6  1               LAB_1D53:
0019F6  1  A9 00                LDA     #$00            ; clear A
0019F8  1  85 61                STA     Sufnxf          ; clear subscript/FNX flag
0019FA  1  A5 7B                LDA     Svarl           ; get start of vars low byte
0019FC  1  A6 7C                LDX     Svarh           ; get start of vars high byte
0019FE  1  A0 00                LDY     #$00            ; clear index
001A00  1               LAB_1D5D:
001A00  1  86 AB                STX     Vrschh          ; save search address high byte
001A02  1               LAB_1D5F:
001A02  1  85 AA                STA     Vrschl          ; save search address low byte
001A04  1  E4 7E                CPX     Sarryh          ; compare high address with var space end
001A06  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
001A08  1               
001A08  1               ; high addresses were = so compare low addresses
001A08  1  C5 7D                CMP     Sarryl          ; compare low address with var space end
001A0A  1  F0 5B                BEQ     LAB_1D8B        ; if not found go make new var
001A0C  1               
001A0C  1               LAB_1D69:
001A0C  1  A5 93                LDA     Varnm1          ; get 1st character of var to find
001A0E  1  8B 48 DA A2          CMPINDIRECTY Vrschl     ; compare with variable name 1st character
001A12  1  01 B5 AA C9  
001A16  1  00 D0 04 A2  
001A26  1  D0 21                BNE     LAB_1D77        ; branch if no match
001A28  1               
001A28  1               ; 1st characters match so compare 2nd characters
001A28  1  A5 94                LDA     Varnm2          ; get 2nd character of var to find
001A2A  1  C8                   INY                     ; index to point to variable name 2nd character
001A2B  1  8B 48 DA A2          CMPINDIRECTY Vrschl     ; compare with variable name 2nd character
001A2F  1  01 B5 AA C9  
001A33  1  00 D0 04 A2  
001A43  1  D0 03 4C 29          LBEQ    LAB_1DD7        ; branch if match (found var)
001A47  1  1B           
001A48  1               
001A48  1  88                   DEY                     ; else decrement index (now = $00)
001A49  1               LAB_1D77:
001A49  1  18                   CLC                     ; clear carry for add
001A4A  1  A5 AA                LDA     Vrschl          ; get search address low byte
001A4C  1  69 06                ADC     #$06            ; +6 (offset to next var name)
001A4E  1  90 B2                BCC     LAB_1D5F        ; loop if no overflow to high byte
001A50  1               
001A50  1  E8                   INX                     ; else increment high byte
001A51  1  D0 AD                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
001A53  1               
001A53  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
001A53  1               
001A53  1               LAB_CASC:
001A53  1  C9 61                CMP     #'a'            ; compare with "a"
001A55  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
001A57  1               
001A57  1               ; check byte, return C=0 if<"A" or >"Z"
001A57  1               
001A57  1               LAB_1D82:
001A57  1  C9 41                CMP     #'A'            ; compare with "A"
001A59  1  90 05                BCC     LAB_1D8A        ; exit if less
001A5B  1               
001A5B  1               ; carry is set
001A5B  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
001A5D  1  38                   SEC                     ; set carry
001A5E  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
001A60  1               ; carry clear if byte>$5A
001A60  1               LAB_1D8A:
001A60  1  60                   RTS
001A61  1               
001A61  1               LAB_1D83:
001A61  1  E9 7B                SBC     #$7B            ; subtract "z"+1
001A63  1  38                   SEC                     ; set carry
001A64  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
001A66  1               ; carry clear if byte>$7A
001A66  1  60                   RTS
001A67  1               
001A67  1               ; reached end of variable mem without match
001A67  1               ; .. so create new variable
001A67  1               LAB_1D8B:
001A67  1  68                   PLA                     ; pop return address low byte
001A68  1  48                   PHA                     ; push return address low byte
001A69  1               LAB_1C18p2      = LAB_1C18+2
001A69  1  C9 10                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
001A6B  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
001A6D  1               
001A6D  1               ; This will only drop through if the call was from LAB_1C18 and is only called
001A6D  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
001A6D  1               ; it prevents the creation of variables not assigned a value.
001A6D  1               
001A6D  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
001A6D  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
001A6D  1               
001A6D  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
001A6D  1               
001A6D  1               ; this is where you would put the undefined variable error call e.g.
001A6D  1               
001A6D  1               ;					; variable doesn't exist so flag error
001A6D  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
001A6D  1               ;	JMP	LAB_XERR		; do error #X then warm start
001A6D  1               
001A6D  1               ; the above code has been tested and works a treat! (it replaces the three code lines
001A6D  1               ; below)
001A6D  1               
001A6D  1               ; else return dummy null value
001A6D  1  A9 25                LDA     #<LAB_1D96      ; low byte point to $00,$00
001A6F  1               ; (uses part of misc constants table)
001A6F  1  A0 36                LDY     #>LAB_1D96      ; high byte point to $00,$00
001A71  1  60                   RTS
001A72  1               
001A72  1               ; create new numeric variable
001A72  1               LAB_1D98:
001A72  1  A5 7D                LDA     Sarryl          ; get var mem end low byte
001A74  1  A4 7E                LDY     Sarryh          ; get var mem end high byte
001A76  1  85 AA                STA     Ostrtl          ; save old block start low byte
001A78  1  84 AB                STY     Ostrth          ; save old block start high byte
001A7A  1  A5 7F                LDA     Earryl          ; get array mem end low byte
001A7C  1  A4 80                LDY     Earryh          ; get array mem end high byte
001A7E  1  85 A6                STA     Obendl          ; save old block end low byte
001A80  1  84 A7                STY     Obendh          ; save old block end high byte
001A82  1  18                   CLC                     ; clear carry for add
001A83  1  69 06                ADC     #$06            ; +6 (space for one var)
001A85  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
001A87  1               
001A87  1  C8                   INY                     ; else increment high byte
001A88  1               LAB_1DAE:
001A88  1  85 A4                STA     Nbendl          ; set new block end low byte
001A8A  1  84 A5                STY     Nbendh          ; set new block end high byte
001A8C  1  20 1C 09             JSR     LAB_11CF        ; open up space in memory
001A8F  1  A5 A4                LDA     Nbendl          ; get new start low byte
001A91  1  A4 A5                LDY     Nbendh          ; get new start high byte (-$100)
001A93  1  C8                   INY                     ; correct high byte
001A94  1  85 7D                STA     Sarryl          ; save new var mem end low byte
001A96  1  84 7E                STY     Sarryh          ; save new var mem end high byte
001A98  1  A0 00                LDY     #$00            ; clear index
001A9A  1  A5 93                LDA     Varnm1          ; get var name 1st character
001A9C  1  8B DA 48 A2          STAINDIRECTY Vrschl     ; save var name 1st character
001AA0  1  01 B5 AA C9  
001AA4  1  00 D0 04 A2  
001AB2  1  C8                   INY                     ; increment index
001AB3  1  A5 94                LDA     Varnm2          ; get var name 2nd character
001AB5  1  8B DA 48 A2          STAINDIRECTY Vrschl     ; save var name 2nd character
001AB9  1  01 B5 AA C9  
001ABD  1  00 D0 04 A2  
001ACB  1  A9 00                LDA     #$00            ; clear A
001ACD  1  C8                   INY                     ; increment index
001ACE  1  8B DA 48 A2          STAINDIRECTY Vrschl     ; initialise var byte
001AD2  1  01 B5 AA C9  
001AD6  1  00 D0 04 A2  
001AE4  1  C8                   INY                     ; increment index
001AE5  1  8B DA 48 A2          STAINDIRECTY Vrschl     ; initialise var byte
001AE9  1  01 B5 AA C9  
001AED  1  00 D0 04 A2  
001AFB  1  C8                   INY                     ; increment index
001AFC  1  8B DA 48 A2          STAINDIRECTY Vrschl     ; initialise var byte
001B00  1  01 B5 AA C9  
001B04  1  00 D0 04 A2  
001B12  1  C8                   INY                     ; increment index
001B13  1  8B DA 48 A2          STAINDIRECTY Vrschl     ; initialise var byte
001B17  1  01 B5 AA C9  
001B1B  1  00 D0 04 A2  
001B29  1               
001B29  1               ; found a match for var ((Vrschl) = ptr)
001B29  1               LAB_1DD7
001B29  1  A5 AA                LDA     Vrschl          ; get var address low byte
001B2B  1  18                   CLC                     ; clear carry for add
001B2C  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
001B2E  1  A4 AB                LDY     Vrschh          ; get var address high byte
001B30  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
001B32  1               
001B32  1  C8                   INY                     ; else increment high byte
001B33  1               LAB_1DE1
001B33  1  85 95                STA     Cvaral          ; save current var address low byte
001B35  1  84 96                STY     Cvarah          ; save current var address high byte
001B37  1  60                   RTS
001B38  1               
001B38  1               ; set-up array pointer (Adatal/h) to first element in array
001B38  1               ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
001B38  1               
001B38  1               LAB_1DE6
001B38  1  A5 5D                LDA     Dimcnt          ; get # of dimensions (1, 2 or 3)
001B3A  1  0A                   ASL     A               ; *2 (also clears the carry !)
001B3B  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
001B3D  1  65 AA                ADC     Astrtl          ; add array start pointer low byte
001B3F  1  A4 AB                LDY     Astrth          ; get array pointer high byte
001B41  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
001B43  1               
001B43  1  C8                   INY                     ; else increment high byte
001B44  1               LAB_1DF2
001B44  1  85 A4                STA     Adatal          ; save array data pointer low byte
001B46  1  84 A5                STY     Adatah          ; save array data pointer high byte
001B48  1  60                   RTS
001B49  1               
001B49  1               ; evaluate integer expression
001B49  1               
001B49  1               LAB_EVIN
001B49  1                       .IFDEF  DUODYNE
001B49  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001B4D  1                       .ELSE
001B4D  1                       JSR     LAB_IGBY        ; increment and scan memory
001B4D  1                       .ENDIF
001B4D  1               
001B4D  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001B50  1               ; else do type mismatch
001B50  1               
001B50  1               ; evaluate integer expression (no check)
001B50  1               
001B50  1               LAB_EVPI
001B50  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
001B52  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
001B54  1               
001B54  1               ; evaluate integer expression (no sign check)
001B54  1               
001B54  1               LAB_EVIR
001B54  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
001B56  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
001B58  1  90 0C                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
001B5A  1               
001B5A  1  A9 2C                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
001B5C  1  A0 36                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
001B5E  1  20 67 2C             JSR     LAB_27F8        ; compare FAC1 with (AY)
001B61  1               LAB_1E12
001B61  1  F0 03 4C 30          LBNE    LAB_FCER        ; if <> do function call error then warm start
001B65  1  1C           
001B66  1               
001B66  1               LAB_1E14
001B66  1  4C 04 2D             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
001B69  1               
001B69  1               ; find or make array
001B69  1               
001B69  1               LAB_1E17
001B69  1  A5 5E                LDA     Defdim          ; get DIM flag
001B6B  1  48                   PHA                     ; push it
001B6C  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
001B6E  1  48                   PHA                     ; push it
001B6F  1  A0 00                LDY     #$00            ; clear dimensions count
001B71  1               
001B71  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
001B71  1               
001B71  1               LAB_1E1F
001B71  1  98                   TYA                     ; copy dimensions count
001B72  1  48                   PHA                     ; save it
001B73  1  A5 94                LDA     Varnm2          ; get array name 2nd byte
001B75  1  48                   PHA                     ; save it
001B76  1  A5 93                LDA     Varnm1          ; get array name 1st byte
001B78  1  48                   PHA                     ; save it
001B79  1  20 49 1B             JSR     LAB_EVIN        ; evaluate integer expression
001B7C  1  68                   PLA                     ; pull array name 1st byte
001B7D  1  85 93                STA     Varnm1          ; restore array name 1st byte
001B7F  1  68                   PLA                     ; pull array name 2nd byte
001B80  1  85 94                STA     Varnm2          ; restore array name 2nd byte
001B82  1  68                   PLA                     ; pull dimensions count
001B83  1  A8                   TAY                     ; restore it
001B84  1  BA                   TSX                     ; copy stack pointer
001B85  1  BD 02 01             LDA     LAB_STAK+2,X    ; get DIM flag
001B88  1  48                   PHA                     ; push it
001B89  1  BD 01 01             LDA     LAB_STAK+1,X    ; get data type flag
001B8C  1  48                   PHA                     ; push it
001B8D  1  A5 AE                LDA     FAC1_2          ; get this dimension size high byte
001B8F  1  9D 02 01             STA     LAB_STAK+2,X    ; stack before flag bytes
001B92  1  A5 AF                LDA     FAC1_3          ; get this dimension size low byte
001B94  1  9D 01 01             STA     LAB_STAK+1,X    ; stack before flag bytes
001B97  1  C8                   INY                     ; increment dimensions count
001B98  1                       .IFDEF  DUODYNE
001B98  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001B9C  1                       .ELSE
001B9C  1                       JSR     LAB_GBYT        ; scan memory
001B9C  1                       .ENDIF
001B9C  1               
001B9C  1  C9 2C                CMP     #','            ; compare with ","
001B9E  1  F0 D1                BEQ     LAB_1E1F        ; if found go do next dimension
001BA0  1               
001BA0  1  84 5D                STY     Dimcnt          ; store dimensions count
001BA2  1  20 C0 17             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
001BA5  1  68                   PLA                     ; pull data type flag
001BA6  1  85 5F                STA     Dtypef          ; restore data type flag, $FF=string, $00=numeric
001BA8  1  68                   PLA                     ; pull DIM flag
001BA9  1  85 5E                STA     Defdim          ; restore DIM flag
001BAB  1  A6 7D                LDX     Sarryl          ; get array mem start low byte
001BAD  1  A5 7E                LDA     Sarryh          ; get array mem start high byte
001BAF  1               
001BAF  1               ; now check to see if we are at the end of array memory (we would be if there were
001BAF  1               ; no arrays).
001BAF  1               
001BAF  1               LAB_1E5C
001BAF  1  86 AA                STX     Astrtl          ; save as array start pointer low byte
001BB1  1  85 AB                STA     Astrth          ; save as array start pointer high byte
001BB3  1  C5 80                CMP     Earryh          ; compare with array mem end high byte
001BB5  1  D0 07                BNE     LAB_1E68        ; branch if not reached array mem end
001BB7  1               
001BB7  1  E4 7F                CPX     Earryl          ; else compare with array mem end low byte
001BB9  1  D0 03 4C 5F          LBEQ    LAB_1EA1        ; go build array if not found
001BBD  1  1C           
001BBE  1               
001BBE  1               ; search for array
001BBE  1               LAB_1E68
001BBE  1  A0 00                LDY     #$00            ; clear index
001BC0  1  8B DA A2 01          LDAINDIRECTY Astrtl     ; get array name first byte
001BC4  1  B5 AA C9 00  
001BC8  1  D0 04 A2 00  
001BD6  1  C8                   INY                     ; increment index to second name byte
001BD7  1  C5 93                CMP     Varnm1          ; compare with this array name first byte
001BD9  1  D0 1C                BNE     LAB_1E77        ; branch if no match
001BDB  1               
001BDB  1  A5 94                LDA     Varnm2          ; else get this array name second byte
001BDD  1  8B 48 DA A2          CMPINDIRECTY Astrtl     ; compare with array name second byte
001BE1  1  01 B5 AA C9  
001BE5  1  00 D0 04 A2  
001BF5  1  F0 3E                BEQ     LAB_1E8D        ; array found so branch
001BF7  1               
001BF7  1               ; no match
001BF7  1               LAB_1E77
001BF7  1  C8                   INY                     ; increment index
001BF8  1  8B DA A2 01          LDAINDIRECTY Astrtl     ; get array size low byte
001BFC  1  B5 AA C9 00  
001C00  1  D0 04 A2 00  
001C0E  1  18                   CLC                     ; clear carry for add
001C0F  1  65 AA                ADC     Astrtl          ; add array start pointer low byte
001C11  1  AA                   TAX                     ; copy low byte to X
001C12  1  C8                   INY                     ; increment index
001C13  1  8B DA A2 01          LDAINDIRECTY Astrtl     ; get array size high byte
001C17  1  B5 AA C9 00  
001C1B  1  D0 04 A2 00  
001C29  1  65 AB                ADC     Astrth          ; add array mem pointer high byte
001C2B  1  90 82                BCC     LAB_1E5C        ; if no overflow go check next array
001C2D  1               
001C2D  1               ; do array bounds error
001C2D  1               
001C2D  1               LAB_1E85
001C2D  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
001C2F  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
001C30  1               
001C30  1               ; do function call error
001C30  1               
001C30  1               LAB_FCER
001C30  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
001C32  1               LAB_1E8A
001C32  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
001C35  1               
001C35  1               ; found array, are we trying to dimension it?
001C35  1               LAB_1E8D
001C35  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
001C37  1  A5 5E                LDA     Defdim          ; get DIM flag
001C39  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
001C3B  1               ; start
001C3B  1               
001C3B  1               ; found the array and we're not dimensioning it so we must find an element in it
001C3B  1               
001C3B  1  20 38 1B             JSR     LAB_1DE6        ; set-up array pointer (Adatal/h) to first element in array
001C3E  1               ; (Astrtl,Astrth points to start of array)
001C3E  1  A5 5D                LDA     Dimcnt          ; get dimensions count
001C40  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
001C42  1  8B 48 DA A2          CMPINDIRECTY Astrtl     ; compare with no of dimensions
001C46  1  01 B5 AA C9  
001C4A  1  00 D0 04 A2  
001C5A  1  D0 D1                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
001C5C  1               ; dimensions" error here .. if we want a different
001C5C  1               ; error message
001C5C  1               
001C5C  1  4C A1 1D             JMP     LAB_1F28        ; found array so go get element
001C5F  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
001C5F  1               ; Dimcnt and save it at (Astrtl),Y which is already the
001C5F  1               ; same or we would have taken the BNE)
001C5F  1               
001C5F  1               ; array not found, so build it
001C5F  1               LAB_1EA1
001C5F  1  20 38 1B             JSR     LAB_1DE6        ; set-up array pointer (Adatal/h) to first element in array
001C62  1               ; (Astrtl,Astrth points to start of array)
001C62  1  20 C6 09             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
001C65  1               ; addr to check is in AY (low/high)
001C65  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
001C67  1  84 BB                STY     Aspth           ; clear array data size high byte
001C69  1  A5 93                LDA     Varnm1          ; get variable name 1st byte
001C6B  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; save array name 1st byte
001C6F  1  01 B5 AA C9  
001C73  1  00 D0 04 A2  
001C81  1  C8                   INY                     ; increment index
001C82  1  A5 94                LDA     Varnm2          ; get variable name 2nd byte
001C84  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; save array name 2nd byte
001C88  1  01 B5 AA C9  
001C8C  1  00 D0 04 A2  
001C9A  1  A5 5D                LDA     Dimcnt          ; get dimensions count
001C9C  1  A0 04                LDY     #$04            ; index to dimension count
001C9E  1  84 BA                STY     Asptl           ; set array data size low byte (four bytes per element)
001CA0  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; set array's dimensions count
001CA4  1  01 B5 AA C9  
001CA8  1  00 D0 04 A2  
001CB6  1               
001CB6  1               ; now calculate the size of the data space for the array
001CB6  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
001CB7  1               LAB_1EC0
001CB7  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
001CB9  1  A9 00                LDA     #$00            ; set default dimension value high byte
001CBB  1  24 5E                BIT     Defdim          ; test default DIM flag
001CBD  1  50 07                BVC     LAB_1ED0        ; branch if b6 of Defdim is clear
001CBF  1               
001CBF  1  68                   PLA                     ; else pull dimension value low byte
001CC0  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
001CC2  1  AA                   TAX                     ; copy low byte to X
001CC3  1  68                   PLA                     ; pull dimension value high byte
001CC4  1  69 00                ADC     #$00            ; add carry from low byte
001CC6  1               
001CC6  1               LAB_1ED0
001CC6  1  C8                   INY                     ; index to dimension value high byte
001CC7  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; save dimension value high byte
001CCB  1  01 B5 AA C9  
001CCF  1  00 D0 04 A2  
001CDD  1  C8                   INY                     ; index to dimension value high byte
001CDE  1  8A                   TXA                     ; get dimension value low byte
001CDF  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; save dimension value low byte
001CE3  1  01 B5 AA C9  
001CE7  1  00 D0 04 A2  
001CF5  1  20 1C 1E             JSR     LAB_1F7C        ; does XY = (Astrtl),Y * (Asptl)
001CF8  1  86 BA                STX     Asptl           ; save array data size low byte
001CFA  1  85 BB                STA     Aspth           ; save array data size high byte
001CFC  1  A4 71                LDY     ut1_pl          ; restore index (saved by subroutine)
001CFE  1  C6 5D                DEC     Dimcnt          ; decrement dimensions count
001D00  1  D0 B5                BNE     LAB_1EC0        ; loop while not = 0
001D02  1               
001D02  1  65 A5                ADC     Adatah          ; add size high byte to first element high byte
001D04  1               ; (carry is always clear here)
001D04  1  B0 02 80 03          LBCS    LAB_1F45        ; if overflow go do "Out of memory" error
001D08  1  4C EA 1D     
001D0B  1               
001D0B  1  85 A5                STA     Adatah          ; save end of array high byte
001D0D  1  A8                   TAY                     ; copy end high byte to Y
001D0E  1  8A                   TXA                     ; get array size low byte
001D0F  1  65 A4                ADC     Adatal          ; add array start low byte
001D11  1  90 06                BCC     LAB_1EF3        ; branch if no carry
001D13  1               
001D13  1  C8                   INY                     ; else increment end of array high byte
001D14  1  D0 03 4C EA          LBEQ    LAB_1F45        ; if overflow go do "Out of memory" error
001D18  1  1D           
001D19  1               
001D19  1               ; set-up mostly complete, now zero the array
001D19  1               LAB_1EF3
001D19  1  20 C6 09             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
001D1C  1               ; addr to check is in AY (low/high)
001D1C  1  85 7F                STA     Earryl          ; save array mem end low byte
001D1E  1  84 80                STY     Earryh          ; save array mem end high byte
001D20  1  A9 00                LDA     #$00            ; clear byte for array clear
001D22  1  E6 BB                INC     Aspth           ; increment array size high byte (now block count)
001D24  1  A4 BA                LDY     Asptl           ; get array size low byte (now index to block)
001D26  1  F0 19                BEQ     LAB_1F07        ; branch if low byte = $00
001D28  1               
001D28  1               LAB_1F02
001D28  1  88                   DEY                     ; decrement index (do 0 to n-1)
001D29  1  8B DA 48 A2          STAINDIRECTY Adatal     ; zero byte
001D2D  1  01 B5 A4 C9  
001D31  1  00 D0 04 A2  
001D3F  1  D0 E7                BNE     LAB_1F02        ; loop until this block done
001D41  1               
001D41  1               LAB_1F07
001D41  1  C6 A5                DEC     Adatah          ; decrement array pointer high byte
001D43  1  C6 BB                DEC     Aspth           ; decrement block count high byte
001D45  1  D0 E1                BNE     LAB_1F02        ; loop until all blocks done
001D47  1               
001D47  1  E6 A5                INC     Adatah          ; correct for last loop
001D49  1  38                   SEC                     ; set carry for subtract
001D4A  1  A0 02                LDY     #$02            ; index to array size low byte
001D4C  1  A5 7F                LDA     Earryl          ; get array mem end low byte
001D4E  1  E5 AA                SBC     Astrtl          ; subtract array start low byte
001D50  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; save array size low byte
001D54  1  01 B5 AA C9  
001D58  1  00 D0 04 A2  
001D66  1  C8                   INY                     ; index to array size high byte
001D67  1  A5 80                LDA     Earryh          ; get array mem end high byte
001D69  1  E5 AB                SBC     Astrth          ; subtract array start high byte
001D6B  1  8B DA 48 A2          STAINDIRECTY Astrtl     ; save array size high byte
001D6F  1  01 B5 AA C9  
001D73  1  00 D0 04 A2  
001D81  1  A5 5E                LDA     Defdim          ; get default DIM flag
001D83  1  F0 03 4C 1B          LBNE    LAB_1F7B        ; exit (RET) if this was a DIM command
001D87  1  1E           
001D88  1               
001D88  1               ; else, find element
001D88  1  C8                   INY                     ; index to # of dimensions
001D89  1               
001D89  1               LAB_1F24
001D89  1  8B DA A2 01          LDAINDIRECTY Astrtl     ; get array's dimension count
001D8D  1  B5 AA C9 00  
001D91  1  D0 04 A2 00  
001D9F  1  85 5D                STA     Dimcnt          ; save it
001DA1  1               
001DA1  1               ; we have found, or built, the array. now we need to find the element
001DA1  1               
001DA1  1               LAB_1F28
001DA1  1  A9 00                LDA     #$00            ; clear byte
001DA3  1  85 BA                STA     Asptl           ; clear array data pointer low byte
001DA5  1               LAB_1F2C
001DA5  1  85 BB                STA     Aspth           ; save array data pointer high byte
001DA7  1  C8                   INY                     ; increment index (point to array bound high byte)
001DA8  1  68                   PLA                     ; pull array index low byte
001DA9  1  AA                   TAX                     ; copy to X
001DAA  1  85 AE                STA     FAC1_2          ; save index low byte to FAC1 mantissa2
001DAC  1  68                   PLA                     ; pull array index high byte
001DAD  1  85 AF                STA     FAC1_3          ; save index high byte to FAC1 mantissa3
001DAF  1  8B 48 DA A2          CMPINDIRECTY Astrtl     ; compare with array bound high byte
001DB3  1  01 B5 AA C9  
001DB7  1  00 D0 04 A2  
001DC7  1  90 24                BCC     LAB_1F48        ; branch if within bounds
001DC9  1               
001DC9  1  D0 1C                BNE     LAB_1F42        ; if outside bounds do array bounds error
001DCB  1               
001DCB  1               ; else high byte was = so test low bytes
001DCB  1  C8                   INY                     ; index to array bound low byte
001DCC  1  8A                   TXA                     ; get array index low byte
001DCD  1  8B 48 DA A2          CMPINDIRECTY Astrtl     ; compare with array bound low byte
001DD1  1  01 B5 AA C9  
001DD5  1  00 D0 04 A2  
001DE5  1  90 07                BCC     LAB_1F49        ; branch if within bounds
001DE7  1               
001DE7  1               LAB_1F42
001DE7  1  4C 2D 1C             JMP     LAB_1E85        ; else do array bounds error
001DEA  1               
001DEA  1               LAB_1F45
001DEA  1  4C F5 09             JMP     LAB_OMER        ; do "Out of memory" error then warm start
001DED  1               
001DED  1               LAB_1F48
001DED  1  C8                   INY                     ; index to array bound low byte
001DEE  1               LAB_1F49
001DEE  1  A5 BB                LDA     Aspth           ; get array data pointer high byte
001DF0  1  05 BA                ORA     Asptl           ; OR with array data pointer low byte
001DF2  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
001DF4  1               
001DF4  1  20 1C 1E             JSR     LAB_1F7C        ; does XY = (Astrtl),Y * (Asptl)
001DF7  1  8A                   TXA                     ; get result low byte
001DF8  1  65 AE                ADC     FAC1_2          ; add index low byte from FAC1 mantissa2
001DFA  1  AA                   TAX                     ; save result low byte
001DFB  1  98                   TYA                     ; get result high byte
001DFC  1  A4 71                LDY     ut1_pl          ; restore index
001DFE  1               LAB_1F5A
001DFE  1  65 AF                ADC     FAC1_3          ; add index high byte from FAC1 mantissa3
001E00  1  86 BA                STX     Asptl           ; save array data pointer low byte
001E02  1  C6 5D                DEC     Dimcnt          ; decrement dimensions count
001E04  1  D0 9F                BNE     LAB_1F2C        ; loop if dimensions still to do
001E06  1               
001E06  1  06 BA                ASL     Asptl           ; array data pointer low byte * 2
001E08  1  2A                   ROL     A               ; array data pointer high byte * 2
001E09  1  06 BA                ASL     Asptl           ; array data pointer low byte * 4
001E0B  1  2A                   ROL     A               ; array data pointer high byte * 4
001E0C  1  A8                   TAY                     ; copy high byte
001E0D  1  A5 BA                LDA     Asptl           ; get low byte
001E0F  1  65 A4                ADC     Adatal          ; add array data start pointer low byte
001E11  1  85 95                STA     Cvaral          ; save as current var address low byte
001E13  1  98                   TYA                     ; get high byte back
001E14  1  65 A5                ADC     Adatah          ; add array data start pointer high byte
001E16  1  85 96                STA     Cvarah          ; save as current var address high byte
001E18  1  A8                   TAY                     ; copy high byte to Y
001E19  1  A5 95                LDA     Cvaral          ; get current var address low byte
001E1B  1               LAB_1F7B
001E1B  1  60                   RTS
001E1C  1               
001E1C  1               ; does XY = (Astrtl),Y * (Asptl)
001E1C  1               
001E1C  1               LAB_1F7C
001E1C  1  84 71                STY     ut1_pl          ; save index
001E1E  1  8B DA A2 01          LDAINDIRECTY Astrtl     ; get dimension size low byte
001E22  1  B5 AA C9 00  
001E26  1  D0 04 A2 00  
001E34  1  85 76                STA     dims_l          ; save dimension size low byte
001E36  1  88                   DEY                     ; decrement index
001E37  1  8B DA A2 01          LDAINDIRECTY Astrtl     ; get dimension size high byte
001E3B  1  B5 AA C9 00  
001E3F  1  D0 04 A2 00  
001E4D  1  85 77                STA     dims_h          ; save dimension size high byte
001E4F  1               
001E4F  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
001E51  1  85 A8                STA     numbit          ; save bit count
001E53  1  A2 00                LDX     #$00            ; clear result low byte
001E55  1  A0 00                LDY     #$00            ; clear result high byte
001E57  1               LAB_1F8F
001E57  1  8A                   TXA                     ; get result low byte
001E58  1  0A                   ASL     A               ; *2
001E59  1  AA                   TAX                     ; save result low byte
001E5A  1  98                   TYA                     ; get result high byte
001E5B  1  2A                   ROL     A               ; *2
001E5C  1  A8                   TAY                     ; save result high byte
001E5D  1  B0 8B                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
001E5F  1               
001E5F  1  06 BA                ASL     Asptl           ; shift multiplier low byte
001E61  1  26 BB                ROL     Aspth           ; shift multiplier high byte
001E63  1  90 10                BCC     LAB_1FA8        ; skip add if no carry
001E65  1               
001E65  1  18                   CLC                     ; else clear carry for add
001E66  1  8A                   TXA                     ; get result low byte
001E67  1  65 76                ADC     dims_l          ; add dimension size low byte
001E69  1  AA                   TAX                     ; save result low byte
001E6A  1  98                   TYA                     ; get result high byte
001E6B  1  65 77                ADC     dims_h          ; add dimension size high byte
001E6D  1  A8                   TAY                     ; save result high byte
001E6E  1  B0 02 80 03          LBCS    LAB_1F45        ; if overflow go do "Out of memory" error
001E72  1  4C EA 1D     
001E75  1               
001E75  1               LAB_1FA8
001E75  1  C6 A8                DEC     numbit          ; decrement bit count
001E77  1  D0 DE                BNE     LAB_1F8F        ; loop until all done
001E79  1               
001E79  1  60                   RTS
001E7A  1               
001E7A  1               ; perform FRE()
001E7A  1               
001E7A  1               LAB_FRE
001E7A  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
001E7C  1  10 03                BPL     LAB_1FB4        ; branch if numeric
001E7E  1               
001E7E  1  20 B0 23             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001E81  1               ; space returns with A = length, X=$71=pointer low byte,
001E81  1               ; Y=$72=pointer high byte
001E81  1               
001E81  1               ; FRE(n) was numeric so do this
001E81  1               LAB_1FB4
001E81  1  20 E0 20             JSR     LAB_GARB        ; go do garbage collection
001E84  1  38                   SEC                     ; set carry for subtract
001E85  1  A5 81                LDA     Sstorl          ; get bottom of string space low byte
001E87  1  E5 7F                SBC     Earryl          ; subtract array mem end low byte
001E89  1  A8                   TAY                     ; copy result to Y
001E8A  1  A5 82                LDA     Sstorh          ; get bottom of string space high byte
001E8C  1  E5 80                SBC     Earryh          ; subtract array mem end high byte
001E8E  1               
001E8E  1               ; save and convert integer AY to FAC1
001E8E  1               
001E8E  1               LAB_AYFC
001E8E  1  46 5F                LSR     Dtypef          ; clear data type flag, $FF=string, $00=numeric
001E90  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
001E92  1  84 AE                STY     FAC1_2          ; save FAC1 mantissa2
001E94  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
001E96  1  4C 52 2C             JMP     LAB_27E3        ; set exp=X, clear FAC1_3, normalise and return
001E99  1               
001E99  1               ; perform POS()
001E99  1               
001E99  1               LAB_POS
001E99  1  A4 0E                LDY     TPos            ; get terminal position
001E9B  1               
001E9B  1               ; convert Y to byte in FAC1
001E9B  1               
001E9B  1               LAB_1FD0
001E9B  1  A9 00                LDA     #$00            ; clear high byte
001E9D  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
001E9F  1               
001E9F  1               ; check not Direct (used by DEF and INPUT)
001E9F  1               
001E9F  1               LAB_CKRN
001E9F  1  A6 88                LDX     Clineh          ; get current line high byte
001EA1  1  E8                   INX                     ; increment it
001EA2  1  F0 03 4C 1B          LBNE    LAB_1F7B        ; return if can continue not direct mode
001EA6  1  1E           
001EA7  1               
001EA7  1               ; else do illegal direct error
001EA7  1               LAB_1FD9
001EA7  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
001EA9  1               LAB_1FDB
001EA9  1  4C F7 09             JMP     LAB_XERR        ; go do error #X, then warm start
001EAC  1               
001EAC  1               ; perform DEF
001EAC  1               
001EAC  1               LAB_DEF
001EAC  1  20 DD 1E             JSR     LAB_200B        ; check FNx syntax
001EAF  1  85 9C                STA     func_l          ; save function pointer low byte
001EB1  1  84 9D                STY     func_h          ; save function pointer high byte
001EB3  1  20 9F 1E             JSR     LAB_CKRN        ; check not Direct (back here if ok)
001EB6  1  20 CD 17             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
001EB9  1  A9 80                LDA     #$80            ; set flag for FNx
001EBB  1  85 61                STA     Sufnxf          ; save subscript/FNx flag
001EBD  1  20 AC 19             JSR     LAB_GVAR        ; get (var) address
001EC0  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001EC3  1  20 C0 17             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
001EC6  1  A9 C2                LDA     #TK_EQUAL       ; get = token
001EC8  1  20 C2 17             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
001ECB  1  A5 96                LDA     Cvarah          ; get current var address high byte
001ECD  1  48                   PHA                     ; push it
001ECE  1  A5 95                LDA     Cvaral          ; get current var address low byte
001ED0  1  48                   PHA                     ; push it
001ED1  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
001ED3  1  48                   PHA                     ; push it
001ED4  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001ED6  1  48                   PHA                     ; push it
001ED7  1  20 1A 11             JSR     LAB_DATA        ; go perform DATA
001EDA  1  4C B1 1F             JMP     LAB_207A        ; put execute pointer and variable pointer into function
001EDD  1               ; and return
001EDD  1               
001EDD  1               ; check FNx syntax
001EDD  1               
001EDD  1               LAB_200B
001EDD  1  A9 AF                LDA     #TK_FN          ; get FN" token
001EDF  1  20 C2 17             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
001EE2  1               ; return character after A
001EE2  1  09 80                ORA     #$80            ; set FN flag bit
001EE4  1  85 61                STA     Sufnxf          ; save FN flag so array variable test fails
001EE6  1  20 B4 19             JSR     LAB_1D12        ; search for FN variable
001EE9  1  4C 9E 16             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
001EEC  1               ; mismatch
001EEC  1               
001EEC  1               ; Evaluate FNx
001EEC  1               LAB_201E
001EEC  1  20 DD 1E             JSR     LAB_200B        ; check FNx syntax
001EEF  1  48                   PHA                     ; push function pointer low byte
001EF0  1  98                   TYA                     ; copy function pointer high byte
001EF1  1  48                   PHA                     ; push function pointer high byte
001EF2  1  20 CD 17             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
001EF5  1  20 AF 16             JSR     LAB_EVEX        ; evaluate expression
001EF8  1  20 C0 17             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
001EFB  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001EFE  1  68                   PLA                     ; pop function pointer high byte
001EFF  1  85 9D                STA     func_h          ; restore it
001F01  1  68                   PLA                     ; pop function pointer low byte
001F02  1  85 9C                STA     func_l          ; restore it
001F04  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
001F06  1  A0 03                LDY     #$03            ; index to variable pointer high byte
001F08  1  8B DA A2 01          LDAINDIRECTY func_l     ; get variable pointer high byte
001F0C  1  B5 9C C9 00  
001F10  1  D0 04 A2 00  
001F1E  1  F0 89                BEQ     LAB_1FDB        ; if zero go do undefined function error
001F20  1               
001F20  1  85 96                STA     Cvarah          ; save variable address high byte
001F22  1  88                   DEY                     ; index to variable address low byte
001F23  1  8B DA A2 01          LDAINDIRECTY func_l     ; get variable address low byte
001F27  1  B5 9C C9 00  
001F2B  1  D0 04 A2 00  
001F39  1  85 95                STA     Cvaral          ; save variable address low byte
001F3B  1  AA                   TAX                     ; copy address low byte
001F3C  1               
001F3C  1               ; now stack the function variable value before use
001F3C  1  C8                   INY                     ; index to mantissa_3
001F3D  1               LAB_2043
001F3D  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
001F41  1  B5 95 C9 00  
001F45  1  D0 04 A2 00  
001F53  1  48                   PHA                     ; stack it
001F54  1  88                   DEY                     ; decrement index
001F55  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
001F57  1               
001F57  1  A4 96                LDY     Cvarah          ; get variable address high byte
001F59  1  20 A7 2B             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
001F5C  1               ; (function variable), return Y=0, always
001F5C  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
001F5E  1  48                   PHA                     ; push it
001F5F  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001F61  1  48                   PHA                     ; push it
001F62  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
001F66  1  B5 9C C9 00  
001F6A  1  D0 04 A2 00  
001F78  1  85 C3                STA     Bpntrl          ; save as BASIC execute pointer low byte
001F7A  1  C8                   INY                     ; index to high byte
001F7B  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
001F7F  1  B5 9C C9 00  
001F83  1  D0 04 A2 00  
001F91  1  85 C4                STA     Bpntrh          ; save as BASIC execute pointer high byte
001F93  1  A5 96                LDA     Cvarah          ; get variable address high byte
001F95  1  48                   PHA                     ; push it
001F96  1  A5 95                LDA     Cvaral          ; get variable address low byte
001F98  1  48                   PHA                     ; push it
001F99  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001F9C  1               ; else do type mismatch
001F9C  1  68                   PLA                     ; pull variable address low byte
001F9D  1  85 9C                STA     func_l          ; save variable address low byte
001F9F  1  68                   PLA                     ; pull variable address high byte
001FA0  1  85 9D                STA     func_h          ; save variable address high byte
001FA2  1                       .IFDEF  DUODYNE
001FA2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001FA6  1                       .ELSE
001FA6  1                       JSR     LAB_GBYT        ; scan memory
001FA6  1                       .ENDIF
001FA6  1               
001FA6  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
001FA8  1               
001FA8  1  4C D5 17             JMP     LAB_SNER        ; else syntax error then warm start
001FAB  1               
001FAB  1               ; restore Bpntrl,Bpntrh and function variable from stack
001FAB  1               
001FAB  1               LAB_2074
001FAB  1  68                   PLA                     ; pull BASIC execute pointer low byte
001FAC  1  85 C3                STA     Bpntrl          ; restore BASIC execute pointer low byte
001FAE  1  68                   PLA                     ; pull BASIC execute pointer high byte
001FAF  1  85 C4                STA     Bpntrh          ; restore BASIC execute pointer high byte
001FB1  1               
001FB1  1               ; put execute pointer and variable pointer into function
001FB1  1               
001FB1  1               LAB_207A
001FB1  1  A0 00                LDY     #$00            ; clear index
001FB3  1  68                   PLA                     ; pull BASIC execute pointer low byte
001FB4  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001FB8  1  01 B5 9C C9  
001FBC  1  00 D0 04 A2  
001FCA  1  C8                   INY                     ; increment index
001FCB  1  68                   PLA                     ; pull BASIC execute pointer high byte
001FCC  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001FD0  1  01 B5 9C C9  
001FD4  1  00 D0 04 A2  
001FE2  1  C8                   INY                     ; increment index
001FE3  1  68                   PLA                     ; pull current var address low byte
001FE4  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001FE8  1  01 B5 9C C9  
001FEC  1  00 D0 04 A2  
001FFA  1  C8                   INY                     ; increment index
001FFB  1  68                   PLA                     ; pull current var address high byte
001FFC  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
002000  1  01 B5 9C C9  
002004  1  00 D0 04 A2  
002012  1  60                   RTS
002013  1               
002013  1               ; perform STR$()
002013  1               
002013  1               LAB_STRS
002013  1  20 9E 16             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002016  1  20 67 2E             JSR     LAB_296E        ; convert FAC1 to string
002019  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
00201B  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
00201D  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to Sutill/Sutilh
00201F  1               
00201F  1               ; Do string vector
00201F  1               ; copy des_pl/h to des_2l/h and make string space A bytes long
00201F  1               
00201F  1               LAB_209C
00201F  1  A6 AE                LDX     des_pl          ; get descriptor pointer low byte
002021  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
002023  1  86 9E                STX     des_2l          ; save descriptor pointer low byte
002025  1  84 9F                STY     des_2h          ; save descriptor pointer high byte
002027  1               
002027  1               ; make string space A bytes long
002027  1               ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
002027  1               
002027  1               LAB_MSSP
002027  1  20 AE 20             JSR     LAB_2115        ; make space in string memory for string A long
00202A  1               ; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
00202A  1  86 AD                STX     str_pl          ; save string pointer low byte
00202C  1  84 AE                STY     str_ph          ; save string pointer high byte
00202E  1  85 AC                STA     str_ln          ; save length
002030  1  60                   RTS
002031  1               
002031  1               ; Scan, set up string
002031  1               ; print " terminated string to Sutill/Sutilh
002031  1               
002031  1               LAB_20AE
002031  1  A2 22                LDX     #$22            ; set terminator to "
002033  1  86 5B                STX     Srchc           ; set search character (terminator 1)
002035  1  86 5C                STX     Asrch           ; set terminator 2
002037  1               
002037  1               ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
002037  1               ; source is AY
002037  1               
002037  1               LAB_20B4
002037  1  85 B8                STA     ssptr_l         ; store string start low byte
002039  1  84 B9                STY     ssptr_h         ; store string start high byte
00203B  1  85 AD                STA     str_pl          ; save string pointer low byte
00203D  1  84 AE                STY     str_ph          ; save string pointer high byte
00203F  1  A0 FF                LDY     #$FF            ; set length to -1
002041  1               LAB_20BE
002041  1  C8                   INY                     ; increment length
002042  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
002046  1  B5 B8 C9 00  
00204A  1  D0 04 A2 00  
002058  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
00205A  1               
00205A  1  C5 5B                CMP     Srchc           ; compare with search character (terminator 1)
00205C  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
00205E  1               
00205E  1  C5 5C                CMP     Asrch           ; compare with terminator 2
002060  1  D0 DF                BNE     LAB_20BE        ; loop if not terminator 2
002062  1               
002062  1               LAB_20CB
002062  1  C9 22                CMP     #$22            ; compare with "
002064  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
002066  1               
002066  1               LAB_20CF
002066  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
002067  1               LAB_20D0
002067  1  84 AC                STY     str_ln          ; save length in FAC1 exponent
002069  1  98                   TYA                     ; copy length to A
00206A  1  65 B8                ADC     ssptr_l         ; add string start low byte
00206C  1  85 BA                STA     Sendl           ; save string end low byte
00206E  1  A6 B9                LDX     ssptr_h         ; get string start high byte
002070  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
002072  1               
002072  1  E8                   INX                     ; else increment high byte
002073  1               LAB_20DC
002073  1  86 BB                STX     Sendh           ; save string end high byte
002075  1  A5 B9                LDA     ssptr_h         ; get string start high byte
002077  1  C9 08                CMP     #>BASICBEGIN    ; compare with BASICBEGIN, FORMERLY (Ram_base) start of program memory
002079  1  B0 0B                BCS     LAB_RTST        ; branch if not in utility area
00207B  1               
00207B  1               ; string in utility area, move to string memory
00207B  1  98                   TYA                     ; copy length to A
00207C  1  20 1F 20             JSR     LAB_209C        ; copy des_pl/h to des_2l/h and make string space A bytes
00207F  1               ; long
00207F  1  A6 B8                LDX     ssptr_l         ; get string start low byte
002081  1  A4 B9                LDY     ssptr_h         ; get string start high byte
002083  1  20 69 23             JSR     LAB_2298        ; store string A bytes long from XY to (Sutill)
002086  1               
002086  1               ; check for space on descriptor stack then ..
002086  1               ; put string address and length on descriptor stack and update stack pointers
002086  1               
002086  1               LAB_RTST
002086  1  A6 65                LDX     next_s          ; get string stack pointer
002088  1  E0 71                CPX     #des_sk+$09     ; compare with max+1
00208A  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
00208C  1               
00208C  1               ; else do string too complex error
00208C  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
00208E  1               LAB_20F5
00208E  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
002091  1               
002091  1               ; put string address and length on descriptor stack and update stack pointers
002091  1               
002091  1               LAB_20F8
002091  1  A5 AC                LDA     str_ln          ; get string length
002093  1  95 00                STA     PLUS_0,X        ; put on string stack
002095  1  A5 AD                LDA     str_pl          ; get string pointer low byte
002097  1  95 01                STA     PLUS_1,X        ; put on string stack
002099  1  A5 AE                LDA     str_ph          ; get string pointer high byte
00209B  1  95 02                STA     PLUS_2,X        ; put on string stack
00209D  1  A0 00                LDY     #$00            ; clear Y
00209F  1  86 AE                STX     des_pl          ; save string descriptor pointer low byte
0020A1  1  84 AF                STY     des_ph          ; save string descriptor pointer high byte (always $00)
0020A3  1  88                   DEY                     ; Y = $FF
0020A4  1  84 5F                STY     Dtypef          ; save data type flag, $FF=string
0020A6  1  86 66                STX     last_sl         ; save old stack pointer (current top item)
0020A8  1  E8                   INX                     ; update stack pointer
0020A9  1  E8                   INX                     ; update stack pointer
0020AA  1  E8                   INX                     ; update stack pointer
0020AB  1  86 65                STX     next_s          ; save new top item value
0020AD  1  60                   RTS
0020AE  1               
0020AE  1               ; Build descriptor
0020AE  1               ; make space in string memory for string A long
0020AE  1               ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
0020AE  1               
0020AE  1               LAB_2115
0020AE  1  46 60                LSR     Gclctd          ; clear garbage collected flag (b7)
0020B0  1               
0020B0  1               ; make space for string A long
0020B0  1               LAB_2117
0020B0  1  48                   PHA                     ; save string length
0020B1  1  49 FF                EOR     #$FF            ; complement it
0020B3  1  38                   SEC                     ; set carry for subtract (twos comp add)
0020B4  1  65 81                ADC     Sstorl          ; add bottom of string space low byte (subtract length)
0020B6  1  A4 82                LDY     Sstorh          ; get bottom of string space high byte
0020B8  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
0020BA  1               
0020BA  1  88                   DEY                     ; decrement bottom of string space high byte
0020BB  1               LAB_2122
0020BB  1  C4 80                CPY     Earryh          ; compare with array mem end high byte
0020BD  1  90 11                BCC     LAB_2137        ; do out of memory error if less
0020BF  1               
0020BF  1  D0 04                BNE     LAB_212C        ; if not = skip next test
0020C1  1               
0020C1  1  C5 7F                CMP     Earryl          ; compare with array mem end low byte
0020C3  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
0020C5  1               
0020C5  1               LAB_212C
0020C5  1  85 81                STA     Sstorl          ; save bottom of string space low byte
0020C7  1  84 82                STY     Sstorh          ; save bottom of string space high byte
0020C9  1  85 83                STA     Sutill          ; save string utility ptr low byte
0020CB  1  84 84                STY     Sutilh          ; save string utility ptr high byte
0020CD  1  AA                   TAX                     ; copy low byte to X
0020CE  1  68                   PLA                     ; get string length back
0020CF  1  60                   RTS
0020D0  1               
0020D0  1               LAB_2137
0020D0  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0020D2  1  A5 60                LDA     Gclctd          ; get garbage collected flag
0020D4  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
0020D6  1               
0020D6  1  20 E0 20             JSR     LAB_GARB        ; else go do garbage collection
0020D9  1  A9 80                LDA     #$80            ; flag for garbage collected
0020DB  1  85 60                STA     Gclctd          ; set garbage collected flag
0020DD  1  68                   PLA                     ; pull length
0020DE  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
0020E0  1               
0020E0  1               ; garbage collection routine
0020E0  1               
0020E0  1               LAB_GARB
0020E0  1  A6 85                LDX     Ememl           ; get end of mem low byte
0020E2  1  A5 86                LDA     Ememh           ; get end of mem high byte
0020E4  1               
0020E4  1               ; re-run routine from last ending
0020E4  1               
0020E4  1               LAB_214B
0020E4  1  86 81                STX     Sstorl          ; set string storage low byte
0020E6  1  85 82                STA     Sstorh          ; set string storage high byte
0020E8  1  A0 00                LDY     #$00            ; clear index
0020EA  1  84 9D                STY     garb_h          ; clear working pointer high byte (flag no strings to move)
0020EC  1  A5 7F                LDA     Earryl          ; get array mem end low byte
0020EE  1  A6 80                LDX     Earryh          ; get array mem end high byte
0020F0  1  85 AA                STA     Histrl          ; save as highest string low byte
0020F2  1  86 AB                STX     Histrh          ; save as highest string high byte
0020F4  1  A9 68                LDA     #des_sk         ; set descriptor stack pointer
0020F6  1  85 71                STA     ut1_pl          ; save descriptor stack pointer low byte
0020F8  1  84 72                STY     ut1_ph          ; save descriptor stack pointer high byte ($00)
0020FA  1               LAB_2161
0020FA  1  C5 65                CMP     next_s          ; compare with descriptor stack pointer
0020FC  1  F0 05                BEQ     LAB_216A        ; branch if =
0020FE  1               
0020FE  1  20 CE 21             JSR     LAB_21D7        ; go garbage collect descriptor stack
002101  1  F0 F7                BEQ     LAB_2161        ; loop always
002103  1               
002103  1               ; done stacked strings, now do string vars
002103  1               LAB_216A
002103  1  06 A0                ASL     g_step          ; set step size = $06
002105  1  A5 7B                LDA     Svarl           ; get start of vars low byte
002107  1  A6 7C                LDX     Svarh           ; get start of vars high byte
002109  1  85 71                STA     ut1_pl          ; save as pointer low byte
00210B  1  86 72                STX     ut1_ph          ; save as pointer high byte
00210D  1               LAB_2176
00210D  1  E4 7E                CPX     Sarryh          ; compare start of arrays high byte
00210F  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
002111  1               
002111  1  C5 7D                CMP     Sarryl          ; else compare start of arrays low byte
002113  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
002115  1               
002115  1               LAB_217E
002115  1  20 B4 21             JSR     LAB_21D1        ; go garbage collect strings
002118  1  F0 F3                BEQ     LAB_2176        ; loop always
00211A  1               
00211A  1               ; done string vars, now do string arrays
00211A  1               LAB_2183
00211A  1  85 A4                STA     Nbendl          ; save start of arrays low byte as working pointer
00211C  1  86 A5                STX     Nbendh          ; save start of arrays high byte as working pointer
00211E  1  A9 04                LDA     #$04            ; set step size
002120  1  85 A0                STA     g_step          ; save step size
002122  1               LAB_218B
002122  1  A5 A4                LDA     Nbendl          ; get pointer low byte
002124  1  A6 A5                LDX     Nbendh          ; get pointer high byte
002126  1               LAB_218F
002126  1  E4 80                CPX     Earryh          ; compare with array mem end high byte
002128  1  D0 07                BNE     LAB_219A        ; branch if not at end
00212A  1               
00212A  1  C5 7F                CMP     Earryl          ; else compare with array mem end low byte
00212C  1  D0 03 4C 49          LBEQ    LAB_2216        ; tidy up and exit if at end
002130  1  22           
002131  1               
002131  1               LAB_219A
002131  1  85 71                STA     ut1_pl          ; save pointer low byte
002133  1  86 72                STX     ut1_ph          ; save pointer high byte
002135  1  A0 02                LDY     #$02            ; set index
002137  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get array size low byte
00213B  1  B5 71 C9 00  
00213F  1  D0 04 A2 00  
00214D  1  65 A4                ADC     Nbendl          ; add start of this array low byte
00214F  1  85 A4                STA     Nbendl          ; save start of next array low byte
002151  1  C8                   INY                     ; increment index
002152  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get array size high byte
002156  1  B5 71 C9 00  
00215A  1  D0 04 A2 00  
002168  1  65 A5                ADC     Nbendh          ; add start of this array high byte
00216A  1  85 A5                STA     Nbendh          ; save start of next array high byte
00216C  1  A0 01                LDY     #$01            ; set index
00216E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get name second byte
002172  1  B5 71 C9 00  
002176  1  D0 04 A2 00  
002184  1  10 9C                BPL     LAB_218B        ; skip if not string array
002186  1               
002186  1               ; was string array so ..
002186  1               
002186  1  A0 04                LDY     #$04            ; set index
002188  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get # of dimensions
00218C  1  B5 71 C9 00  
002190  1  D0 04 A2 00  
00219E  1  0A                   ASL     A               ; *2
00219F  1  69 05                ADC     #$05            ; +5 (array header size)
0021A1  1  20 3C 22             JSR     LAB_2208        ; go set up for first element
0021A4  1               LAB_21C4
0021A4  1  E4 A5                CPX     Nbendh          ; compare with start of next array high byte
0021A6  1  D0 07                BNE     LAB_21CC        ; branch if <> (go do this array)
0021A8  1               
0021A8  1  C5 A4                CMP     Nbendl          ; else compare element pointer low byte with next array
0021AA  1               ; low byte
0021AA  1  D0 03 4C 26          LBEQ    LAB_218F        ; if equal then go do next array
0021AE  1  21           
0021AF  1               
0021AF  1               LAB_21CC
0021AF  1  20 CE 21             JSR     LAB_21D7        ; go defrag array strings
0021B2  1  F0 F0                BEQ     LAB_21C4        ; go do next array string (loop always)
0021B4  1               
0021B4  1               ; defrag string variables
0021B4  1               ; enter with XA = variable pointer
0021B4  1               ; return with XA = next variable pointer
0021B4  1               
0021B4  1               LAB_21D1
0021B4  1  C8                   INY                     ; increment index (Y was $00)
0021B5  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get var name byte 2
0021B9  1  B5 71 C9 00  
0021BD  1  D0 04 A2 00  
0021CB  1  10 6C                BPL     LAB_2206        ; if not string, step pointer to next var and return
0021CD  1               
0021CD  1  C8                   INY                     ; else increment index
0021CE  1               LAB_21D7
0021CE  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string length
0021D2  1  B5 71 C9 00  
0021D6  1  D0 04 A2 00  
0021E4  1  F0 53                BEQ     LAB_2206        ; if null, step pointer to next string and return
0021E6  1               
0021E6  1  C8                   INY                     ; else increment index
0021E7  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte
0021EB  1  B5 71 C9 00  
0021EF  1  D0 04 A2 00  
0021FD  1  AA                   TAX                     ; copy to X
0021FE  1  C8                   INY                     ; increment index
0021FF  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte
002203  1  B5 71 C9 00  
002207  1  D0 04 A2 00  
002215  1  C5 82                CMP     Sstorh          ; compare bottom of string space high byte
002217  1  90 06                BCC     LAB_21EC        ; branch if less
002219  1               
002219  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
00221B  1               
00221B  1               ; high bytes were = so compare low bytes
00221B  1  E4 81                CPX     Sstorl          ; compare bottom of string space low byte
00221D  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
00221F  1               
00221F  1               ; string pointer is < string storage pointer (pos in mem)
00221F  1               LAB_21EC
00221F  1  C5 AB                CMP     Histrh          ; compare to highest string high byte
002221  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
002223  1               
002223  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
002225  1               
002225  1               ; high bytes were = so compare low bytes
002225  1  E4 AA                CPX     Histrl          ; compare to highest string low byte
002227  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
002229  1               
002229  1               ; string is in string memory space
002229  1               LAB_21F6
002229  1  86 AA                STX     Histrl          ; save as new highest string low byte
00222B  1  85 AB                STA     Histrh          ; save as new highest string high byte
00222D  1  A5 71                LDA     ut1_pl          ; get start of vars(descriptors) low byte
00222F  1  A6 72                LDX     ut1_ph          ; get start of vars(descriptors) high byte
002231  1  85 9C                STA     garb_l          ; save as working pointer low byte
002233  1  86 9D                STX     garb_h          ; save as working pointer high byte
002235  1  88                   DEY                     ; decrement index DIFFERS
002236  1  88                   DEY                     ; decrement index (should point to descriptor start)
002237  1  84 A2                STY     g_indx          ; save index pointer
002239  1               
002239  1               ; step pointer to next string
002239  1               LAB_2206
002239  1  18                   CLC                     ; clear carry for add
00223A  1               LAB_2207
00223A  1  A5 A0                LDA     g_step          ; get step size
00223C  1               LAB_2208
00223C  1  65 71                ADC     ut1_pl          ; add pointer low byte
00223E  1  85 71                STA     ut1_pl          ; save pointer low byte
002240  1  90 02                BCC     LAB_2211        ; branch if no overflow
002242  1               
002242  1  E6 72                INC     ut1_ph          ; else increment high byte
002244  1               LAB_2211
002244  1  A6 72                LDX     ut1_ph          ; get pointer high byte
002246  1  A0 00                LDY     #$00            ; clear Y
002248  1  60                   RTS
002249  1               
002249  1               ; search complete, now either exit or set-up and move string
002249  1               
002249  1               LAB_2216
002249  1  C6 A0                DEC     g_step          ; decrement step size (now $03 for descriptor stack)
00224B  1  A6 9D                LDX     garb_h          ; get string to move high byte
00224D  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
00224F  1               
00224F  1  A4 A2                LDY     g_indx          ; get index byte back (points to descriptor)
002251  1  18                   CLC                     ; clear carry for add
002252  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
002256  1  B5 9C C9 00  
00225A  1  D0 04 A2 00  
002268  1  65 AA                ADC     Histrl          ; add highest string low byte
00226A  1  85 A6                STA     Obendl          ; save old block end low pointer
00226C  1  A5 AB                LDA     Histrh          ; get highest string high byte
00226E  1  69 00                ADC     #$00            ; add any carry
002270  1  85 A7                STA     Obendh          ; save old block end high byte
002272  1  A5 81                LDA     Sstorl          ; get bottom of string space low byte
002274  1  A6 82                LDX     Sstorh          ; get bottom of string space high byte
002276  1  85 A4                STA     Nbendl          ; save new block end low byte
002278  1  86 A5                STX     Nbendh          ; save new block end high byte
00227A  1  20 23 09             JSR     LAB_11D6        ; open up space in memory, don't set array end
00227D  1  A4 A2                LDY     g_indx          ; get index byte
00227F  1  C8                   INY                     ; point to descriptor low byte
002280  1  A5 A4                LDA     Nbendl          ; get string pointer low byte
002282  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
002286  1  01 B5 9C C9  
00228A  1  00 D0 04 A2  
002298  1  AA                   TAX                     ; copy string pointer low byte
002299  1  E6 A5                INC     Nbendh          ; correct high byte (move sets high byte -1)
00229B  1  A5 A5                LDA     Nbendh          ; get new string pointer high byte
00229D  1  C8                   INY                     ; point to descriptor high byte
00229E  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
0022A2  1  01 B5 9C C9  
0022A6  1  00 D0 04 A2  
0022B4  1  4C E4 20             JMP     LAB_214B        ; re-run routine from last ending
0022B7  1               ; (but don't collect this string)
0022B7  1               
0022B7  1               ; concatenate
0022B7  1               ; add strings, string 1 is in descriptor des_pl, string 2 is in line
0022B7  1               
0022B7  1               LAB_224D
0022B7  1  A5 AF                LDA     des_ph          ; get descriptor pointer high byte
0022B9  1  48                   PHA                     ; put on stack
0022BA  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0022BC  1  48                   PHA                     ; put on stack
0022BD  1  20 9D 17             JSR     LAB_GVAL        ; get value from line
0022C0  1  20 A0 16             JSR     LAB_CTST        ; check if source is string, else do type mismatch
0022C3  1  68                   PLA                     ; get descriptor pointer low byte back
0022C4  1  85 B8                STA     ssptr_l         ; set pointer low byte
0022C6  1  68                   PLA                     ; get descriptor pointer high byte back
0022C7  1  85 B9                STA     ssptr_h         ; set pointer high byte
0022C9  1  A0 00                LDY     #$00            ; clear index
0022CB  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
0022CF  1  B5 B8 C9 00  
0022D3  1  D0 04 A2 00  
0022E1  1  18                   CLC                     ; clear carry for add
0022E2  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
0022E6  1  01 B5 AE C9  
0022EA  1  00 D0 04 A2  
0022FB  1  90 05                BCC     LAB_226D        ; branch if no overflow
0022FD  1               
0022FD  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
0022FF  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
002302  1               
002302  1               LAB_226D
002302  1  20 1F 20             JSR     LAB_209C        ; copy des_pl/h to des_2l/h and make string space A bytes
002305  1               ; long
002305  1  20 1F 23             JSR     LAB_228A        ; copy string from descriptor (sdescr) to (Sutill)
002308  1  A5 9E                LDA     des_2l          ; get descriptor pointer low byte
00230A  1  A4 9F                LDY     des_2h          ; get descriptor pointer high byte
00230C  1  20 B4 23             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
00230F  1               ; returns with A = length, ut1_pl = pointer low byte,
00230F  1               ; ut1_ph = pointer high byte
00230F  1  20 6D 23             JSR     LAB_229C        ; store string A bytes long from (ut1_pl) to (Sutill)
002312  1  A5 B8                LDA     ssptr_l         ;.set descriptor pointer low byte
002314  1  A4 B9                LDY     ssptr_h         ;.set descriptor pointer high byte
002316  1  20 B4 23             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
002319  1               ; returns with A = length, X=ut1_pl=pointer low byte,
002319  1               ; Y=ut1_ph=pointer high byte
002319  1  20 86 20             JSR     LAB_RTST        ; check for space on descriptor stack then put string
00231C  1               ; address and length on descriptor stack and update stack
00231C  1               ; pointers
00231C  1  4C C6 16             JMP     LAB_1ADB        ;.continue evaluation
00231F  1               
00231F  1               ; copy string from descriptor (sdescr) to (Sutill)
00231F  1               
00231F  1               LAB_228A
00231F  1  A0 00                LDY     #$00            ; clear index
002321  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
002325  1  B5 B8 C9 00  
002329  1  D0 04 A2 00  
002337  1  48                   PHA                     ; save on stack
002338  1  C8                   INY                     ; increment index
002339  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
00233D  1  B5 B8 C9 00  
002341  1  D0 04 A2 00  
00234F  1  AA                   TAX                     ; copy to X
002350  1  C8                   INY                     ; increment index
002351  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
002355  1  B5 B8 C9 00  
002359  1  D0 04 A2 00  
002367  1  A8                   TAY                     ; copy to Y
002368  1  68                   PLA                     ; get length back
002369  1               
002369  1               ; store string A bytes long from YX to (Sutill)
002369  1               
002369  1               LAB_2298
002369  1  86 71                STX     ut1_pl          ; save source string pointer low byte
00236B  1  84 72                STY     ut1_ph          ; save source string pointer high byte
00236D  1               
00236D  1               ; store string A bytes long from (ut1_pl) to (Sutill)
00236D  1               
00236D  1               LAB_229C
00236D  1  AA                   TAX                     ; copy length to index (don't count with Y)
00236E  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
002370  1               
002370  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
002372  1               LAB_22A0
002372  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
002376  1  B5 71 C9 00  
00237A  1  D0 04 A2 00  
002388  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
00238C  1  01 B5 83 C9  
002390  1  00 D0 04 A2  
00239E  1               
00239E  1  C8                   INY                     ; increment index
00239F  1  CA                   DEX                     ; decrement counter
0023A0  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
0023A2  1               
0023A2  1  98                   TYA                     ; restore length from Y
0023A3  1               LAB_22A9
0023A3  1  18                   CLC                     ; clear carry for add
0023A4  1  65 83                ADC     Sutill          ; add string utility ptr low byte
0023A6  1  85 83                STA     Sutill          ; save string utility ptr low byte
0023A8  1  90 02                BCC     LAB_22B2        ; branch if no carry
0023AA  1               
0023AA  1  E6 84                INC     Sutilh          ; else increment string utility ptr high byte
0023AC  1               LAB_22B2
0023AC  1  60                   RTS
0023AD  1               
0023AD  1               ; evaluate string
0023AD  1               
0023AD  1               LAB_EVST
0023AD  1  20 A0 16             JSR     LAB_CTST        ; check if source is string, else do type mismatch
0023B0  1               
0023B0  1               ; pop string off descriptor stack, or from top of string space
0023B0  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
0023B0  1               
0023B0  1               LAB_22B6
0023B0  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0023B2  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
0023B4  1               
0023B4  1               ; pop (YA) descriptor off stack or from top of string space
0023B4  1               ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
0023B4  1               
0023B4  1               LAB_22BA
0023B4  1  85 71                STA     ut1_pl          ; save descriptor pointer low byte
0023B6  1  84 72                STY     ut1_ph          ; save descriptor pointer high byte
0023B8  1  20 21 24             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
0023BB  1  08                   PHP                     ; save status flags
0023BC  1  A0 00                LDY     #$00            ; clear index
0023BE  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
0023C2  1  B5 71 C9 00  
0023C6  1  D0 04 A2 00  
0023D4  1  48                   PHA                     ; put on stack
0023D5  1  C8                   INY                     ; increment index
0023D6  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
0023DA  1  B5 71 C9 00  
0023DE  1  D0 04 A2 00  
0023EC  1  AA                   TAX                     ; copy to X
0023ED  1  C8                   INY                     ; increment index
0023EE  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
0023F2  1  B5 71 C9 00  
0023F6  1  D0 04 A2 00  
002404  1  A8                   TAY                     ; copy to Y
002405  1  68                   PLA                     ; get string length back
002406  1  28                   PLP                     ; restore status
002407  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> last_sl,last_sh
002409  1               
002409  1  C4 82                CPY     Sstorh          ; compare bottom of string space high byte
00240B  1  D0 0F                BNE     LAB_22E6        ; branch if <>
00240D  1               
00240D  1  E4 81                CPX     Sstorl          ; else compare bottom of string space low byte
00240F  1  D0 0B                BNE     LAB_22E6        ; branch if <>
002411  1               
002411  1  48                   PHA                     ; save string length
002412  1  18                   CLC                     ; clear carry for add
002413  1  65 81                ADC     Sstorl          ; add bottom of string space low byte
002415  1  85 81                STA     Sstorl          ; save bottom of string space low byte
002417  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
002419  1               
002419  1  E6 82                INC     Sstorh          ; increment bottom of string space high byte
00241B  1               LAB_22E5
00241B  1  68                   PLA                     ; restore string length
00241C  1               LAB_22E6
00241C  1  86 71                STX     ut1_pl          ; save string pointer low byte
00241E  1  84 72                STY     ut1_ph          ; save string pointer high byte
002420  1  60                   RTS
002421  1               
002421  1               ; clean descriptor stack, YA = pointer
002421  1               ; checks if AY is on the descriptor stack, if so does a stack discard
002421  1               
002421  1               LAB_22EB
002421  1  C4 67                CPY     last_sh         ; compare pointer high byte
002423  1  D0 0C                BNE     LAB_22FB        ; exit if <>
002425  1               
002425  1  C5 66                CMP     last_sl         ; compare pointer low byte
002427  1  D0 08                BNE     LAB_22FB        ; exit if <>
002429  1               
002429  1  85 65                STA     next_s          ; save descriptor stack pointer
00242B  1  E9 03                SBC     #$03            ; -3
00242D  1  85 66                STA     last_sl         ; save low byte -3
00242F  1  A0 00                LDY     #$00            ; clear high byte
002431  1               LAB_22FB
002431  1  60                   RTS
002432  1               
002432  1               ; perform CHR$()
002432  1               
002432  1               LAB_CHRS
002432  1  20 3C 26             JSR     LAB_EVBY        ; evaluate byte expression, result in X
002435  1  8A                   TXA                     ; copy to A
002436  1  48                   PHA                     ; save character
002437  1  A9 01                LDA     #$01            ; string is single byte
002439  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
00243C  1               ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
00243C  1  68                   PLA                     ; get character back
00243D  1  A0 00                LDY     #$00            ; clear index
00243F  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002443  1  01 B5 AD C9  
002447  1  00 D0 04 A2  
002455  1  4C 86 20             JMP     LAB_RTST        ; check for space on descriptor stack then put string
002458  1               ; address and length on descriptor stack and update stack
002458  1               ; pointers
002458  1               
002458  1               ; perform LEFT$()
002458  1               
002458  1               LAB_LEFT
002458  1  48                   PHA                     ; push byte parameter
002459  1  20 10 25             JSR     LAB_236F        ; pull string data and byte parameter from stack
00245C  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
00245C  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
002460  1  01 B5 9E C9  
002464  1  00 D0 04 A2  
002474  1  98                   TYA                     ; clear A
002475  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
002477  1               
002477  1               ; perform RIGHT$()
002477  1               
002477  1               LAB_RIGHT
002477  1  48                   PHA                     ; push byte parameter
002478  1  20 10 25             JSR     LAB_236F        ; pull string data and byte parameter from stack
00247B  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
00247B  1                       .IFDEF  DUODYNE
00247B  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
00247F  1  01 B5 9E C9  
002483  1  00 D0 04 A2  
002491  1  18                   CLC                     ; clear carry for add-1
002492  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
002494  1                       .ELSE
002494  1                       CLC                     ; clear carry for add-1
002494  1                       SBC     (des_2l),Y      ; subtract string length
002494  1                       .ENDIF
002494  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
002496  1               
002496  1               LAB_2316
002496  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
002498  1               
002498  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
00249C  1  B5 9E C9 00  
0024A0  1  D0 04 A2 00  
0024AE  1  AA                   TAX                     ; copy to byte parameter copy
0024AF  1  98                   TYA                     ; clear string start offset
0024B0  1               LAB_231C
0024B0  1  48                   PHA                     ; save string start offset
0024B1  1               LAB_231D
0024B1  1  8A                   TXA                     ; copy byte parameter (or string length if <)
0024B2  1               LAB_231E
0024B2  1  48                   PHA                     ; save string length
0024B3  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
0024B6  1               ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
0024B6  1  A5 9E                LDA     des_2l          ; get descriptor pointer low byte
0024B8  1  A4 9F                LDY     des_2h          ; get descriptor pointer high byte
0024BA  1  20 B4 23             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0024BD  1               ; returns with A = length, X=ut1_pl=pointer low byte,
0024BD  1               ; Y=ut1_ph=pointer high byte
0024BD  1  68                   PLA                     ; get string length back
0024BE  1  A8                   TAY                     ; copy length to Y
0024BF  1  68                   PLA                     ; get string start offset back
0024C0  1  18                   CLC                     ; clear carry for add
0024C1  1  65 71                ADC     ut1_pl          ; add start offset to string start pointer low byte
0024C3  1  85 71                STA     ut1_pl          ; save string start pointer low byte
0024C5  1  90 02                BCC     LAB_2335        ; branch if no overflow
0024C7  1               
0024C7  1  E6 72                INC     ut1_ph          ; else increment string start pointer high byte
0024C9  1               LAB_2335
0024C9  1  98                   TYA                     ; copy length to A
0024CA  1  20 6D 23             JSR     LAB_229C        ; store string A bytes long from (ut1_pl) to (Sutill)
0024CD  1  4C 86 20             JMP     LAB_RTST        ; check for space on descriptor stack then put string
0024D0  1               ; address and length on descriptor stack and update stack
0024D0  1               ; pointers
0024D0  1               
0024D0  1               ; perform MID$()
0024D0  1               
0024D0  1               LAB_MIDS
0024D0  1  48                   PHA                     ; push byte parameter
0024D1  1  A9 FF                LDA     #$FF            ; set default length = 255
0024D3  1  85 AF                STA     mids_l          ; save default length
0024D5  1                       .IFDEF  DUODYNE
0024D5  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0024D9  1                       .ELSE
0024D9  1                       JSR     LAB_GBYT        ; scan memory
0024D9  1                       .ENDIF
0024D9  1               
0024D9  1  C9 29                CMP     #')'            ; compare with ")"
0024DB  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
0024DD  1               
0024DD  1  20 D1 17             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
0024E0  1  20 39 26             JSR     LAB_GTBY        ; get byte parameter (use copy in mids_l)
0024E3  1               LAB_2358
0024E3  1  20 10 25             JSR     LAB_236F        ; pull string data and byte parameter from stack
0024E6  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
0024E6  1  CA                   DEX                     ; decrement start index
0024E7  1  8A                   TXA                     ; copy to A
0024E8  1  48                   PHA                     ; save string start offset
0024E9  1                       .IFDEF  DUODYNE
0024E9  1  8B 48 DA A2          FETCHINDIRECTY des_2l
0024ED  1  01 B5 9E C9  
0024F1  1  00 D0 04 A2  
0024FF  1  18                   CLC                     ; clear carry for sub-1
002500  1  A2 00                LDX     #$00            ; clear output string length
002502  1  E5 04                SBC     <TMPFLG         ; subtract string length
002504  1                       .ELSE
002504  1                       CLC                     ; clear carry for sub-1
002504  1                       LDX     #$00            ; clear output string length
002504  1                       SBC     (des_2l),Y      ; subtract string length
002504  1                       .ENDIF
002504  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
002506  1               
002506  1  49 FF                EOR     #$FF            ; complement -length
002508  1  C5 AF                CMP     mids_l          ; compare byte parameter
00250A  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
00250C  1               
00250C  1  A5 AF                LDA     mids_l          ; get length byte
00250E  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
002510  1               
002510  1               ; pull string data and byte parameter from stack
002510  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
002510  1               
002510  1               LAB_236F
002510  1  20 C0 17             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
002513  1  68                   PLA                     ; pull return address low byte (return address)
002514  1  85 A2                STA     Fnxjpl          ; save functions jump vector low byte
002516  1  68                   PLA                     ; pull return address high byte (return address)
002517  1  85 A3                STA     Fnxjph          ; save functions jump vector high byte
002519  1  68                   PLA                     ; pull byte parameter
00251A  1  AA                   TAX                     ; copy byte parameter to X
00251B  1  68                   PLA                     ; pull string pointer low byte
00251C  1  85 9E                STA     des_2l          ; save it
00251E  1  68                   PLA                     ; pull string pointer high byte
00251F  1  85 9F                STA     des_2h          ; save it
002521  1  A0 00                LDY     #$00            ; clear index
002523  1  8A                   TXA                     ; copy byte parameter
002524  1  D0 03 4C 32          LBEQ    LAB_23A8        ; if null do function call error then warm start
002528  1  26           
002529  1               
002529  1  E6 A2                INC     Fnxjpl          ; increment function jump vector low byte
00252B  1               ; (JSR pushes return addr-1. this is all very nice
00252B  1               ; but will go tits up if either call is on a page
00252B  1               ; boundary!)
00252B  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
00252E  1               
00252E  1               
00252E  1               ; perform LCASE$()
00252E  1               
00252E  1               LAB_LCASE
00252E  1  20 AD 23             JSR     LAB_EVST        ; evaluate string
002531  1  85 AC                STA     str_ln          ; set string length
002533  1  A8                   TAY                     ; copy length to Y
002534  1  D0 03 4C C1          LBEQ    NoString        ; branch if null string
002538  1  25           
002539  1               
002539  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long A=length,
00253C  1               ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
00253C  1  86 AD                STX     str_pl          ; save string pointer low byte
00253E  1  84 AE                STY     str_ph          ; save string pointer high byte
002540  1  A8                   TAY                     ; get string length back
002541  1               
002541  1               LC_loop
002541  1  88                   DEY                     ; decrement index
002542  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
002546  1  B5 71 C9 00  
00254A  1  D0 04 A2 00  
002558  1  20 57 1A             JSR     LAB_1D82        ; is character "A" to "Z"
00255B  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
00255D  1               
00255D  1  09 20                ORA     #$20            ; convert upper to lower case
00255F  1               NoUcase
00255F  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
002563  1  01 B5 83 C9  
002567  1  00 D0 04 A2  
002575  1  98                   TYA                     ; test index
002576  1  D0 C9                BNE     LC_loop         ; loop if not all done
002578  1               
002578  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
00257A  1               
00257A  1               ; perform UCASE$()
00257A  1               
00257A  1               LAB_UCASE
00257A  1  20 AD 23             JSR     LAB_EVST        ; evaluate string
00257D  1  85 AC                STA     str_ln          ; set string length
00257F  1  A8                   TAY                     ; copy length to Y
002580  1  F0 3F                BEQ     NoString        ; branch if null string
002582  1               
002582  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long A=length,
002585  1               ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
002585  1  86 AD                STX     str_pl          ; save string pointer low byte
002587  1  84 AE                STY     str_ph          ; save string pointer high byte
002589  1  A8                   TAY                     ; get string length back
00258A  1               
00258A  1               UC_loop
00258A  1  88                   DEY                     ; decrement index
00258B  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
00258F  1  B5 71 C9 00  
002593  1  D0 04 A2 00  
0025A1  1  20 53 1A             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
0025A4  1  90 02                BCC     NoLcase         ; branch if not alpha
0025A6  1               
0025A6  1  29 DF                AND     #$DF            ; convert lower to upper case
0025A8  1               NoLcase
0025A8  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
0025AC  1  01 B5 83 C9  
0025B0  1  00 D0 04 A2  
0025BE  1  98                   TYA                     ; test index
0025BF  1  D0 C9                BNE     UC_loop         ; loop if not all done
0025C1  1               
0025C1  1               NoString
0025C1  1  4C 86 20             JMP     LAB_RTST        ; check for space on descriptor stack then put string
0025C4  1               ; address and length on descriptor stack and update stack
0025C4  1               ; pointers
0025C4  1               
0025C4  1               ; perform SADD()
0025C4  1               
0025C4  1               LAB_SADD
0025C4  1                       .IFDEF  DUODYNE
0025C4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0025C8  1                       .ELSE
0025C8  1                       JSR     LAB_IGBY        ; increment and scan memory
0025C8  1                       .ENDIF
0025C8  1               
0025C8  1  20 AC 19             JSR     LAB_GVAR        ; get var address
0025CB  1               
0025CB  1  20 C0 17             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
0025CE  1  20 A0 16             JSR     LAB_CTST        ; check if source is string, else do type mismatch
0025D1  1               
0025D1  1  A0 02                LDY     #$02            ; index to string pointer high byte
0025D3  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
0025D7  1  B5 95 C9 00  
0025DB  1  D0 04 A2 00  
0025E9  1  AA                   TAX                     ; copy string pointer high byte to X
0025EA  1  88                   DEY                     ; index to string pointer low byte
0025EB  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
0025EF  1  B5 95 C9 00  
0025F3  1  D0 04 A2 00  
002601  1  A8                   TAY                     ; copy string pointer low byte to Y
002602  1  8A                   TXA                     ; copy string pointer high byte to A
002603  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
002606  1               
002606  1               ; perform LEN()
002606  1               
002606  1               LAB_LENS
002606  1  20 0C 26             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
002609  1  4C 9B 1E             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
00260C  1               
00260C  1               ; evaluate string, get length in Y
00260C  1               
00260C  1               LAB_ESGL
00260C  1  20 AD 23             JSR     LAB_EVST        ; evaluate string
00260F  1  A8                   TAY                     ; copy length to Y
002610  1  60                   RTS
002611  1               
002611  1               ; perform ASC()
002611  1               
002611  1               LAB_ASC
002611  1  20 0C 26             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
002614  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
002616  1               
002616  1  A0 00                LDY     #$00            ; set index to first character
002618  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
00261C  1  B5 71 C9 00  
002620  1  D0 04 A2 00  
00262E  1  A8                   TAY                     ; copy to Y
00262F  1  4C 9B 1E             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
002632  1               
002632  1               ; do function call error then warm start
002632  1               
002632  1               LAB_23A8
002632  1  4C 30 1C             JMP     LAB_FCER        ; do function call error then warm start
002635  1               
002635  1               ; scan and get byte parameter
002635  1               
002635  1               LAB_SGBY
002635  1                       .IFDEF  DUODYNE
002635  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002639  1                       .ELSE
002639  1                       JSR     LAB_IGBY        ; increment and scan memory
002639  1                       .ENDIF
002639  1               
002639  1               
002639  1               ; get byte parameter
002639  1               
002639  1               LAB_GTBY
002639  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00263C  1               ; else do type mismatch
00263C  1               
00263C  1               ; evaluate byte expression, result in X
00263C  1               
00263C  1               LAB_EVBY
00263C  1  20 50 1B             JSR     LAB_EVPI        ; evaluate integer expression (no check)
00263F  1               
00263F  1  A4 AE                LDY     FAC1_2          ; get FAC1 mantissa2
002641  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
002643  1               
002643  1  A6 AF                LDX     FAC1_3          ; get FAC1 mantissa3
002645  1                       .IFDEF  DUODYNE
002645  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002649  1                       .ELSE
002649  1                       JSR     LAB_GBYT        ; scan memory
002649  1                       .ENDIF
002649  1  60                   RTS
00264A  1               
00264A  1               ; perform VAL()
00264A  1               
00264A  1               LAB_VAL
00264A  1  20 0C 26             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
00264D  1  D0 03                BNE     LAB_23C5        ; branch if not null string
00264F  1               
00264F  1               ; string was null so set result = $00
00264F  1  4C B0 28             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
002652  1               
002652  1               LAB_23C5
002652  1  A6 C3                LDX     Bpntrl          ; get BASIC execute pointer low byte
002654  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
002656  1  86 BA                STX     Btmpl           ; save BASIC execute pointer low byte
002658  1  84 BB                STY     Btmph           ; save BASIC execute pointer high byte
00265A  1  A6 71                LDX     ut1_pl          ; get string pointer low byte
00265C  1  86 C3                STX     Bpntrl          ; save as BASIC execute pointer low byte
00265E  1  18                   CLC                     ; clear carry
00265F  1  65 71                ADC     ut1_pl          ; add string length
002661  1  85 73                STA     ut2_pl          ; save string end low byte
002663  1  A5 72                LDA     ut1_ph          ; get string pointer high byte
002665  1  85 C4                STA     Bpntrh          ; save as BASIC execute pointer high byte
002667  1  69 00                ADC     #$00            ; add carry to high byte
002669  1  85 74                STA     ut2_ph          ; save string end high byte
00266B  1  A0 00                LDY     #$00            ; set index to $00
00266D  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
002671  1  B5 73 C9 00  
002675  1  D0 04 A2 00  
002683  1  48                   PHA                     ; push it
002684  1  98                   TYA                     ; clear A
002685  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
002689  1  01 B5 73 C9  
00268D  1  00 D0 04 A2  
00269B  1                       .IFDEF  DUODYNE
00269B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00269F  1                       .ELSE
00269F  1                       JSR     LAB_GBYT        ; scan memory
00269F  1                       .ENDIF
00269F  1               
00269F  1  20 5A 2D             JSR     LAB_2887        ; get FAC1 from string
0026A2  1  68                   PLA                     ; restore string end +1 byte
0026A3  1  A0 00                LDY     #$00            ; set index to zero
0026A5  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
0026A9  1  01 B5 73 C9  
0026AD  1  00 D0 04 A2  
0026BB  1               
0026BB  1               ; restore BASIC execute pointer from temp (Btmpl/Btmph)
0026BB  1               
0026BB  1               LAB_23F3
0026BB  1  A6 BA                LDX     Btmpl           ; get BASIC execute pointer low byte back
0026BD  1  A4 BB                LDY     Btmph           ; get BASIC execute pointer high byte back
0026BF  1  86 C3                STX     Bpntrl          ; save BASIC execute pointer low byte
0026C1  1  84 C4                STY     Bpntrh          ; save BASIC execute pointer high byte
0026C3  1  60                   RTS
0026C4  1               
0026C4  1               ; get two parameters for POKE or WAIT
0026C4  1               
0026C4  1               LAB_GADB
0026C4  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0026C7  1               ; else do type mismatch
0026C7  1  20 DD 26             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0026CA  1               
0026CA  1               ; scan for "," and get byte, else do Syntax error then warm start
0026CA  1               
0026CA  1               LAB_SCGB
0026CA  1  20 D1 17             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
0026CD  1  A5 12                LDA     Itemph          ; save temporary integer high byte
0026CF  1  48                   PHA                     ; on stack
0026D0  1  A5 11                LDA     Itempl          ; save temporary integer low byte
0026D2  1  48                   PHA                     ; on stack
0026D3  1  20 39 26             JSR     LAB_GTBY        ; get byte parameter
0026D6  1  68                   PLA                     ; pull low byte
0026D7  1  85 11                STA     Itempl          ; restore temporary integer low byte
0026D9  1  68                   PLA                     ; pull high byte
0026DA  1  85 12                STA     Itemph          ; restore temporary integer high byte
0026DC  1  60                   RTS
0026DD  1               
0026DD  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
0026DD  1               ; -ve and converts it into a right truncated integer in Itempl and Itemph
0026DD  1               
0026DD  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
0026DD  1               
0026DD  1               LAB_F2FX
0026DD  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0026DF  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
0026E1  1  B0 02 80 03          LBCS    LAB_23A8        ; if >= do function call error then warm start
0026E5  1  4C 32 26     
0026E8  1               
0026E8  1               LAB_F2FU
0026E8  1  20 04 2D             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0026EB  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0026ED  1  A4 AF                LDY     FAC1_3          ; get FAC1 mantissa3
0026EF  1  84 11                STY     Itempl          ; save temporary integer low byte
0026F1  1  85 12                STA     Itemph          ; save temporary integer high byte
0026F3  1  60                   RTS
0026F4  1               
0026F4  1               ; perform PEEK()
0026F4  1               
0026F4  1               LAB_PEEK
0026F4  1  20 DD 26             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0026F7  1  A2 00                LDX     #$00            ; clear index
0026F9  1  A1 11                LDA     (Itempl,X)      ; get byte via temporary integer (addr)
0026FB  1  A8                   TAY                     ; copy byte to Y
0026FC  1  4C 9B 1E             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
0026FF  1               
0026FF  1               ; perform POKE
0026FF  1               
0026FF  1               LAB_POKE
0026FF  1  20 C4 26             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
002702  1  8A                   TXA                     ; copy byte argument to A
002703  1  A2 00                LDX     #$00            ; clear index
002705  1  81 11                STA     (Itempl,X)      ; save byte via temporary integer (addr)
002707  1  60                   RTS
002708  1               
002708  1               ; perform DEEK()
002708  1               
002708  1               LAB_DEEK
002708  1  20 DD 26             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
00270B  1  A2 00                LDX     #$00            ; clear index
00270D  1  A1 11                LDA     (Itempl,X)      ; PEEK low byte
00270F  1  A8                   TAY                     ; copy to Y
002710  1  E6 11                INC     Itempl          ; increment pointer low byte
002712  1  D0 02                BNE     Deekh           ; skip high increment if no rollover
002714  1               
002714  1  E6 12                INC     Itemph          ; increment pointer high byte
002716  1               Deekh
002716  1  A1 11                LDA     (Itempl,X)      ; PEEK high byte
002718  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00271B  1               
00271B  1               ; perform DOKE
00271B  1               
00271B  1               LAB_DOKE
00271B  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00271E  1               ; else do type mismatch
00271E  1  20 DD 26             JSR     LAB_F2FX        ; convert floating-to-fixed
002721  1               
002721  1  84 97                STY     Frnxtl          ; save pointer low byte (float to fixed returns word in AY)
002723  1  85 98                STA     Frnxth          ; save pointer high byte
002725  1               
002725  1  20 D1 17             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
002728  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00272B  1               ; else do type mismatch
00272B  1  20 DD 26             JSR     LAB_F2FX        ; convert floating-to-fixed
00272E  1               
00272E  1  98                   TYA                     ; copy value low byte (float to fixed returns word in AY)
00272F  1  A2 00                LDX     #$00            ; clear index
002731  1  81 97                STA     (Frnxtl,X)      ; POKE low byte
002733  1  E6 97                INC     Frnxtl          ; increment pointer low byte
002735  1  D0 02                BNE     Dokeh           ; skip high increment if no rollover
002737  1               
002737  1  E6 98                INC     Frnxth          ; increment pointer high byte
002739  1               Dokeh
002739  1  A5 12                LDA     Itemph          ; get value high byte
00273B  1  81 97                STA     (Frnxtl,X)      ; POKE high byte
00273D  1                       .IFDEF  DUODYNE
00273D  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002741  1                       .ELSE
002741  1                       JSR     LAB_GBYT        ; scan memory
002741  1                       .ENDIF
002741  1  60                   RTS
002742  1               
002742  1               ; perform SWAP
002742  1               
002742  1               LAB_SWAP
002742  1  20 AC 19             JSR     LAB_GVAR        ; get var1 address
002745  1  85 97                STA     Lvarpl          ; save var1 address low byte
002747  1  84 98                STY     Lvarph          ; save var1 address high byte
002749  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
00274B  1  48                   PHA                     ; save data type flag
00274C  1               
00274C  1  20 D1 17             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
00274F  1  20 AC 19             JSR     LAB_GVAR        ; get var2 address (pointer in Cvaral/h)
002752  1  68                   PLA                     ; pull var1 data type flag
002753  1  45 5F                EOR     Dtypef          ; compare with var2 data type
002755  1  10 60                BPL     SwapErr         ; exit if not both the same type
002757  1               
002757  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
002759  1               SwapLp
002759  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
00275D  1  B5 97 C9 00  
002761  1  D0 04 A2 00  
00276F  1  AA                   TAX                     ; save var1 byte
002770  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
002774  1  B5 95 C9 00  
002778  1  D0 04 A2 00  
002786  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
00278A  1  01 B5 97 C9  
00278E  1  00 D0 04 A2  
00279C  1  8A                   TXA                     ; restore var1 byte
00279D  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
0027A1  1  01 B5 95 C9  
0027A5  1  00 D0 04 A2  
0027B3  1  88                   DEY                     ; decrement index
0027B4  1  10 A3                BPL     SwapLp          ; loop until done
0027B6  1               
0027B6  1  60                   RTS
0027B7  1               
0027B7  1               SwapErr
0027B7  1  4C AA 16             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
0027BA  1               
0027BA  1               ; perform CALL
0027BA  1               
0027BA  1               LAB_CALL
0027BA  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0027BD  1               ; else do type mismatch
0027BD  1  20 DD 26             JSR     LAB_F2FX        ; convert floating-to-fixed
0027C0  1  A9 27                LDA     #>CallExit      ; set return address high byte
0027C2  1  48                   PHA                     ; put on stack
0027C3  1  A9 C8                LDA     #<CallExit-1    ; set return address low byte
0027C5  1  48                   PHA                     ; put on stack
0027C6  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
0027C9  1               
0027C9  1               
0027C9  1               ; if the called routine exits correctly then it will return to here. this will then get
0027C9  1               ; the next byte for the interpreter and return
0027C9  1               
0027C9  1               CallExit
0027C9  1                       .IFDEF  DUODYNE
0027C9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0027CD  1                       .ELSE
0027CD  1                       JSR     LAB_GBYT        ; scan memory
0027CD  1                       .ENDIF
0027CD  1  60                   RTS
0027CE  1               
0027CE  1               ; perform WAIT
0027CE  1               
0027CE  1               LAB_WAIT
0027CE  1  20 C4 26             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0027D1  1  86 97                STX     Frnxtl          ; save byte
0027D3  1  A2 00                LDX     #$00            ; clear mask
0027D5  1                       .IFDEF  DUODYNE
0027D5  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0027D9  1                       .ELSE
0027D9  1                       JSR     LAB_GBYT        ; scan memory
0027D9  1                       .ENDIF
0027D9  1               
0027D9  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
0027DB  1               
0027DB  1  20 CA 26             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
0027DE  1               LAB_2441
0027DE  1  86 98                STX     Frnxth          ; save EOR argument
0027E0  1               LAB_2445
0027E0  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
0027E4  1  B5 11 C9 00  
0027E8  1  D0 04 A2 00  
0027F6  1  45 98                EOR     Frnxth          ; EOR with second argument (mask)
0027F8  1  25 97                AND     Frnxtl          ; AND with first argument (byte)
0027FA  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
0027FC  1               
0027FC  1               LAB_244D
0027FC  1  60                   RTS
0027FD  1               
0027FD  1               ; perform subtraction, FAC1 from (AY)
0027FD  1               
0027FD  1               LAB_2455
0027FD  1  20 EB 29             JSR     LAB_264D        ; unpack memory (AY) into FAC2
002800  1               
002800  1               ; perform subtraction, FAC1 from FAC2
002800  1               
002800  1               LAB_SUBTRACT
002800  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002802  1  49 FF                EOR     #$FF            ; complement it
002804  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002806  1  45 B7                EOR     FAC2_s          ; EOR with FAC2 sign (b7)
002808  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
00280A  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
00280C  1  4C 1B 28             JMP     LAB_ADD         ; go add FAC2 to FAC1
00280F  1               
00280F  1               ; perform addition
00280F  1               
00280F  1               LAB_2467
00280F  1  20 3A 29             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
002812  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
002814  1               
002814  1               ; add 0.5 to FAC1
002814  1               
002814  1               LAB_244E
002814  1  A9 2D                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
002816  1  A0 36                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
002818  1               
002818  1               ; add (AY) to FAC1
002818  1               
002818  1               LAB_246C
002818  1  20 EB 29             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00281B  1               
00281B  1               ; add FAC2 to FAC1
00281B  1               
00281B  1               LAB_ADD
00281B  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
00281D  1               
00281D  1               ; copy FAC2 to FAC1
00281D  1               
00281D  1               LAB_279B
00281D  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
00281F  1               
00281F  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
00281F  1               
00281F  1               LAB_279D
00281F  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002821  1  A2 04                LDX     #$04            ; 4 bytes to copy
002823  1               LAB_27A1
002823  1  B5 B2                LDA     FAC1_o,X        ; get byte from FAC2,X
002825  1  95 AB                STA     FAC1_e-1,X      ; save byte at FAC1,X
002827  1  CA                   DEX                     ; decrement count
002828  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
00282A  1               
00282A  1  86 B9                STX     FAC1_r          ; clear FAC1 rounding byte
00282C  1  60                   RTS
00282D  1               
00282D  1               ; FAC1 is non zero
00282D  1               LAB_2474
00282D  1  A6 B9                LDX     FAC1_r          ; get FAC1 rounding byte
00282F  1  86 A3                STX     FAC2_r          ; save as FAC2 rounding byte
002831  1  A2 B3                LDX     #FAC2_e         ; set index to FAC2 exponent addr
002833  1  A5 B3                LDA     FAC2_e          ; get FAC2 exponent
002835  1               LAB_247C
002835  1  A8                   TAY                     ; copy exponent
002836  1  F0 C4                BEQ     LAB_244D        ; exit if zero
002838  1               
002838  1  38                   SEC                     ; set carry for subtract
002839  1  E5 AC                SBC     FAC1_e          ; subtract FAC1 exponent
00283B  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
00283D  1               
00283D  1  90 12                BCC     LAB_2498        ; branch if <
00283F  1               
00283F  1               ; FAC2>FAC1
00283F  1  84 AC                STY     FAC1_e          ; save FAC1 exponent
002841  1  A4 B7                LDY     FAC2_s          ; get FAC2 sign (b7)
002843  1  84 B0                STY     FAC1_s          ; save FAC1 sign (b7)
002845  1  49 FF                EOR     #$FF            ; complement A
002847  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
002849  1  A0 00                LDY     #$00            ; clear Y
00284B  1  84 A3                STY     FAC2_r          ; clear FAC2 rounding byte
00284D  1  A2 AC                LDX     #FAC1_e         ; set index to FAC1 exponent addr
00284F  1  D0 04                BNE     LAB_249C        ; branch always
002851  1               
002851  1               LAB_2498
002851  1  A0 00                LDY     #$00            ; clear Y
002853  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
002855  1               LAB_249C
002855  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
002857  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
002859  1               
002859  1  A8                   TAY                     ; copy exponent difference to Y
00285A  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
00285C  1  56 01                LSR     PLUS_1,X        ; shift FAC? mantissa1
00285E  1  20 51 29             JSR     LAB_2592        ; shift FACX Y times right
002861  1               
002861  1               ; exponents are equal now do mantissa subtract
002861  1               LAB_24A8
002861  1  24 B8                BIT     FAC_sc          ; test sign compare (FAC1 EOR FAC2)
002863  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
002865  1               
002865  1  A0 AC                LDY     #FAC1_e         ; set index to FAC1 exponent addr
002867  1  E0 B3                CPX     #FAC2_e         ; compare X to FAC2 exponent addr
002869  1  F0 02                BEQ     LAB_24B4        ; branch if =
00286B  1               
00286B  1  A0 B3                LDY     #FAC2_e         ; else set index to FAC2 exponent addr
00286D  1               
00286D  1               ; subtract smaller from bigger (take sign of bigger)
00286D  1               LAB_24B4
00286D  1  38                   SEC                     ; set carry for subtract
00286E  1  49 FF                EOR     #$FF            ; ones complement A
002870  1  65 A3                ADC     FAC2_r          ; add FAC2 rounding byte
002872  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
002874  1                       .IFDEF  DUODYNE
002874  1  DA                   PHX
002875  1  BB                   TYX
002876  1  B5 03                LDA     PLUS_3,X        ; get FACY mantissa3
002878  1  FA                   PLX
002879  1                       .ELSE
002879  1                       LDA     PLUS_3,Y        ; get FACY mantissa3
002879  1                       .ENDIF
002879  1  F5 03                SBC     PLUS_3,X        ; subtract FACX mantissa3
00287B  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
00287D  1                       .IFDEF  DUODYNE
00287D  1  DA                   PHX
00287E  1  BB                   TYX
00287F  1  B5 02                LDA     PLUS_2,X        ; get FACY mantissa2
002881  1  FA                   PLX
002882  1                       .ELSE
002882  1                       LDA     PLUS_2,Y        ; get FACY mantissa2
002882  1                       .ENDIF
002882  1  F5 02                SBC     PLUS_2,X        ; subtract FACX mantissa2
002884  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
002886  1               
002886  1                       .IFDEF  DUODYNE
002886  1  DA                   PHX
002887  1  BB                   TYX
002888  1  B5 01                LDA     PLUS_1,X        ; get FACY mantissa1
00288A  1  FA                   PLX
00288B  1                       .ELSE
00288B  1                       LDA     PLUS_1,Y        ; get FACY mantissa1
00288B  1                       .ENDIF
00288B  1  F5 01                SBC     PLUS_1,X        ; subtract FACX mantissa1
00288D  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
00288F  1               
00288F  1               ; do ABS and normalise FAC1
00288F  1               
00288F  1               LAB_24D0
00288F  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
002891  1               
002891  1  20 F6 28             JSR     LAB_2537        ; negate FAC1
002894  1               
002894  1               ; normalise FAC1
002894  1               
002894  1               LAB_24D5
002894  1  A0 00                LDY     #$00            ; clear Y
002896  1  98                   TYA                     ; clear A
002897  1  18                   CLC                     ; clear carry for add
002898  1               LAB_24D9
002898  1  A6 AD                LDX     FAC1_1          ; get FAC1 mantissa1
00289A  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
00289C  1               
00289C  1  A6 AE                LDX     FAC1_2          ; get FAC1 mantissa2
00289E  1  86 AD                STX     FAC1_1          ; save FAC1 mantissa1
0028A0  1  A6 AF                LDX     FAC1_3          ; get FAC1 mantissa3
0028A2  1  86 AE                STX     FAC1_2          ; save FAC1 mantissa2
0028A4  1  A6 B9                LDX     FAC1_r          ; get FAC1 rounding byte
0028A6  1  86 AF                STX     FAC1_3          ; save FAC1 mantissa3
0028A8  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
0028AA  1  69 08                ADC     #$08            ; add x to exponent offset
0028AC  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
0028AE  1  D0 E8                BNE     LAB_24D9        ; loop if not max
0028B0  1               
0028B0  1               ; clear FAC1 exponent and sign
0028B0  1               
0028B0  1               LAB_24F1
0028B0  1  A9 00                LDA     #$00            ; clear A
0028B2  1               LAB_24F3
0028B2  1  85 AC                STA     FAC1_e          ; set FAC1 exponent
0028B4  1               
0028B4  1               ; save FAC1 sign
0028B4  1               
0028B4  1               LAB_24F5
0028B4  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
0028B6  1  60                   RTS
0028B7  1               
0028B7  1               ; add FAC2 mantissa to FAC1 mantissa
0028B7  1               
0028B7  1               LAB_24F8
0028B7  1  65 A3                ADC     FAC2_r          ; add FAC2 rounding byte
0028B9  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
0028BB  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0028BD  1  65 B6                ADC     FAC2_3          ; add FAC2 mantissa3
0028BF  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
0028C1  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0028C3  1  65 B5                ADC     FAC2_2          ; add FAC2 mantissa2
0028C5  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
0028C7  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
0028C9  1  65 B4                ADC     FAC2_1          ; add FAC2 mantissa1
0028CB  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
0028CD  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
0028CF  1               
0028CF  1  60                   RTS                     ; else just exit
0028D0  1               
0028D0  1               LAB_2511
0028D0  1  69 01                ADC     #$01            ; add 1 to exponent offset
0028D2  1  06 B9                ASL     FAC1_r          ; shift FAC1 rounding byte
0028D4  1  26 AF                ROL     FAC1_3          ; shift FAC1 mantissa3
0028D6  1  26 AE                ROL     FAC1_2          ; shift FAC1 mantissa2
0028D8  1  26 AD                ROL     FAC1_1          ; shift FAC1 mantissa1
0028DA  1               
0028DA  1               ; normalise FAC1
0028DA  1               
0028DA  1               LAB_251B
0028DA  1  10 F4                BPL     LAB_2511        ; loop if not normalised
0028DC  1               
0028DC  1  38                   SEC                     ; set carry for subtract
0028DD  1  E5 AC                SBC     FAC1_e          ; subtract FAC1 exponent
0028DF  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
0028E1  1               
0028E1  1  49 FF                EOR     #$FF            ; complement exponent
0028E3  1  69 01                ADC     #$01            ; +1 (twos complement)
0028E5  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
0028E7  1               
0028E7  1               ; test and normalise FAC1 for C=0/1
0028E7  1               
0028E7  1               LAB_2528
0028E7  1  90 0C                BCC     LAB_2536        ; exit if no overflow
0028E9  1               
0028E9  1               ; normalise FAC1 for C=1
0028E9  1               
0028E9  1               LAB_252A
0028E9  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent
0028EB  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
0028ED  1               
0028ED  1  66 AD                ROR     FAC1_1          ; shift FAC1 mantissa1
0028EF  1  66 AE                ROR     FAC1_2          ; shift FAC1 mantissa2
0028F1  1  66 AF                ROR     FAC1_3          ; shift FAC1 mantissa3
0028F3  1  66 B9                ROR     FAC1_r          ; shift FAC1 rounding byte
0028F5  1               LAB_2536
0028F5  1  60                   RTS
0028F6  1               
0028F6  1               ; negate FAC1
0028F6  1               
0028F6  1               LAB_2537
0028F6  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
0028F8  1  49 FF                EOR     #$FF            ; complement it
0028FA  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
0028FC  1               
0028FC  1               ; twos complement FAC1 mantissa
0028FC  1               
0028FC  1               LAB_253D
0028FC  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
0028FE  1  49 FF                EOR     #$FF            ; complement it
002900  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002902  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002904  1  49 FF                EOR     #$FF            ; complement it
002906  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
002908  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
00290A  1  49 FF                EOR     #$FF            ; complement it
00290C  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
00290E  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
002910  1  49 FF                EOR     #$FF            ; complement it
002912  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
002914  1  E6 B9                INC     FAC1_r          ; increment FAC1 rounding byte
002916  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
002918  1               
002918  1               ; increment FAC1 mantissa
002918  1               
002918  1               LAB_2559
002918  1  E6 AF                INC     FAC1_3          ; increment FAC1 mantissa3
00291A  1  D0 06                BNE     LAB_2563        ; finished if no rollover
00291C  1               
00291C  1  E6 AE                INC     FAC1_2          ; increment FAC1 mantissa2
00291E  1  D0 02                BNE     LAB_2563        ; finished if no rollover
002920  1               
002920  1  E6 AD                INC     FAC1_1          ; increment FAC1 mantissa1
002922  1               LAB_2563
002922  1  60                   RTS
002923  1               
002923  1               ; do overflow error (overflow exit)
002923  1               
002923  1               LAB_2564
002923  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
002925  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
002928  1               
002928  1               ; shift FCAtemp << A+8 times
002928  1               
002928  1               LAB_2569
002928  1  A2 74                LDX     #FACt_1-1       ; set offset to FACtemp
00292A  1               LAB_256B
00292A  1  B4 03                LDY     PLUS_3,X        ; get FACX mantissa3
00292C  1  84 B9                STY     FAC1_r          ; save as FAC1 rounding byte
00292E  1  B4 02                LDY     PLUS_2,X        ; get FACX mantissa2
002930  1  94 03                STY     PLUS_3,X        ; save FACX mantissa3
002932  1  B4 01                LDY     PLUS_1,X        ; get FACX mantissa1
002934  1  94 02                STY     PLUS_2,X        ; save FACX mantissa2
002936  1  A4 B2                LDY     FAC1_o          ; get FAC1 overflow byte
002938  1  94 01                STY     PLUS_1,X        ; save FACX mantissa1
00293A  1               
00293A  1               ; shift FACX -A times right (> 8 shifts)
00293A  1               
00293A  1               LAB_257B
00293A  1  69 08                ADC     #$08            ; add 8 to shift count
00293C  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
00293E  1               
00293E  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
002940  1               
002940  1  E9 08                SBC     #$08            ; else subtract 8 again
002942  1  A8                   TAY                     ; save count to Y
002943  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
002945  1  B0 12                BCS     LAB_259A        ;.
002947  1               
002947  1               LAB_2588
002947  1  16 01                ASL     PLUS_1,X        ; shift FACX mantissa1
002949  1  90 02                BCC     LAB_258E        ; branch if +ve
00294B  1               
00294B  1  F6 01                INC     PLUS_1,X        ; this sets b7 eventually
00294D  1               LAB_258E
00294D  1  76 01                ROR     PLUS_1,X        ; shift FACX mantissa1 (correct for ASL)
00294F  1  76 01                ROR     PLUS_1,X        ; shift FACX mantissa1 (put carry in b7)
002951  1               
002951  1               ; shift FACX Y times right
002951  1               
002951  1               LAB_2592
002951  1  76 02                ROR     PLUS_2,X        ; shift FACX mantissa2
002953  1  76 03                ROR     PLUS_3,X        ; shift FACX mantissa3
002955  1  6A                   ROR     A               ; shift FACX rounding byte
002956  1  C8                   INY                     ; increment exponent diff
002957  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
002959  1               
002959  1               LAB_259A
002959  1  18                   CLC                     ; just clear it
00295A  1  60                   RTS
00295B  1               
00295B  1               ; perform LOG()
00295B  1               
00295B  1               LAB_LOG
00295B  1  20 39 2C             JSR     LAB_27CA        ; test sign and zero
00295E  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
002960  1               
002960  1  10 03                BPL     LAB_25C7        ; skip error if +ve
002962  1               
002962  1               LAB_25C4
002962  1  4C 30 1C             JMP     LAB_FCER        ; do function call error then warm start (-ve)
002965  1               
002965  1               LAB_25C7
002965  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002967  1  E9 7F                SBC     #$7F            ; normalise it
002969  1  48                   PHA                     ; save it
00296A  1  A9 80                LDA     #$80            ; set exponent to zero
00296C  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
00296E  1  A9 AD                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
002970  1  A0 35                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
002972  1  20 18 28             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
002975  1  A9 B1                LDA     #<LAB_25B1      ; set root2 pointer low byte
002977  1  A0 35                LDY     #>LAB_25B1      ; set root2 pointer high byte
002979  1  20 B1 2A             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
00297C  1  A9 24                LDA     #<LAB_259C      ; set 1 pointer low byte
00297E  1  A0 36                LDY     #>LAB_259C      ; set 1 pointer high byte
002980  1  20 FD 27             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
002983  1  A9 A0                LDA     #<LAB_25A0      ; set pointer low byte to counter
002985  1  A0 35                LDY     #>LAB_25A0      ; set pointer high byte to counter
002987  1  20 3D 30             JSR     LAB_2B6E        ; ^2 then series evaluation
00298A  1  A9 B5                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
00298C  1  A0 35                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
00298E  1  20 18 28             JSR     LAB_246C        ; add (AY) to FAC1
002991  1  68                   PLA                     ; restore FAC1 exponent
002992  1  20 00 2E             JSR     LAB_2912        ; evaluate new ASCII digit
002995  1  A9 B9                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
002997  1  A0 35                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
002999  1               
002999  1               ; do convert AY, FCA1*(AY)
002999  1               
002999  1               LAB_25FB
002999  1  20 EB 29             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00299C  1               LAB_MULTIPLY
00299C  1  F0 4C                BEQ     LAB_264C        ; exit if zero
00299E  1               
00299E  1  20 61 2A             JSR     LAB_2673        ; test and adjust accumulators
0029A1  1  A9 00                LDA     #$00            ; clear A
0029A3  1  85 75                STA     FACt_1          ; clear temp mantissa1
0029A5  1  85 76                STA     FACt_2          ; clear temp mantissa2
0029A7  1  85 77                STA     FACt_3          ; clear temp mantissa3
0029A9  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
0029AB  1  20 C0 29             JSR     LAB_2622        ; go do shift/add FAC2
0029AE  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0029B0  1  20 C0 29             JSR     LAB_2622        ; go do shift/add FAC2
0029B3  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0029B5  1  20 C0 29             JSR     LAB_2622        ; go do shift/add FAC2
0029B8  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
0029BA  1  20 C5 29             JSR     LAB_2627        ; go do shift/add FAC2
0029BD  1  4C 1E 2B             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
0029C0  1               
0029C0  1               LAB_2622
0029C0  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
0029C2  1               
0029C2  1  4C 28 29             JMP     LAB_2569        ; shift FCAtemp << A+8 times
0029C5  1               
0029C5  1               ; else do shift and add
0029C5  1               LAB_2627
0029C5  1  4A                   LSR     A               ; shift byte
0029C6  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
0029C8  1               LAB_262A
0029C8  1  A8                   TAY                     ; copy result
0029C9  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
0029CB  1               
0029CB  1  18                   CLC                     ; clear carry for add
0029CC  1  A5 77                LDA     FACt_3          ; get temp mantissa3
0029CE  1  65 B6                ADC     FAC2_3          ; add FAC2 mantissa3
0029D0  1  85 77                STA     FACt_3          ; save temp mantissa3
0029D2  1  A5 76                LDA     FACt_2          ; get temp mantissa2
0029D4  1  65 B5                ADC     FAC2_2          ; add FAC2 mantissa2
0029D6  1  85 76                STA     FACt_2          ; save temp mantissa2
0029D8  1  A5 75                LDA     FACt_1          ; get temp mantissa1
0029DA  1  65 B4                ADC     FAC2_1          ; add FAC2 mantissa1
0029DC  1  85 75                STA     FACt_1          ; save temp mantissa1
0029DE  1               LAB_2640
0029DE  1  66 75                ROR     FACt_1          ; shift temp mantissa1
0029E0  1  66 76                ROR     FACt_2          ; shift temp mantissa2
0029E2  1  66 77                ROR     FACt_3          ; shift temp mantissa3
0029E4  1  66 B9                ROR     FAC1_r          ; shift temp rounding byte
0029E6  1  98                   TYA                     ; get byte back
0029E7  1  4A                   LSR     A               ; shift byte
0029E8  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
0029EA  1               
0029EA  1               LAB_264C
0029EA  1  60                   RTS
0029EB  1               
0029EB  1               ; unpack memory (AY) into FAC2
0029EB  1               
0029EB  1               LAB_264D
0029EB  1  85 71                STA     ut1_pl          ; save pointer low byte
0029ED  1  84 72                STY     ut1_ph          ; save pointer high byte
0029EF  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
0029F1  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
0029F5  1  B5 71 C9 00  
0029F9  1  D0 04 A2 00  
002A07  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
002A09  1  88                   DEY                     ; decrement index
002A0A  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
002A0E  1  B5 71 C9 00  
002A12  1  D0 04 A2 00  
002A20  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
002A22  1  88                   DEY                     ; decrement index
002A23  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
002A27  1  B5 71 C9 00  
002A2B  1  D0 04 A2 00  
002A39  1  85 B7                STA     FAC2_s          ; save FAC2 sign (b7)
002A3B  1  45 B0                EOR     FAC1_s          ; EOR with FAC1 sign (b7)
002A3D  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
002A3F  1  A5 B7                LDA     FAC2_s          ; recover FAC2 sign (b7)
002A41  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
002A43  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
002A45  1  88                   DEY                     ; decrement index
002A46  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
002A4A  1  B5 71 C9 00  
002A4E  1  D0 04 A2 00  
002A5C  1  85 B3                STA     FAC2_e          ; save FAC2 exponent
002A5E  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002A60  1  60                   RTS
002A61  1               
002A61  1               ; test and adjust accumulators
002A61  1               
002A61  1               LAB_2673
002A61  1  A5 B3                LDA     FAC2_e          ; get FAC2 exponent
002A63  1               LAB_2675
002A63  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
002A65  1               
002A65  1  18                   CLC                     ; clear carry for add
002A66  1  65 AC                ADC     FAC1_e          ; add FAC1 exponent
002A68  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
002A6A  1               
002A6A  1  30 31                BMI     LAB_269B        ; do overflow error
002A6C  1               
002A6C  1  18                   CLC                     ; clear carry for the add
002A6D  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
002A6E  1               LAB_2680
002A6E  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
002A70  1               
002A70  1  69 80                ADC     #$80            ; adjust exponent
002A72  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002A74  1  D0 03                BNE     LAB_268B        ; branch if not zero
002A76  1               
002A76  1  4C B4 28             JMP     LAB_24F5        ; save FAC1 sign and return
002A79  1               
002A79  1               LAB_268B
002A79  1  A5 B8                LDA     FAC_sc          ; get sign compare (FAC1 EOR FAC2)
002A7B  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002A7D  1               LAB_268F
002A7D  1  60                   RTS
002A7E  1               
002A7E  1               ; handle overflow and underflow
002A7E  1               
002A7E  1               LAB_2690
002A7E  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002A80  1  10 1B                BPL     LAB_269B        ; do overflow error
002A82  1               
002A82  1               ; handle underflow
002A82  1               LAB_2696
002A82  1  68                   PLA                     ; pop return address low byte
002A83  1  68                   PLA                     ; pop return address high byte
002A84  1  4C B0 28             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
002A87  1               
002A87  1               ; multiply by 10
002A87  1               
002A87  1               LAB_269E
002A87  1  20 1A 2C             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
002A8A  1  AA                   TAX                     ; copy exponent (set the flags)
002A8B  1  F0 F0                BEQ     LAB_268F        ; exit if zero
002A8D  1               
002A8D  1  18                   CLC                     ; clear carry for add
002A8E  1  69 02                ADC     #$02            ; add two to exponent (*4)
002A90  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
002A92  1               
002A92  1  A2 00                LDX     #$00            ; clear byte
002A94  1  86 B8                STX     FAC_sc          ; clear sign compare (FAC1 EOR FAC2)
002A96  1  20 35 28             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
002A99  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent (*10)
002A9B  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
002A9D  1               
002A9D  1               LAB_269B
002A9D  1  4C 23 29             JMP     LAB_2564        ; do overflow error and warm start
002AA0  1               
002AA0  1               ; divide by 10
002AA0  1               
002AA0  1               LAB_26B9
002AA0  1  20 1A 2C             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
002AA3  1  A9 35                LDA     #<LAB_26B5      ; set pointer to 10d low addr
002AA5  1  A0 36                LDY     #>LAB_26B5      ; set pointer to 10d high addr
002AA7  1  A2 00                LDX     #$00            ; clear sign
002AA9  1               
002AA9  1               ; divide by (AY) (X=sign)
002AA9  1               
002AA9  1               LAB_26C2
002AA9  1  86 B8                STX     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
002AAB  1  20 2D 2B             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002AAE  1  4C B4 2A             JMP     LAB_DIVIDE      ; do FAC2/FAC1
002AB1  1               
002AB1  1               ; Perform divide-by
002AB1  1               ; convert AY and do (AY)/FAC1
002AB1  1               
002AB1  1               LAB_26CA
002AB1  1  20 EB 29             JSR     LAB_264D        ; unpack memory (AY) into FAC2
002AB4  1               
002AB4  1               ; Perform divide-into
002AB4  1               LAB_DIVIDE
002AB4  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
002AB6  1               
002AB6  1  20 29 2C             JSR     LAB_27BA        ; round FAC1
002AB9  1  A9 00                LDA     #$00            ; clear A
002ABB  1  38                   SEC                     ; set carry for subtract
002ABC  1  E5 AC                SBC     FAC1_e          ; subtract FAC1 exponent (2s complement)
002ABE  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002AC0  1  20 61 2A             JSR     LAB_2673        ; test and adjust accumulators
002AC3  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent
002AC5  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
002AC7  1               
002AC7  1  A2 FF                LDX     #$FF            ; set index for pre increment
002AC9  1  A9 01                LDA     #$01            ; set bit to flag byte save
002ACB  1               LAB_26E4
002ACB  1  A4 B4                LDY     FAC2_1          ; get FAC2 mantissa1
002ACD  1  C4 AD                CPY     FAC1_1          ; compare FAC1 mantissa1
002ACF  1  D0 0A                BNE     LAB_26F4        ; branch if <>
002AD1  1               
002AD1  1  A4 B5                LDY     FAC2_2          ; get FAC2 mantissa2
002AD3  1  C4 AE                CPY     FAC1_2          ; compare FAC1 mantissa2
002AD5  1  D0 04                BNE     LAB_26F4        ; branch if <>
002AD7  1               
002AD7  1  A4 B6                LDY     FAC2_3          ; get FAC2 mantissa3
002AD9  1  C4 AF                CPY     FAC1_3          ; compare FAC1 mantissa3
002ADB  1               LAB_26F4
002ADB  1  08                   PHP                     ; save FAC2-FAC1 compare status
002ADC  1  2A                   ROL     A               ; shift the result byte
002ADD  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
002ADF  1               
002ADF  1  A0 01                LDY     #$01            ; set bit to flag byte save
002AE1  1  E8                   INX                     ; else increment the index to FACt
002AE2  1  E0 02                CPX     #$02            ; compare with the index to FACt_3
002AE4  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
002AE6  1               
002AE6  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
002AE8  1               ; return
002AE8  1               
002AE8  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
002AEA  1               LAB_2701
002AEA  1  95 75                STA     FACt_1,X        ; write result byte to FACt_1 + index
002AEC  1  98                   TYA                     ; copy the next save byte flag
002AED  1               LAB_2702
002AED  1  28                   PLP                     ; restore FAC2-FAC1 compare status
002AEE  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
002AF0  1               
002AF0  1  A8                   TAY                     ; save FAC2-FAC1 compare status
002AF1  1  A5 B6                LDA     FAC2_3          ; get FAC2 mantissa3
002AF3  1  E5 AF                SBC     FAC1_3          ; subtract FAC1 mantissa3
002AF5  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
002AF7  1  A5 B5                LDA     FAC2_2          ; get FAC2 mantissa2
002AF9  1  E5 AE                SBC     FAC1_2          ; subtract FAC1 mantissa2
002AFB  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
002AFD  1  A5 B4                LDA     FAC2_1          ; get FAC2 mantissa1
002AFF  1  E5 AD                SBC     FAC1_1          ; subtract FAC1 mantissa1
002B01  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
002B03  1  98                   TYA                     ; restore FAC2-FAC1 compare status
002B04  1               
002B04  1               ; FAC2 = FAC2*2
002B04  1               LAB_2704
002B04  1  06 B6                ASL     FAC2_3          ; shift FAC2 mantissa3
002B06  1  26 B5                ROL     FAC2_2          ; shift FAC2 mantissa2
002B08  1  26 B4                ROL     FAC2_1          ; shift FAC2 mantissa1
002B0A  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
002B0C  1               
002B0C  1  30 BD                BMI     LAB_26E4        ; loop with compare
002B0E  1               
002B0E  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
002B10  1               
002B10  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
002B10  1               
002B10  1               LAB_272B
002B10  1  4A                   LSR     A               ; shift b1 - b0 ..
002B11  1  6A                   ROR     A               ; ..
002B12  1  6A                   ROR     A               ; .. to b7 - b6
002B13  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
002B15  1  28                   PLP                     ; dump FAC2-FAC1 compare status
002B16  1  4C 1E 2B             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
002B19  1               
002B19  1               ; do "Divide by zero" error
002B19  1               
002B19  1               LAB_2737
002B19  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
002B1B  1  4C F7 09             JMP     LAB_XERR        ; do error #X, then warm start
002B1E  1               
002B1E  1               ; copy temp to FAC1 and normalise
002B1E  1               
002B1E  1               LAB_273C
002B1E  1  A5 75                LDA     FACt_1          ; get temp mantissa1
002B20  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002B22  1  A5 76                LDA     FACt_2          ; get temp mantissa2
002B24  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
002B26  1  A5 77                LDA     FACt_3          ; get temp mantissa3
002B28  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
002B2A  1  4C 94 28             JMP     LAB_24D5        ; normalise FAC1 and return
002B2D  1               
002B2D  1               ; unpack memory (AY) into FAC1
002B2D  1               
002B2D  1               LAB_UFAC
002B2D  1  85 71                STA     ut1_pl          ; save pointer low byte
002B2F  1  84 72                STY     ut1_ph          ; save pointer high byte
002B31  1  A0 03                LDY     #$03            ; 4 bytes to do
002B33  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
002B37  1  B5 71 C9 00  
002B3B  1  D0 04 A2 00  
002B49  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
002B4B  1  88                   DEY                     ; decrement index
002B4C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
002B50  1  B5 71 C9 00  
002B54  1  D0 04 A2 00  
002B62  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
002B64  1  88                   DEY                     ; decrement index
002B65  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
002B69  1  B5 71 C9 00  
002B6D  1  D0 04 A2 00  
002B7B  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002B7D  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
002B7F  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002B81  1  88                   DEY                     ; decrement index
002B82  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
002B86  1  B5 71 C9 00  
002B8A  1  D0 04 A2 00  
002B98  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002B9A  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
002B9C  1  60                   RTS
002B9D  1               
002B9D  1               ; pack FAC1 into Adatal
002B9D  1               
002B9D  1               LAB_276E
002B9D  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
002B9F  1               LAB_2770
002B9F  1  A0 00                LDY     #>Adatal        ; set pointer high byte
002BA1  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
002BA3  1               
002BA3  1               ; pack FAC1 into (Lvarpl)
002BA3  1               
002BA3  1               LAB_PFAC
002BA3  1  A6 97                LDX     Lvarpl          ; get destination pointer low byte
002BA5  1  A4 98                LDY     Lvarph          ; get destination pointer high byte
002BA7  1               
002BA7  1               ; pack FAC1 into (XY)
002BA7  1               
002BA7  1               LAB_2778
002BA7  1  20 29 2C             JSR     LAB_27BA        ; round FAC1
002BAA  1  86 71                STX     ut1_pl          ; save pointer low byte
002BAC  1  84 72                STY     ut1_ph          ; save pointer high byte
002BAE  1  A0 03                LDY     #$03            ; set index
002BB0  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002BB2  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
002BB6  1  01 B5 71 C9  
002BBA  1  00 D0 04 A2  
002BC8  1  88                   DEY                     ; decrement index
002BC9  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002BCB  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
002BCF  1  01 B5 71 C9  
002BD3  1  00 D0 04 A2  
002BE1  1  88                   DEY                     ; decrement index
002BE2  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002BE4  1  09 7F                ORA     #$7F            ; set bits x111 1111
002BE6  1  25 AD                AND     FAC1_1          ; AND in FAC1 mantissa1
002BE8  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
002BEC  1  01 B5 71 C9  
002BF0  1  00 D0 04 A2  
002BFE  1  88                   DEY                     ; decrement index
002BFF  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002C01  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
002C05  1  01 B5 71 C9  
002C09  1  00 D0 04 A2  
002C17  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
002C19  1  60                   RTS
002C1A  1               
002C1A  1               ; round and copy FAC1 to FAC2
002C1A  1               
002C1A  1               LAB_27AB
002C1A  1  20 29 2C             JSR     LAB_27BA        ; round FAC1
002C1D  1               
002C1D  1               ; copy FAC1 to FAC2
002C1D  1               
002C1D  1               LAB_27AE
002C1D  1  A2 05                LDX     #$05            ; 5 bytes to copy
002C1F  1               LAB_27B0
002C1F  1  B5 AB                LDA     FAC1_e-1,X      ; get byte from FAC1,X
002C21  1  95 B2                STA     FAC1_o,X        ; save byte at FAC2,X
002C23  1  CA                   DEX                     ; decrement count
002C24  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
002C26  1               
002C26  1  86 B9                STX     FAC1_r          ; clear FAC1 rounding byte
002C28  1               LAB_27B9
002C28  1  60                   RTS
002C29  1               
002C29  1               ; round FAC1
002C29  1               
002C29  1               LAB_27BA
002C29  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002C2B  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
002C2D  1               
002C2D  1  06 B9                ASL     FAC1_r          ; shift FAC1 rounding byte
002C2F  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
002C31  1               
002C31  1               ; round FAC1 (no check)
002C31  1               
002C31  1               LAB_27C2
002C31  1  20 18 29             JSR     LAB_2559        ; increment FAC1 mantissa
002C34  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
002C36  1               
002C36  1  4C E9 28             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
002C39  1               
002C39  1               ; get FAC1 sign
002C39  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
002C39  1               
002C39  1               LAB_27CA
002C39  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002C3B  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
002C3D  1               
002C3D  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
002C3D  1               ; no = 0 check
002C3D  1               
002C3D  1               LAB_27CE
002C3D  1  A5 B0                LDA     FAC1_s          ; else get FAC1 sign (b7)
002C3F  1               
002C3F  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
002C3F  1               ; no = 0 check, sign in A
002C3F  1               
002C3F  1               LAB_27D0
002C3F  1  2A                   ROL     A               ; move sign bit to carry
002C40  1  A9 FF                LDA     #$FF            ; set byte for -ve result
002C42  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
002C44  1               
002C44  1  A9 01                LDA     #$01            ; else set byte for +ve result
002C46  1               LAB_27D7
002C46  1  60                   RTS
002C47  1               
002C47  1               ; perform SGN()
002C47  1               
002C47  1               LAB_SGN
002C47  1  20 39 2C             JSR     LAB_27CA        ; get FAC1 sign
002C4A  1               ; return A=$FF/-ve A=$01/+ve
002C4A  1               ; save A as integer byte
002C4A  1               
002C4A  1               LAB_27DB
002C4A  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002C4C  1  A9 00                LDA     #$00            ; clear A
002C4E  1  85 AE                STA     FAC1_2          ; clear FAC1 mantissa2
002C50  1  A2 88                LDX     #$88            ; set exponent
002C52  1               
002C52  1               ; set exp=X, clearFAC1 mantissa3 and normalise
002C52  1               
002C52  1               LAB_27E3
002C52  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
002C54  1  49 FF                EOR     #$FF            ; complement it
002C56  1  2A                   ROL     A               ; sign bit into carry
002C57  1               
002C57  1               ; set exp=X, clearFAC1 mantissa3 and normalise
002C57  1               
002C57  1               LAB_STFA
002C57  1  A9 00                LDA     #$00            ; clear A
002C59  1  85 AF                STA     FAC1_3          ; clear FAC1 mantissa3
002C5B  1  86 AC                STX     FAC1_e          ; set FAC1 exponent
002C5D  1  85 B9                STA     FAC1_r          ; clear FAC1 rounding byte
002C5F  1  85 B0                STA     FAC1_s          ; clear FAC1 sign (b7)
002C61  1  4C 8F 28             JMP     LAB_24D0        ; do ABS and normalise FAC1
002C64  1               
002C64  1               ; perform ABS()
002C64  1               
002C64  1               LAB_ABS
002C64  1  46 B0                LSR     FAC1_s          ; clear FAC1 sign (put zero in b7)
002C66  1  60                   RTS
002C67  1               
002C67  1               ; compare FAC1 with (AY)
002C67  1               ; returns A=$00 if FAC1 = (AY)
002C67  1               ; returns A=$01 if FAC1 > (AY)
002C67  1               ; returns A=$FF if FAC1 < (AY)
002C67  1               
002C67  1               LAB_27F8
002C67  1  85 73                STA     ut2_pl          ; save pointer low byte
002C69  1               LAB_27FA
002C69  1  84 74                STY     ut2_ph          ; save pointer high byte
002C6B  1  A0 00                LDY     #$00            ; clear index
002C6D  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
002C71  1  B5 73 C9 00  
002C75  1  D0 04 A2 00  
002C83  1  C8                   INY                     ; increment index
002C84  1  AA                   TAX                     ; copy (AY) exponent to X
002C85  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
002C87  1               ; A=FF,C=1/-ve A=01,C=0/+ve
002C87  1               
002C87  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
002C8B  1  B5 73 C9 00  
002C8F  1  D0 04 A2 00  
002C9D  1  45 B0                EOR     FAC1_s          ; EOR FAC1 sign (b7)
002C9F  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
002CA1  1               ; A=01,C=0/+ve and return
002CA1  1               
002CA1  1  E4 AC                CPX     FAC1_e          ; compare (AY) exponent with FAC1 exponent
002CA3  1  D0 56                BNE     LAB_2828        ; branch if different
002CA5  1               
002CA5  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
002CA9  1  B5 73 C9 00  
002CAD  1  D0 04 A2 00  
002CBB  1  09 80                ORA     #$80            ; normalise top bit
002CBD  1  C5 AD                CMP     FAC1_1          ; compare with FAC1 mantissa1
002CBF  1  D0 3A                BNE     LAB_2828        ; branch if different
002CC1  1               
002CC1  1  C8                   INY                     ; increment index
002CC2  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
002CC6  1  B5 73 C9 00  
002CCA  1  D0 04 A2 00  
002CD8  1  C5 AE                CMP     FAC1_2          ; compare with FAC1 mantissa2
002CDA  1  D0 1F                BNE     LAB_2828        ; branch if different
002CDC  1               
002CDC  1  C8                   INY                     ; increment index
002CDD  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
002CDF  1  C5 B9                CMP     FAC1_r          ; compare with FAC1 rounding byte (set carry)
002CE1  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
002CE5  1  B5 73 C9 00  
002CE9  1  D0 04 A2 00  
002CF7  1  E5 AF                SBC     FAC1_3          ; subtract FAC1 mantissa3
002CF9  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
002CFB  1               
002CFB  1               ; gets here if number <> FAC1
002CFB  1               
002CFB  1               LAB_2828
002CFB  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002CFD  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
002CFF  1               
002CFF  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
002D01  1               LAB_282E
002D01  1  4C 3F 2C             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
002D04  1               
002D04  1               ; convert FAC1 floating-to-fixed
002D04  1               
002D04  1               LAB_2831
002D04  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002D06  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
002D08  1               
002D08  1  38                   SEC                     ; set carry for subtract
002D09  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
002D0B  1  24 B0                BIT     FAC1_s          ; test FAC1 sign (b7)
002D0D  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
002D0F  1               
002D0F  1               ; FAC1 was -ve
002D0F  1  AA                   TAX                     ; copy subtracted exponent
002D10  1  A9 FF                LDA     #$FF            ; overflow for -ve number
002D12  1  85 B2                STA     FAC1_o          ; set FAC1 overflow byte
002D14  1  20 FC 28             JSR     LAB_253D        ; twos complement FAC1 mantissa
002D17  1  8A                   TXA                     ; restore subtracted exponent
002D18  1               LAB_2845
002D18  1  A2 AC                LDX     #FAC1_e         ; set index to FAC1
002D1A  1  C9 F9                CMP     #$F9            ; compare exponent result
002D1C  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
002D1E  1               
002D1E  1  20 3A 29             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
002D21  1  84 B2                STY     FAC1_o          ; clear FAC1 overflow byte
002D23  1               LAB_2850
002D23  1  60                   RTS
002D24  1               
002D24  1               ; shift FAC1 A times right
002D24  1               
002D24  1               LAB_2851
002D24  1  A8                   TAY                     ; copy shift count
002D25  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002D27  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
002D29  1  46 AD                LSR     FAC1_1          ; shift FAC1 mantissa1
002D2B  1  05 AD                ORA     FAC1_1          ; OR sign in b7 FAC1 mantissa1
002D2D  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002D2F  1  20 51 29             JSR     LAB_2592        ; shift FAC1 Y times right
002D32  1  84 B2                STY     FAC1_o          ; clear FAC1 overflow byte
002D34  1  60                   RTS
002D35  1               
002D35  1               ; perform INT()
002D35  1               
002D35  1               LAB_INT
002D35  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002D37  1  C9 98                CMP     #$98            ; compare with max int
002D39  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
002D3B  1               
002D3B  1  20 04 2D             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
002D3E  1  84 B9                STY     FAC1_r          ; save FAC1 rounding byte
002D40  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002D42  1  84 B0                STY     FAC1_s          ; save FAC1 sign (b7)
002D44  1  49 80                EOR     #$80            ; toggle FAC1 sign
002D46  1  2A                   ROL     A               ; shift into carry
002D47  1  A9 98                LDA     #$98            ; set new exponent
002D49  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002D4B  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002D4D  1  85 5B                STA     Temp3           ; save for EXP() function
002D4F  1  4C 8F 28             JMP     LAB_24D0        ; do ABS and normalise FAC1
002D52  1               
002D52  1               ; clear FAC1 and return
002D52  1               
002D52  1               LAB_287F
002D52  1  85 AD                STA     FAC1_1          ; clear FAC1 mantissa1
002D54  1  85 AE                STA     FAC1_2          ; clear FAC1 mantissa2
002D56  1  85 AF                STA     FAC1_3          ; clear FAC1 mantissa3
002D58  1  A8                   TAY                     ; clear Y
002D59  1               LAB_2886
002D59  1  60                   RTS
002D5A  1               
002D5A  1               ; get FAC1 from string
002D5A  1               ; this routine now handles hex and binary values from strings
002D5A  1               ; starting with "$" and "%" respectively
002D5A  1               
002D5A  1               LAB_2887
002D5A  1  A0 00                LDY     #$00            ; clear Y
002D5C  1  84 5F                STY     Dtypef          ; clear data type flag, $FF=string, $00=numeric
002D5E  1  A2 09                LDX     #$09            ; set index
002D60  1               LAB_288B
002D60  1  94 A8                STY     numexp,X        ; clear byte
002D62  1  CA                   DEX                     ; decrement index
002D63  1  10 FB                BPL     LAB_288B        ; loop until numexp to negnum (and FAC1) = $00
002D65  1               
002D65  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
002D67  1  4C ED 2D             JMP     LAB_28FE        ; branch if 1st character numeric
002D6A  1               LAB_s28FE:
002D6A  1               
002D6A  1               ; get FAC1 from string .. first character wasn't numeric
002D6A  1               
002D6A  1  C9 2D                CMP     #'-'            ; else compare with "-"
002D6C  1  D0 04                BNE     LAB_289A        ; branch if not "-"
002D6E  1               
002D6E  1  86 B1                STX     negnum          ; set flag for -ve number (X = $FF)
002D70  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
002D72  1               
002D72  1               ; get FAC1 from string .. first character wasn't numeric or -
002D72  1               
002D72  1               LAB_289A
002D72  1  C9 2B                CMP     #'+'            ; else compare with "+"
002D74  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
002D76  1               
002D76  1               ; was "+" or "-" to start, so get next character
002D76  1               
002D76  1               LAB_289C
002D76  1                       .IFDEF  DUODYNE
002D76  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D7A  1                       .ELSE
002D7A  1                       JSR     LAB_IGBY        ; increment and scan memory
002D7A  1                       .ENDIF
002D7A  1               
002D7A  1  90 71                BCC     LAB_28FE        ; branch if numeric character
002D7C  1               
002D7C  1               ; code here for hex and binary numbers
002D7C  1               
002D7C  1               LAB_289D
002D7C  1  C9 24                CMP     #'$'            ; else compare with "$"
002D7E  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
002D80  1               
002D80  1  4C AE 32             JMP     LAB_CHEX        ; branch if "$"
002D83  1               
002D83  1               LAB_NHEX
002D83  1  C9 25                CMP     #'%'            ; else compare with "%"
002D85  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
002D87  1               
002D87  1  4C DD 32             JMP     LAB_CBIN        ; branch if "%"
002D8A  1               
002D8A  1               LAB_289E
002D8A  1                       .IFDEF  DUODYNE
002D8A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D8E  1                       .ELSE
002D8E  1                       JSR     LAB_IGBY        ; increment and scan memory
002D8E  1                       .ENDIF
002D8E  1               
002D8E  1               LAB_28A1
002D8E  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
002D90  1               
002D90  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
002D90  1               
002D90  1               LAB_28A3
002D90  1  C9 2E                CMP     #'.'            ; else compare with "."
002D92  1  F0 30                BEQ     LAB_28D5        ; branch if "."
002D94  1               
002D94  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
002D94  1               
002D94  1  C9 45                CMP     #'E'            ; else compare with "E"
002D96  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
002D98  1               
002D98  1               ; was "E" so evaluate exponential part
002D98  1                       .IFDEF  DUODYNE
002D98  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D9C  1                       .ELSE
002D9C  1                       JSR     LAB_IGBY        ; increment and scan memory
002D9C  1                       .ENDIF
002D9C  1               
002D9C  1  90 18                BCC     LAB_28C7        ; branch if numeric character
002D9E  1               
002D9E  1  C9 B8                CMP     #TK_MINUS       ; else compare with token for -
002DA0  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
002DA2  1               
002DA2  1  C9 2D                CMP     #'-'            ; else compare with "-"
002DA4  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
002DA6  1               
002DA6  1  C9 B7                CMP     #TK_PLUS        ; else compare with token for +
002DA8  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
002DAA  1               
002DAA  1  C9 2B                CMP     #'+'            ; else compare with "+"
002DAC  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
002DAE  1               
002DAE  1  D0 08                BNE     LAB_28C9        ; branch always
002DB0  1               
002DB0  1               LAB_28C2
002DB0  1  66 AB                ROR     expneg          ; set exponent -ve flag (C, which=1, into b7)
002DB2  1               LAB_28C4
002DB2  1                       .IFDEF  DUODYNE
002DB2  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002DB6  1                       .ELSE
002DB6  1                       JSR     LAB_IGBY        ; increment and scan memory
002DB6  1                       .ENDIF
002DB6  1               
002DB6  1               LAB_28C7
002DB6  1  90 5B                BCC     LAB_2925        ; branch if numeric character
002DB8  1               
002DB8  1               LAB_28C9
002DB8  1  24 AB                BIT     expneg          ; test exponent -ve flag
002DBA  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
002DBC  1               
002DBC  1               ; else do exponent = -exponent
002DBC  1  A9 00                LDA     #$00            ; clear result
002DBE  1  38                   SEC                     ; set carry for subtract
002DBF  1  E5 A9                SBC     expcnt          ; subtract exponent byte
002DC1  1  4C CC 2D             JMP     LAB_28DD        ; go evaluate exponent
002DC4  1               
002DC4  1               LAB_28D5
002DC4  1  66 AA                ROR     numdpf          ; set decimal point flag
002DC6  1  24 AA                BIT     numdpf          ; test decimal point flag
002DC8  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
002DCA  1               
002DCA  1               ; evaluate exponent
002DCA  1               LAB_28DB
002DCA  1  A5 A9                LDA     expcnt          ; get exponent count byte
002DCC  1               LAB_28DD
002DCC  1  38                   SEC                     ; set carry for subtract
002DCD  1  E5 A8                SBC     numexp          ; subtract numerator exponent
002DCF  1  85 A9                STA     expcnt          ; save exponent count byte
002DD1  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
002DD3  1               
002DD3  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^expcnt
002DD5  1               
002DD5  1               ; else go do FAC1/10^(0-expcnt)
002DD5  1               LAB_28E6
002DD5  1  20 A0 2A             JSR     LAB_26B9        ; divide by 10
002DD8  1  E6 A9                INC     expcnt          ; increment exponent count byte
002DDA  1  D0 F9                BNE     LAB_28E6        ; loop until all done
002DDC  1               
002DDC  1  F0 07                BEQ     LAB_28F6        ; branch always
002DDE  1               
002DDE  1               LAB_28EF
002DDE  1  20 87 2A             JSR     LAB_269E        ; multiply by 10
002DE1  1  C6 A9                DEC     expcnt          ; decrement exponent count byte
002DE3  1  D0 F9                BNE     LAB_28EF        ; loop until all done
002DE5  1               
002DE5  1               LAB_28F6
002DE5  1  A5 B1                LDA     negnum          ; get -ve flag
002DE7  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
002DE9  1               
002DE9  1  60                   RTS
002DEA  1               
002DEA  1               ; do - FAC1 and return
002DEA  1               
002DEA  1               LAB_28FB
002DEA  1  4C E0 2F             JMP     LAB_GTHAN       ; do - FAC1 and return
002DED  1               
002DED  1               ; do unsigned FAC1*10+number
002DED  1               
002DED  1               LAB_28FE
002DED  1  48                   PHA                     ; save character
002DEE  1  24 AA                BIT     numdpf          ; test decimal point flag
002DF0  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
002DF2  1               
002DF2  1  E6 A8                INC     numexp          ; else increment number exponent
002DF4  1               LAB_2905
002DF4  1  20 87 2A             JSR     LAB_269E        ; multiply FAC1 by 10
002DF7  1  68                   PLA                     ; restore character
002DF8  1  29 0F                AND     #$0F            ; convert to binary
002DFA  1  20 00 2E             JSR     LAB_2912        ; evaluate new ASCII digit
002DFD  1  4C 8A 2D             JMP     LAB_289E        ; go do next character
002E00  1               
002E00  1               ; evaluate new ASCII digit
002E00  1               
002E00  1               LAB_2912
002E00  1  48                   PHA                     ; save digit
002E01  1  20 1A 2C             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
002E04  1  68                   PLA                     ; restore digit
002E05  1  20 4A 2C             JSR     LAB_27DB        ; save A as integer byte
002E08  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
002E0A  1  45 B0                EOR     FAC1_s          ; toggle with FAC1 sign (b7)
002E0C  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
002E0E  1  A6 AC                LDX     FAC1_e          ; get FAC1 exponent
002E10  1  4C 1B 28             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
002E13  1               
002E13  1               ; evaluate next character of exponential part of number
002E13  1               
002E13  1               LAB_2925
002E13  1  A5 A9                LDA     expcnt          ; get exponent count byte
002E15  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
002E17  1  90 09                BCC     LAB_2934        ; branch if less
002E19  1               
002E19  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
002E1B  1  24 AB                BIT     expneg          ; test exponent -ve flag
002E1D  1  30 25                BMI     LAB_2942        ; branch if -ve
002E1F  1               
002E1F  1  4C 23 29             JMP     LAB_2564        ; else do overflow error
002E22  1               
002E22  1               LAB_2934
002E22  1  0A                   ASL     A               ; * 2
002E23  1  0A                   ASL     A               ; * 4
002E24  1  65 A9                ADC     expcnt          ; * 5
002E26  1  0A                   ASL     A               ; * 10
002E27  1  A0 00                LDY     #$00            ; set index
002E29  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
002E2D  1  01 B5 C3 C9  
002E31  1  00 D0 04 A2  
002E42  1  E9 2F                SBC     #'0'-1          ; convert character to binary
002E44  1               LAB_2942
002E44  1  85 A9                STA     expcnt          ; save exponent count byte
002E46  1  4C B2 2D             JMP     LAB_28C4        ; go get next character
002E49  1               
002E49  1               ; print " in line [LINE #]"
002E49  1               
002E49  1               LAB_2953
002E49  1  A9 3E                LDA     #<LAB_LMSG      ; point to " in line " message low byte
002E4B  1  A0 3C                LDY     #>LAB_LMSG      ; point to " in line " message high byte
002E4D  1  20 52 14             JSR     LAB_18C3        ; print null terminated string from memory
002E50  1               
002E50  1               ; print Basic line #
002E50  1  A5 88                LDA     Clineh          ; get current line high byte
002E52  1  A6 87                LDX     Clinel          ; get current line low byte
002E54  1               
002E54  1               ; print XA as unsigned integer
002E54  1               
002E54  1               LAB_295E
002E54  1  85 AD                STA     FAC1_1          ; save low byte as FAC1 mantissa1
002E56  1  86 AE                STX     FAC1_2          ; save high byte as FAC1 mantissa2
002E58  1  A2 90                LDX     #$90            ; set exponent to 16d bits
002E5A  1  38                   SEC                     ; set integer is +ve flag
002E5B  1  20 57 2C             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
002E5E  1  A0 00                LDY     #$00            ; clear index
002E60  1  98                   TYA                     ; clear A
002E61  1  20 76 2E             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
002E64  1  4C 52 14             JMP     LAB_18C3        ; print null terminated string from memory and return
002E67  1               
002E67  1               ; convert FAC1 to ASCII string result in (AY)
002E67  1               ; not any more, moved scratchpad to page 0
002E67  1               
002E67  1               LAB_296E
002E67  1  A0 01                LDY     #$01            ; set index = 1
002E69  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
002E6B  1  24 B0                BIT     FAC1_s          ; test FAC1 sign (b7)
002E6D  1  10 02                BPL     LAB_2978        ; branch if +ve
002E6F  1               
002E6F  1  A9 2D                LDA     #$2D            ; else character = "-"
002E71  1               LAB_2978
002E71  1                       .IFDEF  DUODYNE
002E71  1  DA                   PHX
002E72  1  BB                   TYX
002E73  1  95 EF                STA     Decss,X         ; save leading character (" " or "-")
002E75  1  FA                   PLX
002E76  1                       .ELSE
002E76  1                       STA     Decss,Y         ; save leading character (" " or "-")
002E76  1                       .ENDIF
002E76  1               LAB_297B
002E76  1  85 B0                STA     FAC1_s          ; clear FAC1 sign (b7)
002E78  1  84 BA                STY     Sendl           ; save index
002E7A  1  C8                   INY                     ; increment index
002E7B  1  A6 AC                LDX     FAC1_e          ; get FAC1 exponent
002E7D  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
002E7F  1               
002E7F  1               ; exponent was $00 so FAC1 is 0
002E7F  1  A9 30                LDA     #'0'            ; set character = "0"
002E81  1  4C 96 2F             JMP     LAB_2A89        ; save last character, [EOT] and exit
002E84  1               
002E84  1               ; FAC1 is some non zero value
002E84  1               LAB_2989
002E84  1  A9 00                LDA     #$00            ; clear (number exponent count)
002E86  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
002E88  1               
002E88  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
002E8A  1               
002E8A  1               ; FAC1<1
002E8A  1  A9 C5                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
002E8C  1  A0 35                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
002E8E  1  20 99 29             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
002E91  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
002E93  1               LAB_299A
002E93  1  85 A8                STA     numexp          ; save number exponent count
002E95  1               LAB_299C
002E95  1  A9 C1                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
002E97  1  A0 35                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
002E99  1  20 67 2C             JSR     LAB_27F8        ; compare FAC1 with (AY)
002E9C  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
002E9E  1               
002E9E  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
002EA0  1               
002EA0  1               ; FAC1 < (AY)
002EA0  1               LAB_29A7
002EA0  1  A9 BD                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
002EA2  1  A0 35                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
002EA4  1  20 67 2C             JSR     LAB_27F8        ; compare FAC1 with (AY)
002EA7  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
002EA9  1               
002EA9  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
002EAB  1               
002EAB  1               ; FAC1 <= (AY)
002EAB  1               LAB_29B2
002EAB  1  20 87 2A             JSR     LAB_269E        ; multiply by 10
002EAE  1  C6 A8                DEC     numexp          ; decrement number exponent count
002EB0  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
002EB2  1               
002EB2  1               LAB_29B9
002EB2  1  20 A0 2A             JSR     LAB_26B9        ; divide by 10
002EB5  1  E6 A8                INC     numexp          ; increment number exponent count
002EB7  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
002EB9  1               
002EB9  1               ; now we have just the digits to do
002EB9  1               
002EB9  1               LAB_29C0
002EB9  1  20 14 28             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
002EBC  1               LAB_29C3
002EBC  1  20 04 2D             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
002EBF  1  A2 01                LDX     #$01            ; set default digits before dp = 1
002EC1  1  A5 A8                LDA     numexp          ; get number exponent count
002EC3  1  18                   CLC                     ; clear carry for add
002EC4  1  69 07                ADC     #$07            ; up to 6 digits before point
002EC6  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
002EC8  1               
002EC8  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
002ECA  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
002ECC  1               
002ECC  1               ; carry is clear
002ECC  1  69 FF                ADC     #$FF            ; take 1 from digit count
002ECE  1  AA                   TAX                     ; copy to A
002ECF  1  A9 02                LDA     #$02            ;.set exponent adjust
002ED1  1               LAB_29D8
002ED1  1  38                   SEC                     ; set carry for subtract
002ED2  1               LAB_29D9
002ED2  1  E9 02                SBC     #$02            ; -2
002ED4  1  85 A9                STA     expcnt          ;.save exponent adjust
002ED6  1  86 A8                STX     numexp          ; save digits before dp count
002ED8  1  8A                   TXA                     ; copy to A
002ED9  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
002EDB  1               
002EDB  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
002EDD  1               
002EDD  1               LAB_29E4
002EDD  1  A4 BA                LDY     Sendl           ; get output string index
002EDF  1  A9 2E                LDA     #$2E            ; character "."
002EE1  1  C8                   INY                     ; increment index
002EE2  1                       .IFDEF  DUODYNE
002EE2  1  DA                   PHX
002EE3  1  BB                   TYX
002EE4  1  95 EF                STA     Decss,X         ; save to output string
002EE6  1  FA                   PLX
002EE7  1                       .ELSE
002EE7  1                       STA     Decss,Y         ; save to output string
002EE7  1                       .ENDIF
002EE7  1  8A                   TXA                     ;.
002EE8  1  F0 08                BEQ     LAB_29F5        ;.
002EEA  1               
002EEA  1  A9 30                LDA     #'0'            ; character "0"
002EEC  1  C8                   INY                     ; increment index
002EED  1                       .IFDEF  DUODYNE
002EED  1  DA                   PHX
002EEE  1  BB                   TYX
002EEF  1  95 EF                STA     Decss,X         ; save to output string
002EF1  1  FA                   PLX
002EF2  1                       .ELSE
002EF2  1                       STA     Decss,Y         ; save to output string
002EF2  1                       .ENDIF
002EF2  1               
002EF2  1               LAB_29F5
002EF2  1  84 BA                STY     Sendl           ; save output string index
002EF4  1               LAB_29F7
002EF4  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
002EF6  1  A2 80                LDX     #$80            ;
002EF8  1               LAB_29FB
002EF8  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002EFA  1  18                   CLC                     ; clear carry for add
002EFB  1  79 3B 36             ADC     LAB_2A9C,Y      ; add -ve LSB
002EFE  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
002F00  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002F02  1  79 3A 36             ADC     LAB_2A9B,Y      ; add -ve NMSB
002F05  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
002F07  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
002F09  1  79 39 36             ADC     LAB_2A9A,Y      ; add -ve MSB
002F0C  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002F0E  1  E8                   INX                     ;
002F0F  1  B0 04                BCS     LAB_2A18        ;
002F11  1               
002F11  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
002F13  1               
002F13  1  30 02                BMI     LAB_2A1A        ;
002F15  1               
002F15  1               LAB_2A18
002F15  1  30 E1                BMI     LAB_29FB        ;
002F17  1               
002F17  1               LAB_2A1A
002F17  1  8A                   TXA                     ;
002F18  1  90 04                BCC     LAB_2A21        ;
002F1A  1               
002F1A  1  49 FF                EOR     #$FF            ;
002F1C  1  69 0A                ADC     #$0A            ;
002F1E  1               LAB_2A21
002F1E  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
002F20  1  C8                   INY                     ; increment index ..
002F21  1  C8                   INY                     ; .. to next less ..
002F22  1  C8                   INY                     ; .. power of ten
002F23  1  84 95                STY     Cvaral          ; save as current var address low byte
002F25  1  A4 BA                LDY     Sendl           ; get output string index
002F27  1  C8                   INY                     ; increment output string index
002F28  1  AA                   TAX                     ; copy character to X
002F29  1  29 7F                AND     #$7F            ; mask out top bit
002F2B  1                       .IFDEF  DUODYNE
002F2B  1  DA                   PHX
002F2C  1  BB                   TYX
002F2D  1  95 EF                STA     Decss,X         ; save to output string
002F2F  1  FA                   PLX
002F30  1                       .ELSE
002F30  1                       STA     Decss,Y         ; save to output string
002F30  1                       .ENDIF
002F30  1  C6 A8                DEC     numexp          ; decrement # of characters before the dp
002F32  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
002F34  1               
002F34  1               ; else output the point
002F34  1  A9 2E                LDA     #$2E            ; character "."
002F36  1  C8                   INY                     ; increment output string index
002F37  1                       .IFDEF  DUODYNE
002F37  1  DA                   PHX
002F38  1  BB                   TYX
002F39  1  95 EF                STA     Decss,X         ; save to output string
002F3B  1  FA                   PLX
002F3C  1                       .ELSE
002F3C  1                       STA     Decss,Y         ; save to output string
002F3C  1                       .ENDIF
002F3C  1               LAB_2A3B
002F3C  1  84 BA                STY     Sendl           ; save output string index
002F3E  1  A4 95                LDY     Cvaral          ; get current var address low byte
002F40  1  8A                   TXA                     ; get character back
002F41  1  49 FF                EOR     #$FF            ;
002F43  1  29 80                AND     #$80            ;
002F45  1  AA                   TAX                     ;
002F46  1  C0 12                CPY     #$12            ; compare index with max
002F48  1  D0 AE                BNE     LAB_29FB        ; loop if not max
002F4A  1               
002F4A  1               ; now remove trailing zeroes
002F4A  1  A4 BA                LDY     Sendl           ; get output string index
002F4C  1               LAB_2A4B
002F4C  1                       .IFDEF  DUODYNE
002F4C  1  DA                   PHX
002F4D  1  BB                   TYX
002F4E  1  B5 EF                LDA     Decss,X         ; save to output string
002F50  1  FA                   PLX
002F51  1                       .ELSE
002F51  1                       LDA     Decss,Y         ; GET FROM output string
002F51  1                       .ENDIF
002F51  1  88                   DEY                     ; decrement output string index
002F52  1  C9 30                CMP     #'0'            ; compare with "0"
002F54  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
002F56  1               
002F56  1  C9 2E                CMP     #'.'            ; compare with "."
002F58  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
002F5A  1               
002F5A  1               ; restore last character
002F5A  1  C8                   INY                     ; increment output string index
002F5B  1               LAB_2A58
002F5B  1  A9 2B                LDA     #$2B            ; character "+"
002F5D  1  A6 A9                LDX     expcnt          ; get exponent count
002F5F  1  F0 3A                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
002F61  1               
002F61  1               ; exponent isn't zero so write exponent
002F61  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
002F63  1               
002F63  1  A9 00                LDA     #$00            ; clear A
002F65  1  38                   SEC                     ; set carry for subtract
002F66  1  E5 A9                SBC     expcnt          ; subtract exponent count adjust (convert -ve to +ve)
002F68  1  AA                   TAX                     ; copy exponent count to X
002F69  1  A9 2D                LDA     #'-'            ; character "-"
002F6B  1               LAB_2A68
002F6B  1               
002F6B  1                       .IFDEF  DUODYNE
002F6B  1  DA                   PHX
002F6C  1  BB                   TYX
002F6D  1  95 F1                STA     Decss+2,X       ; save to output string
002F6F  1  FA                   PLX
002F70  1                       .ELSE
002F70  1                       STA     Decss+2,Y       ; save to output string
002F70  1                       .ENDIF
002F70  1  A9 45                LDA     #$45            ; character "E"
002F72  1                       .IFDEF  DUODYNE
002F72  1  DA                   PHX
002F73  1  BB                   TYX
002F74  1  95 F0                STA     Decss+1,X       ; save EXPONENT SIGN to output string
002F76  1  FA                   PLX
002F77  1                       .ELSE
002F77  1                       STA     Decss+1,Y       ; save EXPONENT SIGN to output string
002F77  1                       .ENDIF
002F77  1  8A                   TXA                     ; get exponent count back
002F78  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
002F7A  1  38                   SEC                     ; set carry for subtract
002F7B  1               LAB_2A74
002F7B  1  E8                   INX                     ; increment 10's character
002F7C  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
002F7E  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
002F80  1               
002F80  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
002F82  1                       .IFDEF  DUODYNE
002F82  1  DA                   PHX
002F83  1  BB                   TYX
002F84  1  95 F3                STA     Decss+4,X       ; save to output string
002F86  1  FA                   PLX
002F87  1                       .ELSE
002F87  1                       STA     Decss+4,Y       ; save to output string
002F87  1                       .ENDIF
002F87  1  8A                   TXA                     ; copy 10's character
002F88  1                       .IFDEF  DUODYNE
002F88  1  DA                   PHX
002F89  1  BB                   TYX
002F8A  1  95 F2                STA     Decss+3,X       ; save to output string
002F8C  1  FA                   PLX
002F8D  1                       .ELSE
002F8D  1                       STA     Decss+3,Y       ; save to output string
002F8D  1                       .ENDIF
002F8D  1  A9 00                LDA     #$00            ; set null terminator
002F8F  1                       .IFDEF  DUODYNE
002F8F  1  DA                   PHX
002F90  1  BB                   TYX
002F91  1  95 F4                STA     Decss+5,X       ; save to output string
002F93  1  FA                   PLX
002F94  1                       .ELSE
002F94  1                       STA     Decss+5,Y       ; save to output string
002F94  1                       .ENDIF
002F94  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
002F96  1               
002F96  1               ; save last character, [EOT] and exit
002F96  1               LAB_2A89
002F96  1                       .IFDEF  DUODYNE
002F96  1  DA                   PHX
002F97  1  BB                   TYX
002F98  1  95 EF                STA     Decss,X         ; save to output string
002F9A  1  FA                   PLX
002F9B  1                       .ELSE
002F9B  1                       STA     Decss,Y         ; save to output string
002F9B  1                       .ENDIF
002F9B  1               
002F9B  1               ; set null terminator and exit
002F9B  1               LAB_2A8C
002F9B  1  A9 00                LDA     #$00            ; set null terminator
002F9D  1                       .IFDEF  DUODYNE
002F9D  1  DA                   PHX
002F9E  1  BB                   TYX
002F9F  1  95 F0                STA     Decss+1,X       ; save to output string
002FA1  1  FA                   PLX
002FA2  1                       .ELSE
002FA2  1                       STA     Decss+1,Y       ; save to output string
002FA2  1                       .ENDIF
002FA2  1               
002FA2  1               ; set string pointer (AY) and exit
002FA2  1               LAB_2A91
002FA2  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
002FA4  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
002FA6  1  60                   RTS
002FA7  1               
002FA7  1               ; perform power function
002FA7  1               
002FA7  1               LAB_POWER
002FA7  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
002FA9  1               
002FA9  1  A5 B3                LDA     FAC2_e          ; get FAC2 exponent
002FAB  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
002FAD  1               
002FAD  1  4C B2 28             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
002FB0  1               
002FB0  1               LAB_2ABF
002FB0  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
002FB2  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
002FB4  1  20 A7 2B             JSR     LAB_2778        ; pack FAC1 into (XY)
002FB7  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
002FB9  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
002FBB  1               
002FBB  1               ; else FAC2 is -ve and can only be raised to an
002FBB  1               ; integer power which gives an x +j0 result
002FBB  1  20 35 2D             JSR     LAB_INT         ; perform INT
002FBE  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
002FC0  1  A0 00                LDY     #>func_l        ; set source pointer high byte
002FC2  1  20 67 2C             JSR     LAB_27F8        ; compare FAC1 with (AY)
002FC5  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
002FC7  1               ; this will leave FAC1 -ve and cause a Function Call
002FC7  1               ; error when LOG() is called
002FC7  1               
002FC7  1  98                   TYA                     ; clear sign b7
002FC8  1  A4 5B                LDY     Temp3           ; save mantissa 3 from INT() function as sign in Y
002FCA  1               ; for possible later negation, b0
002FCA  1               LAB_2AD9
002FCA  1  20 1F 28             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
002FCD  1  98                   TYA                     ; copy sign back ..
002FCE  1  48                   PHA                     ; .. and save it
002FCF  1  20 5B 29             JSR     LAB_LOG         ; do LOG(n)
002FD2  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
002FD4  1  A0 00                LDY     #>garb_l        ; set pointer high byte
002FD6  1  20 99 29             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
002FD9  1  20 EB 2F             JSR     LAB_EXP         ; go do EXP(n)
002FDC  1  68                   PLA                     ; pull sign from stack
002FDD  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
002FDE  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
002FE0  1               
002FE0  1               ; Perform negation
002FE0  1               ; do - FAC1
002FE0  1               
002FE0  1               LAB_GTHAN
002FE0  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002FE2  1  F0 06                BEQ     LAB_2AF9        ; exit if FAC1_e = $00
002FE4  1               
002FE4  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002FE6  1  49 FF                EOR     #$FF            ; complement it
002FE8  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002FEA  1               LAB_2AF9
002FEA  1  60                   RTS
002FEB  1               
002FEB  1               ; perform EXP()	(x^e)
002FEB  1               
002FEB  1               LAB_EXP
002FEB  1  A9 C9                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
002FED  1  A0 35                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
002FEF  1  20 99 29             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
002FF2  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
002FF4  1  69 50                ADC     #$50            ; +$50/$100
002FF6  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
002FF8  1               
002FF8  1  20 31 2C             JSR     LAB_27C2        ; round FAC1 (no check)
002FFB  1               LAB_2B2B
002FFB  1  85 A3                STA     FAC2_r          ; save FAC2 rounding byte
002FFD  1  20 1D 2C             JSR     LAB_27AE        ; copy FAC1 to FAC2
003000  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
003002  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
003004  1  90 03                BCC     LAB_2B39        ; branch if less
003006  1               
003006  1               LAB_2B36
003006  1  20 7E 2A             JSR     LAB_2690        ; handle overflow and underflow
003009  1               LAB_2B39
003009  1  20 35 2D             JSR     LAB_INT         ; perform INT
00300C  1  A5 5B                LDA     Temp3           ; get mantissa 3 from INT() function
00300E  1  18                   CLC                     ; clear carry for add
00300F  1  69 81                ADC     #$81            ; normalise +1
003011  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
003013  1               
003013  1  38                   SEC                     ; set carry for subtract
003014  1  E9 01                SBC     #$01            ; now correct for exponent
003016  1  48                   PHA                     ; save FAC2 exponent
003017  1               
003017  1               ; swap FAC1 and FAC2
003017  1  A2 04                LDX     #$04            ; 4 bytes to do
003019  1               LAB_2B49
003019  1  B5 B3                LDA     FAC2_e,X        ; get FAC2,X
00301B  1  B4 AC                LDY     FAC1_e,X        ; get FAC1,X
00301D  1  95 AC                STA     FAC1_e,X        ; save FAC1,X
00301F  1  94 B3                STY     FAC2_e,X        ; save FAC2,X
003021  1  CA                   DEX                     ; decrement count/index
003022  1  10 F5                BPL     LAB_2B49        ; loop if not all done
003024  1               
003024  1  A5 A3                LDA     FAC2_r          ; get FAC2 rounding byte
003026  1  85 B9                STA     FAC1_r          ; save as FAC1 rounding byte
003028  1  20 00 28             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
00302B  1  20 E0 2F             JSR     LAB_GTHAN       ; do - FAC1
00302E  1  A9 CD                LDA     #<LAB_2AFE      ; set counter pointer low byte
003030  1  A0 35                LDY     #>LAB_2AFE      ; set counter pointer high byte
003032  1  20 53 30             JSR     LAB_2B84        ; go do series evaluation
003035  1  A9 00                LDA     #$00            ; clear A
003037  1  85 B8                STA     FAC_sc          ; clear sign compare (FAC1 EOR FAC2)
003039  1  68                   PLA                     ;.get saved FAC2 exponent
00303A  1  4C 63 2A             JMP     LAB_2675        ; test and adjust accumulators and return
00303D  1               
00303D  1               ; ^2 then series evaluation
00303D  1               
00303D  1               LAB_2B6E
00303D  1  85 BA                STA     Cptrl           ; save count pointer low byte
00303F  1  84 BB                STY     Cptrh           ; save count pointer high byte
003041  1  20 9D 2B             JSR     LAB_276E        ; pack FAC1 into Adatal
003044  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
003046  1  20 99 29             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
003049  1  20 57 30             JSR     LAB_2B88        ; go do series evaluation
00304C  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
00304E  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
003050  1  4C 99 29             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
003053  1               
003053  1               ; series evaluation
003053  1               
003053  1               LAB_2B84
003053  1  85 BA                STA     Cptrl           ; save count pointer low byte
003055  1  84 BB                STY     Cptrh           ; save count pointer high byte
003057  1               LAB_2B88
003057  1  A2 A8                LDX     #<numexp        ; set pointer low byte
003059  1  20 9F 2B             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into numexp
00305C  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
003060  1  B5 BA C9 00  
003064  1  D0 04 A2 00  
003072  1  85 B1                STA     numcon          ; save constants count
003074  1  A4 BA                LDY     Cptrl           ; get count pointer low byte
003076  1  C8                   INY                     ; increment it (now constants pointer)
003077  1  98                   TYA                     ; copy it
003078  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
00307A  1               
00307A  1  E6 BB                INC     Cptrh           ; else increment high byte
00307C  1               LAB_2B97
00307C  1  85 BA                STA     Cptrl           ; save low byte
00307E  1  A4 BB                LDY     Cptrh           ; get high byte
003080  1               LAB_2B9B
003080  1  20 99 29             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
003083  1  A5 BA                LDA     Cptrl           ; get constants pointer low byte
003085  1  A4 BB                LDY     Cptrh           ; get constants pointer high byte
003087  1  18                   CLC                     ; clear carry for add
003088  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
00308A  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
00308C  1               
00308C  1  C8                   INY                     ; increment high byte
00308D  1               LAB_2BA8
00308D  1  85 BA                STA     Cptrl           ; save pointer low byte
00308F  1  84 BB                STY     Cptrh           ; save pointer high byte
003091  1  20 18 28             JSR     LAB_246C        ; add (AY) to FAC1
003094  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ numexp
003096  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ numexp
003098  1  C6 B1                DEC     numcon          ; decrement constants count
00309A  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
00309C  1               
00309C  1  60                   RTS
00309D  1               
00309D  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
00309D  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
00309D  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
00309D  1               
00309D  1               ; Entropy = 7.997442 bits per byte
00309D  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
00309D  1               
00309D  1               ; Chi square distribution for 65536 samples is 232.01, and
00309D  1               ; randomly would exceed this value 75.00 percent of the time
00309D  1               
00309D  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
00309D  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
00309D  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
00309D  1               
00309D  1               LAB_RND:
00309D  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
00309F  1  F0 07                BEQ     NextPRN         ; do next random # if zero
0030A1  1               
0030A1  1               ; else get seed into random number store
0030A1  1  A2 E1                LDX     #Rbyte4         ; set PRNG pointer low byte
0030A3  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
0030A5  1  20 A7 2B             JSR     LAB_2778        ; pack FAC1 into (XY)
0030A8  1               NextPRN:
0030A8  1  A2 AF                LDX     #$AF            ; set EOR byte
0030AA  1  A0 13                LDY     #$13            ; do this nineteen times
0030AC  1               LoopPRN:
0030AC  1  06 E2                ASL     Rbyte1          ; shift PRNG most significant byte
0030AE  1  26 E3                ROL     Rbyte2          ; shift PRNG middle byte
0030B0  1  26 E4                ROL     Rbyte3          ; shift PRNG least significant byte
0030B2  1  26 E1                ROL     Rbyte4          ; shift PRNG extra byte
0030B4  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
0030B6  1               
0030B6  1  8A                   TXA                     ; set EOR byte
0030B7  1  45 E2                EOR     Rbyte1          ; EOR PRNG extra byte
0030B9  1  85 E2                STA     Rbyte1          ; save new PRNG extra byte
0030BB  1               Ninc1:
0030BB  1  88                   DEY                     ; decrement loop count
0030BC  1  D0 EE                BNE     LoopPRN         ; loop if not all done
0030BE  1               
0030BE  1  A2 02                LDX     #$02            ; three bytes to copy
0030C0  1               CopyPRNG:
0030C0  1  B5 E2                LDA     Rbyte1,X        ; get PRNG byte
0030C2  1  95 AD                STA     FAC1_1,X        ; save FAC1 byte
0030C4  1  CA                   DEX
0030C5  1  10 F9                BPL     CopyPRNG        ; loop if not complete
0030C7  1               
0030C7  1  A9 80                LDA     #$80            ; set the exponent
0030C9  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
0030CB  1               
0030CB  1  0A                   ASL     A               ; clear A
0030CC  1  85 B0                STA     FAC1_s          ; save FAC1 sign
0030CE  1               
0030CE  1  4C 94 28             JMP     LAB_24D5        ; normalise FAC1 and return
0030D1  1               
0030D1  1               ; perform COS()
0030D1  1               
0030D1  1               LAB_COS:
0030D1  1  A9 EA                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
0030D3  1  A0 35                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
0030D5  1  20 18 28             JSR     LAB_246C        ; add (AY) to FAC1
0030D8  1               
0030D8  1               ; perform SIN()
0030D8  1               
0030D8  1               LAB_SIN:
0030D8  1  20 1A 2C             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0030DB  1  A9 FF                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
0030DD  1  A0 35                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
0030DF  1  A6 B7                LDX     FAC2_s          ; get FAC2 sign (b7)
0030E1  1  20 A9 2A             JSR     LAB_26C2        ; divide by (AY) (X=sign)
0030E4  1  20 1A 2C             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0030E7  1  20 35 2D             JSR     LAB_INT         ; perform INT
0030EA  1  A9 00                LDA     #$00            ; clear byte
0030EC  1  85 B8                STA     FAC_sc          ; clear sign compare (FAC1 EOR FAC2)
0030EE  1  20 00 28             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
0030F1  1  A9 31                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0030F3  1  A0 36                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0030F5  1  20 FD 27             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
0030F8  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
0030FA  1  48                   PHA                     ; save FAC1 sign
0030FB  1  10 0D                BPL     LAB_2C35        ; branch if +ve
0030FD  1               
0030FD  1               ; FAC1 sign was -ve
0030FD  1  20 14 28             JSR     LAB_244E        ; add 0.5 to FAC1
003100  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
003102  1  30 09                BMI     LAB_2C38        ; branch if -ve
003104  1               
003104  1  A5 63                LDA     Cflag           ; get comparison evaluation flag
003106  1  49 FF                EOR     #$FF            ; toggle flag
003108  1  85 63                STA     Cflag           ; save comparison evaluation flag
00310A  1               LAB_2C35
00310A  1  20 E0 2F             JSR     LAB_GTHAN       ; do - FAC1
00310D  1               LAB_2C38:
00310D  1  A9 31                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
00310F  1  A0 36                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
003111  1  20 18 28             JSR     LAB_246C        ; add (AY) to FAC1
003114  1  68                   PLA                     ; restore FAC1 sign
003115  1  10 03                BPL     LAB_2C45        ; branch if was +ve
003117  1               
003117  1               ; else correct FAC1
003117  1  20 E0 2F             JSR     LAB_GTHAN       ; do - FAC1
00311A  1               LAB_2C45:
00311A  1  A9 EE                LDA     #<LAB_2C84      ; set pointer low byte to counter
00311C  1  A0 35                LDY     #>LAB_2C84      ; set pointer high byte to counter
00311E  1  4C 3D 30             JMP     LAB_2B6E        ; ^2 then series evaluation and return
003121  1               
003121  1               ; perform TAN()
003121  1               
003121  1               LAB_TAN:
003121  1  20 9D 2B             JSR     LAB_276E        ; pack FAC1 into Adatal
003124  1  A9 00                LDA     #$00            ; clear byte
003126  1  85 63                STA     Cflag           ; clear comparison evaluation flag
003128  1  20 D8 30             JSR     LAB_SIN         ; go do SIN(n)
00312B  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
00312D  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
00312F  1  20 A7 2B             JSR     LAB_2778        ; pack FAC1 into (XY)
003132  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
003134  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
003136  1  20 2D 2B             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
003139  1  A9 00                LDA     #$00            ; clear byte
00313B  1  85 B0                STA     FAC1_s          ; clear FAC1 sign (b7)
00313D  1  A5 63                LDA     Cflag           ; get comparison evaluation flag
00313F  1  20 49 31             JSR     LAB_2C74        ; save flag and go do series evaluation
003142  1               
003142  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
003144  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
003146  1  4C B1 2A             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
003149  1               
003149  1               LAB_2C74:
003149  1  48                   PHA                     ; save comparison evaluation flag
00314A  1  4C 0A 31             JMP     LAB_2C35        ; go do series evaluation
00314D  1               
00314D  1               ; perform USR()
00314D  1               
00314D  1               LAB_USR:
00314D  1  20 0A 00             JSR     Usrjmp          ; call user code
003150  1  4C C0 17             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003153  1               
003153  1               ; perform ATN()
003153  1               
003153  1               LAB_ATN:
003153  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
003155  1  48                   PHA                     ; save sign
003156  1  10 03                BPL     LAB_2CA1        ; branch if +ve
003158  1               
003158  1  20 E0 2F             JSR     LAB_GTHAN       ; else do - FAC1
00315B  1               LAB_2CA1:
00315B  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
00315D  1  48                   PHA                     ; push exponent
00315E  1  C9 81                CMP     #$81            ; compare with 1
003160  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
003162  1               
003162  1  A9 24                LDA     #<LAB_259C      ; set 1 pointer low byte
003164  1  A0 36                LDY     #>LAB_259C      ; set 1 pointer high byte
003166  1  20 B1 2A             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
003169  1               LAB_2CAF:
003169  1  A9 03                LDA     #<LAB_2CC9      ; set pointer low byte to counter
00316B  1  A0 36                LDY     #>LAB_2CC9      ; set pointer high byte to counter
00316D  1  20 3D 30             JSR     LAB_2B6E        ; ^2 then series evaluation
003170  1  68                   PLA                     ; restore old FAC1 exponent
003171  1  C9 81                CMP     #$81            ; compare with 1
003173  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
003175  1               
003175  1  A9 EA                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
003177  1  A0 35                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
003179  1  20 FD 27             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
00317C  1               LAB_2CC2:
00317C  1  68                   PLA                     ; restore FAC1 sign
00317D  1  10 16                BPL     LAB_2D04        ; exit if was +ve
00317F  1               
00317F  1  4C E0 2F             JMP     LAB_GTHAN       ; else do - FAC1 and return
003182  1               
003182  1               ; perform BITSET
003182  1               
003182  1               LAB_BITSET:
003182  1  20 C4 26             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003185  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
003187  1  B0 20                BCS     FCError         ; branch if > 7
003189  1               
003189  1  A9 00                LDA     #$00            ; clear A
00318B  1  38                   SEC                     ; set the carry
00318C  1               S_Bits:
00318C  1  2A                   ROL     A               ; shift bit
00318D  1  CA                   DEX                     ; decrement bit number
00318E  1  10 FC                BPL     S_Bits          ; loop if still +ve
003190  1               
003190  1  E8                   INX                     ; make X = $00
003191  1  01 11                ORA     (Itempl,X)      ; or with byte via temporary integer (addr)
003193  1  81 11                STA     (Itempl,X)      ; save byte via temporary integer (addr)
003195  1               LAB_2D04:
003195  1  60                   RTS
003196  1               
003196  1               ; perform BITCLR
003196  1               
003196  1               LAB_BITCLR:
003196  1  20 C4 26             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003199  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
00319B  1  B0 0C                BCS     FCError         ; branch if > 7
00319D  1               
00319D  1  A9 FF                LDA     #$FF            ; set A
00319F  1               S_Bitc:
00319F  1  2A                   ROL     A               ; shift bit
0031A0  1  CA                   DEX                     ; decrement bit number
0031A1  1  10 FC                BPL     S_Bitc          ; loop if still +ve
0031A3  1               
0031A3  1  E8                   INX                     ; make X = $00
0031A4  1  21 11                AND     (Itempl,X)      ; and with byte via temporary integer (addr)
0031A6  1  81 11                STA     (Itempl,X)      ; save byte via temporary integer (addr)
0031A8  1  60                   RTS
0031A9  1               
0031A9  1               FCError:
0031A9  1  4C 30 1C             JMP     LAB_FCER        ; do function call error then warm start
0031AC  1               
0031AC  1               ; perform BITTST()
0031AC  1               
0031AC  1               LAB_BTST:
0031AC  1                       .IFDEF  DUODYNE
0031AC  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0031B0  1                       .ELSE
0031B0  1                       JSR     LAB_IGBY        ; increment and scan memory
0031B0  1                       .ENDIF
0031B0  1               
0031B0  1  20 C4 26             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0031B3  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0031B5  1  B0 F2                BCS     FCError         ; branch if > 7
0031B7  1               
0031B7  1                       .IFDEF  DUODYNE
0031B7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0031BB  1                       .ELSE
0031BB  1                       JSR     LAB_GBYT        ; scan memory
0031BB  1                       .ENDIF
0031BB  1               
0031BB  1  C9 29                CMP     #')'            ; is next character ")"
0031BD  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
0031BF  1               
0031BF  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
0031C2  1               
0031C2  1               TST_OK:
0031C2  1                       .IFDEF  DUODYNE
0031C2  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0031C6  1                       .ELSE
0031C6  1                       JSR     LAB_IGBY        ; increment and scan memory
0031C6  1                       .ENDIF
0031C6  1               
0031C6  1  A9 00                LDA     #$00            ; clear A
0031C8  1  38                   SEC                     ; set the carry
0031C9  1               T_Bits:
0031C9  1  2A                   ROL     A               ; shift bit
0031CA  1  CA                   DEX                     ; decrement bit number
0031CB  1  10 FC                BPL     T_Bits          ; loop if still +ve
0031CD  1               
0031CD  1  E8                   INX                     ; make X = $00
0031CE  1  21 11                AND     (Itempl,X)      ; AND with byte via temporary integer (addr)
0031D0  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
0031D2  1               
0031D2  1  A9 FF                LDA     #$FF            ; set for -1 result
0031D4  1               LAB_NOTT:
0031D4  1  4C 4A 2C             JMP     LAB_27DB        ; go do SGN tail
0031D7  1               
0031D7  1               ; perform BIN$()
0031D7  1               
0031D7  1               LAB_BINS:
0031D7  1  E0 19                CPX     #$19            ; max + 1
0031D9  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
0031DB  1               
0031DB  1  86 78                STX     TempB           ; save # of characters ($00 = leading zero remove)
0031DD  1  A9 18                LDA     #$18            ; need A byte long space
0031DF  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long
0031E2  1  A0 17                LDY     #$17            ; set index
0031E4  1  A2 18                LDX     #$18            ; character count
0031E6  1               NextB1:
0031E6  1  46 11                LSR     nums_1          ; shift highest byte
0031E8  1  66 12                ROR     nums_2          ; shift middle byte
0031EA  1  66 13                ROR     nums_3          ; shift lowest byte bit 0 to carry
0031EC  1  8A                   TXA                     ; load with "0"/2
0031ED  1  2A                   ROL     A               ; shift in carry
0031EE  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
0031F2  1  01 B5 AD C9  
0031F6  1  00 D0 04 A2  
003204  1  88                   DEY                     ; decrement index
003205  1  10 DF                BPL     NextB1          ; loop if not done
003207  1               
003207  1  A5 78                LDA     TempB           ; get # of characters
003209  1  F0 0A                BEQ     EndBHS          ; branch if truncate
00320B  1               
00320B  1  AA                   TAX                     ; copy length to X
00320C  1  38                   SEC                     ; set carry for add !
00320D  1  49 FF                EOR     #$FF            ; 1's complement
00320F  1  69 18                ADC     #$18            ; add 24d
003211  1  F0 30                BEQ     GoPr2           ; if zero print whole string
003213  1               
003213  1  D0 23                BNE     GoPr1           ; else go make output string
003215  1               
003215  1               ; this is the exit code and is also used by HEX$()
003215  1               ; truncate string to remove leading "0"s
003215  1               
003215  1               EndBHS:
003215  1  A8                   TAY                     ; clear index (A=0, X=length here)
003216  1               NextB2:
003216  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
00321A  1  B5 AD C9 00  
00321E  1  D0 04 A2 00  
00322C  1  C9 30                CMP     #'0'            ; compare with "0"
00322E  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
003230  1               
003230  1  CA                   DEX                     ; decrement character count
003231  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
003233  1               
003233  1  C8                   INY                     ; else increment index
003234  1  10 E0                BPL     NextB2          ; loop always
003236  1               
003236  1               ; make fixed length output string - ignore overflows!
003236  1               
003236  1               GoPr3:
003236  1  E8                   INX                     ; need at least 1 character
003237  1               GoPr:
003237  1  98                   TYA                     ; copy result
003238  1               GoPr1:
003238  1  18                   CLC                     ; clear carry for add
003239  1  65 AD                ADC     str_pl          ; add low address
00323B  1  85 AD                STA     str_pl          ; save low address
00323D  1  A9 00                LDA     #$00            ; do high byte
00323F  1  65 AE                ADC     str_ph          ; add high address
003241  1  85 AE                STA     str_ph          ; save high address
003243  1               GoPr2:
003243  1  86 AC                STX     str_ln          ; X holds string length
003245  1                       .IFDEF  DUODYNE
003245  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003249  1                       .ELSE
003249  1                       JSR     LAB_IGBY        ; increment and scan memory
003249  1                       .ENDIF
003249  1               
003249  1  4C 86 20             JMP     LAB_RTST        ; check for space on descriptor stack then put address
00324C  1               ; and length on descriptor stack and update stack pointers
00324C  1               
00324C  1               BinFErr:
00324C  1  4C 30 1C             JMP     LAB_FCER        ; do function call error then warm start
00324F  1               
00324F  1               ; perform HEX$()
00324F  1               
00324F  1               LAB_HEXS:
00324F  1  E0 07                CPX     #$07            ; max + 1
003251  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
003253  1               
003253  1  86 78                STX     TempB           ; save # of characters
003255  1               
003255  1  A9 06                LDA     #$06            ; need 6 bytes for string
003257  1  20 27 20             JSR     LAB_MSSP        ; make string space A bytes long
00325A  1  A0 05                LDY     #$05            ; set string index
00325C  1               
00325C  1  F8                   SED                     ; need decimal mode for nibble convert
00325D  1  A5 13                LDA     nums_3          ; get lowest byte
00325F  1  20 7D 32             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
003262  1  A5 12                LDA     nums_2          ; get middle byte
003264  1  20 7D 32             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
003267  1  A5 11                LDA     nums_1          ; get highest byte
003269  1  20 7D 32             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
00326C  1  D8                   CLD                     ; back to binary
00326D  1               
00326D  1  A2 06                LDX     #$06            ; character count
00326F  1  A5 78                LDA     TempB           ; get # of characters
003271  1  F0 A2                BEQ     EndBHS          ; branch if truncate
003273  1               
003273  1  AA                   TAX                     ; copy length to X
003274  1  38                   SEC                     ; set carry for add !
003275  1  49 FF                EOR     #$FF            ; 1's complement
003277  1  69 06                ADC     #$06            ; add 6d
003279  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
00327B  1               
00327B  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
00327D  1               
00327D  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
00327D  1               
00327D  1               LAB_A2HX:
00327D  1  AA                   TAX                     ; save byte
00327E  1  29 0F                AND     #$0F            ; mask off top bits
003280  1  20 88 32             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
003283  1  8A                   TXA                     ; get byte back
003284  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
003285  1  4A                   LSR     A               ; /4
003286  1  4A                   LSR     A               ; /8
003287  1  4A                   LSR     A               ; /16
003288  1               LAB_AL2X:
003288  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
00328A  1  69 30                ADC     #'0'            ; add ASCII "0"
00328C  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
003290  1  01 B5 AD C9  
003294  1  00 D0 04 A2  
0032A2  1  88                   DEY                     ; decrement counter
0032A3  1  60                   RTS
0032A4  1               
0032A4  1               LAB_NLTO:
0032A4  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
0032A6  1  A9 00                LDA     #$00            ; clear sign compare
0032A8  1               LAB_MLTE:
0032A8  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
0032AA  1  8A                   TXA                     ; restore character
0032AB  1  20 00 2E             JSR     LAB_2912        ; evaluate new ASCII digit
0032AE  1               
0032AE  1               ; gets here if the first character was "$" for hex
0032AE  1               ; get hex number
0032AE  1               
0032AE  1               LAB_CHEX:
0032AE  1                       .IFDEF  DUODYNE
0032AE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0032B2  1                       .ELSE
0032B2  1                       JSR     LAB_IGBY        ; increment and scan memory
0032B2  1                       .ENDIF
0032B2  1               
0032B2  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
0032B4  1               
0032B4  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
0032B6  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
0032B8  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
0032BA  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
0032BC  1               
0032BC  1  69 0A                ADC     #$0A            ; convert to nibble
0032BE  1               LAB_ISHN:
0032BE  1  29 0F                AND     #$0F            ; convert to binary
0032C0  1  AA                   TAX                     ; save nibble
0032C1  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0032C3  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
0032C5  1               
0032C5  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
0032C7  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
0032C9  1               
0032C9  1               LAB_MLTO:
0032C9  1  4C 23 29             JMP     LAB_2564        ; do overflow error and warm start
0032CC  1               
0032CC  1               LAB_NXCH:
0032CC  1  AA                   TAX                     ; save bit
0032CD  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0032CF  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
0032D1  1               
0032D1  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent (*2)
0032D3  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
0032D5  1               
0032D5  1  A9 00                LDA     #$00            ; clear sign compare
0032D7  1               LAB_MLBT:
0032D7  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
0032D9  1  8A                   TXA                     ; restore bit
0032DA  1  20 00 2E             JSR     LAB_2912        ; evaluate new ASCII digit
0032DD  1               
0032DD  1               ; gets here if the first character was  "%" for binary
0032DD  1               ; get binary number
0032DD  1               
0032DD  1               LAB_CBIN:
0032DD  1                       .IFDEF  DUODYNE
0032DD  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0032E1  1                       .ELSE
0032E1  1                       JSR     LAB_IGBY        ; increment and scan memory
0032E1  1                       .ENDIF
0032E1  1               
0032E1  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
0032E3  1  C9 02                CMP     #$02            ; compare with max+1
0032E5  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
0032E7  1               
0032E7  1               LAB_EXCH:
0032E7  1  4C E5 2D             JMP     LAB_28F6        ; evaluate -ve flag and return
0032EA  1               
0032EA  1               ; ctrl-c check routine. includes limited "life" byte save for INGET routine
0032EA  1               ; now also the code that checks to see if an interrupt has occurred
0032EA  1               
0032EA  1               CTRLC:
0032EA  1  AD 00 06             LDA     ccflag          ; get [CTRL-C] check flag
0032ED  1  D0 18                BNE     LAB_FBA2        ; exit if inhibited
0032EF  1               
0032EF  1  20 76 3C             JSR     V_INPT          ; scan input device
0032F2  1  90 0B                BCC     LAB_FBA0        ; exit if buffer empty
0032F4  1               
0032F4  1  8D 01 06             STA     ccbyte          ; save received byte
0032F7  1  A2 20                LDX     #$20            ; "life" timer for bytes
0032F9  1  8E 02 06             STX     ccnull          ; set countdown
0032FC  1  4C 9A 0F             JMP     LAB_1636        ; return to BASIC
0032FF  1               
0032FF  1               LAB_FBA0:
0032FF  1  AE 02 06             LDX     ccnull          ; get countdown byte
003302  1  F0 03                BEQ     LAB_FBA2        ; exit if finished
003304  1               
003304  1  CE 02 06             DEC     ccnull          ; else decrement countdown
003307  1               LAB_FBA2:
003307  1  A2 E5                LDX     #NmiBase        ; set pointer to NMI values
003309  1  20 12 33             JSR     LAB_CKIN        ; go check interrupt
00330C  1  A2 E8                LDX     #IrqBase        ; set pointer to IRQ values
00330E  1  20 12 33             JSR     LAB_CKIN        ; go check interrupt
003311  1               LAB_CRTS:
003311  1  60                   RTS
003312  1               
003312  1               ; check whichever interrupt is indexed by X
003312  1               
003312  1               LAB_CKIN:
003312  1  B5 00                LDA     PLUS_0,X        ; get interrupt flag byte
003314  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
003316  1               
003316  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
003316  1               ; automatically enable the interrupt when we exit
003316  1               
003316  1  0A                   ASL     A               ; move happened bit to setup bit
003317  1  29 40                AND     #$40            ; mask happened bits
003319  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
00331B  1               
00331B  1  95 00                STA     PLUS_0,X        ; save interrupt flag byte
00331D  1               
00331D  1  8A                   TXA                     ; copy index ..
00331E  1  A8                   TAY                     ; .. to Y
00331F  1               
00331F  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
003320  1  68                   PLA                     ; dump return address high byte
003321  1               
003321  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
003323  1  20 AE 09             JSR     LAB_1212        ; check room on stack for A bytes
003326  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
003328  1  48                   PHA                     ; push on stack
003329  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
00332B  1  48                   PHA                     ; push on stack
00332C  1  A5 88                LDA     Clineh          ; get current line high byte
00332E  1  48                   PHA                     ; push on stack
00332F  1  A5 87                LDA     Clinel          ; get current line low byte
003331  1  48                   PHA                     ; push on stack
003332  1  A9 8D                LDA     #TK_GOSUB       ; token for GOSUB
003334  1  48                   PHA                     ; push on stack
003335  1                       .IFDEF  DUODYNE
003335  1  DA                   PHX
003336  1  BB                   TYX
003337  1  B5 01                LDA     PLUS_1,X        ; get interrupt code pointer low byte
003339  1  FA                   PLX
00333A  1                       .ELSE
00333A  1                       LDA     PLUS_1,Y        ; get interrupt code pointer low byte
00333A  1                       .ENDIF
00333A  1  85 C3                STA     Bpntrl          ; save as BASIC execute pointer low byte
00333C  1                       .IFDEF  DUODYNE
00333C  1  DA                   PHX
00333D  1  BB                   TYX
00333E  1  B5 02                LDA     PLUS_2,X        ; get interrupt code pointer low byte
003340  1  FA                   PLX
003341  1                       .ELSE
003341  1                       LDA     PLUS_2,Y        ; get interrupt code pointer low byte
003341  1                       .ENDIF
003341  1  85 C4                STA     Bpntrh          ; save as BASIC execute pointer high byte
003343  1               
003343  1  4C 34 0F             JMP     LAB_15C2        ; go do interpreter inner loop
003346  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
003346  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
003346  1               ; executed at the end of the subroutine
003346  1               
003346  1               ; get byte from input device, no waiting
003346  1               ; returns with carry set if byte in A
003346  1               
003346  1               INGET:
003346  1  20 76 3C             JSR     V_INPT          ; call scan input device
003349  1  B0 09                BCS     LAB_FB95        ; if byte go reset timer
00334B  1               
00334B  1  AD 02 06             LDA     ccnull          ; get countdown
00334E  1  F0 09                BEQ     LAB_FB96        ; exit if empty
003350  1               
003350  1  AD 01 06             LDA     ccbyte          ; get last received byte
003353  1  38                   SEC                     ; flag we got a byte
003354  1               LAB_FB95:
003354  1  A2 00                LDX     #$00            ; clear X
003356  1  8E 02 06             STX     ccnull          ; clear timer because we got a byte
003359  1               LAB_FB96:
003359  1  60                   RTS
00335A  1               
00335A  1               ; these routines only enable the interrupts if the set-up flag is set
00335A  1               ; if not they have no effect
00335A  1               
00335A  1               ; perform IRQ {ON|OFF|CLEAR}
00335A  1               
00335A  1               LAB_IRQ:
00335A  1  A2 E8                LDX     #IrqBase        ; set pointer to IRQ values
00335C  1  2C                   .BYTE   $2C             ; make next line BIT abs.
00335D  1               
00335D  1               ; perform NMI {ON|OFF|CLEAR}
00335D  1               
00335D  1               LAB_NMI:
00335D  1  A2 E5                LDX     #NmiBase        ; set pointer to NMI values
00335F  1  C9 93                CMP     #TK_ON          ; compare with token for ON
003361  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
003363  1               
003363  1  C9 B6                CMP     #TK_OFF         ; compare with token for OFF
003365  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
003367  1               
003367  1  49 A2                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
003369  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
00336B  1               
00336B  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
00336E  1               
00336E  1               LAB_IOFF:
00336E  1  A9 7F                LDA     #$7F            ; clear A
003370  1  35 00                AND     PLUS_0,X        ; AND with interrupt setup flag
003372  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
003374  1               
003374  1               LAB_INON:
003374  1  B5 00                LDA     PLUS_0,X        ; get interrupt setup flag
003376  1  0A                   ASL     A               ; Shift bit to enabled flag
003377  1  15 00                ORA     PLUS_0,X        ; OR with flag byte
003379  1               LAB_INEX:
003379  1  95 00                STA     PLUS_0,X        ; save interrupt flag byte
00337B  1                       .IFDEF  DUODYNE
00337B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00337F  1                       .ELSE
00337F  1                       JSR     LAB_IGBY        ; increment and scan memory
00337F  1                       .ENDIF
00337F  1  60                   RTS
003380  1               
003380  1               ; these routines set up the pointers and flags for the interrupt routines
003380  1               ; note that the interrupts are also enabled by these commands
003380  1               
003380  1               ; perform ON IRQ
003380  1               
003380  1               LAB_SIRQ:
003380  1  58                   CLI                     ; enable interrupts
003381  1  A2 E8                LDX     #IrqBase        ; set pointer to IRQ values
003383  1  2C                   .BYTE   $2C             ; make next line BIT abs.
003384  1               
003384  1               ; perform ON NMI
003384  1               
003384  1               LAB_SNMI:
003384  1  A2 E5                LDX     #NmiBase        ; set pointer to NMI values
003386  1               
003386  1  86 78                STX     TempB           ; save interrupt pointer
003388  1                       .IFDEF  DUODYNE
003388  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00338C  1                       .ELSE
00338C  1                       JSR     LAB_IGBY        ; increment and scan memory
00338C  1                       .ENDIF
00338C  1               
00338C  1  20 EB 11             JSR     LAB_GFPN        ; get fixed-point number into temp integer
00338F  1  A5 79                LDA     Smeml           ; get start of mem low byte
003391  1  A6 7A                LDX     Smemh           ; get start of mem high byte
003393  1  20 05 0D             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
003396  1  B0 03                BCS     LAB_LFND        ; if carry set go set-up interrupt
003398  1               
003398  1  4C 00 11             JMP     LAB_16F7        ; else go do "Undefined statement" error and warm start
00339B  1               
00339B  1               LAB_LFND:
00339B  1  A6 78                LDX     TempB           ; get interrupt pointer
00339D  1  A5 AA                LDA     Baslnl          ; get pointer low byte
00339F  1  E9 01                SBC     #$01            ; -1 (carry already set for subtract)
0033A1  1  95 01                STA     PLUS_1,X        ; save as interrupt pointer low byte
0033A3  1  A5 AB                LDA     Baslnh          ; get pointer high byte
0033A5  1  E9 00                SBC     #$00            ; subtract carry
0033A7  1  95 02                STA     PLUS_2,X        ; save as interrupt pointer high byte
0033A9  1               
0033A9  1  A9 C0                LDA     #$C0            ; set interrupt enabled/setup bits
0033AB  1  95 00                STA     PLUS_0,X        ; set interrupt flags
0033AD  1               LAB_IRTS:
0033AD  1  60                   RTS
0033AE  1               
0033AE  1               ; return from IRQ service, restores the enabled flag.
0033AE  1               
0033AE  1               ; perform RETIRQ
0033AE  1               
0033AE  1               LAB_RETIRQ:
0033AE  1  D0 FD                BNE     LAB_IRTS        ; exit if following token (to allow syntax error)
0033B0  1               
0033B0  1  A5 E8                LDA     IrqBase         ; get interrupt flags
0033B2  1  0A                   ASL     A               ; copy setup to enabled (b7)
0033B3  1  05 E8                ORA     IrqBase         ; OR in setup flag
0033B5  1  85 E8                STA     IrqBase         ; save enabled flag
0033B7  1  4C 07 11             JMP     LAB_16E8        ; go do rest of RETURN
0033BA  1               
0033BA  1               ; return from NMI service, restores the enabled flag.
0033BA  1               
0033BA  1               ; perform RETNMI
0033BA  1               
0033BA  1               LAB_RETNMI:
0033BA  1  D0 F1                BNE     LAB_IRTS        ; exit if following token (to allow syntax error)
0033BC  1               
0033BC  1  A5 E5                LDA     NmiBase         ; get set-up flag
0033BE  1  0A                   ASL     A               ; copy setup to enabled (b7)
0033BF  1  05 E5                ORA     NmiBase         ; OR in setup flag
0033C1  1  85 E5                STA     NmiBase         ; save enabled flag
0033C3  1  4C 07 11             JMP     LAB_16E8        ; go do rest of RETURN
0033C6  1               
0033C6  1               ; MAX() MIN() pre process
0033C6  1               
0033C6  1               LAB_MMPP:
0033C6  1  20 B7 16             JSR     LAB_EVEZ        ; process expression
0033C9  1  4C 9E 16             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
0033CC  1               
0033CC  1               ; perform MAX()
0033CC  1               
0033CC  1               LAB_MAX:
0033CC  1  20 FC 33             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
0033CF  1               ; pull FAC2 and compare with FAC1
0033CF  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
0033D1  1               
0033D1  1  A5 B4                LDA     FAC2_1          ; get FAC2 mantissa1
0033D3  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
0033D5  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
0033D7  1  20 1D 28             JSR     LAB_279B        ; copy FAC2 to FAC1
0033DA  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
0033DC  1               
0033DC  1               ; perform MIN()
0033DC  1               
0033DC  1               LAB_MIN:
0033DC  1  20 FC 33             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
0033DF  1               ; pull FAC2 and compare with FAC1
0033DF  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
0033E1  1               
0033E1  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
0033E3  1               
0033E3  1  A5 B4                LDA     FAC2_1          ; get FAC2 mantissa1
0033E5  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
0033E7  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
0033E9  1  20 1D 28             JSR     LAB_279B        ; copy FAC2 to FAC1
0033EC  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
0033EE  1               
0033EE  1               ; exit routine. don't bother returning to the loop code
0033EE  1               ; check for correct exit, else so syntax error
0033EE  1               
0033EE  1               LAB_MMEC:
0033EE  1  C9 29                CMP     #')'            ; is it end of function?
0033F0  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
0033F2  1               
0033F2  1  68                   PLA                     ; dump return address low byte
0033F3  1  68                   PLA                     ; dump return address high byte
0033F4  1                       .IFDEF  DUODYNE
0033F4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0033F8  1                       .ELSE
0033F8  1                       JSR     LAB_IGBY        ; increment and scan memory
0033F8  1                       .ENDIF
0033F8  1               
0033F8  1  60                   RTS                     ; update BASIC execute pointer (to chr past ")")
0033F9  1               
0033F9  1               LAB_MMSE:
0033F9  1  4C D5 17             JMP     LAB_SNER        ; do syntax error then warm start
0033FC  1               
0033FC  1               ; check for next, evaluate and return or exit
0033FC  1               ; this is the routine that does most of the work
0033FC  1               
0033FC  1               LAB_PHFA:
0033FC  1                       .IFDEF  DUODYNE
0033FC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003400  1                       .ELSE
003400  1                       JSR     LAB_GBYT        ; scan memory
003400  1                       .ENDIF
003400  1               
003400  1  C9 2C                CMP     #','            ; is there more ?
003402  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
003404  1               
003404  1               ; push FAC1
003404  1  20 29 2C             JSR     LAB_27BA        ; round FAC1
003407  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign
003409  1  09 7F                ORA     #$7F            ; set all non sign bits
00340B  1  25 AD                AND     FAC1_1          ; AND FAC1 mantissa1 (AND in sign bit)
00340D  1  48                   PHA                     ; push on stack
00340E  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
003410  1  48                   PHA                     ; push on stack
003411  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
003413  1  48                   PHA                     ; push on stack
003414  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
003416  1  48                   PHA                     ; push on stack
003417  1               
003417  1                       .IFDEF  DUODYNE
003417  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00341B  1                       .ELSE
00341B  1                       JSR     LAB_IGBY        ; increment and scan memory
00341B  1                       .ENDIF
00341B  1               
00341B  1  20 9B 16             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00341E  1               ; else do type mismatch
00341E  1               
00341E  1               ; pop FAC2 (MAX/MIN expression so far)
00341E  1  68                   PLA                     ; pop exponent
00341F  1  85 B3                STA     FAC2_e          ; save FAC2 exponent
003421  1  68                   PLA                     ; pop mantissa3
003422  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
003424  1  68                   PLA                     ; pop mantissa1
003425  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
003427  1  68                   PLA                     ; pop sign/mantissa1
003428  1  85 B4                STA     FAC2_1          ; save FAC2 sign/mantissa1
00342A  1  85 B7                STA     FAC2_s          ; save FAC2 sign
00342C  1               
00342C  1               ; compare FAC1 with (packed) FAC2
00342C  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
00342E  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
003430  1  4C 67 2C             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
003433  1               ; returns A=$00 if FAC1 = (AY)
003433  1               ; returns A=$01 if FAC1 > (AY)
003433  1               ; returns A=$FF if FAC1 < (AY)
003433  1               
003433  1               ; perform WIDTH
003433  1               
003433  1               LAB_WDTH:
003433  1  C9 2C                CMP     #','            ; is next byte ","
003435  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
003437  1               
003437  1  20 39 26             JSR     LAB_GTBY        ; get byte parameter
00343A  1  8A                   TXA                     ; copy width to A
00343B  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
00343D  1               
00343D  1  E0 10                CPX     #$10            ; else make min width = 16d
00343F  1  90 46                BCC     TabErr          ; if less do function call error and exit
003441  1               
003441  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
003441  1               ; tab size greater than the line length.
003441  1               
003441  1  E4 64                CPX     TabSiz          ; compare with tab size
003443  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
003445  1               
003445  1  86 64                STX     TabSiz          ; else make tab size = terminal width
003447  1               LAB_NSTT:
003447  1  86 0F                STX     TWidth          ; set the terminal width
003449  1                       .IFDEF  DUODYNE
003449  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00344D  1                       .ELSE
00344D  1                       JSR     LAB_GBYT        ; scan memory
00344D  1                       .ENDIF
00344D  1               
00344D  1  F0 1A                BEQ     WExit           ; exit if no following
00344F  1               
00344F  1  C9 2C                CMP     #','            ; else is it ","
003451  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
003453  1               
003453  1               LAB_TBSZ:
003453  1  20 35 26             JSR     LAB_SGBY        ; scan and get byte parameter
003456  1  8A                   TXA                     ; copy TAB size
003457  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
003459  1               
003459  1  E0 01                CPX     #$01            ; compare with min-1
00345B  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
00345D  1               
00345D  1  A5 0F                LDA     TWidth          ; set flags for width
00345F  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
003461  1               
003461  1  E4 0F                CPX     TWidth          ; compare TAB with width
003463  1  F0 02                BEQ     LAB_SVTB        ; ok if =
003465  1               
003465  1  B0 20                BCS     TabErr          ; branch if too big
003467  1               
003467  1               LAB_SVTB:
003467  1  86 64                STX     TabSiz          ; save TAB size
003469  1               
003469  1               ; calculate tab column limit from TAB size. The Iclim is set to the last tab
003469  1               ; position on a line that still has at least one whole tab width between it
003469  1               ; and the end of the line.
003469  1               
003469  1               WExit:
003469  1  A5 0F                LDA     TWidth          ; get width
00346B  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
00346D  1               
00346D  1  C5 64                CMP     TabSiz          ; compare with tab size
00346F  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
003471  1               
003471  1  85 64                STA     TabSiz          ; else make tab size = terminal width
003473  1               LAB_SULP:
003473  1  38                   SEC                     ; set carry for subtract
003474  1               LAB_WDLP:
003474  1  E5 64                SBC     TabSiz          ; subtract tab size
003476  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
003478  1               
003478  1  65 64                ADC     TabSiz          ; add tab size back
00347A  1  18                   CLC                     ; clear carry for add
00347B  1  65 64                ADC     TabSiz          ; add tab size back again
00347D  1  85 10                STA     Iclim           ; save for now
00347F  1  A5 0F                LDA     TWidth          ; get width back
003481  1  38                   SEC                     ; set carry for subtract
003482  1  E5 10                SBC     Iclim           ; subtract remainder
003484  1  85 10                STA     Iclim           ; save tab column limit
003486  1               LAB_NOSQ:
003486  1  60                   RTS
003487  1               
003487  1               TabErr:
003487  1  4C 30 1C             JMP     LAB_FCER        ; do function call error then warm start
00348A  1               
00348A  1               ; perform SQR()
00348A  1               
00348A  1               LAB_SQR:
00348A  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign
00348C  1  30 F9                BMI     TabErr          ; if -ve do function call error
00348E  1               
00348E  1  A5 AC                LDA     FAC1_e          ; get exponent
003490  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
003492  1               
003492  1               ; else do root
003492  1  20 1A 2C             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
003495  1  A9 00                LDA     #$00            ; clear A
003497  1               
003497  1  85 77                STA     FACt_3          ; clear remainder
003499  1  85 76                STA     FACt_2          ; ..
00349B  1  85 75                STA     FACt_1          ; ..
00349D  1  85 78                STA     TempB           ; ..
00349F  1               
00349F  1  85 AF                STA     FAC1_3          ; clear root
0034A1  1  85 AE                STA     FAC1_2          ; ..
0034A3  1  85 AD                STA     FAC1_1          ; ..
0034A5  1               
0034A5  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
0034A7  1  A5 B3                LDA     FAC2_e          ; get exponent
0034A9  1  4A                   LSR     A               ; check odd/even
0034AA  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
0034AC  1               
0034AC  1               LAB_SQE1:
0034AC  1  06 B6                ASL     FAC2_3          ; shift highest bit of number ..
0034AE  1  26 B5                ROL     FAC2_2          ; ..
0034B0  1  26 B4                ROL     FAC2_1          ; ..
0034B2  1  26 77                ROL     FACt_3          ; .. into remainder
0034B4  1  26 76                ROL     FACt_2          ; ..
0034B6  1  26 75                ROL     FACt_1          ; ..
0034B8  1  26 78                ROL     TempB           ; .. never overflows
0034BA  1               LAB_SQE2:
0034BA  1  06 B6                ASL     FAC2_3          ; shift highest bit of number ..
0034BC  1  26 B5                ROL     FAC2_2          ; ..
0034BE  1  26 B4                ROL     FAC2_1          ; ..
0034C0  1  26 77                ROL     FACt_3          ; .. into remainder
0034C2  1  26 76                ROL     FACt_2          ; ..
0034C4  1  26 75                ROL     FACt_1          ; ..
0034C6  1  26 78                ROL     TempB           ; .. never overflows
0034C8  1               
0034C8  1  06 AF                ASL     FAC1_3          ; root = root * 2
0034CA  1  26 AE                ROL     FAC1_2          ; ..
0034CC  1  26 AD                ROL     FAC1_1          ; .. never overflows
0034CE  1               
0034CE  1  A5 AF                LDA     FAC1_3          ; get root low byte
0034D0  1  2A                   ROL     A               ; *2
0034D1  1  85 5B                STA     Temp3           ; save partial low byte
0034D3  1  A5 AE                LDA     FAC1_2          ; get root low mid byte
0034D5  1  2A                   ROL     A               ; *2
0034D6  1  85 5C                STA     Temp3+1         ; save partial low mid byte
0034D8  1  A5 AD                LDA     FAC1_1          ; get root high mid byte
0034DA  1  2A                   ROL     A               ; *2
0034DB  1  85 5D                STA     Temp3+2         ; save partial high mid byte
0034DD  1  A9 00                LDA     #$00            ; get root high byte (always $00)
0034DF  1  2A                   ROL     A               ; *2
0034E0  1  85 5E                STA     Temp3+3         ; save partial high byte
0034E2  1               
0034E2  1               ; carry clear for subtract +1
0034E2  1  A5 77                LDA     FACt_3          ; get remainder low byte
0034E4  1  E5 5B                SBC     Temp3           ; subtract partial low byte
0034E6  1  85 5B                STA     Temp3           ; save partial low byte
0034E8  1               
0034E8  1  A5 76                LDA     FACt_2          ; get remainder low mid byte
0034EA  1  E5 5C                SBC     Temp3+1         ; subtract partial low mid byte
0034EC  1  85 5C                STA     Temp3+1         ; save partial low mid byte
0034EE  1               
0034EE  1  A5 75                LDA     FACt_1          ; get remainder high mid byte
0034F0  1  E5 5D                SBC     Temp3+2         ; subtract partial high mid byte
0034F2  1  A8                   TAY                     ; copy partial high mid byte
0034F3  1               
0034F3  1  A5 78                LDA     TempB           ; get remainder high byte
0034F5  1  E5 5E                SBC     Temp3+3         ; subtract partial high byte
0034F7  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
0034F9  1               
0034F9  1  85 78                STA     TempB           ; save remainder high byte
0034FB  1               
0034FB  1  84 75                STY     FACt_1          ; save remainder high mid byte
0034FD  1               
0034FD  1  A5 5C                LDA     Temp3+1         ; get remainder low mid byte
0034FF  1  85 76                STA     FACt_2          ; save remainder low mid byte
003501  1               
003501  1  A5 5B                LDA     Temp3           ; get partial low byte
003503  1  85 77                STA     FACt_3          ; save remainder low byte
003505  1               
003505  1  E6 AF                INC     FAC1_3          ; increment root low byte (never any rollover)
003507  1               LAB_SQNS:
003507  1  CA                   DEX                     ; decrement bit pair count
003508  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
00350A  1               
00350A  1  38                   SEC                     ; set carry for subtract
00350B  1  A5 B3                LDA     FAC2_e          ; get exponent
00350D  1  E9 80                SBC     #$80            ; normalise
00350F  1  6A                   ROR     A               ; /2 and re-bias to $80
003510  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
003512  1  85 AC                STA     FAC1_e          ; save it
003514  1  4C 94 28             JMP     LAB_24D5        ; normalise FAC1 and return
003517  1               
003517  1               ; perform VARPTR()
003517  1               
003517  1               LAB_VARPTR:
003517  1                       .IFDEF  DUODYNE
003517  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00351B  1                       .ELSE
00351B  1                       JSR     LAB_IGBY        ; increment and scan memory
00351B  1                       .ENDIF
00351B  1               
00351B  1  20 AC 19             JSR     LAB_GVAR        ; get var address
00351E  1  20 C0 17             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003521  1  A4 95                LDY     Cvaral          ; get var address low byte
003523  1  A5 96                LDA     Cvarah          ; get var address high byte
003525  1  4C 8E 1E             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003528  1               
003528  1               ; perform PI
003528  1               
003528  1               LAB_PI:
003528  1  A9 FF                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
00352A  1  A0 35                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
00352C  1  20 2D 2B             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
00352F  1  C6 AC                DEC     FAC1_e          ; make result = PI
003531  1  60                   RTS
003532  1               
003532  1               ; perform TWOPI
003532  1               
003532  1               LAB_TWOPI:
003532  1  A9 FF                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
003534  1  A0 35                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
003536  1  4C 2D 2B             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1 and return
003539  1               
003539  1               
003539  1               ; The rest are tables messages and code for RAM
003539  1               
003539  1               ; the rest of the code is tables and BASIC start-up code
003539  1               
003539  1               PG2_TABS:
003539  1  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
00353A  1  00                   .BYTE   $00             ; ctrl-c byte		-	GET needs this
00353B  1  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
00353C  1  EA 32                .WORD   CTRLC           ; ctrl c check vector
00353E  1               ;	.word	xxxx			; non halting key input	-	monitor to set this
00353E  1               ;	.word	xxxx			; output vector		-	monitor to set this
00353E  1               ;	.word	xxxx			; load vector		-	monitor to set this
00353E  1               ;	.word	xxxx			; save vector		-	monitor to set this
00353E  1               PG2_TABE:
00353E  1               
00353E  1               ; character get subroutine for zero page
00353E  1               
00353E  1               ; For a 1.8432MHz 6502 including the JSR and RTS
00353E  1               ; fastest (>=":")	=  29 cycles =  15.7uS
00353E  1               ; slowest (<":")	=  40 cycles =  21.7uS
00353E  1               ; space skip	= +21 cycles = +11.4uS
00353E  1               ; inc across page	=  +4 cycles =  +2.2uS
00353E  1               
00353E  1               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
00353E  1               ; block is copied to it's destination, any non zero page address will do at assembly
00353E  1               ; time, to assemble a three byte instruction.
00353E  1               
00353E  1               ; page 0 initialisation table from $BC
00353E  1               ; increment and scan memory
00353E  1               
00353E  1               LAB_2CEE:
00353E  1  E6 C3                INC     Bpntrl          ; increment BASIC execute pointer low byte
003540  1  D0 02                BNE     LAB_2CF4        ; branch if no carry
003542  1               ; else
003542  1  E6 C4                INC     Bpntrh          ; increment BASIC execute pointer high byte
003544  1               
003544  1               ; page 0 initialisation table from $C2
003544  1               ; scan memory
003544  1                       .IFDEF  DUODYNE
003544  1               LAB_2CF4:
003544  1  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
003548  1  C9 AD                CMP     #TK_ELSE        ; compare with the token for ELSE
00354A  1  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
00354C  1               
00354C  1  C9 3A                CMP     #':'            ; compare with ":"
00354E  1  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
003550  1               
003550  1  C9 20                CMP     #' '            ; compare with " "
003552  1  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
003554  1               
003554  1  38                   SEC                     ; set carry for SBC
003555  1  E9 30                SBC     #'0'            ; subtract "0"
003557  1  38                   SEC                     ; set carry for SBC
003558  1  E9 D0                SBC     #$D0            ; subtract -"0"
00355A  1               ; clear carry if byte = "0"-"9"
00355A  1               LAB_2D05:
00355A  1  6B                   RTL
00355B  1                       .ELSE
00355B  1               LAB_2CF4:
00355B  1                       LDA     $FFFF           ; get byte to scan (addr set by call routine)
00355B  1                       CMP     #TK_ELSE        ; compare with the token for ELSE
00355B  1                       BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
00355B  1               
00355B  1                       CMP     #':'            ; compare with ":"
00355B  1                       BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
00355B  1               
00355B  1                       CMP     #' '            ; compare with " "
00355B  1                       BEQ     LAB_2CEE        ; if " " go do next
00355B  1               
00355B  1                       SEC                     ; set carry for SBC
00355B  1                       SBC     #'0'            ; subtract "0"
00355B  1                       SEC                     ; set carry for SBC
00355B  1                       SBC     #$D0            ; subtract -"0"
00355B  1               ; clear carry if byte = "0"-"9"
00355B  1               LAB_2D05:
00355B  1                       RTS
00355B  1                       .ENDIF
00355B  1               
00355B  1               ; page zero initialisation table $00-$12 inclusive
00355B  1               
00355B  1               StrTab:
00355B  1  4C                   .BYTE   $4C             ; JMP opcode
00355C  1  0C 08                .WORD   LAB_COLD        ; initial warm start vector (cold start)
00355E  1               
00355E  1  00                   .BYTE   $00             ; these bytes are not used by BASIC
00355F  1  00 00                .WORD   $0000           ;
003561  1  00 00                .WORD   $0000           ;
003563  1  00 00                .WORD   $0000           ;
003565  1               
003565  1  4C                   .BYTE   $4C             ; JMP opcode
003566  1  30 1C                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
003568  1  00                   .BYTE   $00             ; default NULL count
003569  1  00                   .BYTE   $00             ; clear terminal position
00356A  1  00                   .BYTE   $00             ; default terminal width byte
00356B  1  F2                   .BYTE   $F2             ; default limit for TAB = 14
00356C  1  00 41                .WORD   Ram_base        ; start of user RAM
00356E  1               EndTab:
00356E  1               
00356E  1               LAB_MSZM:
00356E  1  0D 0A 4D 65          .BYTE   $0D,$0A,"Memory size ",$00
003572  1  6D 6F 72 79  
003576  1  20 73 69 7A  
00357D  1               
00357D  1               LAB_SMSG:
00357D  1  20 42 79 74          .BYTE   " Bytes free",$0D,$0A,$0A
003581  1  65 73 20 66  
003585  1  72 65 65 0D  
00358B  1  45 6E 68 61          .BYTE   "Enhanced BASIC 2.22",$0A,$00
00358F  1  6E 63 65 64  
003593  1  20 42 41 53  
0035A0  1               
0035A0  1               ; numeric constants and series
0035A0  1               
0035A0  1               ; constants and series for LOG(n)
0035A0  1               LAB_25A0:
0035A0  1  02                   .BYTE   $02             ; counter
0035A1  1  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
0035A5  1  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
0035A9  1               ;##	.byte	$80,$76,$22,$F1	; 0.96147
0035A9  1  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
0035AD  1               ;##	.byte	$82,$38,$AA,$45	; 2.88539
0035AD  1               
0035AD  1               LAB_25AD:
0035AD  1  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
0035B1  1               LAB_25B1:
0035B1  1  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
0035B5  1               LAB_25B5:
0035B5  1  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
0035B9  1               LAB_25B9:
0035B9  1  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
0035BD  1               
0035BD  1               ; numeric PRINT constants
0035BD  1               LAB_2947:
0035BD  1  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
0035C1  1               LAB_294B:
0035C1  1  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
0035C5  1               LAB_294F:
0035C5  1  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
0035C9  1               
0035C9  1               ; EXP(n) constants and series
0035C9  1               LAB_2AFA:
0035C9  1  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
0035CD  1               LAB_2AFE:
0035CD  1  06                   .BYTE   $06             ; counter
0035CE  1  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
0035D2  1  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
0035D6  1  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
0035DA  1  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
0035DE  1  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
0035E2  1  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
0035E6  1  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
0035EA  1               
0035EA  1               ;##	.byte	$07			; counter
0035EA  1               ;##	.byte	$74,$94,$2E,$40	; -1/7! (-1/5040)
0035EA  1               ;##	.byte	$77,$2E,$4F,$70	;  1/6! ( 1/720)
0035EA  1               ;##	.byte	$7A,$88,$02,$6E	; -1/5! (-1/120)
0035EA  1               ;##	.byte	$7C,$2A,$A0,$E6	;  1/4! ( 1/24)
0035EA  1               ;##	.byte	$7E,$AA,$AA,$50	; -1/3! (-1/6)
0035EA  1               ;##	.byte	$7F,$7F,$FF,$FF	;  1/2! ( 1/2)
0035EA  1               ;##	.byte	$81,$80,$00,$00	; -1/1! (-1/1)
0035EA  1               ;##	.byte	$81,$00,$00,$00	;  1/0! ( 1/1)
0035EA  1               
0035EA  1               ; trigonometric constants and series
0035EA  1               LAB_2C78:
0035EA  1  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
0035EE  1               LAB_2C84:
0035EE  1  04                   .BYTE   $04             ; counter
0035EF  1  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
0035F3  1               ;##	.byte	$86,$1E,$D7,$BA	; 39.7109
0035F3  1  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
0035F7  1               ;##	.byte	$87,$99,$26,$64	;-76.575
0035F7  1  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
0035FB  1  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
0035FF  1               ;##	.byte	$86,$A5,$5D,$E0	;-41.3417
0035FF  1               LAB_2C7C:
0035FF  1  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
003603  1               ;##	.byte	$83,$49,$0F,$DA	; 6.28319 (2*pi) as floating #
003603  1               
003603  1               LAB_2CC9:
003603  1  08                   .BYTE   $08             ; counter
003604  1  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
003608  1  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
00360C  1  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
003610  1  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
003614  1  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
003618  1  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
00361C  1  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
003620  1  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
003624  1               
003624  1               ;##	.byte	$08			; counter
003624  1               ;##	.byte	$78,$3B,$D7,$4A	; 1/17
003624  1               ;##	.byte	$7B,$84,$6E,$02	;-1/15
003624  1               ;##	.byte	$7C,$2F,$C1,$FE	; 1/13
003624  1               ;##	.byte	$7D,$9A,$31,$74	;-1/11
003624  1               ;##	.byte	$7D,$5A,$3D,$84	; 1/9
003624  1               ;##	.byte	$7E,$91,$7F,$C8	;-1/7
003624  1               ;##	.byte	$7E,$4C,$BB,$E4	; 1/5
003624  1               ;##	.byte	$7F,$AA,$AA,$6C	;-1/3
003624  1               
003624  1               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
003624  1               LAB_259C:
003624  1  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
003628  1               LAB_2AFD:
003628  1  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
00362C  1               
00362C  1               ; misc constants
00362C  1               LAB_1DF7:
00362C  1  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
00362D  1               LAB_2A96:
00362D  1  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
003631  1               LAB_2C80:
003631  1  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
003635  1               LAB_26B5:
003635  1  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
003639  1               
003639  1               ; This table is used in converting numbers to ASCII.
003639  1               
003639  1               LAB_2A9A:
003639  1               LAB_2A9B        = LAB_2A9A+1
003639  1               LAB_2A9C        = LAB_2A9B+1
003639  1  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
00363C  1  00 27 10             .BYTE   $00,$27,$10     ; 10000
00363F  1  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
003642  1  00 00 64             .BYTE   $00,$00,$64     ; 100
003645  1  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
003648  1  00 00 01             .BYTE   $00,$00,$01     ; 1
00364B  1               
00364B  1               LAB_CTBL:
00364B  1  9D 0F                .WORD   LAB_END-1       ; END
00364D  1  CD 0E                .WORD   LAB_FOR-1       ; FOR
00364F  1  18 16                .WORD   LAB_NEXT-1      ; NEXT
003651  1  19 11                .WORD   LAB_DATA-1      ; DATA
003653  1  D9 14                .WORD   LAB_INPUT-1     ; INPUT
003655  1  5F 19                .WORD   LAB_DIM-1       ; DIM
003657  1  F9 14                .WORD   LAB_READ-1      ; READ
003659  1  4C 12                .WORD   LAB_LET-1       ; LET
00365B  1  1C 12                .WORD   LAB_DEC-1       ; DEC			new command
00365D  1  6F 10                .WORD   LAB_GOTO-1      ; GOTO
00365F  1  2C 10                .WORD   LAB_RUN-1       ; RUN
003661  1  47 11                .WORD   LAB_IF-1        ; IF
003663  1  C4 0F                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
003665  1  51 10                .WORD   LAB_GOSUB-1     ; GOSUB
003667  1  AD 33                .WORD   LAB_RETIRQ-1    ; RETIRQ		new command
003669  1  B9 33                .WORD   LAB_RETNMI-1    ; RETNMI		new command
00366B  1  04 11                .WORD   LAB_RETURN-1    ; RETURN
00366D  1  B2 11                .WORD   LAB_REM-1       ; REM
00366F  1  9B 0F                .WORD   LAB_STOP-1      ; STOP
003671  1  BB 11                .WORD   LAB_ON-1        ; ON			modified command
003673  1  02 10                .WORD   LAB_NULL-1      ; NULL		modified command
003675  1  1F 12                .WORD   LAB_INC-1       ; INC			new command
003677  1  CD 27                .WORD   LAB_WAIT-1      ; WAIT
003679  1  D8 3D                .WORD   V_LOAD-1        ; LOAD
00367B  1  BC 3C                .WORD   V_SAVE-1        ; SAVE
00367D  1  AB 1E                .WORD   LAB_DEF-1       ; DEF
00367F  1  FE 26                .WORD   LAB_POKE-1      ; POKE
003681  1  1A 27                .WORD   LAB_DOKE-1      ; DOKE		new command
003683  1  B9 27                .WORD   LAB_CALL-1      ; CALL		new command
003685  1  36 10                .WORD   LAB_DO-1        ; DO			new command
003687  1  A1 10                .WORD   LAB_LOOP-1      ; LOOP		new command
003689  1  B6 13                .WORD   LAB_PRINT-1     ; PRINT
00368B  1  08 10                .WORD   LAB_CONT-1      ; CONT
00368D  1  0A 0E                .WORD   LAB_LIST-1      ; LIST
00368F  1  07 0E                .WORD   LAB_CLEAR-1     ; CLEAR
003691  1  93 0D                .WORD   LAB_NEW-1       ; NEW
003693  1  32 34                .WORD   LAB_WDTH-1      ; WIDTH		new command
003695  1  70 13                .WORD   LAB_GET-1       ; GET			new command
003697  1  41 27                .WORD   LAB_SWAP-1      ; SWAP		new command
003699  1  81 31                .WORD   LAB_BITSET-1    ; BITSET		new command
00369B  1  95 31                .WORD   LAB_BITCLR-1    ; BITCLR		new command
00369D  1  59 33                .WORD   LAB_IRQ-1       ; IRQ			new command
00369F  1  5C 33                .WORD   LAB_NMI-1       ; NMI			new command
0036A1  1  B9 3C                .WORD   LAB_KILL-1      ; KILL			new command
0036A3  1               
0036A3  1               ; function pre process routine table
0036A3  1               
0036A3  1               LAB_FTPL:
0036A3  1               LAB_FTPM        = LAB_FTPL+$01
0036A3  1  37 18                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0036A5  1  37 18                .WORD   LAB_PPFN-1      ; INT(n)		"
0036A7  1  37 18                .WORD   LAB_PPFN-1      ; ABS(n)		"
0036A9  1  B6 16                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0036AB  1  BC 17                .WORD   LAB_1BF7-1      ; FRE(x)		"
0036AD  1  BC 17                .WORD   LAB_1BF7-1      ; POS(x)		"
0036AF  1  37 18                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0036B1  1  37 18                .WORD   LAB_PPFN-1      ; RND(n)		"
0036B3  1  37 18                .WORD   LAB_PPFN-1      ; LOG(n)		"
0036B5  1  37 18                .WORD   LAB_PPFN-1      ; EXP(n)		"
0036B7  1  37 18                .WORD   LAB_PPFN-1      ; COS(n)		"
0036B9  1  37 18                .WORD   LAB_PPFN-1      ; SIN(n)		"
0036BB  1  37 18                .WORD   LAB_PPFN-1      ; TAN(n)		"
0036BD  1  37 18                .WORD   LAB_PPFN-1      ; ATN(n)		"
0036BF  1  37 18                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0036C1  1  37 18                .WORD   LAB_PPFN-1      ; DEEK(n)		"
0036C3  1  00 00                .WORD   $0000           ; SADD()	none
0036C5  1  31 18                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0036C7  1  37 18                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0036C9  1  31 18                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0036CB  1  31 18                .WORD   LAB_PPFS-1      ; ASC($)		"
0036CD  1  31 18                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0036CF  1  31 18                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0036D1  1  37 18                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0036D3  1  60 18                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0036D5  1  60 18                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0036D7  1  00 00                .WORD   $0000           ; BITTST()	none
0036D9  1  C5 33                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0036DB  1  C5 33                .WORD   LAB_MMPP-1      ; MIN()		"
0036DD  1  3D 18                .WORD   LAB_PPBI-1      ; PI		advance pointer
0036DF  1  3D 18                .WORD   LAB_PPBI-1      ; TWOPI		"
0036E1  1  00 00                .WORD   $0000           ; VARPTR()	none
0036E3  1  44 18                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0036E5  1  44 18                .WORD   LAB_LRMS-1      ; RIGHT$()		"
0036E7  1  44 18                .WORD   LAB_LRMS-1      ; MID$()		"
0036E9  1               
0036E9  1               ; action addresses for functions
0036E9  1               
0036E9  1               LAB_FTBL:
0036E9  1               LAB_FTBM        = LAB_FTBL+$01
0036E9  1  46 2C                .WORD   LAB_SGN-1       ; SGN()
0036EB  1  34 2D                .WORD   LAB_INT-1       ; INT()
0036ED  1  63 2C                .WORD   LAB_ABS-1       ; ABS()
0036EF  1  4C 31                .WORD   LAB_USR-1       ; USR()
0036F1  1  79 1E                .WORD   LAB_FRE-1       ; FRE()
0036F3  1  98 1E                .WORD   LAB_POS-1       ; POS()
0036F5  1  89 34                .WORD   LAB_SQR-1       ; SQR()
0036F7  1  9C 30                .WORD   LAB_RND-1       ; RND()		modified function
0036F9  1  5A 29                .WORD   LAB_LOG-1       ; LOG()
0036FB  1  EA 2F                .WORD   LAB_EXP-1       ; EXP()
0036FD  1  D0 30                .WORD   LAB_COS-1       ; COS()
0036FF  1  D7 30                .WORD   LAB_SIN-1       ; SIN()
003701  1  20 31                .WORD   LAB_TAN-1       ; TAN()
003703  1  52 31                .WORD   LAB_ATN-1       ; ATN()
003705  1  F3 26                .WORD   LAB_PEEK-1      ; PEEK()
003707  1  07 27                .WORD   LAB_DEEK-1      ; DEEK()		new function
003709  1  C3 25                .WORD   LAB_SADD-1      ; SADD()		new function
00370B  1  05 26                .WORD   LAB_LENS-1      ; LEN()
00370D  1  12 20                .WORD   LAB_STRS-1      ; STR$()
00370F  1  49 26                .WORD   LAB_VAL-1       ; VAL()
003711  1  10 26                .WORD   LAB_ASC-1       ; ASC()
003713  1  79 25                .WORD   LAB_UCASE-1     ; UCASE$()		new function
003715  1  2D 25                .WORD   LAB_LCASE-1     ; LCASE$()		new function
003717  1  31 24                .WORD   LAB_CHRS-1      ; CHR$()
003719  1  4E 32                .WORD   LAB_HEXS-1      ; HEX$()		new function
00371B  1  D6 31                .WORD   LAB_BINS-1      ; BIN$()		new function
00371D  1  AB 31                .WORD   LAB_BTST-1      ; BITTST()		new function
00371F  1  CB 33                .WORD   LAB_MAX-1       ; MAX()		new function
003721  1  DB 33                .WORD   LAB_MIN-1       ; MIN()		new function
003723  1  27 35                .WORD   LAB_PI-1        ; PI			new function
003725  1  31 35                .WORD   LAB_TWOPI-1     ; TWOPI		new function
003727  1  16 35                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
003729  1  57 24                .WORD   LAB_LEFT-1      ; LEFT$()
00372B  1  76 24                .WORD   LAB_RIGHT-1     ; RIGHT$()
00372D  1  CF 24                .WORD   LAB_MIDS-1      ; MID$()
00372F  1               
00372F  1               ; hierarchy and action addresses for operator
00372F  1               
00372F  1               LAB_OPPT:
00372F  1  79                   .BYTE   $79             ; +
003730  1  1A 28                .WORD   LAB_ADD-1
003732  1  79                   .BYTE   $79             ; -
003733  1  FF 27                .WORD   LAB_SUBTRACT-1
003735  1  7B                   .BYTE   $7B             ; *
003736  1  9B 29                .WORD   LAB_MULTIPLY-1
003738  1  7B                   .BYTE   $7B             ; /
003739  1  B3 2A                .WORD   LAB_DIVIDE-1
00373B  1  7F                   .BYTE   $7F             ; ^
00373C  1  A6 2F                .WORD   LAB_POWER-1
00373E  1  50                   .BYTE   $50             ; AND
00373F  1  AB 18                .WORD   LAB_AND-1
003741  1  46                   .BYTE   $46             ; EOR			new operator
003742  1  91 18                .WORD   LAB_EOR-1
003744  1  46                   .BYTE   $46             ; OR
003745  1  9E 18                .WORD   LAB_OR-1
003747  1  56                   .BYTE   $56             ; >>			new operator
003748  1  82 19                .WORD   LAB_RSHIFT-1
00374A  1  56                   .BYTE   $56             ; <<			new operator
00374B  1  6A 19                .WORD   LAB_LSHIFT-1
00374D  1  7D                   .BYTE   $7D             ; >
00374E  1  DF 2F                .WORD   LAB_GTHAN-1
003750  1  5A                   .BYTE   $5A             ; =
003751  1  E9 17                .WORD   LAB_EQUAL-1
003753  1  64                   .BYTE   $64             ; <
003754  1  CC 18                .WORD   LAB_LTHAN-1
003756  1               
003756  1               ; keywords start with ..
003756  1               ; this is the first character table and must be in alphabetic order
003756  1               
003756  1               TAB_1STC:
003756  1  2A                   .BYTE   "*"
003757  1  2B                   .BYTE   "+"
003758  1  2D                   .BYTE   "-"
003759  1  2F                   .BYTE   "/"
00375A  1  3C                   .BYTE   "<"
00375B  1  3D                   .BYTE   "="
00375C  1  3E                   .BYTE   ">"
00375D  1  3F                   .BYTE   "?"
00375E  1  41                   .BYTE   "A"
00375F  1  42                   .BYTE   "B"
003760  1  43                   .BYTE   "C"
003761  1  44                   .BYTE   "D"
003762  1  45                   .BYTE   "E"
003763  1  46                   .BYTE   "F"
003764  1  47                   .BYTE   "G"
003765  1  48                   .BYTE   "H"
003766  1  49                   .BYTE   "I"
003767  1  4B                   .BYTE   "K"
003768  1  4C                   .BYTE   "L"
003769  1  4D                   .BYTE   "M"
00376A  1  4E                   .BYTE   "N"
00376B  1  4F                   .BYTE   "O"
00376C  1  50                   .BYTE   "P"
00376D  1  52                   .BYTE   "R"
00376E  1  53                   .BYTE   "S"
00376F  1  54                   .BYTE   "T"
003770  1  55                   .BYTE   "U"
003771  1  56                   .BYTE   "V"
003772  1  57                   .BYTE   "W"
003773  1  5E                   .BYTE   "^"
003774  1  00                   .BYTE   $00             ; table terminator
003775  1               
003775  1               ; pointers to keyword tables
003775  1               
003775  1               TAB_CHRT:
003775  1  B1 37                .WORD   TAB_STAR        ; table for "*"
003777  1  B3 37                .WORD   TAB_PLUS        ; table for "+"
003779  1  B5 37                .WORD   TAB_MNUS        ; table for "-"
00377B  1  B7 37                .WORD   TAB_SLAS        ; table for "/"
00377D  1  B9 37                .WORD   TAB_LESS        ; table for "<"
00377F  1  BD 37                .WORD   TAB_EQUL        ; table for "="
003781  1  BF 37                .WORD   TAB_MORE        ; table for ">"
003783  1  C3 37                .WORD   TAB_QEST        ; table for "?"
003785  1  C5 37                .WORD   TAB_ASCA        ; table for "A"
003787  1  D5 37                .WORD   TAB_ASCB        ; table for "B"
003789  1  EE 37                .WORD   TAB_ASCC        ; table for "C"
00378B  1  05 38                .WORD   TAB_ASCD        ; table for "D"
00378D  1  1E 38                .WORD   TAB_ASCE        ; table for "E"
00378F  1  2D 38                .WORD   TAB_ASCF        ; table for "F"
003791  1  37 38                .WORD   TAB_ASCG        ; table for "G"
003793  1  44 38                .WORD   TAB_ASCH        ; table for "H"
003795  1  4A 38                .WORD   TAB_ASCI        ; table for "I"
003797  1  5C 38                .WORD   TAB_ASCK        ; table for "K"
003799  1  60 38                .WORD   TAB_ASCL        ; table for "L"
00379B  1  85 38                .WORD   TAB_ASCM        ; table for "M"
00379D  1  93 38                .WORD   TAB_ASCN        ; table for "N"
00379F  1  A5 38                .WORD   TAB_ASCO        ; table for "O"
0037A1  1  AD 38                .WORD   TAB_ASCP        ; table for "P"
0037A3  1  C2 38                .WORD   TAB_ASCR        ; table for "R"
0037A5  1  F1 38                .WORD   TAB_ASCS        ; table for "S"
0037A7  1  1C 39                .WORD   TAB_ASCT        ; table for "T"
0037A9  1  30 39                .WORD   TAB_ASCU        ; table for "U"
0037AB  1  41 39                .WORD   TAB_ASCV        ; table for "V"
0037AD  1  4D 39                .WORD   TAB_ASCW        ; table for "W"
0037AF  1  5C 39                .WORD   TAB_POWR        ; table for "^"
0037B1  1               
0037B1  1               ; tables for each start character, note if a longer keyword with the same start
0037B1  1               ; letters as a shorter one exists then it must come first, else the list is in
0037B1  1               ; alphabetical order as follows ..
0037B1  1               
0037B1  1               ; [keyword,token
0037B1  1               ; [keyword,token]]
0037B1  1               ; end marker (#$00)
0037B1  1               
0037B1  1               TAB_STAR:
0037B1  1  B9 00                .BYTE   TK_MUL,$00      ; *
0037B3  1               TAB_PLUS:
0037B3  1  B7 00                .BYTE   TK_PLUS,$00     ; +
0037B5  1               TAB_MNUS:
0037B5  1  B8 00                .BYTE   TK_MINUS,$00    ; -
0037B7  1               TAB_SLAS:
0037B7  1  BA 00                .BYTE   TK_DIV,$00      ; /
0037B9  1               TAB_LESS:
0037B9  1               LBB_LSHIFT:
0037B9  1  3C C0                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0037BB  1  C3                   .BYTE   TK_LT           ; <
0037BC  1  00                   .BYTE   $00
0037BD  1               TAB_EQUL:
0037BD  1  C2 00                .BYTE   TK_EQUAL,$00    ; =
0037BF  1               TAB_MORE:
0037BF  1               LBB_RSHIFT:
0037BF  1  3E BF                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0037C1  1  C1                   .BYTE   TK_GT           ; >
0037C2  1  00                   .BYTE   $00
0037C3  1               TAB_QEST:
0037C3  1  9F 00                .BYTE   TK_PRINT,$00    ; ?
0037C5  1               TAB_ASCA:
0037C5  1               LBB_ABS:
0037C5  1  42 53 28 C6          .BYTE   "BS(",TK_ABS    ; ABS(
0037C9  1               LBB_AND:
0037C9  1  4E 44 BC             .BYTE   "ND",TK_AND     ; AND
0037CC  1               LBB_ASC:
0037CC  1  53 43 28 D8          .BYTE   "SC(",TK_ASC    ; ASC(
0037D0  1               LBB_ATN:
0037D0  1  54 4E 28 D1          .BYTE   "TN(",TK_ATN    ; ATN(
0037D4  1  00                   .BYTE   $00
0037D5  1               TAB_ASCB:
0037D5  1               LBB_BINS:
0037D5  1  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
0037D9  1  DD           
0037DA  1               LBB_BITCLR:
0037DA  1  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
0037DE  1  52 A8        
0037E0  1               LBB_BITSET:
0037E0  1  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
0037E4  1  54 A7        
0037E6  1               LBB_BITTST:
0037E6  1  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
0037EA  1  54 28 DE     
0037ED  1               ; BITTST(
0037ED  1  00                   .BYTE   $00
0037EE  1               TAB_ASCC:
0037EE  1               LBB_CALL:
0037EE  1  41 4C 4C 9C          .BYTE   "ALL",TK_CALL   ; CALL
0037F2  1               LBB_CHRS:
0037F2  1  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
0037F6  1  DB           
0037F7  1               LBB_CLEAR:
0037F7  1  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
0037FB  1  A2           
0037FC  1               LBB_CONT:
0037FC  1  4F 4E 54 A0          .BYTE   "ONT",TK_CONT   ; CONT
003800  1               LBB_COS:
003800  1  4F 53 28 CE          .BYTE   "OS(",TK_COS    ; COS(
003804  1  00                   .BYTE   $00
003805  1               TAB_ASCD:
003805  1               LBB_DATA:
003805  1  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
003809  1               LBB_DEC:
003809  1  45 43 88             .BYTE   "EC",TK_DEC     ; DEC
00380C  1               LBB_DEEK:
00380C  1  45 45 4B 28          .BYTE   "EEK(",TK_DEEK  ; DEEK(
003810  1  D3           
003811  1               LBB_DEF:
003811  1  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
003814  1               LBB_DIM:
003814  1  49 4D 85             .BYTE   "IM",TK_DIM     ; DIM
003817  1               LBB_DOKE:
003817  1  4F 4B 45 9B          .BYTE   "OKE",TK_DOKE   ; DOKE note - "DOKE" must come before "DO"
00381B  1               LBB_DO:
00381B  1  4F 9D                .BYTE   "O",TK_DO       ; DO
00381D  1  00                   .BYTE   $00
00381E  1               TAB_ASCE:
00381E  1               LBB_ELSE:
00381E  1  4C 53 45 AD          .BYTE   "LSE",TK_ELSE   ; ELSE
003822  1               LBB_END:
003822  1  4E 44 80             .BYTE   "ND",TK_END     ; END
003825  1               LBB_EOR:
003825  1  4F 52 BD             .BYTE   "OR",TK_EOR     ; EOR
003828  1               LBB_EXP:
003828  1  58 50 28 CD          .BYTE   "XP(",TK_EXP    ; EXP(
00382C  1  00                   .BYTE   $00
00382D  1               TAB_ASCF:
00382D  1               LBB_FN:
00382D  1  4E AF                .BYTE   "N",TK_FN       ; FN
00382F  1               LBB_FOR:
00382F  1  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
003832  1               LBB_FRE:
003832  1  52 45 28 C8          .BYTE   "RE(",TK_FRE    ; FRE(
003836  1  00                   .BYTE   $00
003837  1               TAB_ASCG:
003837  1               LBB_GET:
003837  1  45 54 A5             .BYTE   "ET",TK_GET     ; GET
00383A  1               LBB_GOSUB:
00383A  1  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
00383E  1  8D           
00383F  1               LBB_GOTO:
00383F  1  4F 54 4F 89          .BYTE   "OTO",TK_GOTO   ; GOTO
003843  1  00                   .BYTE   $00
003844  1               TAB_ASCH:
003844  1               LBB_HEXS:
003844  1  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
003848  1  DC           
003849  1  00                   .BYTE   $00
00384A  1               TAB_ASCI:
00384A  1               LBB_IF:
00384A  1  46 8B                .BYTE   "F",TK_IF       ; IF
00384C  1               LBB_INC:
00384C  1  4E 43 95             .BYTE   "NC",TK_INC     ; INC
00384F  1               LBB_INPUT:
00384F  1  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
003853  1  84           
003854  1               LBB_INT:
003854  1  4E 54 28 C5          .BYTE   "NT(",TK_INT    ; INT(
003858  1               LBB_IRQ:
003858  1  52 51 A9             .BYTE   "RQ",TK_IRQ     ; IRQ
00385B  1  00                   .BYTE   $00
00385C  1               TAB_ASCK:
00385C  1               LBB_KILL:
00385C  1  49 4C 4C AB          .BYTE   "ILL",TK_KILL   ; KILL
003860  1               TAB_ASCL:
003860  1               LBB_LCASES:
003860  1  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
003864  1  24 28 DA     
003867  1               ; LCASE$(
003867  1               LBB_LEFTS:
003867  1  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
00386B  1  28 E4        
00386D  1               LBB_LEN:
00386D  1  45 4E 28 D5          .BYTE   "EN(",TK_LEN    ; LEN(
003871  1               LBB_LET:
003871  1  45 54 87             .BYTE   "ET",TK_LET     ; LET
003874  1               LBB_LIST:
003874  1  49 53 54 A1          .BYTE   "IST",TK_LIST   ; LIST
003878  1               LBB_LOAD:
003878  1  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
00387C  1               LBB_LOG:
00387C  1  4F 47 28 CC          .BYTE   "OG(",TK_LOG    ; LOG(
003880  1               LBB_LOOP:
003880  1  4F 4F 50 9E          .BYTE   "OOP",TK_LOOP   ; LOOP
003884  1  00                   .BYTE   $00
003885  1               TAB_ASCM:
003885  1               LBB_MAX:
003885  1  41 58 28 DF          .BYTE   "AX(",TK_MAX    ; MAX(
003889  1               LBB_MIDS:
003889  1  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
00388D  1  E6           
00388E  1               LBB_MIN:
00388E  1  49 4E 28 E0          .BYTE   "IN(",TK_MIN    ; MIN(
003892  1  00                   .BYTE   $00
003893  1               TAB_ASCN:
003893  1               LBB_NEW:
003893  1  45 57 A3             .BYTE   "EW",TK_NEW     ; NEW
003896  1               LBB_NEXT:
003896  1  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
00389A  1               LBB_NMI:
00389A  1  4D 49 AA             .BYTE   "MI",TK_NMI     ; NMI
00389D  1               LBB_NOT:
00389D  1  4F 54 B2             .BYTE   "OT",TK_NOT     ; NOT
0038A0  1               LBB_NULL:
0038A0  1  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
0038A4  1  00                   .BYTE   $00
0038A5  1               TAB_ASCO:
0038A5  1               LBB_OFF:
0038A5  1  46 46 B6             .BYTE   "FF",TK_OFF     ; OFF
0038A8  1               LBB_ON:
0038A8  1  4E 93                .BYTE   "N",TK_ON       ; ON
0038AA  1               LBB_OR:
0038AA  1  52 BE                .BYTE   "R",TK_OR       ; OR
0038AC  1  00                   .BYTE   $00
0038AD  1               TAB_ASCP:
0038AD  1               LBB_PEEK:
0038AD  1  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
0038B1  1  D2           
0038B2  1               LBB_PI:
0038B2  1  49 E1                .BYTE   "I",TK_PI       ; PI
0038B4  1               LBB_POKE:
0038B4  1  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
0038B8  1               LBB_POS:
0038B8  1  4F 53 28 C9          .BYTE   "OS(",TK_POS    ; POS(
0038BC  1               LBB_PRINT:
0038BC  1  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
0038C0  1  9F           
0038C1  1  00                   .BYTE   $00
0038C2  1               TAB_ASCR:
0038C2  1               LBB_READ:
0038C2  1  45 41 44 86          .BYTE   "EAD",TK_READ   ; READ
0038C6  1               LBB_REM:
0038C6  1  45 4D 91             .BYTE   "EM",TK_REM     ; REM
0038C9  1               LBB_RESTORE:
0038C9  1  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
0038CD  1  52 45 8C     
0038D0  1               ; RESTORE
0038D0  1               LBB_RETIRQ:
0038D0  1  45 54 49 52          .BYTE   "ETIRQ",TK_RETIRQ; RETIRQ
0038D4  1  51 8E        
0038D6  1               LBB_RETNMI:
0038D6  1  45 54 4E 4D          .BYTE   "ETNMI",TK_RETNMI; RETNMI
0038DA  1  49 8F        
0038DC  1               LBB_RETURN:
0038DC  1  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
0038E0  1  4E 90        
0038E2  1               LBB_RIGHTS:
0038E2  1  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
0038E6  1  24 28 E5     
0038E9  1               ; RIGHT$(
0038E9  1               LBB_RND:
0038E9  1  4E 44 28 CB          .BYTE   "ND(",TK_RND    ; RND(
0038ED  1               LBB_RUN:
0038ED  1  55 4E 8A             .BYTE   "UN",TK_RUN     ; RUN
0038F0  1  00                   .BYTE   $00
0038F1  1               TAB_ASCS:
0038F1  1               LBB_SADD:
0038F1  1  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
0038F5  1  D4           
0038F6  1               LBB_SAVE:
0038F6  1  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
0038FA  1               LBB_SGN:
0038FA  1  47 4E 28 C4          .BYTE   "GN(",TK_SGN    ; SGN(
0038FE  1               LBB_SIN:
0038FE  1  49 4E 28 CF          .BYTE   "IN(",TK_SIN    ; SIN(
003902  1               LBB_SPC:
003902  1  50 43 28 B0          .BYTE   "PC(",TK_SPC    ; SPC(
003906  1               LBB_SQR:
003906  1  51 52 28 CA          .BYTE   "QR(",TK_SQR    ; SQR(
00390A  1               LBB_STEP:
00390A  1  54 45 50 B3          .BYTE   "TEP",TK_STEP   ; STEP
00390E  1               LBB_STOP:
00390E  1  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
003912  1               LBB_STRS:
003912  1  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
003916  1  D6           
003917  1               LBB_SWAP:
003917  1  57 41 50 A6          .BYTE   "WAP",TK_SWAP   ; SWAP
00391B  1  00                   .BYTE   $00
00391C  1               TAB_ASCT:
00391C  1               LBB_TAB:
00391C  1  41 42 28 AC          .BYTE   "AB(",TK_TAB    ; TAB(
003920  1               LBB_TAN:
003920  1  41 4E 28 D0          .BYTE   "AN(",TK_TAN    ; TAN(
003924  1               LBB_THEN:
003924  1  48 45 4E B1          .BYTE   "HEN",TK_THEN   ; THEN
003928  1               LBB_TO:
003928  1  4F AE                .BYTE   "O",TK_TO       ; TO
00392A  1               LBB_TWOPI:
00392A  1  57 4F 50 49          .BYTE   "WOPI",TK_TWOPI ; TWOPI
00392E  1  E2           
00392F  1  00                   .BYTE   $00
003930  1               TAB_ASCU:
003930  1               LBB_UCASES:
003930  1  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
003934  1  24 28 D9     
003937  1               ; UCASE$(
003937  1               LBB_UNTIL:
003937  1  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
00393B  1  B4           
00393C  1               LBB_USR:
00393C  1  53 52 28 C7          .BYTE   "SR(",TK_USR    ; USR(
003940  1  00                   .BYTE   $00
003941  1               TAB_ASCV:
003941  1               LBB_VAL:
003941  1  41 4C 28 D7          .BYTE   "AL(",TK_VAL    ; VAL(
003945  1               LBB_VPTR:
003945  1  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
003949  1  52 28 E3     
00394C  1  00                   .BYTE   $00
00394D  1               TAB_ASCW:
00394D  1               LBB_WAIT:
00394D  1  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
003951  1               LBB_WHILE:
003951  1  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
003955  1  B5           
003956  1               LBB_WIDTH:
003956  1  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
00395A  1  A4           
00395B  1  00                   .BYTE   $00
00395C  1               TAB_POWR:
00395C  1  BB 00                .BYTE   TK_POWER,$00    ; ^
00395E  1               
00395E  1               ; new decode table for LIST
00395E  1               ; Table is ..
00395E  1               ; byte - keyword length, keyword first character
00395E  1               ; word - pointer to rest of keyword from dictionary
00395E  1               
00395E  1               ; note if length is 1 then the pointer is ignored
00395E  1               
00395E  1               LAB_KEYT:
00395E  1  03 45                .BYTE   3,'E'
003960  1  22 38                .WORD   LBB_END         ; END
003962  1  03 46                .BYTE   3,'F'
003964  1  2F 38                .WORD   LBB_FOR         ; FOR
003966  1  04 4E                .BYTE   4,'N'
003968  1  96 38                .WORD   LBB_NEXT        ; NEXT
00396A  1  04 44                .BYTE   4,'D'
00396C  1  05 38                .WORD   LBB_DATA        ; DATA
00396E  1  05 49                .BYTE   5,'I'
003970  1  4F 38                .WORD   LBB_INPUT       ; INPUT
003972  1  03 44                .BYTE   3,'D'
003974  1  14 38                .WORD   LBB_DIM         ; DIM
003976  1  04 52                .BYTE   4,'R'
003978  1  C2 38                .WORD   LBB_READ        ; READ
00397A  1  03 4C                .BYTE   3,'L'
00397C  1  71 38                .WORD   LBB_LET         ; LET
00397E  1  03 44                .BYTE   3,'D'
003980  1  09 38                .WORD   LBB_DEC         ; DEC
003982  1  04 47                .BYTE   4,'G'
003984  1  3F 38                .WORD   LBB_GOTO        ; GOTO
003986  1  03 52                .BYTE   3,'R'
003988  1  ED 38                .WORD   LBB_RUN         ; RUN
00398A  1  02 49                .BYTE   2,'I'
00398C  1  4A 38                .WORD   LBB_IF          ; IF
00398E  1  07 52                .BYTE   7,'R'
003990  1  C9 38                .WORD   LBB_RESTORE     ; RESTORE
003992  1  05 47                .BYTE   5,'G'
003994  1  3A 38                .WORD   LBB_GOSUB       ; GOSUB
003996  1  06 52                .BYTE   6,'R'
003998  1  D0 38                .WORD   LBB_RETIRQ      ; RETIRQ
00399A  1  06 52                .BYTE   6,'R'
00399C  1  D6 38                .WORD   LBB_RETNMI      ; RETNMI
00399E  1  06 52                .BYTE   6,'R'
0039A0  1  DC 38                .WORD   LBB_RETURN      ; RETURN
0039A2  1  03 52                .BYTE   3,'R'
0039A4  1  C6 38                .WORD   LBB_REM         ; REM
0039A6  1  04 53                .BYTE   4,'S'
0039A8  1  0E 39                .WORD   LBB_STOP        ; STOP
0039AA  1  02 4F                .BYTE   2,'O'
0039AC  1  A8 38                .WORD   LBB_ON          ; ON
0039AE  1  04 4E                .BYTE   4,'N'
0039B0  1  A0 38                .WORD   LBB_NULL        ; NULL
0039B2  1  03 49                .BYTE   3,'I'
0039B4  1  4C 38                .WORD   LBB_INC         ; INC
0039B6  1  04 57                .BYTE   4,'W'
0039B8  1  4D 39                .WORD   LBB_WAIT        ; WAIT
0039BA  1  04 4C                .BYTE   4,'L'
0039BC  1  78 38                .WORD   LBB_LOAD        ; LOAD
0039BE  1  04 53                .BYTE   4,'S'
0039C0  1  F6 38                .WORD   LBB_SAVE        ; SAVE
0039C2  1  03 44                .BYTE   3,'D'
0039C4  1  11 38                .WORD   LBB_DEF         ; DEF
0039C6  1  04 50                .BYTE   4,'P'
0039C8  1  B4 38                .WORD   LBB_POKE        ; POKE
0039CA  1  04 44                .BYTE   4,'D'
0039CC  1  17 38                .WORD   LBB_DOKE        ; DOKE
0039CE  1  04 43                .BYTE   4,'C'
0039D0  1  EE 37                .WORD   LBB_CALL        ; CALL
0039D2  1  02 44                .BYTE   2,'D'
0039D4  1  1B 38                .WORD   LBB_DO          ; DO
0039D6  1  04 4C                .BYTE   4,'L'
0039D8  1  80 38                .WORD   LBB_LOOP        ; LOOP
0039DA  1  05 50                .BYTE   5,'P'
0039DC  1  BC 38                .WORD   LBB_PRINT       ; PRINT
0039DE  1  04 43                .BYTE   4,'C'
0039E0  1  FC 37                .WORD   LBB_CONT        ; CONT
0039E2  1  04 4C                .BYTE   4,'L'
0039E4  1  74 38                .WORD   LBB_LIST        ; LIST
0039E6  1  05 43                .BYTE   5,'C'
0039E8  1  F7 37                .WORD   LBB_CLEAR       ; CLEAR
0039EA  1  03 4E                .BYTE   3,'N'
0039EC  1  93 38                .WORD   LBB_NEW         ; NEW
0039EE  1  05 57                .BYTE   5,'W'
0039F0  1  56 39                .WORD   LBB_WIDTH       ; WIDTH
0039F2  1  03 47                .BYTE   3,'G'
0039F4  1  37 38                .WORD   LBB_GET         ; GET
0039F6  1  04 53                .BYTE   4,'S'
0039F8  1  17 39                .WORD   LBB_SWAP        ; SWAP
0039FA  1  06 42                .BYTE   6,'B'
0039FC  1  E0 37                .WORD   LBB_BITSET      ; BITSET
0039FE  1  06 42                .BYTE   6,'B'
003A00  1  DA 37                .WORD   LBB_BITCLR      ; BITCLR
003A02  1  03 49                .BYTE   3,'I'
003A04  1  58 38                .WORD   LBB_IRQ         ; IRQ
003A06  1  03 4E                .BYTE   3,'N'
003A08  1  9A 38                .WORD   LBB_NMI         ; NMI
003A0A  1  04 4B                .BYTE   4,'K'
003A0C  1  5C 38                .WORD   LBB_KILL        ; KILL
003A0E  1               
003A0E  1               
003A0E  1               ; secondary commands (can't start a statement)
003A0E  1               
003A0E  1  04 54                .BYTE   4,'T'
003A10  1  1C 39                .WORD   LBB_TAB         ; TAB
003A12  1  04 45                .BYTE   4,'E'
003A14  1  1E 38                .WORD   LBB_ELSE        ; ELSE
003A16  1  02 54                .BYTE   2,'T'
003A18  1  28 39                .WORD   LBB_TO          ; TO
003A1A  1  02 46                .BYTE   2,'F'
003A1C  1  2D 38                .WORD   LBB_FN          ; FN
003A1E  1  04 53                .BYTE   4,'S'
003A20  1  02 39                .WORD   LBB_SPC         ; SPC
003A22  1  04 54                .BYTE   4,'T'
003A24  1  24 39                .WORD   LBB_THEN        ; THEN
003A26  1  03 4E                .BYTE   3,'N'
003A28  1  9D 38                .WORD   LBB_NOT         ; NOT
003A2A  1  04 53                .BYTE   4,'S'
003A2C  1  0A 39                .WORD   LBB_STEP        ; STEP
003A2E  1  05 55                .BYTE   5,'U'
003A30  1  37 39                .WORD   LBB_UNTIL       ; UNTIL
003A32  1  05 57                .BYTE   5,'W'
003A34  1  51 39                .WORD   LBB_WHILE       ; WHILE
003A36  1  03 4F                .BYTE   3,'O'
003A38  1  A5 38                .WORD   LBB_OFF         ; OFF
003A3A  1               
003A3A  1               ; opperators
003A3A  1               
003A3A  1  01 2B                .BYTE   1,'+'
003A3C  1  00 00                .WORD   $0000           ; +
003A3E  1  01 2D                .BYTE   1,'-'
003A40  1  00 00                .WORD   $0000           ; -
003A42  1  01 2A                .BYTE   1,'*'
003A44  1  00 00                .WORD   $0000           ; *
003A46  1  01 2F                .BYTE   1,'/'
003A48  1  00 00                .WORD   $0000           ; /
003A4A  1  01 5E                .BYTE   1,'^'
003A4C  1  00 00                .WORD   $0000           ; ^
003A4E  1  03 41                .BYTE   3,'A'
003A50  1  C9 37                .WORD   LBB_AND         ; AND
003A52  1  03 45                .BYTE   3,'E'
003A54  1  25 38                .WORD   LBB_EOR         ; EOR
003A56  1  02 4F                .BYTE   2,'O'
003A58  1  AA 38                .WORD   LBB_OR          ; OR
003A5A  1  02 3E                .BYTE   2,'>'
003A5C  1  BF 37                .WORD   LBB_RSHIFT      ; >>
003A5E  1  02 3C                .BYTE   2,'<'
003A60  1  B9 37                .WORD   LBB_LSHIFT      ; <<
003A62  1  01 3E                .BYTE   1,'>'
003A64  1  00 00                .WORD   $0000           ; >
003A66  1  01 3D                .BYTE   1,'='
003A68  1  00 00                .WORD   $0000           ; =
003A6A  1  01 3C                .BYTE   1,'<'
003A6C  1  00 00                .WORD   $0000           ; <
003A6E  1               
003A6E  1               ; functions
003A6E  1               
003A6E  1  04 53                .BYTE   4,'S'           ;
003A70  1  FA 38                .WORD   LBB_SGN         ; SGN
003A72  1  04 49                .BYTE   4,'I'           ;
003A74  1  54 38                .WORD   LBB_INT         ; INT
003A76  1  04 41                .BYTE   4,'A'           ;
003A78  1  C5 37                .WORD   LBB_ABS         ; ABS
003A7A  1  04 55                .BYTE   4,'U'           ;
003A7C  1  3C 39                .WORD   LBB_USR         ; USR
003A7E  1  04 46                .BYTE   4,'F'           ;
003A80  1  32 38                .WORD   LBB_FRE         ; FRE
003A82  1  04 50                .BYTE   4,'P'           ;
003A84  1  B8 38                .WORD   LBB_POS         ; POS
003A86  1  04 53                .BYTE   4,'S'           ;
003A88  1  06 39                .WORD   LBB_SQR         ; SQR
003A8A  1  04 52                .BYTE   4,'R'           ;
003A8C  1  E9 38                .WORD   LBB_RND         ; RND
003A8E  1  04 4C                .BYTE   4,'L'           ;
003A90  1  7C 38                .WORD   LBB_LOG         ; LOG
003A92  1  04 45                .BYTE   4,'E'           ;
003A94  1  28 38                .WORD   LBB_EXP         ; EXP
003A96  1  04 43                .BYTE   4,'C'           ;
003A98  1  00 38                .WORD   LBB_COS         ; COS
003A9A  1  04 53                .BYTE   4,'S'           ;
003A9C  1  FE 38                .WORD   LBB_SIN         ; SIN
003A9E  1  04 54                .BYTE   4,'T'           ;
003AA0  1  20 39                .WORD   LBB_TAN         ; TAN
003AA2  1  04 41                .BYTE   4,'A'           ;
003AA4  1  D0 37                .WORD   LBB_ATN         ; ATN
003AA6  1  05 50                .BYTE   5,'P'           ;
003AA8  1  AD 38                .WORD   LBB_PEEK        ; PEEK
003AAA  1  05 44                .BYTE   5,'D'           ;
003AAC  1  0C 38                .WORD   LBB_DEEK        ; DEEK
003AAE  1  05 53                .BYTE   5,'S'           ;
003AB0  1  F1 38                .WORD   LBB_SADD        ; SADD
003AB2  1  04 4C                .BYTE   4,'L'           ;
003AB4  1  6D 38                .WORD   LBB_LEN         ; LEN
003AB6  1  05 53                .BYTE   5,'S'           ;
003AB8  1  12 39                .WORD   LBB_STRS        ; STR$
003ABA  1  04 56                .BYTE   4,'V'           ;
003ABC  1  41 39                .WORD   LBB_VAL         ; VAL
003ABE  1  04 41                .BYTE   4,'A'           ;
003AC0  1  CC 37                .WORD   LBB_ASC         ; ASC
003AC2  1  07 55                .BYTE   7,'U'           ;
003AC4  1  30 39                .WORD   LBB_UCASES      ; UCASE$
003AC6  1  07 4C                .BYTE   7,'L'           ;
003AC8  1  60 38                .WORD   LBB_LCASES      ; LCASE$
003ACA  1  05 43                .BYTE   5,'C'           ;
003ACC  1  F2 37                .WORD   LBB_CHRS        ; CHR$
003ACE  1  05 48                .BYTE   5,'H'           ;
003AD0  1  44 38                .WORD   LBB_HEXS        ; HEX$
003AD2  1  05 42                .BYTE   5,'B'           ;
003AD4  1  D5 37                .WORD   LBB_BINS        ; BIN$
003AD6  1  07 42                .BYTE   7,'B'           ;
003AD8  1  E6 37                .WORD   LBB_BITTST      ; BITTST
003ADA  1  04 4D                .BYTE   4,'M'           ;
003ADC  1  85 38                .WORD   LBB_MAX         ; MAX
003ADE  1  04 4D                .BYTE   4,'M'           ;
003AE0  1  8E 38                .WORD   LBB_MIN         ; MIN
003AE2  1  02 50                .BYTE   2,'P'           ;
003AE4  1  B2 38                .WORD   LBB_PI          ; PI
003AE6  1  05 54                .BYTE   5,'T'           ;
003AE8  1  2A 39                .WORD   LBB_TWOPI       ; TWOPI
003AEA  1  07 56                .BYTE   7,'V'           ;
003AEC  1  45 39                .WORD   LBB_VPTR        ; VARPTR
003AEE  1  06 4C                .BYTE   6,'L'           ;
003AF0  1  67 38                .WORD   LBB_LEFTS       ; LEFT$
003AF2  1  07 52                .BYTE   7,'R'           ;
003AF4  1  E2 38                .WORD   LBB_RIGHTS      ; RIGHT$
003AF6  1  05 4D                .BYTE   5,'M'           ;
003AF8  1  89 38                .WORD   LBB_MIDS        ; MID$
003AFA  1               
003AFA  1               ; BASIC messages, mostly error messages
003AFA  1               
003AFA  1               LAB_BAER:
003AFA  1  1E 3B                .WORD   ERR_NF          ;$00 NEXT without FOR
003AFC  1  2F 3B                .WORD   ERR_SN          ;$02 syntax
003AFE  1  36 3B                .WORD   ERR_RG          ;$04 RETURN without GOSUB
003B00  1  4B 3B                .WORD   ERR_OD          ;$06 out of data
003B02  1  57 3B                .WORD   ERR_FC          ;$08 function call
003B04  1  65 3B                .WORD   ERR_OV          ;$0A overflow
003B06  1  6E 3B                .WORD   ERR_OM          ;$0C out of memory
003B08  1  7C 3B                .WORD   ERR_US          ;$0E undefined statement
003B0A  1  90 3B                .WORD   ERR_BS          ;$10 array bounds
003B0C  1  9D 3B                .WORD   ERR_DD          ;$12 double dimension array
003B0E  1  AE 3B                .WORD   ERR_D0          ;$14 divide by 0
003B10  1  BD 3B                .WORD   ERR_ID          ;$16 illegal direct
003B12  1  CC 3B                .WORD   ERR_TM          ;$18 type mismatch
003B14  1  DA 3B                .WORD   ERR_LS          ;$1A long string
003B16  1  EA 3B                .WORD   ERR_ST          ;$1C string too complex
003B18  1  FD 3B                .WORD   ERR_CN          ;$1E continue error
003B1A  1  0C 3C                .WORD   ERR_UF          ;$20 undefined function
003B1C  1  1F 3C                .WORD   ERR_LD          ;$22 LOOP without DO
003B1E  1               
003B1E  1               ; I may implement these two errors to force definition of variables and
003B1E  1               ; dimensioning of arrays before use.
003B1E  1               
003B1E  1               ;	.word ERR_UV		;$24 undefined variable
003B1E  1               
003B1E  1               ; the above error has been tested and works (see code and comments below LAB_1D8B)
003B1E  1               
003B1E  1               ;	.word ERR_UA		;$26 undimensioned array
003B1E  1               
003B1E  1               ERR_NF:
003B1E  1  4E 45 58 54          .BYTE   "NEXT without FOR",$00
003B22  1  20 77 69 74  
003B26  1  68 6F 75 74  
003B2F  1               ERR_SN:
003B2F  1  53 79 6E 74          .BYTE   "Syntax",$00
003B33  1  61 78 00     
003B36  1               ERR_RG:
003B36  1  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
003B3A  1  52 4E 20 77  
003B3E  1  69 74 68 6F  
003B4B  1               ERR_OD:
003B4B  1  4F 75 74 20          .BYTE   "Out of DATA",$00
003B4F  1  6F 66 20 44  
003B53  1  41 54 41 00  
003B57  1               ERR_FC:
003B57  1  46 75 6E 63          .BYTE   "Function call",$00
003B5B  1  74 69 6F 6E  
003B5F  1  20 63 61 6C  
003B65  1               ERR_OV:
003B65  1  4F 76 65 72          .BYTE   "Overflow",$00
003B69  1  66 6C 6F 77  
003B6D  1  00           
003B6E  1               ERR_OM:
003B6E  1  4F 75 74 20          .BYTE   "Out of memory",$00
003B72  1  6F 66 20 6D  
003B76  1  65 6D 6F 72  
003B7C  1               ERR_US:
003B7C  1  55 6E 64 65          .BYTE   "Undefined statement",$00
003B80  1  66 69 6E 65  
003B84  1  64 20 73 74  
003B90  1               ERR_BS:
003B90  1  41 72 72 61          .BYTE   "Array bounds",$00
003B94  1  79 20 62 6F  
003B98  1  75 6E 64 73  
003B9D  1               ERR_DD:
003B9D  1  44 6F 75 62          .BYTE   "Double dimension",$00
003BA1  1  6C 65 20 64  
003BA5  1  69 6D 65 6E  
003BAE  1               ERR_D0:
003BAE  1  44 69 76 69          .BYTE   "Divide by zero",$00
003BB2  1  64 65 20 62  
003BB6  1  79 20 7A 65  
003BBD  1               ERR_ID:
003BBD  1  49 6C 6C 65          .BYTE   "Illegal direct",$00
003BC1  1  67 61 6C 20  
003BC5  1  64 69 72 65  
003BCC  1               ERR_TM:
003BCC  1  54 79 70 65          .BYTE   "Type mismatch",$00
003BD0  1  20 6D 69 73  
003BD4  1  6D 61 74 63  
003BDA  1               ERR_LS:
003BDA  1  53 74 72 69          .BYTE   "String too long",$00
003BDE  1  6E 67 20 74  
003BE2  1  6F 6F 20 6C  
003BEA  1               ERR_ST:
003BEA  1  53 74 72 69          .BYTE   "String too complex",$00
003BEE  1  6E 67 20 74  
003BF2  1  6F 6F 20 63  
003BFD  1               ERR_CN:
003BFD  1  43 61 6E 27          .BYTE   "Can't continue",$00
003C01  1  74 20 63 6F  
003C05  1  6E 74 69 6E  
003C0C  1               ERR_UF:
003C0C  1  55 6E 64 65          .BYTE   "Undefined function",$00
003C10  1  66 69 6E 65  
003C14  1  64 20 66 75  
003C1F  1               ERR_LD:
003C1F  1  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
003C23  1  20 77 69 74  
003C27  1  68 6F 75 74  
003C2F  1               
003C2F  1               ;ERR_UV	.byte	"Undefined variable",$00
003C2F  1               
003C2F  1               ; the above error has been tested and works (see code and comments below LAB_1D8B)
003C2F  1               
003C2F  1               ;ERR_UA	.byte	"Undimensioned array",$00
003C2F  1               
003C2F  1               LAB_BMSG:
003C2F  1  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
003C33  1  65 61 6B 00  
003C37  1               LAB_EMSG:
003C37  1  20 45 72 72          .BYTE   " Error",$00
003C3B  1  6F 72 00     
003C3E  1               LAB_LMSG:
003C3E  1  20 69 6E 20          .BYTE   " in line ",$00
003C42  1  6C 69 6E 65  
003C46  1  20 00        
003C48  1               LAB_RMSG:
003C48  1  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
003C4C  1  61 64 79 0D  
003C50  1  0A 00        
003C52  1               
003C52  1               LAB_IMSG:
003C52  1  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
003C56  1  72 61 20 69  
003C5A  1  67 6E 6F 72  
003C63  1               LAB_REDO:
003C63  1  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
003C67  1  6F 20 66 72  
003C6B  1  6F 6D 20 73  
003C76  1               
003C76  1               AA_end_basic:
003C76  1               
003C76  1               
003C76  1               
003C76  1               ; system dependant i/o vectors
003C76  1               ; these are in RAM and are set by the monitor at start-up
003C76  1               
003C76  1               V_INPT: ; non halting scan input device
003C76  1               BYTEIN:
003C76  1  8C B5 3C             STY     DBGY            ;
003C79  1  8E B4 3C             STX     DBGX            ;
003C7C  1  A2 0B                LDX     #11             ;
003C7E  1  20 B7 3C             JSR     PEM             ;
003C81  1  C9 00                CMP     #$00            ;
003C83  1  F0 0D                BEQ     LAB_nobyw       ; branch if no byte waiting
003C85  1  A2 06                LDX     #6              ;
003C87  1  20 B7 3C             JSR     PEM             ;
003C8A  1  AC B5 3C             LDY     DBGY
003C8D  1  AE B4 3C             LDX     DBGX
003C90  1  38                   SEC                     ; flag byte received
003C91  1  60                   RTS
003C92  1               LAB_nobyw:
003C92  1  AC B5 3C             LDY     DBGY
003C95  1  AE B4 3C             LDX     DBGX
003C98  1  18                   CLC                     ; flag no byte received
003C99  1  60                   RTS                     ;
003C9A  1               
003C9A  1               V_OUTP: ; send byte to output device
003C9A  1               BYTEOUT:
003C9A  1  8D B6 3C             STA     DBGA
003C9D  1  8C B5 3C             STY     DBGY
003CA0  1  8E B4 3C             STX     DBGX
003CA3  1  A2 02                LDX     #2              ;
003CA5  1  20 B7 3C             JSR     PEM             ;
003CA8  1  AD B6 3C             LDA     DBGA
003CAB  1  AC B5 3C             LDY     DBGY
003CAE  1  AE B4 3C             LDX     DBGX
003CB1  1  60                   RTS
003CB2  1               
003CB2  1               
003CB2  1               PEMVEC:
003CB2  1  00 00                .WORD   $0000
003CB4  1               
003CB4  1               DBGX:
003CB4  1  00                   .BYTE   0
003CB5  1               DBGY:
003CB5  1  00                   .BYTE   0
003CB6  1               DBGA:
003CB6  1  00                   .BYTE   0
003CB7  1               
003CB7  1               
003CB7  1               
003CB7  1               PEM:
003CB7  1                       .IFDEF  DUODYNE
003CB7  1  4C 03 01             JMP     $0103
003CBA  1                       .ELSE
003CBA  1                       JMP     (PEMVEC)
003CBA  1                       .ENDIF
003CBA  1               
003CBA  1               LAB_KILL:
003CBA  1               RETURN_TO_OS:
003CBA  1  4C 00 01             JMP     $0100
003CBD  1               
003CBD  1               
003CBD  1               
003CBD  1               V_SAVE: ; save BASIC program
003CBD  1               DOS65SAVE:
003CBD  1  20 C6 3E             JSR     DOS65FCBPREP    ; parse parameters into FCB
003CC0  1  B0 29                BCS     DOS65SAVE_ERR1  ; Error?, if so abort
003CC2  1  A2 0D                LDX     #13             ;
003CC4  1  20 B7 3C             JSR     PEM             ;
003CC7  1  A9 B1                LDA     #<FCB           ; CREATE File
003CC9  1  A0 3F                LDY     #>FCB           ;
003CCB  1  A2 16                LDX     #22             ;
003CCD  1  20 B7 3C             JSR     PEM             ;
003CD0  1  A9 00                LDA     #0              ; clear
003CD2  1  8D D1 3F             STA     FCB+32          ; record number
003CD5  1  A9 B1                LDA     #<FCB           ; Open File
003CD7  1  A0 3F                LDY     #>FCB           ;
003CD9  1  A2 0F                LDX     #15             ;
003CDB  1  20 B7 3C             JSR     PEM             ;
003CDE  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
003CE0  1  D0 0C                BNE     DOS65SAVE_1     ;
003CE2  1               DOS65SAVE_ERR:
003CE2  1  A9 8C                LDA     #<FILEERROR2    ; NO, ERROR OUT
003CE4  1  A0 3F                LDY     #>FILEERROR2
003CE6  1  A2 09                LDX     #9              ; Print error message
003CE8  1  20 B7 3C             JSR     PEM             ;
003CEB  1               DOS65SAVE_ERR1:
003CEB  1  4C B3 11             JMP     LAB_REM         ; comment out the remainder of the line (if any)
003CEE  1               DOS65SAVE_1:
003CEE  1  A9 D2                LDA     #<FCBBUFFER     ; SETUP BUFFER
003CF0  1  85 EB                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
003CF2  1  A0 3F                LDY     #>FCBBUFFER     ;
003CF4  1  84 EC                STY     FCBPTR+1        ;
003CF6  1  A2 1A                LDX     #26             ; Setup Buffer
003CF8  1  20 B7 3C             JSR     PEM             ;
003CFB  1  20 91 3D             JSR     DOS65SAVE_CONTROL;
003CFE  1               DOS65SAVE_2:
003CFE  1  A5 79                LDA     <Smeml          ; All is well, file opened and continue
003D00  1  85 ED                STA     FCBPTR+2        ; point to base of RAM
003D02  1  A5 7A                LDA     <Smemh          ;
003D04  1  85 EE                STA     FCBPTR+3        ;
003D06  1  A2 00                LDX     #$00            ; x=0 (null counter)
003D08  1               DOS65SAVE_2A:
003D08  1  A0 00                LDY     #$00            ; y=0 (Loop Index)
003D0A  1               DOS65SAVE_3:
003D0A  1  8B DA A2 01          LDAINDIRECTY FCBPTR+2   ; load from RAM
003D0E  1  B5 ED C9 00  
003D12  1  D0 04 A2 00  
003D20  1  8B DA 48 A2          STAINDIRECTY FCBPTR     ; save to Buffer
003D24  1  01 B5 EB C9  
003D28  1  00 D0 04 A2  
003D36  1  C9 00                CMP     #$00            ; is Zero?
003D38  1  D0 10                BNE     DOS65SAVE_3A    ; No, continue
003D3A  1  E8                   INX                     ; yes, bump Null Counter
003D3B  1  E0 03                CPX     #$03            ; Three nulls in a row?
003D3D  1  D0 0D                BNE     DOS65SAVE_3B    ; no, continue
003D3F  1  A9 90                LDA     #$90            ; yes, signal end
003D41  1  85 ED                STA     FCBPTR+2        ;
003D43  1  A9 CF                LDA     #>Ram_top-1     ; yes, signal end
003D45  1  85 EE                STA     FCBPTR+3        ;
003D47  1  4C 51 3D             JMP     DOS65SAVE_3C
003D4A  1               DOS65SAVE_3A:                   ;
003D4A  1  A2 00                LDX     #$00            ; prior char not null, reset null counter
003D4C  1               DOS65SAVE_3B:                   ;
003D4C  1  C8                   INY                     ; bump index
003D4D  1  C0 80                CPY     #$80            ; end of buffer?
003D4F  1  D0 B9                BNE     DOS65SAVE_3     ; no, loop
003D51  1               DOS65SAVE_3C:
003D51  1  A9 B1                LDA     #<FCB           ; Write record in buffer to disk file
003D53  1  A0 3F                LDY     #>FCB           ;
003D55  1  A2 15                LDX     #21             ;
003D57  1  20 B7 3C             JSR     PEM             ;
003D5A  1  29 FE                AND     #$FE            ; strip out extension
003D5C  1  C9 00                CMP     #$00            ; is error
003D5E  1  D0 82                BNE     DOS65SAVE_ERR   ; ERROR, do error handling
003D60  1  18                   CLC                     ;
003D61  1  A5 ED                LDA     FCBPTR+2        ; add $80 to base counter
003D63  1  69 80                ADC     #$80            ;
003D65  1  85 ED                STA     FCBPTR+2        ;
003D67  1  90 9F                BCC     DOS65SAVE_2A    ; is carry?, no loop
003D69  1  18                   CLC                     ; yes, carry, inc high byte
003D6A  1  A5 EE                LDA     FCBPTR+3        ;
003D6C  1  69 01                ADC     #$01            ;
003D6E  1  85 EE                STA     FCBPTR+3        ;
003D70  1  C9 D0                CMP     #>Ram_top       ; are we at the end of RAM?
003D72  1  F0 03                BEQ     DOS65SAVE_4
003D74  1  4C 08 3D             JMP     DOS65SAVE_2A
003D77  1               DOS65SAVE_4:
003D77  1  A9 B1                LDA     #<FCB           ;
003D79  1  A0 3F                LDY     #>FCB           ;
003D7B  1  A2 10                LDX     #16             ;
003D7D  1  20 B7 3C             JSR     PEM             ;
003D80  1  C9 FF                CMP     #$FF            ;
003D82  1  D0 03                BNE     DOS65SAVE_5     ;
003D84  1  4C E2 3C             JMP     DOS65SAVE_ERR   ; ERROR, DISPLAY IT
003D87  1               DOS65SAVE_5
003D87  1  A9 48                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
003D89  1  A0 3C                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
003D8B  1  20 52 14             JSR     LAB_18C3
003D8E  1  4C 4B 0B             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
003D91  1               
003D91  1               
003D91  1               
003D91  1               DOS65SAVE_CONTROL:
003D91  1  A9 60                LDA     #$60            ; SAVE 80H OF CONTROL DATA
003D93  1  85 ED                STA     FCBPTR+2        ;
003D95  1  A9 00                LDA     #$00            ;
003D97  1  85 EE                STA     FCBPTR+3        ;
003D99  1  A0 00                LDY     #$00            ; y=0 (Loop Index)
003D9B  1  A2 00                LDX     #$00            ; x=0 (null counter)
003D9D  1               DOS65SAVE_CONTROL1:
003D9D  1  8B DA A2 01          LDAINDIRECTY FCBPTR+2   ; load from RAM
003DA1  1  B5 ED C9 00  
003DA5  1  D0 04 A2 00  
003DB3  1  8B DA 48 A2          STAINDIRECTY FCBPTR     ; save to Buffer
003DB7  1  01 B5 EB C9  
003DBB  1  00 D0 04 A2  
003DC9  1  C8                   INY
003DCA  1  98                   TYA
003DCB  1  C9 80                CMP     #$80            ; is END?
003DCD  1  D0 CE                BNE     DOS65SAVE_CONTROL1; No, continue
003DCF  1  A9 B1                LDA     #<FCB           ; Write record in buffer to disk file
003DD1  1  A0 3F                LDY     #>FCB           ;
003DD3  1  A2 15                LDX     #21             ;
003DD5  1  20 B7 3C             JSR     PEM             ;
003DD8  1  60                   RTS
003DD9  1               
003DD9  1               
003DD9  1               V_LOAD: ; load BASIC program
003DD9  1               DOS65LOAD:
003DD9  1  20 C6 3E             JSR     DOS65FCBPREP    ; parse parameters into FCB
003DDC  1  B0 20                BCS     DOS65LOAD_ERR1  ; Error?, if so abort
003DDE  1  A2 0D                LDX     #13             ;
003DE0  1  20 B7 3C             JSR     PEM             ;
003DE3  1  A9 00                LDA     #0              ; clear
003DE5  1  8D D1 3F             STA     FCB+32          ; record number
003DE8  1  A9 B1                LDA     #<FCB           ; Open File
003DEA  1  A0 3F                LDY     #>FCB           ;
003DEC  1  A2 0F                LDX     #15             ;
003DEE  1  20 B7 3C             JSR     PEM             ;
003DF1  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
003DF3  1  D0 0C                BNE     DOS65LOAD_1     ;
003DF5  1               DOS65LOAD_ERR:
003DF5  1  A9 8C                LDA     #<FILEERROR2    ; NO, ERROR OUT
003DF7  1  A0 3F                LDY     #>FILEERROR2
003DF9  1  A2 09                LDX     #9              ; Print error message
003DFB  1  20 B7 3C             JSR     PEM             ;
003DFE  1               DOS65LOAD_ERR1:
003DFE  1  4C B3 11             JMP     LAB_REM         ; comment out the remainder of the line (if any)
003E01  1               DOS65LOAD_1:
003E01  1  A9 D2                LDA     #<FCBBUFFER     ; SETUP BUFFER
003E03  1  85 EB                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
003E05  1  A0 3F                LDY     #>FCBBUFFER     ;
003E07  1  A2 1A                LDX     #26             ; Setup Buffer
003E09  1  20 B7 3C             JSR     PEM             ;
003E0C  1  20 83 3E             JSR     DOS65LOAD_CONTROL;
003E0F  1               DOS65LOAD_2:
003E0F  1  A5 79                LDA     <Smeml          ; All is well, file opened and continue
003E11  1  85 ED                STA     FCBPTR+2        ; point to base of RAM
003E13  1  A5 7A                LDA     <Smemh          ;
003E15  1  85 EE                STA     FCBPTR+3        ;
003E17  1  4C 5F 3E             JMP     DOS65LOAD_3C
003E1A  1               DOS65LOAD_3:
003E1A  1  8B DA A2 01          LDAINDIRECTY FCBPTR     ; load from BUFFER
003E1E  1  B5 EB C9 00  
003E22  1  D0 04 A2 00  
003E30  1  8B DA 48 A2          STAINDIRECTY FCBPTR+2   ; save to RAM
003E34  1  01 B5 ED C9  
003E38  1  00 D0 04 A2  
003E46  1  C8                   INY                     ; bump index
003E47  1  C0 80                CPY     #$80            ; end of buffer?
003E49  1  D0 CF                BNE     DOS65LOAD_3     ; no, loop
003E4B  1               
003E4B  1  18                   CLC                     ;
003E4C  1  A5 ED                LDA     FCBPTR+2        ; add $80 to base counter
003E4E  1  69 80                ADC     #$80            ;
003E50  1  85 ED                STA     FCBPTR+2        ;
003E52  1  90 0B                BCC     DOS65LOAD_3C    ; is carry?, no SKIP
003E54  1  18                   CLC                     ; yes, carry, inc high byte
003E55  1  A5 EE                LDA     FCBPTR+3        ;
003E57  1  69 01                ADC     #$01            ;
003E59  1  85 EE                STA     FCBPTR+3        ;
003E5B  1  C9 D0                CMP     #>Ram_top       ; are we at the end of RAM?
003E5D  1  F0 11                BEQ     DOS65LOAD_4
003E5F  1               
003E5F  1               DOS65LOAD_3C:
003E5F  1  A9 B1                LDA     #<FCB           ; READ record buffer from disk file
003E61  1  A0 3F                LDY     #>FCB           ;
003E63  1  20 44 3F             JSR     RDERCR          ;
003E66  1  A0 00                LDY     #$00            ; RESET INDEX
003E68  1  C9 00                CMP     #$00            ; is error or EOF
003E6A  1  F0 AE                BEQ     DOS65LOAD_3     ;
003E6C  1  C9 01                CMP     #$01            ; EOF?
003E6E  1  D0 85                BNE     DOS65LOAD_ERR   ; ERROR, do error handling
003E70  1               DOS65LOAD_4:
003E70  1  A9 B1                LDA     #<FCB           ;
003E72  1  A0 3F                LDY     #>FCB           ;
003E74  1  A2 10                LDX     #16             ;
003E76  1  20 B7 3C             JSR     PEM             ;
003E79  1  A9 48                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
003E7B  1  A0 3C                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
003E7D  1  20 52 14             JSR     LAB_18C3
003E80  1  4C 4B 0B             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
003E83  1               
003E83  1               DOS65LOAD_CONTROL:
003E83  1  A9 60                LDA     #$60            ; RESTORE CONTORL DATA
003E85  1  85 ED                STA     FCBPTR+2        ; point to base of RAM
003E87  1  A9 00                LDA     #$00            ;
003E89  1  85 EE                STA     FCBPTR+3        ;
003E8B  1               
003E8B  1  A9 B1                LDA     #<FCB           ; READ record buffer from disk file
003E8D  1  A0 3F                LDY     #>FCB           ;
003E8F  1  A2 14                LDX     #20             ;
003E91  1  20 B7 3C             JSR     PEM             ;
003E94  1               
003E94  1               DOS65LOAD_CONTROL1:
003E94  1  8B DA A2 01          LDAINDIRECTY FCBPTR     ; load from BUFFER
003E98  1  B5 EB C9 00  
003E9C  1  D0 04 A2 00  
003EAA  1  8B DA 48 A2          STAINDIRECTY FCBPTR+2   ; save to RAM
003EAE  1  01 B5 ED C9  
003EB2  1  00 D0 04 A2  
003EC0  1  C8                   INY                     ; bump index
003EC1  1  C0 80                CPY     #$80            ; end of buffer?
003EC3  1  D0 CF                BNE     DOS65LOAD_CONTROL1; no, loop
003EC5  1  60                   RTS
003EC6  1               
003EC6  1               DOS65FCBPREP:
003EC6  1                       .IFDEF  DUODYNE
003EC6  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003ECA  1                       .ELSE
003ECA  1                       JSR     LAB_GBYT        ; scan memory
003ECA  1                       .ENDIF
003ECA  1               
003ECA  1  38                   SEC                     ;
003ECB  1  E9 40                SBC     #64             ; PARSE DRIVE NUMBER
003ECD  1  8D B1 3F             STA     DOSDRIVE        ; STORE IT IN FCB
003ED0  1                       .IFDEF  DUODYNE
003ED0  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003ED4  1                       .ELSE
003ED4  1                       JSR     LAB_IGBY        ; increment and scan memory
003ED4  1                       .ENDIF
003ED4  1               
003ED4  1  C9 3A                CMP     #':'            ;
003ED6  1  F0 0E                BEQ     DOS65FCBPREP_1  ; YES, IT WAS A DRIVE, CONTINUE
003ED8  1  A9 61                LDA     #<FILEERROR1    ; NO, ERROR OUT
003EDA  1  A0 3F                LDY     #>FILEERROR1
003EDC  1  A2 09                LDX     #9
003EDE  1  20 B7 3C             JSR     PEM
003EE1  1  20 B3 11             JSR     LAB_REM
003EE4  1  38                   SEC
003EE5  1  60                   RTS
003EE6  1               DOS65FCBPREP_1:
003EE6  1  A9 B1                LDA     #<FCB           ; SETUP FCBPTR
003EE8  1  85 EB                STA     FCBPTR          ;
003EEA  1  A9 3F                LDA     #>FCB           ;
003EEC  1  85 EC                STA     FCBPTR+1        ;
003EEE  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
003EF0  1  A9 20                LDA     #$20            ; LOAD SPACE CHAR INTO A
003EF2  1               DOS65FCBPREP_1A:                ; BLANK OUT FCB
003EF2  1  8B DA 48 A2          STAINDIRECTY FCBPTR     ;
003EF6  1  01 B5 EB C9  
003EFA  1  00 D0 04 A2  
003F08  1  C8                   INY                     ;
003F09  1  C0 09                CPY     #$09            ; IS DONE
003F0B  1  D0 E5                BNE     DOS65FCBPREP_1A ; NO, LOOP
003F0D  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
003F0F  1               DOS65FCBPREP_2:                 ; COPY FILE NAME PARAMETER INTO FCB
003F0F  1                       .IFDEF  DUODYNE
003F0F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003F13  1                       .ELSE
003F13  1                       JSR     LAB_IGBY        ; increment and scan memory
003F13  1                       .ENDIF
003F13  1               
003F13  1  F0 1E                BEQ     DOS65FCBPREP_3  ;
003F15  1  8B DA 48 A2          STAINDIRECTY FCBPTR     ;
003F19  1  01 B5 EB C9  
003F1D  1  00 D0 04 A2  
003F2B  1  C8                   INY                     ;
003F2C  1  C0 09                CPY     #$09            ;
003F2E  1  F0 03                BEQ     DOS65FCBPREP_3  ;
003F30  1  4C 0F 3F             JMP     DOS65FCBPREP_2  ;
003F33  1               DOS65FCBPREP_3:                 ;
003F33  1  18                   CLC
003F34  1  60                   RTS                     ;
003F35  1               
003F35  1               ;SUBROUTINES
003F35  1               ;OPEN FILE
003F35  1               OPNFIL:
003F35  1  A2 0F                LDX     #15
003F37  1  4C B7 3C             JMP     PEM
003F3A  1               ;CLOSE FILE
003F3A  1               CLSFIL:
003F3A  1  A2 10                LDX     #16
003F3C  1  4C B7 3C             JMP     PEM
003F3F  1               ;DELETE FILE
003F3F  1               DLTFIL:
003F3F  1  A2 13                LDX     #19
003F41  1  4C B7 3C             JMP     PEM
003F44  1               ;READ RECORD
003F44  1               RDERCR:
003F44  1  A2 14                LDX     #20
003F46  1  4C B7 3C             JMP     PEM
003F49  1               ;WRITE RECORD
003F49  1               WRTRCR:
003F49  1  A2 15                LDX     #21
003F4B  1  4C B7 3C             JMP     PEM
003F4E  1               ;CREATE FILE
003F4E  1               CRTFIL:
003F4E  1  A2 16                LDX     #22
003F50  1  4C B7 3C             JMP     PEM
003F53  1               ;RENAME FILE
003F53  1               RNMFIL:
003F53  1  A2 17                LDX     #23
003F55  1  4C B7 3C             JMP     PEM
003F58  1               ;SET BUFFER
003F58  1               SETBUF:
003F58  1  A2 1A                LDX     #26
003F5A  1  4C B7 3C             JMP     PEM
003F5D  1               
003F5D  1               
003F5D  1               VDOS65SAVE:
003F5D  1  BD 3C                .WORD   DOS65SAVE
003F5F  1               VDOS65LOAD:
003F5F  1  D9 3D                .WORD   DOS65LOAD
003F61  1               FILEERROR1:
003F61  1  2A 2A 20 4E          .BYTE   "** NO DRIVE SPECIFIED, OPERATION ABORTED"
003F65  1  4F 20 44 52  
003F69  1  49 56 45 20  
003F89  1  0D 0A 24             .BYTE   $0D,$0A,'$'
003F8C  1               FILEERROR2:
003F8C  1  2A 2A 20 44          .BYTE   "** DOS/65 ERROR, OPERATION ABORTED"
003F90  1  4F 53 2F 36  
003F94  1  35 20 45 52  
003FAE  1  0D 0A 24             .BYTE   $0D,$0A,'$'
003FB1  1               FCB:
003FB1  1               DOSDRIVE:
003FB1  1  00                   .BYTE   0               ; DRIVE NUMBER
003FB2  1               DOSFN:
003FB2  1  20 20 20 20          .BYTE   "        "      ; FILE NAME
003FB6  1  20 20 20 20  
003FBA  1               DOSEX:
003FBA  1  42 41 53             .BYTE   "BAS"           ; EXTENSION
003FBD  1               DOSET:
003FBD  1  00 00 00             .BYTE   0,0,0           ; EXTENT
003FC0  1               DOSNR:
003FC0  1  00                   .BYTE   0               ; NUMBER OF RECORDS IN FILE
003FC1  1               DOSBL:
003FC1  1  00 00 00 00          .BYTE   0,0,0,0,0,0,0,0 ; BLOCKS IN FILE
003FC5  1  00 00 00 00  
003FC9  1  00 00 00 00          .BYTE   0,0,0,0,0,0,0,0 ;
003FCD  1  00 00 00 00  
003FD1  1               DOSNX:
003FD1  1  00                   .BYTE   0               ; NEXT RECORD
003FD2  1               FCBBUFFER:
003FD2  1               ENDOFBASIC:
003FD2  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
003FD6  1  56 45 44 20  
003FDA  1  46 52 4F 4D  
003FE6  1               
003FE6  1               
003FE6  1               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
003FE6  1               
003FE6  1               Ibuffs          = (ENDOFBASIC & $FF00)+$181
003FE6  1               Ibuffe          = Ibuffs+$47    ; end of input buffer
003FE6  1               
003FE6  1               Ram_base        = (Ibuffe & $FF00)+$100; start of user RAM (set as needed, should be page aligned)
003FE6  1                       .IFDEF  DUODYNE
003FE6  1               Ram_top         = $D000         ; end of user RAM+1 (set as needed, should be page aligned)
003FE6  1                       .ELSE
003FE6  1               Ram_top         = $B800         ; end of user RAM+1 (set as needed, should be page aligned)
003FE6  1                       .ENDIF
003FE6  1               
003FE6  1               
003FE6  1               
003FE6  1                       .END
