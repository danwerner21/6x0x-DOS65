ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic.asm
Current file: dbasic.asm

000000r 1                       .INCLUDE "macro816.asm"
000000r 2                .IFDEF  DUODYNE
000000r 2               .P816
000000r 2               
000000r 2                       .MACRO  INDEX16         ; Set 16bit Index Registers
000000r 2                       REP     #$10            ; 16 bit Index registers
000000r 2                       .I16
000000r 2                       .ENDMACRO
000000r 2                       .MACRO  INDEX8          ; Set 8bit Index Registers
000000r 2                       SEP     #$10            ; 8 bit Index registers
000000r 2                       .I8
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ACCUMULATOR16   ; Set 16bit Index Registers
000000r 2                       REP     #$20            ; 16 bit Index registers
000000r 2                       .A16
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ACCUMULATOR8    ; Set 8bit Index Registers
000000r 2                       SEP     #$20            ; 8 bit Index registers
000000r 2                       .A8
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ACCUMULATORINDEX16; Set 16bit Index Registers
000000r 2                       REP     #$30            ; 16 bit Index registers
000000r 2                       .A16
000000r 2                       .I16
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ACCUMULATORINDEX8; Set 8bit Index Registers
000000r 2                       SEP     #$30            ; 8 bit Index registers
000000r 2                       .A8
000000r 2                       .I8
000000r 2                       .ENDMACRO
000000r 2               
000000r 2               
000000r 2                       .MACRO  LDAINDIRECTY PARM1
000000r 2                       PHB
000000r 2                       PHX
000000r 2                       LDX     #$01
000000r 2                       LDA     <PARM1,X
000000r 2                       CMP     #$00
000000r 2                       BNE     *+6
000000r 2                       LDX     #00
000000r 2                       PHX
000000r 2                       PLB
000000r 2                       PLX
000000r 2                       LDA     (<PARM1),Y      ;
000000r 2                       STA     <TMPFLG
000000r 2                       PLB
000000r 2                       LDA     <TMPFLG
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  STAINDIRECTY PARM1
000000r 2                       PHB
000000r 2                       PHX
000000r 2                       PHA
000000r 2                       LDX     #$01
000000r 2                       LDA     <PARM1,X
000000r 2                       CMP     #$00
000000r 2                       BNE     *+6
000000r 2                       LDX     #00
000000r 2                       PHX
000000r 2                       PLB
000000r 2                       PLA
000000r 2                       PLX
000000r 2                       STA     (<PARM1),Y      ;
000000r 2                       PLB
000000r 2                       STA     <TMPFLG
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  FETCHINDIRECTY PARM1
000000r 2                       PHB
000000r 2                       PHA
000000r 2                       PHX
000000r 2                       LDX     #$01
000000r 2                       LDA     <PARM1,X
000000r 2                       CMP     #$00
000000r 2                       BNE     *+6
000000r 2                       LDX     #00
000000r 2                       PHX
000000r 2                       PLB
000000r 2                       PLX
000000r 2                       LDA     (<PARM1),Y      ;
000000r 2                       STA     <TMPFLG
000000r 2                       PLA
000000r 2                       PLB
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  CMPINDIRECTY  PARM1
000000r 2                       PHB
000000r 2                       PHA
000000r 2                       PHX
000000r 2                       LDX     #$01
000000r 2                       LDA     <PARM1,X
000000r 2                       CMP     #$00
000000r 2                       BNE     *+6
000000r 2                       LDX     #00
000000r 2                       PHX
000000r 2                       PLB
000000r 2                       PLX
000000r 2                       LDA     (<PARM1),Y      ;
000000r 2                       STA     <TMPFLG
000000r 2                       PLA
000000r 2                       PLB
000000r 2                       CMP     <TMPFLG         ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ADCINDIRECTY  PARM1
000000r 2                       PHB
000000r 2                       PHA
000000r 2                       PHX
000000r 2                       LDX     #$01
000000r 2                       LDA     <PARM1,X
000000r 2                       CMP     #$00
000000r 2                       BNE     *+6
000000r 2                       LDX     #00
000000r 2                       PHX
000000r 2                       PLB
000000r 2                       PLX
000000r 2                       LDA     (<PARM1),Y      ;
000000r 2                       STA     <TMPFLG
000000r 2                       PLA
000000r 2                       PLB
000000r 2                       CLC
000000r 2                       ADC     <TMPFLG         ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ORAINDIRECTY  PARM1
000000r 2                       PHB
000000r 2                       PHA
000000r 2                       PHX
000000r 2                       LDX     #$01
000000r 2                       LDA     <PARM1,X
000000r 2                       CMP     #$00
000000r 2                       BNE     *+6
000000r 2                       LDX     #00
000000r 2                       PHX
000000r 2                       PLB
000000r 2                       PLX
000000r 2                       LDA     (<PARM1),Y      ;
000000r 2                       STA     <TMPFLG
000000r 2                       PLA
000000r 2                       PLB
000000r 2                       CLC
000000r 2                       ORA     <TMPFLG         ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBEQ  PARM1
000000r 2                       BNE     *+5
000000r 2                       JMP     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBNE PARM1
000000r 2                       BEQ     *+5
000000r 2                       JMP     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBCC  PARM1
000000r 2                       BCC     *+4
000000r 2                       BRA     *+5
000000r 2                       JMP     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBCS PARM1
000000r 2                       BCS     *+4
000000r 2                       BRA     *+5
000000r 2                       JMP     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .ELSE
000000r 2               
000000r 2                       .MACRO  LDAINDIRECTY PARM1
000000r 2                       LDA     (PARM1),Y       ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  STAINDIRECTY PARM1
000000r 2                       STA     (PARM1),Y       ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  FETCHINDIRECTY PARM1
000000r 2                       LDA     (PARM1),Y       ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  CMPINDIRECTY  PARM1
000000r 2                       CMP     (<PARM1),Y      ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ADCINDIRECTY  PARM1
000000r 2                       ADC     (PARM1),Y       ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  ORAINDIRECTY  PARM1
000000r 2                       ORA     (PARM1),Y       ;
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBEQ  PARM1
000000r 2                       BEQ     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBNE  PARM1
000000r 2                       BNE     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBCC  PARM1
000000r 2                       BCC     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .MACRO  LBCS PARM1
000000r 2                       BCS     PARM1
000000r 2                       .ENDMACRO
000000r 2               
000000r 2                       .ENDIF
000000r 2               
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.23  ADDED "KILL" COMMAND TO RETURN TO DOS/65
000000r 1               
000000r 1               ; zero page use ..
000000r 1               
000000r 1               LAB_WARM        = $00           ; BASIC warm start entry point
000000r 1               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
000000r 1               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
000000r 1               TMPFLG          = $04
000000r 1               Usrjmp          = $0A           ; USR function JMP address
000000r 1               Usrjpl          = Usrjmp+1      ; USR function JMP vector low byte
000000r 1               Usrjph          = Usrjmp+2      ; USR function JMP vector high byte
000000r 1               Nullct          = $0D           ; nulls output after each line
000000r 1               TPos            = $0E           ; BASIC terminal position byte
000000r 1               TWidth          = $0F           ; BASIC terminal width byte
000000r 1               Iclim           = $10           ; input column limit
000000r 1               Itempl          = $11           ; temporary integer low byte
000000r 1               Itemph          = Itempl+1      ; temporary integer high byte
000000r 1               
000000r 1               nums_1          = Itempl        ; number to bin/hex string convert MSB
000000r 1               nums_2          = nums_1+1      ; number to bin/hex string convert
000000r 1               nums_3          = nums_1+2      ; number to bin/hex string convert LSB
000000r 1               
000000r 1               Srchc           = $5B           ; search character
000000r 1               Temp3           = Srchc         ; temp byte used in number routines
000000r 1               Scnquo          = $5C           ; scan-between-quotes flag
000000r 1               Asrch           = Scnquo        ; alt search character
000000r 1               
000000r 1               XOAw_l          = Srchc         ; eXclusive OR, OR and AND word low byte
000000r 1               XOAw_h          = Scnquo        ; eXclusive OR, OR and AND word high byte
000000r 1               
000000r 1               Ibptr           = $5D           ; input buffer pointer
000000r 1               Dimcnt          = Ibptr         ; # of dimensions
000000r 1               Tindx           = Ibptr         ; token index
000000r 1               
000000r 1               Defdim          = $5E           ; default DIM flag
000000r 1               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
000000r 1               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
000000r 1               Gclctd          = $60           ; garbage collected flag
000000r 1               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
000000r 1               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
000000r 1               
000000r 1               Cflag           = $63           ; comparison evaluation flag
000000r 1               
000000r 1               TabSiz          = $64           ; TAB step size (was input flag)
000000r 1               
000000r 1               next_s          = $65           ; next descriptor stack address
000000r 1               
000000r 1               ; these two bytes form a word pointer to the item
000000r 1               ; currently on top of the descriptor stack
000000r 1               last_sl         = $66           ; last descriptor stack address low byte
000000r 1               last_sh         = $67           ; last descriptor stack address high byte (always $00)
000000r 1               
000000r 1               des_sk          = $68           ; descriptor stack start address (temp strings)
000000r 1               
000000r 1               ;			= $70		; End of descriptor stack
000000r 1               
000000r 1               ut1_pl          = $71           ; utility pointer 1 low byte
000000r 1               ut1_ph          = ut1_pl+1      ; utility pointer 1 high byte
000000r 1               ut2_pl          = $73           ; utility pointer 2 low byte
000000r 1               ut2_ph          = ut2_pl+1      ; utility pointer 2 high byte
000000r 1               
000000r 1               Temp_2          = ut1_pl        ; temp byte for block move
000000r 1               
000000r 1               FACt_1          = $75           ; FAC temp mantissa1
000000r 1               FACt_2          = FACt_1+1      ; FAC temp mantissa2
000000r 1               FACt_3          = FACt_2+1      ; FAC temp mantissa3
000000r 1               
000000r 1               dims_l          = FACt_2        ; array dimension size low byte
000000r 1               dims_h          = FACt_3        ; array dimension size high byte
000000r 1               
000000r 1               TempB           = $78           ; temp page 0 byte
000000r 1               
000000r 1               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
000000r 1               Smemh           = Smeml+1       ; start of mem high byte	(Start-of-Basic)
000000r 1               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
000000r 1               Svarh           = Svarl+1       ; start of vars high byte	(Start-of-Variables)
000000r 1               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
000000r 1               Sarryh          = Sarryl+1      ; var mem end high byte		(Start-of-Arrays)
000000r 1               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
000000r 1               Earryh          = Earryl+1      ; array mem end high byte	(End-of-Arrays)
000000r 1               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
000000r 1               Sstorh          = Sstorl+1      ; string storage high byte	(String storage (moving down))
000000r 1               Sutill          = $83           ; string utility ptr low byte
000000r 1               Sutilh          = Sutill+1      ; string utility ptr high byte
000000r 1               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
000000r 1               Ememh           = Ememl+1       ; end of mem high byte		(Limit-of-memory)
000000r 1               Clinel          = $87           ; current line low byte		(Basic line number)
000000r 1               Clineh          = Clinel+1      ; current line high byte	(Basic line number)
000000r 1               Blinel          = $89           ; break line low byte		(Previous Basic line number)
000000r 1               Blineh          = Blinel+1      ; break line high byte		(Previous Basic line number)
000000r 1               
000000r 1               Cpntrl          = $8B           ; continue pointer low byte
000000r 1               Cpntrh          = Cpntrl+1      ; continue pointer high byte
000000r 1               
000000r 1               Dlinel          = $8D           ; current DATA line low byte
000000r 1               Dlineh          = Dlinel+1      ; current DATA line high byte
000000r 1               
000000r 1               Dptrl           = $8F           ; DATA pointer low byte
000000r 1               Dptrh           = Dptrl+1       ; DATA pointer high byte
000000r 1               
000000r 1               Rdptrl          = $91           ; read pointer low byte
000000r 1               Rdptrh          = Rdptrl+1      ; read pointer high byte
000000r 1               
000000r 1               Varnm1          = $93           ; current var name 1st byte
000000r 1               Varnm2          = Varnm1+1      ; current var name 2nd byte
000000r 1               
000000r 1               Cvaral          = $95           ; current var address low byte
000000r 1               Cvarah          = Cvaral+1      ; current var address high byte
000000r 1               
000000r 1               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
000000r 1               Frnxth          = Frnxtl+1      ; var pointer for FOR/NEXT high byte
000000r 1               
000000r 1               Tidx1           = Frnxtl        ; temp line index
000000r 1               
000000r 1               Lvarpl          = Frnxtl        ; let var pointer low byte
000000r 1               Lvarph          = Frnxth        ; let var pointer high byte
000000r 1               
000000r 1               prstk           = $99           ; precedence stacked flag
000000r 1               
000000r 1               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
000000r 1               ; bit 2 set if >
000000r 1               ; bit 1 set if =
000000r 1               ; bit 0 set if <
000000r 1               
000000r 1               func_l          = $9C           ; function pointer low byte
000000r 1               func_h          = func_l+1      ; function pointer high byte
000000r 1               
000000r 1               garb_l          = func_l        ; garbage collection working pointer low byte
000000r 1               garb_h          = func_h        ; garbage collection working pointer high byte
000000r 1               
000000r 1               des_2l          = $9E           ; string descriptor_2 pointer low byte
000000r 1               des_2h          = des_2l+1      ; string descriptor_2 pointer high byte
000000r 1               
000000r 1               g_step          = $A0           ; garbage collect step size
000000r 1               
000000r 1               Fnxjmp          = $A1           ; jump vector for functions
000000r 1               Fnxjpl          = Fnxjmp+1      ; functions jump vector low byte
000000r 1               Fnxjph          = Fnxjmp+2      ; functions jump vector high byte
000000r 1               
000000r 1               g_indx          = Fnxjpl        ; garbage collect temp index
000000r 1               
000000r 1               FAC2_r          = $A3           ; FAC2 rounding byte
000000r 1               
000000r 1               Adatal          = $A4           ; array data pointer low byte
000000r 1               Adatah          = Adatal+1      ; array data pointer high  byte
000000r 1               
000000r 1               Nbendl          = Adatal        ; new block end pointer low byte
000000r 1               Nbendh          = Adatah        ; new block end pointer high  byte
000000r 1               
000000r 1               Obendl          = $A6           ; old block end pointer low byte
000000r 1               Obendh          = Obendl+1      ; old block end pointer high  byte
000000r 1               
000000r 1               numexp          = $A8           ; string to float number exponent count
000000r 1               expcnt          = $A9           ; string to float exponent count
000000r 1               
000000r 1               numbit          = numexp        ; bit count for array element calculations
000000r 1               
000000r 1               numdpf          = $AA           ; string to float decimal point flag
000000r 1               expneg          = $AB           ; string to float eval exponent -ve flag
000000r 1               
000000r 1               Astrtl          = numdpf        ; array start pointer low byte
000000r 1               Astrth          = expneg        ; array start pointer high  byte
000000r 1               
000000r 1               Histrl          = numdpf        ; highest string low byte
000000r 1               Histrh          = expneg        ; highest string high  byte
000000r 1               
000000r 1               Baslnl          = numdpf        ; BASIC search line pointer low byte
000000r 1               Baslnh          = expneg        ; BASIC search line pointer high  byte
000000r 1               
000000r 1               Fvar_l          = numdpf        ; find/found variable pointer low byte
000000r 1               Fvar_h          = expneg        ; find/found variable pointer high  byte
000000r 1               
000000r 1               Ostrtl          = numdpf        ; old block start pointer low byte
000000r 1               Ostrth          = expneg        ; old block start pointer high  byte
000000r 1               
000000r 1               Vrschl          = numdpf        ; variable search pointer low byte
000000r 1               Vrschh          = expneg        ; variable search pointer high  byte
000000r 1               
000000r 1               FAC1_e          = $AC           ; FAC1 exponent
000000r 1               FAC1_1          = FAC1_e+1      ; FAC1 mantissa1
000000r 1               FAC1_2          = FAC1_e+2      ; FAC1 mantissa2
000000r 1               FAC1_3          = FAC1_e+3      ; FAC1 mantissa3
000000r 1               FAC1_s          = FAC1_e+4      ; FAC1 sign (b7)
000000r 1               
000000r 1               str_ln          = FAC1_e        ; string length
000000r 1               str_pl          = FAC1_1        ; string pointer low byte
000000r 1               str_ph          = FAC1_2        ; string pointer high byte
000000r 1               
000000r 1               des_pl          = FAC1_2        ; string descriptor pointer low byte
000000r 1               des_ph          = FAC1_3        ; string descriptor pointer high byte
000000r 1               
000000r 1               mids_l          = FAC1_3        ; MID$ string temp length byte
000000r 1               
000000r 1               negnum          = $B1           ; string to float eval -ve flag
000000r 1               numcon          = $B1           ; series evaluation constant count
000000r 1               
000000r 1               FAC1_o          = $B2           ; FAC1 overflow byte
000000r 1               
000000r 1               FAC2_e          = $B3           ; FAC2 exponent
000000r 1               FAC2_1          = FAC2_e+1      ; FAC2 mantissa1
000000r 1               FAC2_2          = FAC2_e+2      ; FAC2 mantissa2
000000r 1               FAC2_3          = FAC2_e+3      ; FAC2 mantissa3
000000r 1               FAC2_s          = FAC2_e+4      ; FAC2 sign (b7)
000000r 1               
000000r 1               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
000000r 1               FAC1_r          = $B9           ; FAC1 rounding byte
000000r 1               
000000r 1               ssptr_l         = FAC_sc        ; string start pointer low byte
000000r 1               ssptr_h         = FAC1_r        ; string start pointer high byte
000000r 1               
000000r 1               sdescr          = FAC_sc        ; string descriptor pointer
000000r 1               
000000r 1               csidx           = $BA           ; line crunch save index
000000r 1               Asptl           = csidx         ; array size/pointer low byte
000000r 1               Aspth           = $BB           ; array size/pointer high byte
000000r 1               
000000r 1               Btmpl           = Asptl         ; BASIC pointer temp low byte
000000r 1               Btmph           = Aspth         ; BASIC pointer temp low byte
000000r 1               
000000r 1               Cptrl           = Asptl         ; BASIC pointer temp low byte
000000r 1               Cptrh           = Aspth         ; BASIC pointer temp low byte
000000r 1               
000000r 1               Sendl           = Asptl         ; BASIC pointer temp low byte
000000r 1               Sendh           = Aspth         ; BASIC pointer temp low byte
000000r 1               
000000r 1               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
000000r 1               
000000r 1               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
000000r 1               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
000000r 1               Bpntrh          = Bpntrl+1      ; BASIC execute (get byte) pointer high byte
000000r 1               Bpntrp          = Bpntrl+2      ; BASIC execute (get byte) pointer PAGE byte
000000r 1               ;		= $E0		; end of get BASIC char subroutine
000000r 1               Rbyte4          = $E1           ; extra PRNG byte
000000r 1               Rbyte1          = Rbyte4+1      ; most significant PRNG byte
000000r 1               Rbyte2          = Rbyte4+2      ; middle PRNG byte
000000r 1               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
000000r 1               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
000000r 1               ; bit	function
000000r 1               ; ===	========
000000r 1               ; 7	interrupt enabled
000000r 1               ; 6	interrupt setup
000000r 1               ; 5	interrupt happened
000000r 1               ;			= $E6		; NMI handler addr low byte
000000r 1               ;			= $E7		; NMI handler addr high byte
000000r 1               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
000000r 1               ;			= $E9		; IRQ handler addr low byte
000000r 1               ;			= $EA		; IRQ handler addr high byte
000000r 1               FCBPTR          = $20           ; POINTER TO FCB FOR FILE OPS
000000r 1               Decss           = $EF           ; number to decimal string start
000000r 1               Decssp1         = Decss+1       ; number to decimal string start
000000r 1               TEMPW           = $FD
000000r 1               ;			= $FF		; decimal string end
000000r 1               
000000r 1                       .IFDEF  DUODYNE
000000r 1               STACK_BOTTOM    = $4000         ; stack bottom, no offset
000000r 1               STACK           = $5FFF         ; stack top, no offset
000000r 1                       .ENDIF
000000r 1               
000000r 1               ; token values needed for BASIC
000000r 1               
000000r 1               ; primary command tokens (can start a statement)
000000r 1               
000000r 1               TK_END          = $80           ; END token
000000r 1               TK_FOR          = TK_END+1      ; FOR token
000000r 1               TK_NEXT         = TK_FOR+1      ; NEXT token
000000r 1               TK_DATA         = TK_NEXT+1     ; DATA token
000000r 1               TK_INPUT        = TK_DATA+1     ; INPUT token
000000r 1               TK_DIM          = TK_INPUT+1    ; DIM token
000000r 1               TK_READ         = TK_DIM+1      ; READ token
000000r 1               TK_LET          = TK_READ+1     ; LET token
000000r 1               TK_DEC          = TK_LET+1      ; DEC token
000000r 1               TK_GOTO         = TK_DEC+1      ; GOTO token
000000r 1               TK_RUN          = TK_GOTO+1     ; RUN token
000000r 1               TK_IF           = TK_RUN+1      ; IF token
000000r 1               TK_RESTORE      = TK_IF+1       ; RESTORE token
000000r 1               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
000000r 1               TK_RETIRQ       = TK_GOSUB+1    ; RETIRQ token
000000r 1               TK_RETNMI       = TK_RETIRQ+1   ; RETNMI token
000000r 1               TK_RETURN       = TK_RETNMI+1   ; RETURN token
000000r 1               TK_REM          = TK_RETURN+1   ; REM token
000000r 1               TK_STOP         = TK_REM+1      ; STOP token
000000r 1               TK_ON           = TK_STOP+1     ; ON token
000000r 1               TK_NULL         = TK_ON+1       ; NULL token
000000r 1               TK_INC          = TK_NULL+1     ; INC token
000000r 1               TK_WAIT         = TK_INC+1      ; WAIT token
000000r 1               TK_LOAD         = TK_WAIT+1     ; LOAD token
000000r 1               TK_SAVE         = TK_LOAD+1     ; SAVE token
000000r 1               TK_DEF          = TK_SAVE+1     ; DEF token
000000r 1               TK_POKE         = TK_DEF+1      ; POKE token
000000r 1               TK_DOKE         = TK_POKE+1     ; DOKE token
000000r 1               TK_CALL         = TK_DOKE+1     ; CALL token
000000r 1               TK_DO           = TK_CALL+1     ; DO token
000000r 1               TK_LOOP         = TK_DO+1       ; LOOP token
000000r 1               TK_PRINT        = TK_LOOP+1     ; PRINT token
000000r 1               TK_CONT         = TK_PRINT+1    ; CONT token
000000r 1               TK_LIST         = TK_CONT+1     ; LIST token
000000r 1               TK_CLEAR        = TK_LIST+1     ; CLEAR token
000000r 1               TK_NEW          = TK_CLEAR+1    ; NEW token
000000r 1               TK_WIDTH        = TK_NEW+1      ; WIDTH token
000000r 1               TK_GET          = TK_WIDTH+1    ; GET token
000000r 1               TK_SWAP         = TK_GET+1      ; SWAP token
000000r 1               TK_BITSET       = TK_SWAP+1     ; BITSET token
000000r 1               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
000000r 1               TK_IRQ          = TK_BITCLR+1   ; IRQ token
000000r 1               TK_NMI          = TK_IRQ+1      ; NMI token
000000r 1               TK_KILL         = TK_NMI+1      ; NMI token
000000r 1               
000000r 1               ; secondary command tokens, can't start a statement
000000r 1               
000000r 1               TK_TAB          = TK_KILL+1     ; TAB token
000000r 1               TK_ELSE         = TK_TAB+1      ; ELSE token
000000r 1               TK_TO           = TK_ELSE+1     ; TO token
000000r 1               TK_FN           = TK_TO+1       ; FN token
000000r 1               TK_SPC          = TK_FN+1       ; SPC token
000000r 1               TK_THEN         = TK_SPC+1      ; THEN token
000000r 1               TK_NOT          = TK_THEN+1     ; NOT token
000000r 1               TK_STEP         = TK_NOT+1      ; STEP token
000000r 1               TK_UNTIL        = TK_STEP+1     ; UNTIL token
000000r 1               TK_WHILE        = TK_UNTIL+1    ; WHILE token
000000r 1               TK_OFF          = TK_WHILE+1    ; OFF token
000000r 1               
000000r 1               ; opperator tokens
000000r 1               
000000r 1               TK_PLUS         = TK_OFF+1      ; + token
000000r 1               TK_MINUS        = TK_PLUS+1     ; - token
000000r 1               TK_MUL          = TK_MINUS+1    ; * token
000000r 1               TK_DIV          = TK_MUL+1      ; / token
000000r 1               TK_POWER        = TK_DIV+1      ; ^ token
000000r 1               TK_AND          = TK_POWER+1    ; AND token
000000r 1               TK_EOR          = TK_AND+1      ; EOR token
000000r 1               TK_OR           = TK_EOR+1      ; OR token
000000r 1               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
000000r 1               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
000000r 1               TK_GT           = TK_LSHIFT+1   ; > token
000000r 1               TK_EQUAL        = TK_GT+1       ; = token
000000r 1               TK_LT           = TK_EQUAL+1    ; < token
000000r 1               
000000r 1               ; functions tokens
000000r 1               
000000r 1               TK_SGN          = TK_LT+1       ; SGN token
000000r 1               TK_INT          = TK_SGN+1      ; INT token
000000r 1               TK_ABS          = TK_INT+1      ; ABS token
000000r 1               TK_USR          = TK_ABS+1      ; USR token
000000r 1               TK_FRE          = TK_USR+1      ; FRE token
000000r 1               TK_POS          = TK_FRE+1      ; POS token
000000r 1               TK_SQR          = TK_POS+1      ; SQR token
000000r 1               TK_RND          = TK_SQR+1      ; RND token
000000r 1               TK_LOG          = TK_RND+1      ; LOG token
000000r 1               TK_EXP          = TK_LOG+1      ; EXP token
000000r 1               TK_COS          = TK_EXP+1      ; COS token
000000r 1               TK_SIN          = TK_COS+1      ; SIN token
000000r 1               TK_TAN          = TK_SIN+1      ; TAN token
000000r 1               TK_ATN          = TK_TAN+1      ; ATN token
000000r 1               TK_PEEK         = TK_ATN+1      ; PEEK token
000000r 1               TK_DEEK         = TK_PEEK+1     ; DEEK token
000000r 1               TK_SADD         = TK_DEEK+1     ; SADD token
000000r 1               TK_LEN          = TK_SADD+1     ; LEN token
000000r 1               TK_STRS         = TK_LEN+1      ; STR$ token
000000r 1               TK_VAL          = TK_STRS+1     ; VAL token
000000r 1               TK_ASC          = TK_VAL+1      ; ASC token
000000r 1               TK_UCASES       = TK_ASC+1      ; UCASE$ token
000000r 1               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
000000r 1               TK_CHRS         = TK_LCASES+1   ; CHR$ token
000000r 1               TK_HEXS         = TK_CHRS+1     ; HEX$ token
000000r 1               TK_BINS         = TK_HEXS+1     ; BIN$ token
000000r 1               TK_BITTST       = TK_BINS+1     ; BITTST token
000000r 1               TK_MAX          = TK_BITTST+1   ; MAX token
000000r 1               TK_MIN          = TK_MAX+1      ; MIN token
000000r 1               TK_PI           = TK_MIN+1      ; PI token
000000r 1               TK_TWOPI        = TK_PI+1       ; TWOPI token
000000r 1               TK_VPTR         = TK_TWOPI+1    ; VARPTR token
000000r 1               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
000000r 1               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
000000r 1               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
000000r 1               
000000r 1               ; offsets from a base of X or Y
000000r 1               
000000r 1               PLUS_0          = $00           ; X or Y plus 0
000000r 1               PLUS_1          = $01           ; X or Y plus 1
000000r 1               PLUS_2          = $02           ; X or Y plus 2
000000r 1               PLUS_3          = $03           ; X or Y plus 3
000000r 1               
000000r 1               LAB_STAK        = $0100         ; stack bottom, no offset
000000r 1               
000000r 1               LAB_SKFE        = LAB_STAK+$FE
000000r 1               ; flushed stack address
000000r 1               LAB_SKFF        = LAB_STAK+$FF
000000r 1               ; flushed stack address
000000r 1               
000000r 1               ccflag          = $0600         ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
000000r 1               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
000000r 1               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
000000r 1               
000000r 1               VEC_CC          = ccnull+1      ; ctrl c check vector
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; This start can be changed to suit your system (TEA START)
000000r 1               
000000r 1                       .FEATURE labels_without_colons
000000r 1                       .SEGMENT "TEA"
000000r 1                       .ORG    $0800
000800  1               
000800  1               BASICBEGIN:
000800  1  AD 04 01             LDA     $0104
000803  1  8D 49 38             STA     PEMVEC
000806  1  AD 05 01             LDA     $0105
000809  1  8D 4A 38             STA     PEMVEC+1
00080C  1               
00080C  1               
00080C  1               LAB_COLD:
00080C  1  A0 04                LDY     #PG2_TABE-PG2_TABS-1
00080E  1               ; byte count-1
00080E  1               LAB_2D13:
00080E  1  B9 D0 30             LDA     PG2_TABS,Y      ; get byte
000811  1  99 00 06             STA     ccflag,Y        ; store in page 2
000814  1  88                   DEY                     ; decrement count
000815  1  10 F7                BPL     LAB_2D13        ; loop if not done
000817  1               
000817  1  A2 FF                LDX     #$FF            ; set byte
000819  1  86 88                STX     Clineh          ; set current line high byte (set immediate mode)
00081B  1               
00081B  1  A9 4C                LDA     #$4C            ; code for JMP
00081D  1  85 A1                STA     Fnxjmp          ; save for jump vector for functions
00081F  1               
00081F  1               ; copy block from LAB_2CEE to $00BC - $00D3
00081F  1               
00081F  1  A0 1D                LDY     #StrTab-LAB_2CEE; set byte count
000821  1               LAB_2D4E:
000821  1  BE D4 30             LDX     LAB_2CEE-1,Y    ; get byte from table
000824  1  96 BB                STX     LAB_IGBY-1,Y    ; save byte in page zero
000826  1  88                   DEY                     ; decrement count
000827  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
000829  1               
000829  1               ; copy block from StrTab to $0000 - $0012
000829  1               
000829  1               LAB_GMEM:
000829  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
00082B  1               TabLoop:
00082B  1  BE F2 30             LDX     StrTab,Y        ; get byte from table
00082E  1  96 00                STX     PLUS_0,Y        ; save byte in page zero
000830  1  88                   DEY                     ; decrement count
000831  1  10 F8                BPL     TabLoop         ; loop if not all done
000833  1               
000833  1               
000833  1                       .IFDEF  DUODYNE
000833  1  8B                   PHB
000834  1  68                   PLA
000835  1  85 C5                STA     Bpntrp          ; SET LAB_GBYT PAGE POINTER TO DATA BANK
000837  1                       .ELSE
000837  1                       TXS                     ; reset stack pointer
000837  1                       .ENDIF
000837  1               
000837  1               
000837  1               ; set-up start values
000837  1               
000837  1  A9 00                LDA     #$00            ; clear A
000839  1  85 E5                STA     NmiBase         ; clear NMI handler enabled flag
00083B  1  85 E8                STA     IrqBase         ; clear IRQ handler enabled flag
00083D  1  85 B2                STA     FAC1_o          ; clear FAC1 overflow byte
00083F  1  85 67                STA     last_sh         ; clear descriptor stack top item pointer high byte
000841  1               
000841  1  A9 0E                LDA     #$0E            ; set default tab size
000843  1  85 64                STA     TabSiz          ; save it
000845  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
000847  1  85 A0                STA     g_step          ; save it
000849  1  A2 68                LDX     #des_sk         ; descriptor stack start
00084B  1  86 65                STX     next_s          ; set descriptor stack pointer
00084D  1  20 50 12             JSR     LAB_CRLF        ; print CR/LF
000850  1               ;	LDA	#<LAB_MSZM		; point to memory size message (low addr)
000850  1               ;	LDY	#>LAB_MSZM		; point to memory size message (high addr)
000850  1               ;	JSR	LAB_18C3		; print null terminated string from memory
000850  1               ;	JSR	LAB_INLN		; print "? " and get BASIC input
000850  1               ;	STX	Bpntrl		; set BASIC execute pointer low byte
000850  1               ;	STY	Bpntrh		; set BASIC execute pointer high byte
000850  1               ;	JSR	LAB_GBYT		; get last byte back
000850  1               
000850  1               ;	BNE	LAB_2DAA		; branch if not null (user typed something)
000850  1               
000850  1  A0 00                LDY     #$00            ; else clear Y
000852  1               ; character was null so get memory size the hard way
000852  1               ; we get here with Y=0 and Itempl/h = Ram_base
000852  1               LAB_2D93:
000852  1  E6 11                INC     Itempl          ; increment temporary integer low byte
000854  1  D0 08                BNE     LAB_2D99        ; branch if no overflow
000856  1               
000856  1  E6 12                INC     Itemph          ; increment temporary integer high byte
000858  1  A5 12                LDA     Itemph          ; get high byte
00085A  1  C9 D0                CMP     #>Ram_top       ; compare with top of RAM+1
00085C  1  F0 63                BEQ     LAB_2DB6        ; branch if match (end of user RAM)
00085E  1               
00085E  1               LAB_2D99:
00085E  1  A9 55                LDA     #$55            ; set test byte
000860  1  8B DA 48 A2          STAINDIRECTY Itempl     ; save via temporary integer
000864  1  01 B5 11 C9  
000868  1  00 D0 04 A2  
000876  1  8B 48 DA A2          CMPINDIRECTY Itempl     ; compare via temporary integer
00087A  1  01 B5 11 C9  
00087E  1  00 D0 04 A2  
00088E  1  D0 31                BNE     LAB_2DB6        ; branch if fail
000890  1               
000890  1  0A                   ASL     A               ; shift test byte left (now $AA)
000891  1  8B DA 48 A2          STAINDIRECTY Itempl     ; save via temporary integer
000895  1  01 B5 11 C9  
000899  1  00 D0 04 A2  
0008A7  1  8B 48 DA A2          CMPINDIRECTY Itempl     ; compare via temporary integer
0008AB  1  01 B5 11 C9  
0008AF  1  00 D0 04 A2  
0008BF  1  F0 91                BEQ     LAB_2D93        ; if ok go do next byte
0008C1  1               
0008C1  1               ;	BNE	LAB_2DB6		; branch if fail
0008C1  1               
0008C1  1               ;LAB_2DAA
0008C1  1               ;	JSR	LAB_2887		; get FAC1 from string
0008C1  1               ;	LDA	FAC1_e		; get FAC1 exponent
0008C1  1               ;	CMP	#$98			; compare with exponent = 2^24
0008C1  1               ;	BCS	LAB_GMEM		; if too large go try again
0008C1  1               ;
0008C1  1               ;	JSR	LAB_F2FU		; save integer part of FAC1 in temporary integer
0008C1  1               ;					; (no range check)
0008C1  1               
0008C1  1               LAB_2DB6:
0008C1  1  A5 11                LDA     Itempl          ; get temporary integer low byte
0008C3  1  A4 12                LDY     Itemph          ; get temporary integer high byte
0008C5  1  C0 01                CPY     #<Ram_base+1    ; compare with start of RAM+$100 high byte
0008C7  1  90 02 80 03          LBCC    LAB_GMEM        ; if too small go try again
0008CB  1  4C 29 08     
0008CE  1               
0008CE  1               
0008CE  1               ; uncomment these lines if you want to check on the high limit of memory. Note if
0008CE  1               ; Ram_top is set too low then this will fail. default is ignore it and assume the
0008CE  1               ; users know what they're doing!
0008CE  1               
0008CE  1               ;	CPY	#>Ram_top		; compare with top of RAM high byte
0008CE  1               ;	BCC	MEM_OK		; branch if < RAM top
0008CE  1               
0008CE  1               ;	BNE	LAB_GMEM		; if too large go try again
0008CE  1               ; else was = so compare low bytes
0008CE  1               ;	CMP	#<Ram_top		; compare with top of RAM low byte
0008CE  1               ;	BEQ	MEM_OK		; branch if = RAM top
0008CE  1               
0008CE  1               ;	BCS	LAB_GMEM		; if too large go try again
0008CE  1               
0008CE  1               ;MEM_OK
0008CE  1  85 85                STA     Ememl           ; set end of mem low byte
0008D0  1  84 86                STY     Ememh           ; set end of mem high byte
0008D2  1  85 81                STA     Sstorl          ; set bottom of string space low byte
0008D4  1  84 82                STY     Sstorh          ; set bottom of string space high byte
0008D6  1               
0008D6  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
0008D8  1  A2 3C                LDX     #>Ram_base      ; set start addr high byte
0008DA  1  84 79                STY     Smeml           ; save start of mem low byte
0008DC  1  86 7A                STX     Smemh           ; save start of mem high byte
0008DE  1               
0008DE  1               ; this line is only needed if Ram_base is not $xx00
0008DE  1               
0008DE  1               ;	LDY	#$00			; clear Y
0008DE  1  98                   TYA                     ; clear A
0008DF  1  91 79                STA     (Smeml),Y       ; clear first byte
0008E1  1  E6 79                INC     Smeml           ; increment start of mem low byte
0008E3  1               
0008E3  1               ; these two lines are only needed if Ram_base is $xxFF
0008E3  1               
0008E3  1               ;	BNE	LAB_2E05		; branch if no rollover
0008E3  1               
0008E3  1               ;	INC	Smemh			; increment start of mem high byte
0008E3  1               LAB_2E05:
0008E3  1  20 50 12             JSR     LAB_CRLF        ; print CR/LF
0008E6  1  20 04 0C             JSR     LAB_1463        ; do "NEW" and "CLEAR"
0008E9  1  A5 85                LDA     Ememl           ; get end of mem low byte
0008EB  1  38                   SEC                     ; set carry for subtract
0008EC  1  E5 79                SBC     Smeml           ; subtract start of mem low byte
0008EE  1  AA                   TAX                     ; copy to X
0008EF  1  A5 86                LDA     Ememh           ; get end of mem high byte
0008F1  1  E5 7A                SBC     Smemh           ; subtract start of mem high byte
0008F3  1  20 EB 29             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
0008F6  1  A9 14                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
0008F8  1  A0 31                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
0008FA  1  20 98 12             JSR     LAB_18C3        ; print null terminated string from memory
0008FD  1  A9 01                LDA     #<LAB_1274      ; warm start vector low byte
0008FF  1  A0 0A                LDY     #>LAB_1274      ; warm start vector high byte
000901  1  85 01                STA     Wrmjpl          ; save warm start vector low byte
000903  1  84 02                STY     Wrmjph          ; save warm start vector high byte
000905  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
000908  1               
000908  1               ; open up space in memory
000908  1               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
000908  1               
000908  1               ; Nbendl,Nbendh - new block end address (A/Y)
000908  1               ; Obendl,Obendh - old block end address
000908  1               ; Ostrtl,Ostrth - old block start address
000908  1               
000908  1               ; returns with ..
000908  1               
000908  1               ; Nbendl,Nbendh - new block start address (high byte - $100)
000908  1               ; Obendl,Obendh - old block start address (high byte - $100)
000908  1               ; Ostrtl,Ostrth - old block start address (unchanged)
000908  1               
000908  1               LAB_11CF:
000908  1  20 B2 09             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
00090B  1               ; addr to check is in AY (low/high)
00090B  1  85 7F                STA     Earryl          ; save new array mem end low byte
00090D  1  84 80                STY     Earryh          ; save new array mem end high byte
00090F  1               
00090F  1               ; open up space in memory
00090F  1               ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
00090F  1               ; don't set array end
00090F  1               
00090F  1               LAB_11D6:
00090F  1  38                   SEC                     ; set carry for subtract
000910  1  A5 A6                LDA     Obendl          ; get block end low byte
000912  1  E5 AA                SBC     Ostrtl          ; subtract block start low byte
000914  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
000915  1  A5 A7                LDA     Obendh          ; get block end high byte
000917  1  E5 AB                SBC     Ostrth          ; subtract block start high byte
000919  1  AA                   TAX                     ; copy block length high byte to X
00091A  1  E8                   INX                     ; +1 to allow for count=0 exit
00091B  1  98                   TYA                     ; copy block length low byte to A
00091C  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
00091E  1               
00091E  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
00091E  1               
00091E  1  38                   SEC                     ; set carry for add + 1, two's complement
00091F  1  49 FF                EOR     #$FF            ; invert low byte for subtract
000921  1  65 A6                ADC     Obendl          ; add block end low byte
000923  1               
000923  1  85 A6                STA     Obendl          ; save corrected old block end low byte
000925  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
000927  1               
000927  1  C6 A7                DEC     Obendh          ; else decrement block end high byte
000929  1  38                   SEC                     ; set carry for add + 1, two's complement
00092A  1               LAB_11F3:
00092A  1  98                   TYA                     ; get MOD(block length/$100) byte
00092B  1  49 FF                EOR     #$FF            ; invert low byte for subtract
00092D  1  65 A4                ADC     Nbendl          ; add destination end low byte
00092F  1  85 A4                STA     Nbendl          ; save modified new block end low byte
000931  1  B0 30                BCS     LAB_1203        ; branch if no underflow
000933  1               
000933  1  C6 A5                DEC     Nbendh          ; else decrement block end high byte
000935  1  90 2C                BCC     LAB_1203        ; branch always
000937  1               
000937  1               LAB_11FF:
000937  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00093B  1  B5 A6 C9 00  
00093F  1  D0 04 A2 00  
00094D  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
000951  1  01 B5 A4 C9  
000955  1  00 D0 04 A2  
000963  1               LAB_1203:
000963  1  88                   DEY                     ; decrement index
000964  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
000966  1               
000966  1               ; now do Y=0 indexed byte
000966  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00096A  1  B5 A6 C9 00  
00096E  1  D0 04 A2 00  
00097C  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
000980  1  01 B5 A4 C9  
000984  1  00 D0 04 A2  
000992  1               LAB_120A:
000992  1  C6 A7                DEC     Obendh          ; decrement source pointer high byte
000994  1  C6 A5                DEC     Nbendh          ; decrement destination pointer high byte
000996  1  CA                   DEX                     ; decrement block count
000997  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
000999  1               
000999  1  60                   RTS
00099A  1               
00099A  1               ; check room on stack for A bytes
00099A  1               ; stack too deep? do OM error
00099A  1               
00099A  1               LAB_1212:
00099A  1                       .IFDEF  DUODYNE
00099A  1  C2 20                ACCUMULATOR16
00099C  1  29 FF 00             AND     #$00FF
00099F  1  18                   CLC
0009A0  1  69 00 40             ADC     #STACK_BOTTOM
0009A3  1  85 FD                STA     <TEMPW
0009A5  1  3B                   TSC
0009A6  1  C5 FD                CMP     <TEMPW
0009A8  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
0009AA  1  E2 20                ACCUMULATOR8
0009AC  1  60                   RTS
0009AD  1               LAB_1213:
0009AD  1  E2 20                ACCUMULATOR8
0009AF  1  4C E1 09             JMP     LAB_OMER
0009B2  1                       .ELSE
0009B2  1                       STA     TempB           ; save result in temp byte
0009B2  1                       TSX                     ; copy stack
0009B2  1                       CPX     TempB           ; compare new "limit" with stack
0009B2  1                       BCC     LAB_OMER        ; if stack < limit do "Out of memory" error then warm start
0009B2  1                       RTS
0009B2  1                       .ENDIF
0009B2  1               
0009B2  1               
0009B2  1               ; check available memory, "Out of memory" error if no room
0009B2  1               ; addr to check is in AY (low/high)
0009B2  1               
0009B2  1               LAB_121F:
0009B2  1  C4 82                CPY     Sstorh          ; compare bottom of string mem high byte
0009B4  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
0009B6  1               
0009B6  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
0009B8  1               
0009B8  1               ; high byte was =, now do low byte
0009B8  1  C5 81                CMP     Sstorl          ; compare with bottom of string mem low byte
0009BA  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
0009BC  1               
0009BC  1               ; addr is > string storage ptr (oops!)
0009BC  1               LAB_1229:
0009BC  1  48                   PHA                     ; push addr low byte
0009BD  1  A2 08                LDX     #$08            ; set index to save Adatal to expneg inclusive
0009BF  1  98                   TYA                     ; copy addr high byte (to push on stack)
0009C0  1               
0009C0  1               ; save misc numeric work area
0009C0  1               LAB_122D:
0009C0  1  48                   PHA                     ; push byte
0009C1  1  B5 A3                LDA     Adatal-1,X      ; get byte from Adatal to expneg ( ,$00 not pushed)
0009C3  1  CA                   DEX                     ; decrement index
0009C4  1  10 FA                BPL     LAB_122D        ; loop until all done
0009C6  1               
0009C6  1  20 17 1D             JSR     LAB_GARB        ; garbage collection routine
0009C9  1               
0009C9  1               ; restore misc numeric work area
0009C9  1  A2 00                LDX     #$00            ; clear the index to restore bytes
0009CB  1               LAB_1238:
0009CB  1  68                   PLA                     ; pop byte
0009CC  1  95 A4                STA     Adatal,X        ; save byte to Adatal to expneg
0009CE  1  E8                   INX                     ; increment index
0009CF  1  E0 08                CPX     #$08            ; compare with end + 1
0009D1  1  30 F8                BMI     LAB_1238        ; loop if more to do
0009D3  1               
0009D3  1  68                   PLA                     ; pop addr high byte
0009D4  1  A8                   TAY                     ; copy back to Y
0009D5  1  68                   PLA                     ; pop addr low byte
0009D6  1  C4 82                CPY     Sstorh          ; compare bottom of string mem high byte
0009D8  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
0009DA  1               
0009DA  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
0009DC  1               
0009DC  1               ; high byte was =, now do low byte
0009DC  1  C5 81                CMP     Sstorl          ; compare with bottom of string mem low byte
0009DE  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
0009E0  1               
0009E0  1               ; ok exit, carry clear
0009E0  1               LAB_124B:
0009E0  1  60                   RTS
0009E1  1               
0009E1  1               ; do "Out of memory" error then warm start
0009E1  1               
0009E1  1               LAB_OMER:
0009E1  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0009E3  1               
0009E3  1               ; do error #X, then warm start
0009E3  1               
0009E3  1               LAB_XERR:
0009E3  1  20 50 12             JSR     LAB_CRLF        ; print CR/LF
0009E6  1               
0009E6  1  BD 91 36             LDA     LAB_BAER,X      ; get error message pointer low byte
0009E9  1  BC 92 36             LDY     LAB_BAER+1,X    ; get error message pointer high byte
0009EC  1  20 98 12             JSR     LAB_18C3        ; print null terminated string from memory
0009EF  1               
0009EF  1  20 3D 0C             JSR     LAB_1491        ; flush stack and clear continue flag
0009F2  1  A9 CE                LDA     #<LAB_EMSG      ; point to " Error" low addr
0009F4  1  A0 37                LDY     #>LAB_EMSG      ; point to " Error" high addr
0009F6  1               LAB_1269:
0009F6  1  20 98 12             JSR     LAB_18C3        ; print null terminated string from memory
0009F9  1  A4 88                LDY     Clineh          ; get current line high byte
0009FB  1  C8                   INY                     ; increment it
0009FC  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
0009FE  1               
0009FE  1               ; else print line number
0009FE  1  20 E0 29             JSR     LAB_2953        ; print " in line [LINE #]"
000A01  1               
000A01  1               ; BASIC warm start entry point
000A01  1               ; wait for Basic command
000A01  1               
000A01  1               LAB_1274:
000A01  1               ; clear ON IRQ/NMI bytes
000A01  1  A9 00                LDA     #$00            ; clear A
000A03  1  85 E8                STA     IrqBase         ; clear enabled byte
000A05  1  85 E5                STA     NmiBase         ; clear enabled byte
000A07  1  A9 DF                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
000A09  1  A0 37                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
000A0B  1               
000A0B  1  20 98 12             JSR     LAB_18C3        ; go do print string
000A0E  1               
000A0E  1               ; wait for Basic command (no "Ready")
000A0E  1               
000A0E  1               LAB_127D:
000A0E  1  20 F8 0A             JSR     LAB_1357        ; call for BASIC input
000A11  1               LAB_1280:
000A11  1  86 C3                STX     Bpntrl          ; set BASIC execute pointer low byte
000A13  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
000A15  1                       .IFDEF  DUODYNE
000A15  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000A19  1                       .ELSE
000A19  1                       JSR     LAB_GBYT        ; scan memory
000A19  1                       .ENDIF
000A19  1  F0 F3                BEQ     LAB_127D        ; loop while null
000A1B  1               
000A1B  1               ; got to interpret input line now ..
000A1B  1               
000A1B  1  A2 FF                LDX     #$FF            ; current line to null value
000A1D  1  86 88                STX     Clineh          ; set current line high byte
000A1F  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
000A21  1               
000A21  1               ; no line number .. immediate mode
000A21  1  20 27 0B             JSR     LAB_13A6        ; crunch keywords into Basic tokens
000A24  1  4C B4 0D             JMP     LAB_15F6        ; go scan and interpret code
000A27  1               
000A27  1               ; handle new BASIC line
000A27  1               
000A27  1               LAB_1295:
000A27  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000A2A  1  20 27 0B             JSR     LAB_13A6        ; crunch keywords into Basic tokens
000A2D  1  84 5D                STY     Ibptr           ; save index pointer to end of crunched line
000A2F  1  20 D3 0B             JSR     LAB_SSLN        ; search BASIC for temp integer line number
000A32  1  90 44                BCC     LAB_12E6        ; branch if not found
000A34  1               
000A34  1               ; aroooogah! line # already exists! delete it
000A34  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
000A36  1  B1 AA                LDA     (Baslnl),Y      ; get next line pointer high byte
000A38  1  85 72                STA     ut1_ph          ; save it
000A3A  1  A5 7B                LDA     Svarl           ; get start of vars low byte
000A3C  1  85 71                STA     ut1_pl          ; save it
000A3E  1  A5 AB                LDA     Baslnh          ; get found line pointer high byte
000A40  1  85 74                STA     ut2_ph          ; save it
000A42  1  A5 AA                LDA     Baslnl          ; get found line pointer low byte
000A44  1  88                   DEY                     ; decrement index
000A45  1  F1 AA                SBC     (Baslnl),Y      ; subtract next line pointer low byte
000A47  1  18                   CLC                     ; clear carry for add
000A48  1  65 7B                ADC     Svarl           ; add start of vars low byte
000A4A  1  85 7B                STA     Svarl           ; save new start of vars low byte
000A4C  1  85 73                STA     ut2_pl          ; save destination pointer low byte
000A4E  1  A5 7C                LDA     Svarh           ; get start of vars high byte
000A50  1  69 FF                ADC     #$FF            ; -1 + carry
000A52  1  85 7C                STA     Svarh           ; save start of vars high byte
000A54  1  E5 AB                SBC     Baslnh          ; subtract found line pointer high byte
000A56  1  AA                   TAX                     ; copy to block count
000A57  1  38                   SEC                     ; set carry for subtract
000A58  1  A5 AA                LDA     Baslnl          ; get found line pointer low byte
000A5A  1  E5 7B                SBC     Svarl           ; subtract start of vars low byte
000A5C  1  A8                   TAY                     ; copy to bytes in first block count
000A5D  1  B0 03                BCS     LAB_12D0        ; branch if overflow
000A5F  1               
000A5F  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
000A60  1  C6 74                DEC     ut2_ph          ; decrement destination high byte
000A62  1               LAB_12D0:
000A62  1  18                   CLC                     ; clear carry for add
000A63  1  65 71                ADC     ut1_pl          ; add source pointer low byte
000A65  1  90 03                BCC     LAB_12D8        ; branch if no overflow
000A67  1               
000A67  1  C6 72                DEC     ut1_ph          ; else decrement source pointer high byte
000A69  1  18                   CLC                     ; clear carry
000A6A  1               
000A6A  1               ; close up memory to delete old line
000A6A  1               LAB_12D8:
000A6A  1  B1 71                LDA     (ut1_pl),Y      ; get byte from source
000A6C  1  91 73                STA     (ut2_pl),Y      ; copy to destination
000A6E  1  C8                   INY                     ; increment index
000A6F  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
000A71  1               
000A71  1  E6 72                INC     ut1_ph          ; increment source pointer high byte
000A73  1  E6 74                INC     ut2_ph          ; increment destination pointer high byte
000A75  1  CA                   DEX                     ; decrement block count
000A76  1  D0 F2                BNE     LAB_12D8        ; loop until all done
000A78  1               
000A78  1               ; got new line in buffer and no existing same #
000A78  1               LAB_12E6:
000A78  1  AD 81 3B             LDA     Ibuffs          ; get byte from start of input buffer
000A7B  1  D0 03 4C BF          LBEQ    LAB_1319        ; if null line just go flush stack/vars and exit
000A7F  1  0A           
000A80  1               
000A80  1               ; got new line and it isn't empty line
000A80  1  A5 85                LDA     Ememl           ; get end of mem low byte
000A82  1  A4 86                LDY     Ememh           ; get end of mem high byte
000A84  1  85 81                STA     Sstorl          ; set bottom of string space low byte
000A86  1  84 82                STY     Sstorh          ; set bottom of string space high byte
000A88  1  A5 7B                LDA     Svarl           ; get start of vars low byte	(end of BASIC)
000A8A  1  85 A6                STA     Obendl          ; save old block end low byte
000A8C  1  A4 7C                LDY     Svarh           ; get start of vars high byte	(end of BASIC)
000A8E  1  84 A7                STY     Obendh          ; save old block end high byte
000A90  1  65 5D                ADC     Ibptr           ; add input buffer pointer	(also buffer length)
000A92  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
000A94  1               
000A94  1  C8                   INY                     ; else increment high byte
000A95  1               LAB_1301:
000A95  1  85 A4                STA     Nbendl          ; save new block end low byte	(move to, low byte)
000A97  1  84 A5                STY     Nbendh          ; save new block end high byte
000A99  1  20 08 09             JSR     LAB_11CF        ; open up space in memory
000A9C  1               ; old start pointer Ostrtl,Ostrth set by the find line call
000A9C  1  A5 7F                LDA     Earryl          ; get array mem end low byte
000A9E  1  A4 80                LDY     Earryh          ; get array mem end high byte
000AA0  1  85 7B                STA     Svarl           ; save start of vars low byte
000AA2  1  84 7C                STY     Svarh           ; save start of vars high byte
000AA4  1  A4 5D                LDY     Ibptr           ; get input buffer pointer	(also buffer length)
000AA6  1  88                   DEY                     ; adjust for loop type
000AA7  1               LAB_1311:
000AA7  1  B9 7D 3B             LDA     Ibuffs-4,Y      ; get byte from crunched line
000AAA  1  91 AA                STA     (Baslnl),Y      ; save it to program memory
000AAC  1  88                   DEY                     ; decrement count
000AAD  1  C0 03                CPY     #$03            ; compare with first byte-1
000AAF  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
000AB1  1               
000AB1  1  A5 12                LDA     Itemph          ; get line # high byte
000AB3  1  91 AA                STA     (Baslnl),Y      ; save it to program memory
000AB5  1  88                   DEY                     ; decrement count
000AB6  1  A5 11                LDA     Itempl          ; get line # low byte
000AB8  1  91 AA                STA     (Baslnl),Y      ; save it to program memory
000ABA  1  88                   DEY                     ; decrement count
000ABB  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
000ABD  1               ; byte then a zero already here would stop the chain rebuild
000ABD  1               ; as it would think it was the [EOT] marker.
000ABD  1  91 AA                STA     (Baslnl),Y      ; save it to program memory
000ABF  1               
000ABF  1               LAB_1319:
000ABF  1  20 19 0C             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
000AC2  1  A6 79                LDX     Smeml           ; get start of mem low byte
000AC4  1  A5 7A                LDA     Smemh           ; get start of mem high byte
000AC6  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
000AC8  1               LAB_1325:
000AC8  1  86 71                STX     ut1_pl          ; set line start pointer low byte
000ACA  1  85 72                STA     ut1_ph          ; set line start pointer high byte
000ACC  1  B1 71                LDA     (ut1_pl),Y      ; get it
000ACE  1  F0 18                BEQ     LAB_133E        ; exit if end of program
000AD0  1               
000AD0  1               ; rebuild chaining of Basic lines
000AD0  1               
000AD0  1  A0 04                LDY     #$04            ; point to first code byte of line
000AD2  1               ; there is always 1 byte + [EOL] as null entries are deleted
000AD2  1               LAB_1330:
000AD2  1  C8                   INY                     ; next code byte
000AD3  1  B1 71                LDA     (ut1_pl),Y      ; get byte
000AD5  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
000AD7  1               
000AD7  1  38                   SEC                     ; set carry for add + 1
000AD8  1  98                   TYA                     ; copy end index
000AD9  1  65 71                ADC     ut1_pl          ; add to line start pointer low byte
000ADB  1  AA                   TAX                     ; copy to X
000ADC  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
000ADE  1  91 71                STA     (ut1_pl),Y      ; set next line pointer low byte
000AE0  1  98                   TYA                     ; clear A
000AE1  1  65 72                ADC     ut1_ph          ; add line start pointer high byte + carry
000AE3  1  C8                   INY                     ; increment index to high byte
000AE4  1  91 71                STA     (ut1_pl),Y      ; save next line pointer low byte
000AE6  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
000AE8  1               
000AE8  1               
000AE8  1               LAB_133E:
000AE8  1  4C 0E 0A             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
000AEB  1               
000AEB  1               ; print "? " and get BASIC input
000AEB  1               
000AEB  1               LAB_INLN:
000AEB  1  20 C4 12             JSR     LAB_18E3        ; print "?" character
000AEE  1  20 C1 12             JSR     LAB_18E0        ; print " "
000AF1  1  D0 05                BNE     LAB_1357        ; call for BASIC input and return
000AF3  1               
000AF3  1               ; receive line from keyboard
000AF3  1               
000AF3  1               ; $08 as delete key (BACKSPACE on standard keyboard)
000AF3  1               LAB_134B:
000AF3  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
000AF6  1  CA                   DEX                     ; decrement the buffer counter (delete)
000AF7  1  2C                   .BYTE   $2C             ; make LDX into BIT abs
000AF8  1               
000AF8  1               ; call for BASIC input (main entry point)
000AF8  1               
000AF8  1               LAB_1357:
000AF8  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
000AFA  1               LAB_1359:
000AFA  1  20 0D 38             JSR     V_INPT          ; call scan input device
000AFD  1  90 FB                BCC     LAB_1359        ; loop if no byte
000AFF  1               
000AFF  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
000AFF  1               
000AFF  1  C9 07                CMP     #$07            ; compare with [BELL]
000B01  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
000B03  1               
000B03  1  C9 0D                CMP     #$0D            ; compare with [CR]
000B05  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
000B07  1               
000B07  1  E0 00                CPX     #$00            ; compare pointer with $00
000B09  1  D0 04                BNE     LAB_1374        ; branch if not empty
000B0B  1               
000B0B  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
000B0B  1               
000B0B  1  C9 21                CMP     #$21            ; compare with [SP]+1
000B0D  1  90 EB                BCC     LAB_1359        ; if < ignore character
000B0F  1               
000B0F  1               LAB_1374:
000B0F  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
000B11  1  F0 E0                BEQ     LAB_134B        ; go delete last character
000B13  1               
000B13  1               LAB_1378:
000B13  1  E0 47                CPX     #Ibuffe-Ibuffs  ; compare character count with max
000B15  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
000B17  1               
000B17  1  9D 81 3B             STA     Ibuffs,X        ; else store in buffer
000B1A  1  E8                   INX                     ; increment pointer
000B1B  1               LAB_137F:
000B1B  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
000B1E  1  D0 DA                BNE     LAB_1359        ; always loop for next character
000B20  1               
000B20  1               LAB_1384:
000B20  1  4C 47 12             JMP     LAB_1866        ; do CR/LF exit to BASIC
000B23  1               
000B23  1               ; announce buffer full
000B23  1               
000B23  1               LAB_138E:
000B23  1  A9 07                LDA     #$07            ; [BELL] character into A
000B25  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
000B27  1               ; branch always
000B27  1               
000B27  1               ; crunch keywords into Basic tokens
000B27  1               ; position independent buffer version ..
000B27  1               ; faster, dictionary search version ....
000B27  1               
000B27  1               LAB_13A6:
000B27  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
000B29  1               
000B29  1  38                   SEC                     ; set carry for subtract
000B2A  1  A5 C3                LDA     Bpntrl          ; get basic execute pointer low byte
000B2C  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
000B2E  1  AA                   TAX                     ; copy result to X (index past line # if any)
000B2F  1               
000B2F  1  86 60                STX     Oquote          ; clear open quote/DATA flag
000B31  1               LAB_13AC:
000B31  1  BD 81 3B             LDA     Ibuffs,X        ; get byte from input buffer
000B34  1  F0 54                BEQ     LAB_13EC        ; if null save byte then exit
000B36  1               
000B36  1  C9 5F                CMP     #'_'            ; compare with "_"
000B38  1  B0 50                BCS     LAB_13EC        ; if >= go save byte then continue crunching
000B3A  1               
000B3A  1  C9 3C                CMP     #'<'            ; compare with "<"
000B3C  1  B0 11                BCS     LAB_13CC        ; if >= go crunch now
000B3E  1               
000B3E  1  C9 30                CMP     #'0'            ; compare with "0"
000B40  1  B0 48                BCS     LAB_13EC        ; if >= go save byte then continue crunching
000B42  1               
000B42  1  85 5C                STA     Scnquo          ; save buffer byte as search character
000B44  1  C9 22                CMP     #$22            ; is it quote character?
000B46  1  D0 03 4C AF          LBEQ    LAB_1410        ; branch if so (copy quoted string)
000B4A  1  0B           
000B4B  1               
000B4B  1  C9 2A                CMP     #'*'            ; compare with "*"
000B4D  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
000B4F  1               
000B4F  1               ; else crunch now
000B4F  1               LAB_13CC:
000B4F  1  24 60                BIT     Oquote          ; get open quote/DATA token flag
000B51  1  70 37                BVS     LAB_13EC        ; branch if b6 of Oquote set (was DATA)
000B53  1               ; go save byte then continue crunching
000B53  1               
000B53  1  86 78                STX     TempB           ; save buffer read index
000B55  1  84 BA                STY     csidx           ; copy buffer save index
000B57  1  A0 ED                LDY     #<TAB_1STC      ; get keyword first character table low address
000B59  1  84 73                STY     ut2_pl          ; save pointer low byte
000B5B  1  A0 32                LDY     #>TAB_1STC      ; get keyword first character table high address
000B5D  1  84 74                STY     ut2_ph          ; save pointer high byte
000B5F  1  A0 00                LDY     #$00            ; clear table pointer
000B61  1               
000B61  1               LAB_13D0:
000B61  1  D1 73                CMP     (ut2_pl),Y      ; compare with keyword first character table byte
000B63  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
000B65  1               
000B65  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
000B67  1               ; Y and save to crunched
000B67  1               
000B67  1  C8                   INY                     ; else increment pointer
000B68  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
000B6A  1               
000B6A  1               ; have matched first character of some keyword
000B6A  1               
000B6A  1               LAB_13D1:
000B6A  1  98                   TYA                     ; copy matching index
000B6B  1  0A                   ASL     A               ; *2 (bytes per pointer)
000B6C  1  AA                   TAX                     ; copy to new index
000B6D  1  BD 0C 33             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
000B70  1  85 73                STA     ut2_pl          ; save pointer low byte
000B72  1  BD 0D 33             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
000B75  1  85 74                STA     ut2_ph          ; save pointer high byte
000B77  1               
000B77  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
000B79  1               
000B79  1  A6 78                LDX     TempB           ; restore buffer read index
000B7B  1               
000B7B  1               LAB_13D6:
000B7B  1  C8                   INY                     ; next table byte
000B7C  1  B1 73                LDA     (ut2_pl),Y      ; get byte from table
000B7E  1               LAB_13D8:
000B7E  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
000B80  1               
000B80  1  E8                   INX                     ; next buffer byte
000B81  1  DD 81 3B             CMP     Ibuffs,X        ; compare with byte from input buffer
000B84  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
000B86  1               
000B86  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
000B88  1               
000B88  1               LAB_13EA:
000B88  1  A4 BA                LDY     csidx           ; restore save index
000B8A  1               
000B8A  1               ; save crunched to output
000B8A  1               LAB_13EC:
000B8A  1  E8                   INX                     ; increment buffer index (to next input byte)
000B8B  1  C8                   INY                     ; increment save index (to next output byte)
000B8C  1  99 81 3B             STA     Ibuffs,Y        ; save byte to output
000B8F  1  C9 00                CMP     #$00            ; set the flags, set carry
000B91  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
000B93  1               
000B93  1               ; A holds token or byte here
000B93  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
000B95  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
000B97  1               
000B97  1               ; A now holds token-$3A
000B97  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
000B99  1  D0 02                BNE     LAB_1401        ; branch if not DATA
000B9B  1               
000B9B  1               ; token was : or DATA
000B9B  1               LAB_13FF:
000B9B  1  85 60                STA     Oquote          ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
000B9D  1               LAB_1401:
000B9D  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
000B9F  1  F0 03 4C 31          LBNE    LAB_13AC        ; If wasn't REM then go crunch rest of line
000BA3  1  0B           
000BA4  1               
000BA4  1  85 5C                STA     Asrch           ; else was REM so set search for [EOL]
000BA6  1               
000BA6  1               ; loop for REM, "..." etc.
000BA6  1               LAB_1408:
000BA6  1  BD 81 3B             LDA     Ibuffs,X        ; get byte from input buffer
000BA9  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
000BAB  1               
000BAB  1  C5 5C                CMP     Asrch           ; compare with stored character
000BAD  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
000BAF  1               
000BAF  1               ; entry for copy string in quotes, don't crunch
000BAF  1               LAB_1410:
000BAF  1  C8                   INY                     ; increment buffer save index
000BB0  1  99 81 3B             STA     Ibuffs,Y        ; save byte to output
000BB3  1  E8                   INX                     ; increment buffer read index
000BB4  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
000BB6  1               
000BB6  1               ; not found keyword this go
000BB6  1               LAB_1417:
000BB6  1  A6 78                LDX     TempB           ; compare has failed, restore buffer index (start byte!)
000BB8  1               
000BB8  1               ; now find the end of this word in the table
000BB8  1               LAB_141B:
000BB8  1  B1 73                LDA     (ut2_pl),Y      ; get table byte
000BBA  1  08                   PHP                     ; save status
000BBB  1  C8                   INY                     ; increment table index
000BBC  1  28                   PLP                     ; restore byte status
000BBD  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
000BBF  1               
000BBF  1  B1 73                LDA     (ut2_pl),Y      ; get byte from keyword table
000BC1  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
000BC3  1               
000BC3  1               ; reached end of table with no match
000BC3  1  BD 81 3B             LDA     Ibuffs,X        ; restore byte from input buffer
000BC6  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
000BC8  1               ; go save byte in output and continue crunching
000BC8  1               
000BC8  1               ; reached [EOL]
000BC8  1               LAB_142A:
000BC8  1  C8                   INY                     ; increment pointer
000BC9  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
000BCA  1  99 81 3B             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
000BCD  1  C8                   INY                     ; adjust for line copy
000BCE  1  C8                   INY                     ; adjust for line copy
000BCF  1  C8                   INY                     ; adjust for line copy
000BD0  1  C6 C3                DEC     Bpntrl          ; allow for increment (change if buffer starts at $xxFF)
000BD2  1  60                   RTS
000BD3  1               
000BD3  1               ; search Basic for temp integer line number from start of mem
000BD3  1               
000BD3  1               LAB_SSLN:
000BD3  1  A5 79                LDA     Smeml           ; get start of mem low byte
000BD5  1  A6 7A                LDX     Smemh           ; get start of mem high byte
000BD7  1               
000BD7  1               ; search Basic for temp integer line number from AX
000BD7  1               ; returns carry set if found
000BD7  1               ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
000BD7  1               
000BD7  1               ; old 541 new 507
000BD7  1               
000BD7  1               LAB_SHLN:
000BD7  1  A0 01                LDY     #$01            ; set index
000BD9  1  85 AA                STA     Baslnl          ; save low byte as current
000BDB  1  86 AB                STX     Baslnh          ; save high byte as current
000BDD  1  B1 AA                LDA     (Baslnl),Y      ; get pointer high byte from addr
000BDF  1  F0 1F                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
000BE1  1               
000BE1  1  A0 03                LDY     #$03            ; set index to line # high byte
000BE3  1  B1 AA                LDA     (Baslnl),Y      ; get line # high byte
000BE5  1  88                   DEY                     ; decrement index (point to low byte)
000BE6  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000BE8  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
000BEA  1               
000BEA  1  B1 AA                LDA     (Baslnl),Y      ; get line # low byte
000BEC  1  C5 11                CMP     Itempl          ; compare with temporary integer low byte
000BEE  1               LAB_1455:
000BEE  1  B0 0E                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
000BF0  1               
000BF0  1               LAB_1456:
000BF0  1  88                   DEY                     ; decrement index to next line ptr high byte
000BF1  1  B1 AA                LDA     (Baslnl),Y      ; get next line pointer high byte
000BF3  1  AA                   TAX                     ; copy to X
000BF4  1  88                   DEY                     ; decrement index to next line ptr low byte
000BF5  1  B1 AA                LDA     (Baslnl),Y      ; get next line pointer low byte
000BF7  1  90 02 80 03          LBCC    LAB_SHLN        ; go search for line # in temp (Itempl/Itemph) from AX
000BFB  1  4C D7 0B     
000BFE  1               ; (carry always clear)
000BFE  1               
000BFE  1               LAB_145E:
000BFE  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
000C00  1               
000C00  1               LAB_145F:
000C00  1  18                   CLC                     ; clear found flag
000C01  1               LAB_1460:
000C01  1  60                   RTS
000C02  1               
000C02  1               ; perform NEW
000C02  1               
000C02  1               LAB_NEW:
000C02  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
000C04  1               
000C04  1               LAB_1463:
000C04  1  A9 00                LDA     #$00            ; clear A
000C06  1  A8                   TAY                     ; clear Y
000C07  1  91 79                STA     (Smeml),Y       ; clear first line, next line pointer, low byte
000C09  1  C8                   INY                     ; increment index
000C0A  1  91 79                STA     (Smeml),Y       ; clear first line, next line pointer, high byte
000C0C  1  18                   CLC                     ; clear carry
000C0D  1  A5 79                LDA     Smeml           ; get start of mem low byte
000C0F  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
000C11  1  85 7B                STA     Svarl           ; save start of vars low byte
000C13  1  A5 7A                LDA     Smemh           ; get start of mem high byte
000C15  1  69 00                ADC     #$00            ; add any carry
000C17  1  85 7C                STA     Svarh           ; save start of vars high byte
000C19  1               
000C19  1               ; reset execution to start, clear vars and flush stack
000C19  1               
000C19  1               LAB_1477:
000C19  1  18                   CLC                     ; clear carry
000C1A  1  A5 79                LDA     Smeml           ; get start of mem low byte
000C1C  1  69 FF                ADC     #$FF            ; -1
000C1E  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000C20  1  A5 7A                LDA     Smemh           ; get start of mem high byte
000C22  1  69 FF                ADC     #$FF            ; -1+carry
000C24  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
000C26  1               
000C26  1               ; "CLEAR" command gets here
000C26  1               
000C26  1               LAB_147A:
000C26  1  A5 85                LDA     Ememl           ; get end of mem low byte
000C28  1  A4 86                LDY     Ememh           ; get end of mem high byte
000C2A  1  85 81                STA     Sstorl          ; set bottom of string space low byte
000C2C  1  84 82                STY     Sstorh          ; set bottom of string space high byte
000C2E  1  A5 7B                LDA     Svarl           ; get start of vars low byte
000C30  1  A4 7C                LDY     Svarh           ; get start of vars high byte
000C32  1  85 7D                STA     Sarryl          ; save var mem end low byte
000C34  1  84 7E                STY     Sarryh          ; save var mem end high byte
000C36  1  85 7F                STA     Earryl          ; save array mem end low byte
000C38  1  84 80                STY     Earryh          ; save array mem end high byte
000C3A  1  20 0D 0E             JSR     LAB_161A        ; perform RESTORE command
000C3D  1               
000C3D  1               ; flush stack and clear continue flag
000C3D  1               
000C3D  1               LAB_1491:
000C3D  1                       .IFDEF  DUODYNE
000C3D  1  C2 30                ACCUMULATORINDEX16
000C3F  1  FA                   PLX                     ; pull return address low byte
000C40  1  A9 FF 5F             LDA     #STACK          ; get the stack address
000C43  1  1B                   TCS                     ; and set the stack to it
000C44  1  DA                   PHX
000C45  1  E2 30                ACCUMULATORINDEX8
000C47  1                       .ELSE
000C47  1                       LDX     #des_sk         ; set descriptor stack pointer
000C47  1                       STX     next_s          ; save descriptor stack pointer
000C47  1                       PLA                     ; pull return address low byte
000C47  1                       TAX                     ; copy return address low byte
000C47  1                       PLA                     ; pull return address high byte
000C47  1                       STX     LAB_SKFE        ; save to cleared stack
000C47  1                       STA     LAB_SKFF        ; save to cleared stack
000C47  1                       LDX     #$FD            ; new stack pointer
000C47  1                       TXS                     ; reset stack
000C47  1                       .ENDIF
000C47  1  A9 00                LDA     #$00            ; clear byte
000C49  1  85 8C                STA     Cpntrh          ; clear continue pointer high byte
000C4B  1  85 61                STA     Sufnxf          ; clear subscript/FNX flag
000C4D  1               LAB_14A6:
000C4D  1  60                   RTS
000C4E  1               
000C4E  1               ; perform CLEAR
000C4E  1               
000C4E  1               LAB_CLEAR:
000C4E  1  F0 D6                BEQ     LAB_147A        ; if no following token go do "CLEAR"
000C50  1               
000C50  1               ; else there was a following token (go do syntax error)
000C50  1  60                   RTS
000C51  1               
000C51  1               ; perform LIST [n][-m]
000C51  1               ; bigger, faster version (a _lot_ faster)
000C51  1               
000C51  1               LAB_LIST:
000C51  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
000C53  1               
000C53  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
000C55  1               
000C55  1  C9 B8                CMP     #TK_MINUS       ; compare with token for -
000C57  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
000C59  1               
000C59  1               ; LIST [[n][-m]]
000C59  1               ; this bit sets the n , if present, as the start and end
000C59  1               LAB_14BD:
000C59  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000C5C  1  20 D3 0B             JSR     LAB_SSLN        ; search BASIC for temp integer line number
000C5F  1               ; (pointer in Baslnl/Baslnh)
000C5F  1                       .IFDEF  DUODYNE
000C5F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000C63  1                       .ELSE
000C63  1                       JSR     LAB_GBYT        ; scan memory
000C63  1                       .ENDIF
000C63  1               
000C63  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
000C65  1               
000C65  1               ; this bit checks the - is present
000C65  1  C9 B8                CMP     #TK_MINUS       ; compare with token for -
000C67  1  D0 64                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
000C69  1               
000C69  1               ; LIST [n]-m
000C69  1               ; the - was there so set m as the end value
000C69  1                       .IFDEF  DUODYNE
000C69  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000C6D  1                       .ELSE
000C6D  1                       JSR     LAB_IGBY        ; increment and scan memory
000C6D  1                       .ENDIF
000C6D  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000C70  1  D0 5B                BNE     LAB_152B        ; exit if not ok
000C72  1               
000C72  1               LAB_14D4:
000C72  1  A5 11                LDA     Itempl          ; get temporary integer low byte
000C74  1  05 12                ORA     Itemph          ; OR temporary integer high byte
000C76  1  D0 06                BNE     LAB_14E2        ; branch if start set
000C78  1               
000C78  1  A9 FF                LDA     #$FF            ; set for -1
000C7A  1  85 11                STA     Itempl          ; set temporary integer low byte
000C7C  1  85 12                STA     Itemph          ; set temporary integer high byte
000C7E  1               LAB_14E2:
000C7E  1  A0 01                LDY     #$01            ; set index for line
000C80  1  84 60                STY     Oquote          ; clear open quote flag
000C82  1  20 50 12             JSR     LAB_CRLF        ; print CR/LF
000C85  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
000C87  1               ; pointer initially set by search at LAB_14BD
000C87  1  D0 03 4C CD          LBEQ    LAB_152B        ; if null all done so exit
000C8B  1  0C           
000C8C  1  20 D8 0D             JSR     LAB_1629        ; do CRTL-C check vector
000C8F  1               
000C8F  1  C8                   INY                     ; increment index for line
000C90  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
000C92  1  AA                   TAX                     ; copy to X
000C93  1  C8                   INY                     ; increment index
000C94  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
000C96  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000C98  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
000C9A  1               
000C9A  1  E4 11                CPX     Itempl          ; compare with temporary integer low byte
000C9C  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
000C9E  1               
000C9E  1               LAB_14FF:                       ; else ..
000C9E  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
000CA0  1               
000CA0  1               LAB_1501:
000CA0  1  84 97                STY     Tidx1           ; save index for line
000CA2  1  20 EB 29             JSR     LAB_295E        ; print XA as unsigned integer
000CA5  1  A9 20                LDA     #$20            ; space is the next character
000CA7  1               LAB_1508:
000CA7  1  A4 97                LDY     Tidx1           ; get index for line
000CA9  1  29 7F                AND     #$7F            ; mask top out bit of character
000CAB  1               LAB_150C:
000CAB  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
000CAE  1  C9 22                CMP     #$22            ; was it " character
000CB0  1  D0 06                BNE     LAB_1519        ; branch if not
000CB2  1               
000CB2  1               ; we are either entering or leaving a pair of quotes
000CB2  1  A5 60                LDA     Oquote          ; get open quote flag
000CB4  1  49 FF                EOR     #$FF            ; toggle it
000CB6  1  85 60                STA     Oquote          ; save it back
000CB8  1               LAB_1519:
000CB8  1  C8                   INY                     ; increment index
000CB9  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
000CBB  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
000CBD  1  A8                   TAY                     ; else clear index
000CBE  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
000CC0  1  AA                   TAX                     ; copy to X
000CC1  1  C8                   INY                     ; increment index
000CC2  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
000CC4  1  86 AA                STX     Baslnl          ; set pointer to line low byte
000CC6  1  85 AB                STA     Baslnh          ; set pointer to line high byte
000CC8  1  F0 03 4C 7E          LBNE    LAB_14E2        ; go do next line if not [EOT]
000CCC  1  0C           
000CCD  1               ; else ..
000CCD  1               LAB_152B:
000CCD  1  60                   RTS
000CCE  1               
000CCE  1               LAB_152E:
000CCE  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
000CD0  1               
000CD0  1               ; else was token byte so uncrunch it (maybe)
000CD0  1  24 60                BIT     Oquote          ; test the open quote flag
000CD2  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
000CD4  1               
000CD4  1  A2 34                LDX     #>LAB_KEYT      ; get table address high byte
000CD6  1  0A                   ASL     A               ; *2
000CD7  1  0A                   ASL     A               ; *4
000CD8  1  90 02                BCC     LAB_152F        ; branch if no carry
000CDA  1               
000CDA  1  E8                   INX                     ; else increment high byte
000CDB  1  18                   CLC                     ; clear carry for add
000CDC  1               LAB_152F:
000CDC  1  69 F5                ADC     #<LAB_KEYT      ; add low byte
000CDE  1  90 01                BCC     LAB_1530        ; branch if no carry
000CE0  1               
000CE0  1  E8                   INX                     ; else increment high byte
000CE1  1               LAB_1530:
000CE1  1  85 73                STA     ut2_pl          ; save table pointer low byte
000CE3  1  86 74                STX     ut2_ph          ; save table pointer high byte
000CE5  1  84 97                STY     Tidx1           ; save index for line
000CE7  1  A0 00                LDY     #$00            ; clear index
000CE9  1  B1 73                LDA     (<ut2_pl),Y     ; get length
000CEB  1  AA                   TAX                     ; copy length
000CEC  1  C8                   INY                     ; increment index
000CED  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
000CEF  1  CA                   DEX                     ; decrement length
000CF0  1  D0 03 4C A7          LBEQ    LAB_1508        ; if no more characters exit and print
000CF4  1  0C           
000CF5  1               
000CF5  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
000CF8  1  C8                   INY                     ; increment index
000CF9  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
000CFB  1  48                   PHA                     ; save it for now
000CFC  1  C8                   INY                     ; increment index
000CFD  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
000CFF  1  A0 00                LDY     #$00
000D01  1  85 74                STA     ut2_ph          ; save keyword pointer high byte
000D03  1  68                   PLA                     ; pull low byte
000D04  1  85 73                STA     ut2_pl          ; save keyword pointer low byte
000D06  1               LAB_1540:
000D06  1  B1 73                LDA     (<ut2_pl),Y     ; get character
000D08  1  CA                   DEX                     ; decrement character count
000D09  1  D0 03 4C A7          LBEQ    LAB_1508        ; if last character exit and print
000D0D  1  0C           
000D0E  1               
000D0E  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
000D11  1  C8                   INY                     ; increment index
000D12  1  D0 F2                BNE     LAB_1540        ; loop for next character
000D14  1               
000D14  1               ; perform FOR
000D14  1               
000D14  1               LAB_FOR:
000D14  1  A9 80                LDA     #$80            ; set FNX
000D16  1  85 61                STA     Sufnxf          ; set subscript/FNX flag
000D18  1  20 93 10             JSR     LAB_LET         ; go do LET
000D1B  1  68                   PLA                     ; pull return address
000D1C  1  68                   PLA                     ; pull return address
000D1D  1  A9 10                LDA     #$10            ; we need 16d bytes !
000D1F  1  20 9A 09             JSR     LAB_1212        ; check room on stack for A bytes
000D22  1  20 71 0F             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
000D25  1  18                   CLC                     ; clear carry for add
000D26  1  98                   TYA                     ; copy index to A
000D27  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000D29  1  48                   PHA                     ; push onto stack
000D2A  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
000D2C  1  69 00                ADC     #$00            ; add carry
000D2E  1  48                   PHA                     ; push onto stack
000D2F  1  A5 88                LDA     Clineh          ; get current line high byte
000D31  1  48                   PHA                     ; push onto stack
000D32  1  A5 87                LDA     Clinel          ; get current line low byte
000D34  1  48                   PHA                     ; push onto stack
000D35  1  A9 AE                LDA     #TK_TO          ; get "TO" token
000D37  1  20 35 16             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
000D3A  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
000D3D  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
000D40  1               ; else do type mismatch
000D40  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
000D42  1  09 7F                ORA     #$7F            ; set all non sign bits
000D44  1  25 AD                AND     FAC1_1          ; and FAC1 mantissa1
000D46  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
000D48  1  A9 53                LDA     #<LAB_159F      ; set return address low byte
000D4A  1  A0 0D                LDY     #>LAB_159F      ; set return address high byte
000D4C  1  85 71                STA     ut1_pl          ; save return address low byte
000D4E  1  84 72                STY     ut1_ph          ; save return address high byte
000D50  1  4C C7 15             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
000D53  1               
000D53  1               LAB_159F:
000D53  1  A9 BB                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
000D55  1  A0 31                LDY     #>LAB_259C      ; set 1 pointer high addr
000D57  1  20 C4 26             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
000D5A  1                       .IFDEF  DUODYNE
000D5A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000D5E  1                       .ELSE
000D5E  1                       JSR     LAB_GBYT        ; scan memory
000D5E  1                       .ENDIF
000D5E  1               
000D5E  1  C9 B3                CMP     #TK_STEP        ; compare with STEP token
000D60  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
000D62  1               
000D62  1               ;.was step so ..
000D62  1                       .IFDEF  DUODYNE
000D62  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000D66  1                       .ELSE
000D66  1                       JSR     LAB_IGBY        ; increment and scan memory
000D66  1                       .ENDIF
000D66  1               
000D66  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
000D69  1               ; else do type mismatch
000D69  1               LAB_15B3:
000D69  1  20 D0 27             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
000D6C  1  85 B0                STA     FAC1_s          ; set FAC1 sign (b7)
000D6E  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
000D6E  1               ; compare the FOR value and the TO value and return +1 if
000D6E  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
000D6E  1               ; here (+/-1) is then compared to that result and if they
000D6E  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
000D6E  1               ; the loop is done
000D6E  1  20 BC 15             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
000D71  1  A5 98                LDA     Frnxth          ; get var pointer for FOR/NEXT high byte
000D73  1  48                   PHA                     ; push on stack
000D74  1  A5 97                LDA     Frnxtl          ; get var pointer for FOR/NEXT low byte
000D76  1  48                   PHA                     ; push on stack
000D77  1  A9 81                LDA     #TK_FOR         ; get FOR token
000D79  1  48                   PHA                     ; push on stack
000D7A  1               
000D7A  1               ; interpreter inner loop
000D7A  1               
000D7A  1               LAB_15C2:
000D7A  1  20 D8 0D             JSR     LAB_1629        ; do CRTL-C check vector
000D7D  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
000D7F  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
000D81  1               
000D81  1  A6 88                LDX     Clineh          ; continue line is $FFxx for immediate mode
000D83  1               ; ($00xx for RUN from immediate mode)
000D83  1  E8                   INX                     ; increment it (now $00 if immediate mode)
000D84  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
000D86  1               
000D86  1  85 8B                STA     Cpntrl          ; save continue pointer low byte
000D88  1  84 8C                STY     Cpntrh          ; save continue pointer high byte
000D8A  1               LAB_15D1:
000D8A  1  A0 00                LDY     #$00            ; clear index
000D8C  1  B1 C3                LDA     (Bpntrl),Y      ; get next byte
000D8E  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
000D90  1               
000D90  1  C9 3A                CMP     #':'            ; compare with ":"
000D92  1  F0 20                BEQ     LAB_15F6        ; branch if = (statement separator)
000D94  1               
000D94  1               LAB_15D9:
000D94  1  4C 48 16             JMP     LAB_SNER        ; else syntax error then warm start
000D97  1               
000D97  1               ; have reached [EOL]
000D97  1               LAB_15DC:
000D97  1  A0 02                LDY     #$02            ; set index
000D99  1  B1 C3                LDA     (Bpntrl),Y      ; get next line pointer high byte
000D9B  1  18                   CLC                     ; clear carry for no "BREAK" message
000D9C  1  D0 03 4C FF          LBEQ    LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
000DA0  1  0D           
000DA1  1               ; marker)
000DA1  1               
000DA1  1  C8                   INY                     ; increment index
000DA2  1  B1 C3                LDA     (Bpntrl),Y      ; get line # low byte
000DA4  1  85 87                STA     Clinel          ; save current line low byte
000DA6  1  C8                   INY                     ; increment index
000DA7  1  B1 C3                LDA     (Bpntrl),Y      ; get line # high byte
000DA9  1  85 88                STA     Clineh          ; save current line high byte
000DAB  1  98                   TYA                     ; A now = 4
000DAC  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000DAE  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000DB0  1  90 02                BCC     LAB_15F6        ; branch if no overflow
000DB2  1               
000DB2  1  E6 C4                INC     Bpntrh          ; else increment BASIC execute pointer high byte
000DB4  1               LAB_15F6:
000DB4  1                       .IFDEF  DUODYNE
000DB4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000DB8  1                       .ELSE
000DB8  1                       JSR     LAB_IGBY        ; increment and scan memory
000DB8  1                       .ENDIF
000DB8  1               
000DB8  1               
000DB8  1               LAB_15F9:
000DB8  1  20 BE 0D             JSR     LAB_15FF        ; go interpret BASIC code from (Bpntrl)
000DBB  1               
000DBB  1               LAB_15FC:
000DBB  1  4C 7A 0D             JMP     LAB_15C2        ; loop
000DBE  1               
000DBE  1               ; interpret BASIC code from (Bpntrl)
000DBE  1               
000DBE  1               LAB_15FF:
000DBE  1  F0 5B                BEQ     LAB_1628        ; exit if zero [EOL]
000DC0  1               
000DC0  1               LAB_1602:
000DC0  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
000DC1  1  B0 03                BCS     LAB_1609        ; branch if was token
000DC3  1               
000DC3  1  4C 93 10             JMP     LAB_LET         ; else go do implied LET
000DC6  1               
000DC6  1               LAB_1609:
000DC6  1               TK_TABUSE       = (TK_TAB-$80)*2
000DC6  1  C9 58                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
000DC8  1  B0 CA                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
000DCA  1               ; only tokens before TAB can start a line
000DCA  1  A8                   TAY                     ; copy to index
000DCB  1  B9 E3 31             LDA     LAB_CTBL+1,Y    ; get vector high byte
000DCE  1  48                   PHA                     ; onto stack
000DCF  1  B9 E2 31             LDA     LAB_CTBL,Y      ; get vector low byte
000DD2  1  48                   PHA                     ; onto stack
000DD3  1                       .IFDEF  DUODYNE
000DD3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000DD7  1                       .ELSE
000DD7  1                       JSR     LAB_IGBY        ; increment and scan memory
000DD7  1                       .ENDIF
000DD7  1  60                   RTS
000DD8  1               ; then "return" to vector
000DD8  1               
000DD8  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
000DD8  1               ; key press is detected.
000DD8  1               
000DD8  1               LAB_1629:
000DD8  1                       .IFDEF  DUODYNE
000DD8  1  DA                   PHX
000DD9  1  A2 00                LDX     #$00
000DDB  1  FC 03 06             JSR     (VEC_CC,X)      ; ctrl c check vector
000DDE  1  FA                   PLX
000DDF  1  60                   RTS
000DE0  1                       .ELSE
000DE0  1                       JMP     (VEC_CC)        ; ctrl c check vector
000DE0  1                       .ENDIF
000DE0  1               
000DE0  1               
000DE0  1               ; if there was a key press it gets back here ..
000DE0  1               
000DE0  1               LAB_1636:
000DE0  1  C9 03                CMP     #$03            ; compare with CTRL-C
000DE2  1               
000DE2  1               ; perform STOP
000DE2  1               
000DE2  1               LAB_STOP:
000DE2  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
000DE4  1               ; else just END
000DE4  1               ; END
000DE4  1               
000DE4  1               LAB_END:
000DE4  1  18                   CLC                     ; clear the carry, indicate a normal program end
000DE5  1               LAB_163B:
000DE5  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
000DE7  1               
000DE7  1  A5 C4                LDA     Bpntrh          ; get the BASIC execute pointer high byte
000DE9  1  49 3B                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
000DEB  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
000DED  1               ; (can't continue in immediate mode)
000DED  1               
000DED  1               ; else ..
000DED  1  49 3B                EOR     #>Ibuffs        ; correct the bits
000DEF  1  A4 C3                LDY     Bpntrl          ; get BASIC execute pointer low byte
000DF1  1  84 8B                STY     Cpntrl          ; save continue pointer low byte
000DF3  1  85 8C                STA     Cpntrh          ; save continue pointer high byte
000DF5  1               LAB_1647:
000DF5  1  A5 87                LDA     Clinel          ; get current line low byte
000DF7  1  A4 88                LDY     Clineh          ; get current line high byte
000DF9  1  85 89                STA     Blinel          ; save break line low byte
000DFB  1  84 8A                STY     Blineh          ; save break line high byte
000DFD  1               LAB_164F:
000DFD  1  68                   PLA                     ; pull return address low
000DFE  1  68                   PLA                     ; pull return address high
000DFF  1               LAB_1651:
000DFF  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
000E01  1               
000E01  1               ; else ..
000E01  1  A9 C6                LDA     #<LAB_BMSG      ; point to "Break" low byte
000E03  1  A0 37                LDY     #>LAB_BMSG      ; point to "Break" high byte
000E05  1  4C F6 09             JMP     LAB_1269        ; print "Break" and do warm start
000E08  1               
000E08  1               LAB_165E:
000E08  1  4C 01 0A             JMP     LAB_1274        ; go do warm start
000E0B  1               
000E0B  1               ; perform RESTORE
000E0B  1               
000E0B  1               LAB_RESTORE:
000E0B  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
000E0D  1               
000E0D  1               LAB_161A:
000E0D  1  38                   SEC                     ; set carry for subtract
000E0E  1  A5 79                LDA     Smeml           ; get start of mem low byte
000E10  1  E9 01                SBC     #$01            ; -1
000E12  1  A4 7A                LDY     Smemh           ; get start of mem high byte
000E14  1  B0 01                BCS     LAB_1624        ; branch if no underflow
000E16  1               
000E16  1               LAB_uflow:
000E16  1  88                   DEY                     ; else decrement high byte
000E17  1               LAB_1624:
000E17  1  85 8F                STA     Dptrl           ; save DATA pointer low byte
000E19  1  84 90                STY     Dptrh           ; save DATA pointer high byte
000E1B  1               LAB_1628:
000E1B  1  60                   RTS
000E1C  1               
000E1C  1               ; is RESTORE n
000E1C  1               LAB_RESTOREn:
000E1C  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000E1F  1  20 74 0F             JSR     LAB_SNBL        ; scan for next BASIC line
000E22  1  A5 88                LDA     Clineh          ; get current line high byte
000E24  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000E26  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
000E28  1               
000E28  1  98                   TYA                     ; else copy line index to A
000E29  1  38                   SEC                     ; set carry (+1)
000E2A  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000E2C  1  A6 C4                LDX     Bpntrh          ; get BASIC execute pointer high byte
000E2E  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
000E30  1               
000E30  1  E8                   INX                     ; increment high byte
000E31  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
000E33  1               
000E33  1               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
000E33  1               
000E33  1               LAB_reset_search:
000E33  1  A5 79                LDA     Smeml           ; get start of mem low byte
000E35  1  A6 7A                LDX     Smemh           ; get start of mem high byte
000E37  1               
000E37  1               ; search for line # in temp (Itempl/Itemph) from (AX)
000E37  1               
000E37  1               LAB_go_search:
000E37  1               
000E37  1  20 D7 0B             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
000E3A  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
000E3C  1               
000E3C  1  4C 46 0F             JMP     LAB_16F7        ; else go do "Undefined statement" error
000E3F  1               
000E3F  1               LAB_line_found:
000E3F  1               ; carry already set for subtract
000E3F  1  A5 AA                LDA     Baslnl          ; get pointer low byte
000E41  1  E9 01                SBC     #$01            ; -1
000E43  1  A4 AB                LDY     Baslnh          ; get pointer high byte
000E45  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
000E47  1               
000E47  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
000E49  1               ; return (branch always)
000E49  1               
000E49  1               ; perform NULL
000E49  1               
000E49  1               LAB_NULL:
000E49  1  20 D0 21             JSR     LAB_GTBY        ; get byte parameter
000E4C  1  86 0D                STX     Nullct          ; save new NULL count
000E4E  1               LAB_167A:
000E4E  1  60                   RTS
000E4F  1               
000E4F  1               ; perform CONT
000E4F  1               
000E4F  1               LAB_CONT:
000E4F  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
000E51  1               
000E51  1  A4 8C                LDY     Cpntrh          ; get continue pointer high byte
000E53  1  D0 05                BNE     LAB_166C        ; go do continue if we can
000E55  1               
000E55  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
000E57  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
000E5A  1               
000E5A  1               ; we can continue so ..
000E5A  1               LAB_166C:
000E5A  1  A9 93                LDA     #TK_ON          ; set token for ON
000E5C  1  20 F1 2E             JSR     LAB_IRQ         ; set IRQ flags
000E5F  1  A9 93                LDA     #TK_ON          ; set token for ON
000E61  1  20 F4 2E             JSR     LAB_NMI         ; set NMI flags
000E64  1               
000E64  1  84 C4                STY     Bpntrh          ; save BASIC execute pointer high byte
000E66  1  A5 8B                LDA     Cpntrl          ; get continue pointer low byte
000E68  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000E6A  1  A5 89                LDA     Blinel          ; get break line low byte
000E6C  1  A4 8A                LDY     Blineh          ; get break line high byte
000E6E  1  85 87                STA     Clinel          ; set current line low byte
000E70  1  84 88                STY     Clineh          ; set current line high byte
000E72  1  60                   RTS
000E73  1               
000E73  1               ; perform RUN
000E73  1               
000E73  1               LAB_RUN:
000E73  1  D0 03                BNE     LAB_1696        ; branch if RUN n
000E75  1  4C 19 0C             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
000E78  1               ; return
000E78  1               
000E78  1               ; does RUN n
000E78  1               
000E78  1               LAB_1696:
000E78  1  20 26 0C             JSR     LAB_147A        ; go do "CLEAR"
000E7B  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
000E7D  1               
000E7D  1               ; perform DO
000E7D  1               
000E7D  1               LAB_DO:
000E7D  1  A9 05                LDA     #$05            ; need 5 bytes for DO
000E7F  1  20 9A 09             JSR     LAB_1212        ; check room on stack for A bytes
000E82  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
000E84  1  48                   PHA                     ; push on stack
000E85  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
000E87  1  48                   PHA                     ; push on stack
000E88  1  A5 88                LDA     Clineh          ; get current line high byte
000E8A  1  48                   PHA                     ; push on stack
000E8B  1  A5 87                LDA     Clinel          ; get current line low byte
000E8D  1  48                   PHA                     ; push on stack
000E8E  1  A9 9D                LDA     #TK_DO          ; token for DO
000E90  1  48                   PHA                     ; push on stack
000E91  1                       .IFDEF  DUODYNE
000E91  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000E95  1                       .ELSE
000E95  1                       JSR     LAB_GBYT        ; scan memory
000E95  1                       .ENDIF
000E95  1               
000E95  1  4C 7A 0D             JMP     LAB_15C2        ; go do interpreter inner loop
000E98  1               
000E98  1               ; perform GOSUB
000E98  1               
000E98  1               LAB_GOSUB:
000E98  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
000E9A  1  20 9A 09             JSR     LAB_1212        ; check room on stack for A bytes
000E9D  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
000E9F  1  48                   PHA                     ; push on stack
000EA0  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
000EA2  1  48                   PHA                     ; push on stack
000EA3  1  A5 88                LDA     Clineh          ; get current line high byte
000EA5  1  48                   PHA                     ; push on stack
000EA6  1  A5 87                LDA     Clinel          ; get current line low byte
000EA8  1  48                   PHA                     ; push on stack
000EA9  1  A9 8D                LDA     #TK_GOSUB       ; token for GOSUB
000EAB  1  48                   PHA                     ; push on stack
000EAC  1               LAB_16B0:
000EAC  1                       .IFDEF  DUODYNE
000EAC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000EB0  1                       .ELSE
000EB0  1                       JSR     LAB_GBYT        ; scan memory
000EB0  1                       .ENDIF
000EB0  1               
000EB0  1  20 B6 0E             JSR     LAB_GOTO        ; perform GOTO n
000EB3  1  4C 7A 0D             JMP     LAB_15C2        ; go do interpreter inner loop
000EB6  1               ; (can't RTS, we used the stack!)
000EB6  1               
000EB6  1               ; perform GOTO
000EB6  1               
000EB6  1               LAB_GOTO:
000EB6  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer
000EB9  1  20 74 0F             JSR     LAB_SNBL        ; scan for next BASIC line
000EBC  1  A5 88                LDA     Clineh          ; get current line high byte
000EBE  1  C5 12                CMP     Itemph          ; compare with temporary integer high byte
000EC0  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
000EC2  1               
000EC2  1  98                   TYA                     ; else copy line index to A
000EC3  1  38                   SEC                     ; set carry (+1)
000EC4  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000EC6  1  A6 C4                LDX     Bpntrh          ; get BASIC execute pointer high byte
000EC8  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
000ECA  1               
000ECA  1  E8                   INX                     ; increment high byte
000ECB  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
000ECD  1               
000ECD  1               ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
000ECD  1               
000ECD  1               LAB_16D0:
000ECD  1  A5 79                LDA     Smeml           ; get start of mem low byte
000ECF  1  A6 7A                LDX     Smemh           ; get start of mem high byte
000ED1  1               
000ED1  1               ; search for line # in temp (Itempl/Itemph) from (AX)
000ED1  1               
000ED1  1               LAB_16D4:
000ED1  1  20 D7 0B             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
000ED4  1  90 70                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
000ED6  1               ; (unspecified statement)
000ED6  1               
000ED6  1               ; carry already set for subtract
000ED6  1  A5 AA                LDA     Baslnl          ; get pointer low byte
000ED8  1  E9 01                SBC     #$01            ; -1
000EDA  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000EDC  1  A5 AB                LDA     Baslnh          ; get pointer high byte
000EDE  1  E9 00                SBC     #$00            ; subtract carry
000EE0  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
000EE2  1               LAB_16E5:
000EE2  1  60                   RTS
000EE3  1               
000EE3  1               LAB_DONOK:
000EE3  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
000EE5  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
000EE8  1               
000EE8  1               ; perform LOOP
000EE8  1               
000EE8  1               LAB_LOOP:
000EE8  1  A8                   TAY                     ; save following token
000EE9  1                       .IFDEF  DUODYNE
000EE9  1  A3 03                LDA     3,S             ; get token byte from stack
000EEB  1  C9 9D                CMP     #TK_DO          ; compare with DO token
000EED  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
000EEF  1               
000EEF  1               ; FIXUP STACK
000EEF  1  C2 10                INDEX16
000EF1  1  BA                   TSX
000EF2  1  E8                   INX                     ; dump calling routine return address
000EF3  1  E8                   INX                     ; dump calling routine return address
000EF4  1  9A                   TXS                     ; correct stack
000EF5  1  E2 10                INDEX8
000EF7  1                       .ELSE
000EF7  1                       TSX                     ; copy stack pointer
000EF7  1                       LDA     LAB_STAK+3,X    ; get token byte from stack
000EF7  1                       CMP     #TK_DO          ; compare with DO token
000EF7  1                       BNE     LAB_DONOK       ; branch if no matching DO
000EF7  1               
000EF7  1                       INX                     ; dump calling routine return address
000EF7  1                       INX                     ; dump calling routine return address
000EF7  1                       TXS                     ; correct stack
000EF7  1                       .ENDIF
000EF7  1  98                   TYA                     ; get saved following token back
000EF8  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
000EFA  1               ; (stack pointer in X)
000EFA  1               
000EFA  1  C9 3A                CMP     #':'            ; could be ':'
000EFC  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
000EFE  1               
000EFE  1  E9 B4                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
000F00  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
000F01  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
000F03  1               
000F03  1  CA                   DEX                     ; decrement result
000F04  1  D0 68                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
000F06  1               ; only if the token was WHILE will this fail
000F06  1               
000F06  1  CA                   DEX                     ; set invert result byte
000F07  1               DoRest:
000F07  1  86 98                STX     Frnxth          ; save invert result byte
000F09  1                       .IFDEF  DUODYNE
000F09  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000F0D  1                       .ELSE
000F0D  1                       JSR     LAB_IGBY        ; increment and scan memory
000F0D  1                       .ENDIF
000F0D  1               
000F0D  1  20 22 15             JSR     LAB_EVEX        ; evaluate expression
000F10  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
000F12  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
000F14  1               
000F14  1  A9 FF                LDA     #$FF            ; else set all bits
000F16  1               DoCmp:
000F16  1                       .IFNDEF DUODYNE
000F16  1                       TSX                     ; copy stack pointer
000F16  1                       .ENDIF
000F16  1  45 98                EOR     Frnxth          ; EOR with invert byte
000F18  1  D0 1B                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
000F1A  1               
000F1A  1               ; loop condition wasn't met so do it again
000F1A  1               LoopAlways:
000F1A  1  BD 02 01             LDA     LAB_STAK+2,X    ; get current line low byte
000F1D  1  85 87                STA     Clinel          ; save current line low byte
000F1F  1  BD 03 01             LDA     LAB_STAK+3,X    ; get current line high byte
000F22  1  85 88                STA     Clineh          ; save current line high byte
000F24  1  BD 04 01             LDA     LAB_STAK+4,X    ; get BASIC execute pointer low byte
000F27  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000F29  1  BD 05 01             LDA     LAB_STAK+5,X    ; get BASIC execute pointer high byte
000F2C  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
000F2E  1                       .IFDEF  DUODYNE
000F2E  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000F32  1                       .ELSE
000F32  1                       JSR     LAB_GBYT        ; scan memory
000F32  1                       .ENDIF
000F32  1               
000F32  1  4C 7A 0D             JMP     LAB_15C2        ; go do interpreter inner loop
000F35  1               
000F35  1               ; clear stack and back to interpreter loop
000F35  1               LoopDone:
000F35  1                       .IFDEF  DUODYNE
000F35  1  C2 10                INDEX16
000F37  1  BA                   TSX
000F38  1  E8                   INX                     ; dump DO token
000F39  1  E8                   INX                     ; dump current line low byte
000F3A  1  E8                   INX                     ; dump current line high byte
000F3B  1  E8                   INX                     ; dump BASIC execute pointer low byte
000F3C  1  E8                   INX                     ; dump BASIC execute pointer high byte
000F3D  1  9A                   TXS                     ; correct stack
000F3E  1  E2 10                INDEX8
000F40  1                       .ELSE
000F40  1                       INX                     ; dump DO token
000F40  1                       INX                     ; dump current line low byte
000F40  1                       INX                     ; dump current line high byte
000F40  1                       INX                     ; dump BASIC execute pointer low byte
000F40  1                       INX                     ; dump BASIC execute pointer high byte
000F40  1                       TXS                     ; correct stack
000F40  1                       .ENDIF
000F40  1  4C 60 0F             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
000F43  1               
000F43  1               ; do the return without gosub error
000F43  1               
000F43  1               LAB_16F4:
000F43  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
000F45  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
000F46  1               
000F46  1               LAB_16F7
000F46  1               ; do undefined statement error
000F46  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
000F48  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
000F4B  1               
000F4B  1               ; perform RETURN
000F4B  1               
000F4B  1               LAB_RETURN:
000F4B  1  D0 95                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
000F4D  1               
000F4D  1               LAB_16E8:
000F4D  1  68                   PLA                     ; dump calling routine return address
000F4E  1  68                   PLA                     ; dump calling routine return address
000F4F  1  68                   PLA                     ; pull token
000F50  1  C9 8D                CMP     #TK_GOSUB       ; compare with GOSUB token
000F52  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
000F54  1               
000F54  1               LAB_16FF:
000F54  1  68                   PLA                     ; pull current line low byte
000F55  1  85 87                STA     Clinel          ; save current line low byte
000F57  1  68                   PLA                     ; pull current line high byte
000F58  1  85 88                STA     Clineh          ; save current line high byte
000F5A  1  68                   PLA                     ; pull BASIC execute pointer low byte
000F5B  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000F5D  1  68                   PLA                     ; pull BASIC execute pointer high byte
000F5E  1  85 C4                STA     Bpntrh          ; save BASIC execute pointer high byte
000F60  1               
000F60  1               ; now do the DATA statement as we could be returning into
000F60  1               ; the middle of an ON <var> GOSUB n,m,p,q line
000F60  1               ; (the return address used by the DATA statement is the one
000F60  1               ; pushed before the GOSUB was executed!)
000F60  1               
000F60  1               ; perform DATA
000F60  1               
000F60  1               LAB_DATA:
000F60  1  20 71 0F             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
000F63  1               
000F63  1               ; set BASIC execute pointer
000F63  1               LAB_170F:
000F63  1  98                   TYA                     ; copy index to A
000F64  1  18                   CLC                     ; clear carry for add
000F65  1  65 C3                ADC     Bpntrl          ; add BASIC execute pointer low byte
000F67  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
000F69  1  90 02                BCC     LAB_1719        ; skip next if no carry
000F6B  1               
000F6B  1  E6 C4                INC     Bpntrh          ; else increment BASIC execute pointer high byte
000F6D  1               LAB_1719:
000F6D  1  60                   RTS
000F6E  1               
000F6E  1               LAB_16FC:
000F6E  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
000F71  1               
000F71  1               ; scan for next BASIC statement ([:] or [EOL])
000F71  1               ; returns Y as index to [:] or [EOL]
000F71  1               
000F71  1               LAB_SNBS:
000F71  1  A2 3A                LDX     #':'            ; set look for character = ":"
000F73  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
000F74  1               
000F74  1               ; scan for next BASIC line
000F74  1               ; returns Y as index to [EOL]
000F74  1               
000F74  1               LAB_SNBL:
000F74  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
000F76  1  A0 00                LDY     #$00            ; set search character = [EOL]
000F78  1  84 5C                STY     Asrch           ; store search character
000F7A  1               LAB_1725:
000F7A  1  8A                   TXA                     ; get alt search character
000F7B  1  45 5C                EOR     Asrch           ; toggle search character, effectively swap with $00
000F7D  1  85 5C                STA     Asrch           ; save swapped search character
000F7F  1               LAB_172D:
000F7F  1  B1 C3                LDA     (Bpntrl),Y      ; get next byte
000F81  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
000F83  1               
000F83  1  C5 5C                CMP     Asrch           ; compare with search character
000F85  1  F0 E6                BEQ     LAB_1719        ; exit if found
000F87  1               
000F87  1  C8                   INY                     ; increment index
000F88  1  C9 22                CMP     #$22            ; compare current character with open quote
000F8A  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
000F8C  1               
000F8C  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
000F8E  1               
000F8E  1               ; perform IF
000F8E  1               
000F8E  1               LAB_IF:
000F8E  1  20 22 15             JSR     LAB_EVEX        ; evaluate the expression
000F91  1                       .IFDEF  DUODYNE
000F91  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000F95  1                       .ELSE
000F95  1                       JSR     LAB_GBYT        ; scan memory
000F95  1                       .ENDIF
000F95  1               
000F95  1  C9 B1                CMP     #TK_THEN        ; compare with THEN token
000F97  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
000F99  1               
000F99  1               ; wasn't IF .. THEN so must be IF .. GOTO
000F99  1  C9 89                CMP     #TK_GOTO        ; compare with GOTO token
000F9B  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
000F9D  1               
000F9D  1  A6 C3                LDX     Bpntrl          ; save the basic pointer low byte
000F9F  1  A4 C4                LDY     Bpntrh          ; save the basic pointer high byte
000FA1  1                       .IFDEF  DUODYNE
000FA1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000FA5  1                       .ELSE
000FA5  1                       JSR     LAB_IGBY        ; increment and scan memory
000FA5  1                       .ENDIF
000FA5  1               
000FA5  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
000FA7  1               
000FA7  1  86 C3                STX     Bpntrl          ; restore the basic pointer low byte
000FA9  1  84 C4                STY     Bpntrh          ; restore the basic pointer high byte
000FAB  1               LAB_174B:
000FAB  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
000FAD  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
000FAF  1               
000FAF  1                       .IFDEF  DUODYNE
000FAF  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
000FB3  1                       .ELSE
000FB3  1                       JSR     LAB_IGBY        ; increment and scan memory
000FB3  1                       .ENDIF
000FB3  1               
000FB3  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
000FB5  1               
000FB5  1               LAB_174C:
000FB5  1  4C B6 0E             JMP     LAB_GOTO        ; else was numeric so do GOTO n
000FB8  1               
000FB8  1               ; is var or keyword
000FB8  1               LAB_174D:
000FB8  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
000FBA  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (Bpntrl)
000FBC  1               ; and return to this code to process any following code
000FBC  1               
000FBC  1  4C C0 0D             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (Bpntrl)
000FBF  1               ; but don't return here
000FBF  1               
000FBF  1               LAB_174G:
000FBF  1  20 BE 0D             JSR     LAB_15FF        ; interpret BASIC code from (Bpntrl)
000FC2  1               
000FC2  1               ; the IF was executed and there may be a following ELSE so the code needs to return
000FC2  1               ; here to check and ignore the ELSE if present
000FC2  1               
000FC2  1  A0 00                LDY     #$00            ; clear the index
000FC4  1  B1 C3                LDA     (Bpntrl),Y      ; get the next BASIC byte
000FC6  1  C9 AD                CMP     #TK_ELSE        ; compare it with the token for ELSE
000FC8  1  D0 03 4C 60          LBEQ    LAB_DATA        ; if ELSE ignore the following statement
000FCC  1  0F           
000FCD  1               
000FCD  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
000FCD  1               ; following ELSE will, correctly, cause a syntax error
000FCD  1               
000FCD  1  60                   RTS                     ; else return to the interpreter inner loop
000FCE  1               
000FCE  1               ; perform ELSE after IF
000FCE  1               
000FCE  1               LAB_174E:
000FCE  1  A0 00                LDY     #$00            ; clear the BASIC byte index
000FD0  1  A2 01                LDX     #$01            ; clear the nesting depth
000FD2  1               LAB_1750:
000FD2  1  C8                   INY                     ; increment the BASIC byte index
000FD3  1  B1 C3                LDA     (Bpntrl),Y      ; get the next BASIC byte
000FD5  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
000FD7  1               
000FD7  1  C9 8B                CMP     #TK_IF          ; compare the byte with the token for IF
000FD9  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
000FDB  1               
000FDB  1  E8                   INX                     ; else increment the nesting depth ..
000FDC  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
000FDE  1               
000FDE  1               LAB_1752:
000FDE  1  C9 AD                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
000FE0  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
000FE2  1               
000FE2  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
000FE3  1  D0 ED                BNE     LAB_1750        ; loop if still nested
000FE5  1               
000FE5  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
000FE6  1               
000FE6  1               ; found the matching ELSE, now do <{n|statement}>
000FE6  1               
000FE6  1               LAB_1753:
000FE6  1  98                   TYA                     ; else copy line index to A
000FE7  1  18                   CLC                     ; clear carry for add
000FE8  1  65 C3                ADC     Bpntrl          ; add the BASIC execute pointer low byte
000FEA  1  85 C3                STA     Bpntrl          ; save the BASIC execute pointer low byte
000FEC  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
000FEE  1               
000FEE  1  E6 C4                INC     Bpntrh          ; else increment the BASIC execute pointer high byte
000FF0  1               LAB_1754:
000FF0  1                       .IFDEF  DUODYNE
000FF0  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
000FF4  1                       .ELSE
000FF4  1                       JSR     LAB_GBYT        ; scan memory
000FF4  1                       .ENDIF
000FF4  1               
000FF4  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
000FF6  1               ; the code will return to the interpreter loop at the
000FF6  1               ; tail end of the GOTO <n>
000FF6  1               
000FF6  1  4C BE 0D             JMP     LAB_15FF        ; interpret BASIC code from (Bpntrl)
000FF9  1               ; the code will return to the interpreter loop at the
000FF9  1               ; tail end of the <statement>
000FF9  1               
000FF9  1               ; perform REM, skip (rest of) line
000FF9  1               
000FF9  1               LAB_REM:
000FF9  1  20 74 0F             JSR     LAB_SNBL        ; scan for next BASIC line
000FFC  1  4C 63 0F             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
000FFF  1               
000FFF  1               LAB_16FD:
000FFF  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
001002  1               
001002  1               ; perform ON
001002  1               
001002  1               LAB_ON:
001002  1  C9 A9                CMP     #TK_IRQ         ; was it IRQ token ?
001004  1  D0 03                BNE     LAB_NOIN        ; if not go check NMI
001006  1               
001006  1  4C 17 2F             JMP     LAB_SIRQ        ; else go set-up IRQ
001009  1               
001009  1               LAB_NOIN:
001009  1  C9 AA                CMP     #TK_NMI         ; was it NMI token ?
00100B  1  D0 03                BNE     LAB_NONM        ; if not go do normal ON command
00100D  1               
00100D  1  4C 1B 2F             JMP     LAB_SNMI        ; else go set-up NMI
001010  1               
001010  1               LAB_NONM:
001010  1  20 D0 21             JSR     LAB_GTBY        ; get byte parameter
001013  1  48                   PHA                     ; push GOTO/GOSUB token
001014  1  C9 8D                CMP     #TK_GOSUB       ; compare with GOSUB token
001016  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
001018  1               
001018  1  C9 89                CMP     #TK_GOTO        ; compare with GOTO token
00101A  1               LAB_1767:
00101A  1  D0 E3                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
00101C  1               
00101C  1               
00101C  1               ; next character was GOTO or GOSUB
00101C  1               
00101C  1               LAB_176B:
00101C  1  C6 AF                DEC     FAC1_3          ; decrement index (byte value)
00101E  1  D0 04                BNE     LAB_1773        ; branch if not zero
001020  1               
001020  1  68                   PLA                     ; pull GOTO/GOSUB token
001021  1  4C C0 0D             JMP     LAB_1602        ; go execute it
001024  1               
001024  1               LAB_1773:
001024  1                       .IFDEF  DUODYNE
001024  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001028  1                       .ELSE
001028  1                       JSR     LAB_IGBY        ; increment and scan memory
001028  1                       .ENDIF
001028  1               
001028  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
00102B  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
00102B  1               ; just BNE LAB_176B for the loop. should be quicker ..
00102B  1               ; no we can't, what if we meet a colon or [EOL]?)
00102B  1  C9 2C                CMP     #$2C            ; compare next character with ","
00102D  1  F0 ED                BEQ     LAB_176B        ; loop if ","
00102F  1               
00102F  1               LAB_177E:
00102F  1  68                   PLA                     ; else pull keyword token (run out of options)
001030  1               ; also dump +/-1 pointer low byte and exit
001030  1               LAB_177F:
001030  1  60                   RTS
001031  1               
001031  1               ; takes n * 106 + 11 cycles where n is the number of digits
001031  1               
001031  1               ; get fixed-point number into temp integer
001031  1               
001031  1               LAB_GFPN:
001031  1  A2 00                LDX     #$00            ; clear reg
001033  1  86 11                STX     Itempl          ; clear temporary integer low byte
001035  1               LAB_1785:
001035  1  86 12                STX     Itemph          ; save temporary integer high byte
001037  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
001039  1               ; not 0-9
001039  1               
001039  1  E0 19                CPX     #$19            ; compare high byte with $19
00103B  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
00103C  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
00103E  1               ; bit does *$0A, = 64000, compare at target will fail
00103E  1               ; and do syntax error
00103E  1               
00103E  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
001040  1  A8                   TAY                     ; copy binary digit
001041  1  A5 11                LDA     Itempl          ; get temporary integer low byte
001043  1  0A                   ASL     A               ; *2 low byte
001044  1  26 12                ROL     Itemph          ; *2 high byte
001046  1  0A                   ASL     A               ; *2 low byte
001047  1  26 12                ROL     Itemph          ; *2 high byte, *4
001049  1  65 11                ADC     Itempl          ; + low byte, *5
00104B  1  85 11                STA     Itempl          ; save it
00104D  1  8A                   TXA                     ; get high byte copy to A
00104E  1  65 12                ADC     Itemph          ; + high byte, *5
001050  1  06 11                ASL     Itempl          ; *2 low byte, *10d
001052  1  2A                   ROL     A               ; *2 high byte, *10d
001053  1  AA                   TAX                     ; copy high byte back to X
001054  1  98                   TYA                     ; get binary digit back
001055  1  65 11                ADC     Itempl          ; add number low byte
001057  1  85 11                STA     Itempl          ; save number low byte
001059  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
00105B  1               
00105B  1  E8                   INX                     ; else increment high byte
00105C  1               LAB_17B3:
00105C  1                       .IFDEF  DUODYNE
00105C  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001060  1                       .ELSE
001060  1                       JSR     LAB_IGBY        ; increment and scan memory
001060  1                       .ENDIF
001060  1               
001060  1  4C 35 10             JMP     LAB_1785        ; loop for next character
001063  1               
001063  1               ; perform DEC
001063  1               
001063  1               LAB_DEC:
001063  1  A9 BF                LDA     #<LAB_2AFD      ; set -1 pointer low byte
001065  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
001066  1               
001066  1               ; perform INC
001066  1               
001066  1               LAB_INC:
001066  1  A9 BB                LDA     #<LAB_259C      ; set 1 pointer low byte
001068  1               LAB_17B5:
001068  1  48                   PHA                     ; save +/-1 pointer low byte
001069  1               LAB_17B7:
001069  1  20 1F 18             JSR     LAB_GVAR        ; get var address
00106C  1  A6 5F                LDX     Dtypef          ; get data type flag, $FF=string, $00=numeric
00106E  1  30 20                BMI     IncrErr         ; exit if string
001070  1               
001070  1  85 97                STA     Lvarpl          ; save var address low byte
001072  1  84 98                STY     Lvarph          ; save var address high byte
001074  1  20 C4 26             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
001077  1  68                   PLA                     ; get +/-1 pointer low byte
001078  1  48                   PHA                     ; save +/-1 pointer low byte
001079  1  A0 31                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
00107B  1  20 AF 23             JSR     LAB_246C        ; add (AY) to FAC1
00107E  1  20 3A 27             JSR     LAB_PFAC        ; pack FAC1 into variable (Lvarpl)
001081  1               
001081  1                       .IFDEF  DUODYNE
001081  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001085  1                       .ELSE
001085  1                       JSR     LAB_GBYT        ; scan memory
001085  1                       .ENDIF
001085  1               
001085  1  C9 2C                CMP     #','            ; compare with ","
001087  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
001089  1               
001089  1               ; was "," so another INCR variable to do
001089  1                       .IFDEF  DUODYNE
001089  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00108D  1                       .ELSE
00108D  1                       JSR     LAB_IGBY        ; increment and scan memory
00108D  1                       .ENDIF
00108D  1               
00108D  1  4C 69 10             JMP     LAB_17B7        ; go do next var
001090  1               
001090  1               IncrErr:
001090  1  4C 1D 15             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
001093  1               
001093  1               ; perform LET
001093  1               
001093  1               LAB_LET:
001093  1  20 1F 18             JSR     LAB_GVAR        ; get var address
001096  1  85 97                STA     Lvarpl          ; save var address low byte
001098  1  84 98                STY     Lvarph          ; save var address high byte
00109A  1  A9 C2                LDA     #TK_EQUAL       ; get = token
00109C  1  20 35 16             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
00109F  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
0010A1  1  48                   PHA                     ; push data type flag
0010A2  1  20 22 15             JSR     LAB_EVEX        ; evaluate expression
0010A5  1  68                   PLA                     ; pop data type flag
0010A6  1  2A                   ROL     A               ; set carry if type = string
0010A7  1  20 14 15             JSR     LAB_CKTM        ; type match check, set C for string
0010AA  1  D0 03                BNE     LAB_17D5        ; branch if string
0010AC  1               
0010AC  1  4C 3A 27             JMP     LAB_PFAC        ; pack FAC1 into variable (Lvarpl) and return
0010AF  1               
0010AF  1               ; string LET
0010AF  1               
0010AF  1               LAB_17D5:
0010AF  1  A0 02                LDY     #$02            ; set index to pointer high byte
0010B1  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
0010B5  1  B5 AE C9 00  
0010B9  1  D0 04 A2 00  
0010C7  1  C5 82                CMP     Sstorh          ; compare bottom of string space high byte
0010C9  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
0010CB  1               
0010CB  1  D0 1B                BNE     LAB_17E6        ; branch if >
0010CD  1               ; else was equal so compare low bytes
0010CD  1  88                   DEY                     ; decrement index
0010CE  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
0010D2  1  B5 AE C9 00  
0010D6  1  D0 04 A2 00  
0010E4  1  C5 81                CMP     Sstorl          ; compare bottom of string space low byte
0010E6  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
0010E8  1               
0010E8  1               ; pointer was >= to bottom of string space pointer
0010E8  1               LAB_17E6:
0010E8  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
0010EA  1  C4 7C                CPY     Svarh           ; compare start of vars high byte
0010EC  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
0010EE  1               
0010EE  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
0010F0  1               
0010F0  1               ; else high bytes were equal so ..
0010F0  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0010F2  1  C5 7B                CMP     Svarl           ; compare start of vars low byte
0010F4  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
0010F6  1               
0010F6  1               LAB_17F4:
0010F6  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0010F8  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
0010FA  1  4C 27 11             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
0010FD  1               
0010FD  1               ; make space and copy string
0010FD  1               LAB_17FB:
0010FD  1  A0 00                LDY     #$00            ; index to length
0010FF  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
001103  1  B5 AE C9 00  
001107  1  D0 04 A2 00  
001115  1  20 56 1C             JSR     LAB_209C        ; copy string
001118  1  A5 9E                LDA     des_2l          ; get descriptor pointer low byte
00111A  1  A4 9F                LDY     des_2h          ; get descriptor pointer high byte
00111C  1  85 B8                STA     ssptr_l         ; save descriptor pointer low byte
00111E  1  84 B9                STY     ssptr_h         ; save descriptor pointer high byte
001120  1  20 B6 1E             JSR     LAB_228A        ; copy string from descriptor (sdescr) to (Sutill)
001123  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
001125  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
001127  1               
001127  1               ; clean stack and assign value to string variable
001127  1               LAB_1811:
001127  1  85 9E                STA     des_2l          ; save descriptor_2 pointer low byte
001129  1  84 9F                STY     des_2h          ; save descriptor_2 pointer high byte
00112B  1  20 B8 1F             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
00112E  1  A0 00                LDY     #$00            ; index to length
001130  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
001134  1  B5 9E C9 00  
001138  1  D0 04 A2 00  
001146  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
00114A  1  01 B5 97 C9  
00114E  1  00 D0 04 A2  
00115C  1  C8                   INY                     ; index to string pointer low byte
00115D  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
001161  1  B5 9E C9 00  
001165  1  D0 04 A2 00  
001173  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
001177  1  01 B5 97 C9  
00117B  1  00 D0 04 A2  
001189  1  C8                   INY                     ; index to string pointer high byte
00118A  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
00118E  1  B5 9E C9 00  
001192  1  D0 04 A2 00  
0011A0  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
0011A4  1  01 B5 97 C9  
0011A8  1  00 D0 04 A2  
0011B6  1  60                   RTS
0011B7  1               
0011B7  1               ; perform GET
0011B7  1               
0011B7  1               LAB_GET:
0011B7  1  20 1F 18             JSR     LAB_GVAR        ; get var address
0011BA  1  85 97                STA     Lvarpl          ; save var address low byte
0011BC  1  84 98                STY     Lvarph          ; save var address high byte
0011BE  1  20 DD 2E             JSR     INGET           ; get input byte
0011C1  1  A6 5F                LDX     Dtypef          ; get data type flag, $FF=string, $00=numeric
0011C3  1  30 07                BMI     LAB_GETS        ; go get string character
0011C5  1               
0011C5  1               ; was numeric get
0011C5  1  A8                   TAY                     ; copy character to Y
0011C6  1  20 FA 1A             JSR     LAB_1FD0        ; convert Y to byte in FAC1
0011C9  1  4C 3A 27             JMP     LAB_PFAC        ; pack FAC1 into variable (Lvarpl) and return
0011CC  1               
0011CC  1               LAB_GETS:
0011CC  1  48                   PHA                     ; save character
0011CD  1  A9 01                LDA     #$01            ; string is single byte
0011CF  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
0011D1  1               
0011D1  1  68                   PLA                     ; string is null
0011D2  1               LAB_IsByte:
0011D2  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
0011D5  1               ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
0011D5  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
0011D7  1               
0011D7  1  68                   PLA                     ; get character back
0011D8  1  A0 00                LDY     #$00            ; clear index
0011DA  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
0011DE  1  01 B5 AD C9  
0011E2  1  00 D0 04 A2  
0011F0  1               LAB_NoSt:
0011F0  1  20 BD 1C             JSR     LAB_RTST        ; check for space on descriptor stack then put address
0011F3  1               ; and length on descriptor stack and update stack pointers
0011F3  1               
0011F3  1  4C AF 10             JMP     LAB_17D5        ; do string LET and return
0011F6  1               
0011F6  1               ; perform PRINT
0011F6  1               
0011F6  1               LAB_1829:
0011F6  1  20 9B 12             JSR     LAB_18C6        ; print string from Sutill/Sutilh
0011F9  1               LAB_182C:
0011F9  1                       .IFDEF  DUODYNE
0011F9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0011FD  1                       .ELSE
0011FD  1                       JSR     LAB_GBYT        ; scan memory
0011FD  1                       .ENDIF
0011FD  1               
0011FD  1               
0011FD  1               ; PRINT
0011FD  1               
0011FD  1               LAB_PRINT:
0011FD  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
0011FF  1               
0011FF  1               LAB_1831:
0011FF  1  C9 AC                CMP     #TK_TAB         ; compare with TAB( token
001201  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
001203  1               
001203  1  C9 B0                CMP     #TK_SPC         ; compare with SPC( token
001205  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
001207  1               
001207  1  C9 2C                CMP     #','            ; compare with ","
001209  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
00120B  1               
00120B  1  C9 3B                CMP     #$3B            ; compare with ";"
00120D  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
00120F  1               
00120F  1  20 22 15             JSR     LAB_EVEX        ; evaluate expression
001212  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
001214  1  30 E0                BMI     LAB_1829        ; branch if string
001216  1               
001216  1  20 FE 29             JSR     LAB_296E        ; convert FAC1 to string
001219  1  20 68 1C             JSR     LAB_20AE        ; print " terminated string to Sutill/Sutilh
00121C  1  A0 00                LDY     #$00            ; clear index
00121E  1               
00121E  1               ; don't check fit if terminal width byte is zero
00121E  1               
00121E  1  A5 0F                LDA     TWidth          ; get terminal width byte
001220  1  F0 20                BEQ     LAB_185E        ; skip check if zero
001222  1                       .IFDEF  DUODYNE
001222  1  8B 48 DA A2          FETCHINDIRECTY des_pl   ; subtract string length
001226  1  01 B5 AE C9  
00122A  1  00 D0 04 A2  
001238  1  38                   SEC                     ; set carry for subtract
001239  1  E5 0E                SBC     TPos            ; subtract terminal position
00123B  1  E5 04                SBC     <TMPFLG         ; subtract string length
00123D  1                       .ELSE
00123D  1                       SEC                     ; set carry for subtract
00123D  1                       SBC     TPos            ; subtract terminal position
00123D  1                       SBC     (des_pl),Y      ; subtract string length
00123D  1                       .ENDIF
00123D  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
00123F  1  20 50 12             JSR     LAB_CRLF        ; else print CR/LF
001242  1               LAB_185E:
001242  1  20 9B 12             JSR     LAB_18C6        ; print string from Sutill/Sutilh
001245  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
001247  1               
001247  1               ; CR/LF return to BASIC from BASIC input handler
001247  1               
001247  1               LAB_1866:
001247  1  A9 00                LDA     #$00            ; clear byte
001249  1  9D 81 3B             STA     Ibuffs,X        ; null terminate input
00124C  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
00124E  1  A0 3B                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
001250  1               
001250  1               ; print CR/LF
001250  1               
001250  1               LAB_CRLF:
001250  1  A9 0D                LDA     #$0D            ; load [CR]
001252  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
001255  1  A9 0A                LDA     #$0A            ; load [LF]
001257  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
001259  1               
001259  1               LAB_188B:
001259  1  A5 0E                LDA     TPos            ; get terminal position
00125B  1  C5 10                CMP     Iclim           ; compare with input column limit
00125D  1  90 05                BCC     LAB_1897        ; branch if less
00125F  1               
00125F  1  20 50 12             JSR     LAB_CRLF        ; else print CR/LF (next line)
001262  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
001264  1               
001264  1               LAB_1897:
001264  1  38                   SEC                     ; set carry for subtract
001265  1               LAB_1898:
001265  1  E5 64                SBC     TabSiz          ; subtract TAB size
001267  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
001269  1               
001269  1  49 FF                EOR     #$FF            ; complement it
00126B  1  69 01                ADC     #$01            ; +1 (twos complement)
00126D  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
00126F  1               
00126F  1               ; do TAB/SPC
00126F  1               LAB_18A2:
00126F  1  48                   PHA                     ; save token
001270  1  20 CC 21             JSR     LAB_SGBY        ; scan and get byte parameter
001273  1  C9 29                CMP     #$29            ; is next character )
001275  1  F0 03 4C 0D          LBNE    LAB_1910        ; if not do syntax error then warm start
001279  1  13           
00127A  1               
00127A  1  68                   PLA                     ; get token back
00127B  1  C9 AC                CMP     #TK_TAB         ; was it TAB ?
00127D  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
00127F  1               
00127F  1               ; calculate TAB offset
00127F  1  8A                   TXA                     ; copy integer value to A
001280  1  E5 0E                SBC     TPos            ; subtract terminal position
001282  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
001284  1               
001284  1               ; print A spaces
001284  1               LAB_18B6:
001284  1  AA                   TAX                     ; copy result to X
001285  1               LAB_18B7:
001285  1  8A                   TXA                     ; set flags on size for SPC
001286  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
001288  1               
001288  1               ; print X spaces
001288  1               LAB_18BA:
001288  1  20 C1 12             JSR     LAB_18E0        ; print " "
00128B  1  CA                   DEX                     ; decrement count
00128C  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
00128E  1               
00128E  1               ; continue with PRINT processing
00128E  1               LAB_18BD:
00128E  1                       .IFDEF  DUODYNE
00128E  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001292  1                       .ELSE
001292  1                       JSR     LAB_IGBY        ; increment and scan memory
001292  1                       .ENDIF
001292  1               
001292  1  F0 03 4C FF          LBNE    LAB_1831        ; if more to print go do it
001296  1  11           
001297  1               
001297  1  60                   RTS
001298  1               
001298  1               ; print null terminated string from memory
001298  1               
001298  1               LAB_18C3:
001298  1  20 68 1C             JSR     LAB_20AE        ; print " terminated string to Sutill/Sutilh
00129B  1               
00129B  1               ; print string from Sutill/Sutilh
00129B  1               
00129B  1               LAB_18C6:
00129B  1  20 47 1F             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00129E  1               ; space returns with A = length, X=$71=pointer low byte,
00129E  1               ; Y=$72=pointer high byte
00129E  1  A0 00                LDY     #$00            ; reset index
0012A0  1  AA                   TAX                     ; copy length to X
0012A1  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
0012A3  1               
0012A3  1               LAB_18CD:
0012A3  1               
0012A3  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
0012A7  1  B5 71 C9 00  
0012AB  1  D0 04 A2 00  
0012B9  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
0012BC  1  C8                   INY                     ; increment index
0012BD  1  CA                   DEX                     ; decrement count
0012BE  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
0012C0  1               
0012C0  1  60                   RTS
0012C1  1               
0012C1  1               ; Print single format character
0012C1  1               ; print " "
0012C1  1               
0012C1  1               LAB_18E0:
0012C1  1  A9 20                LDA     #$20            ; load " "
0012C3  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
0012C4  1               
0012C4  1               ; print "?" character
0012C4  1               
0012C4  1               LAB_18E3:
0012C4  1  A9 3F                LDA     #$3F            ; load "?" character
0012C6  1               
0012C6  1               ; print character in A
0012C6  1               ; now includes the null handler
0012C6  1               ; also includes infinite line length code
0012C6  1               ; note! some routines expect this one to exit with Zb=0
0012C6  1               
0012C6  1               LAB_PRNA:
0012C6  1  C9 20                CMP     #' '            ; compare with " "
0012C8  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
0012CA  1               
0012CA  1               ; else printable character
0012CA  1  48                   PHA                     ; save the character
0012CB  1               
0012CB  1               ; don't check fit if terminal width byte is zero
0012CB  1               
0012CB  1  A5 0F                LDA     TWidth          ; get terminal width
0012CD  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
0012CF  1               
0012CF  1               ; is "infinite line" so check TAB position
0012CF  1               
0012CF  1  A5 0E                LDA     TPos            ; get position
0012D1  1  E5 64                SBC     TabSiz          ; subtract TAB size, carry set by CMP #$20 above
0012D3  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
0012D5  1               
0012D5  1  85 0E                STA     TPos            ; else reset position
0012D7  1  F0 07                BEQ     LAB_18F7        ; go print character
0012D9  1               
0012D9  1               LAB_18F0:
0012D9  1  C5 0E                CMP     TPos            ; compare with terminal character position
0012DB  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
0012DD  1               
0012DD  1  20 50 12             JSR     LAB_CRLF        ; else print CR/LF
0012E0  1               LAB_18F7:
0012E0  1  E6 0E                INC     TPos            ; increment terminal position
0012E2  1  68                   PLA                     ; get character back
0012E3  1               LAB_18F9:
0012E3  1  20 31 38             JSR     V_OUTP          ; output byte via output vector
0012E6  1  C9 0D                CMP     #$0D            ; compare with [CR]
0012E8  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
0012EA  1               
0012EA  1               ; else print nullct nulls after the [CR]
0012EA  1  86 78                STX     TempB           ; save buffer index
0012EC  1  A6 0D                LDX     Nullct          ; get null count
0012EE  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
0012F0  1               
0012F0  1  A9 00                LDA     #$00            ; load [NULL]
0012F2  1               LAB_1880:
0012F2  1  20 C6 12             JSR     LAB_PRNA        ; go print the character
0012F5  1  CA                   DEX                     ; decrement count
0012F6  1  D0 FA                BNE     LAB_1880        ; loop if not all done
0012F8  1               
0012F8  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
0012FA  1               LAB_1886:
0012FA  1  86 0E                STX     TPos            ; clear terminal position (X always = zero when we get here)
0012FC  1  A6 78                LDX     TempB           ; restore buffer index
0012FE  1               LAB_188A:
0012FE  1  29 FF                AND     #$FF            ; set the flags
001300  1               LAB_188C:
001300  1  60                   RTS
001301  1               
001301  1               ; handle bad input data
001301  1               
001301  1               LAB_1904:
001301  1  A5 62                LDA     Imode           ; get input mode flag, $00=INPUT, $00=READ
001303  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
001305  1               
001305  1  A5 8D                LDA     Dlinel          ; get current DATA line low byte
001307  1  A4 8E                LDY     Dlineh          ; get current DATA line high byte
001309  1  85 87                STA     Clinel          ; save current line low byte
00130B  1  84 88                STY     Clineh          ; save current line high byte
00130D  1               LAB_1910:
00130D  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
001310  1               
001310  1               ; mode was INPUT
001310  1               LAB_1913:
001310  1  A9 FA                LDA     #<LAB_REDO      ; point to redo message (low addr)
001312  1  A0 37                LDY     #>LAB_REDO      ; point to redo message (high addr)
001314  1  20 98 12             JSR     LAB_18C3        ; print null terminated string from memory
001317  1  A5 8B                LDA     Cpntrl          ; get continue pointer low byte
001319  1  A4 8C                LDY     Cpntrh          ; get continue pointer high byte
00131B  1  85 C3                STA     Bpntrl          ; save BASIC execute pointer low byte
00131D  1  84 C4                STY     Bpntrh          ; save BASIC execute pointer high byte
00131F  1  60                   RTS
001320  1               
001320  1               ; perform INPUT
001320  1               
001320  1               LAB_INPUT:
001320  1  C9 22                CMP     #$22            ; compare next byte with open quote
001322  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
001324  1               
001324  1  20 01 16             JSR     LAB_1BC1        ; print "..." string
001327  1  A9 3B                LDA     #$3B            ; load A with ";"
001329  1  20 35 16             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
00132C  1  20 9B 12             JSR     LAB_18C6        ; print string from Sutill/Sutilh
00132F  1               
00132F  1               ; done with prompt, now get data
00132F  1               LAB_1934:
00132F  1  20 FE 1A             JSR     LAB_CKRN        ; check not Direct, back here if ok
001332  1  20 EB 0A             JSR     LAB_INLN        ; print "? " and get BASIC input
001335  1  A9 00                LDA     #$00            ; set mode = INPUT
001337  1  CD 81 3B             CMP     Ibuffs          ; test first byte in buffer
00133A  1  D0 0A                BNE     LAB_1953        ; branch if not null input
00133C  1               
00133C  1  18                   CLC                     ; was null input so clear carry to exit program
00133D  1  4C F5 0D             JMP     LAB_1647        ; go do BREAK exit
001340  1               
001340  1               ; perform READ
001340  1               
001340  1               LAB_READ:
001340  1  A6 8F                LDX     Dptrl           ; get DATA pointer low byte
001342  1  A4 90                LDY     Dptrh           ; get DATA pointer high byte
001344  1  A9 80                LDA     #$80            ; set mode = READ
001346  1               
001346  1               LAB_1953:
001346  1  85 62                STA     Imode           ; set input mode flag, $00=INPUT, $80=READ
001348  1  86 91                STX     Rdptrl          ; save READ pointer low byte
00134A  1  84 92                STY     Rdptrh          ; save READ pointer high byte
00134C  1               
00134C  1               ; READ or INPUT next variable from list
00134C  1               LAB_195B:
00134C  1  20 1F 18             JSR     LAB_GVAR        ; get (var) address
00134F  1  85 97                STA     Lvarpl          ; save address low byte
001351  1  84 98                STY     Lvarph          ; save address high byte
001353  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001355  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
001357  1  85 11                STA     Itempl          ; save as temporary integer low byte
001359  1  84 12                STY     Itemph          ; save as temporary integer high byte
00135B  1  A6 91                LDX     Rdptrl          ; get READ pointer low byte
00135D  1  A4 92                LDY     Rdptrh          ; get READ pointer high byte
00135F  1  86 C3                STX     Bpntrl          ; set BASIC execute pointer low byte
001361  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
001363  1                       .IFDEF  DUODYNE
001363  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001367  1                       .ELSE
001367  1                       JSR     LAB_GBYT        ; scan memory
001367  1                       .ENDIF
001367  1               
001367  1  D0 12                BNE     LAB_1988        ; branch if not null
001369  1               
001369  1               ; pointer was to null entry
001369  1  24 62                BIT     Imode           ; test input mode flag, $00=INPUT, $80=READ
00136B  1  30 6C                BMI     LAB_19DD        ; branch if READ
00136D  1               
00136D  1               ; mode was INPUT
00136D  1  20 C4 12             JSR     LAB_18E3        ; print "?" character (double ? for extended input)
001370  1  20 EB 0A             JSR     LAB_INLN        ; print "? " and get BASIC input
001373  1  86 C3                STX     Bpntrl          ; set BASIC execute pointer low byte
001375  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
001377  1               LAB_1985:
001377  1                       .IFDEF  DUODYNE
001377  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00137B  1                       .ELSE
00137B  1                       JSR     LAB_GBYT        ; scan memory
00137B  1                       .ENDIF
00137B  1               
00137B  1               LAB_1988:
00137B  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
00137D  1  10 24                BPL     LAB_19B0        ; branch if numeric
00137F  1               
00137F  1               ; else get string
00137F  1  85 5B                STA     Srchc           ; save search character
001381  1  C9 22                CMP     #$22            ; was it " ?
001383  1  F0 07                BEQ     LAB_1999        ; branch if so
001385  1               
001385  1  A9 3A                LDA     #':'            ; else search character is ":"
001387  1  85 5B                STA     Srchc           ; set new search character
001389  1  A9 2C                LDA     #','            ; other search character is ","
00138B  1  18                   CLC                     ; clear carry for add
00138C  1               LAB_1999:
00138C  1  85 5C                STA     Asrch           ; set second search character
00138E  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001390  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
001392  1               
001392  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
001394  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
001396  1               
001396  1  C8                   INY                     ; else increment high byte
001397  1               LAB_19A4:
001397  1  20 6E 1C             JSR     LAB_20B4        ; print Srchc or Asrch terminated string to Sutill/Sutilh
00139A  1  20 52 22             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (Btmpl/Btmph)
00139D  1  20 AF 10             JSR     LAB_17D5        ; go do string LET
0013A0  1  4C A9 13             JMP     LAB_19B6        ; go check string terminator
0013A3  1               
0013A3  1               ; get numeric INPUT
0013A3  1               LAB_19B0:
0013A3  1  20 F1 28             JSR     LAB_2887        ; get FAC1 from string
0013A6  1  20 3A 27             JSR     LAB_PFAC        ; pack FAC1 into (Lvarpl)
0013A9  1               LAB_19B6:
0013A9  1                       .IFDEF  DUODYNE
0013A9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0013AD  1                       .ELSE
0013AD  1                       JSR     LAB_GBYT        ; scan memory
0013AD  1                       .ENDIF
0013AD  1               
0013AD  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
0013AF  1               
0013AF  1  C9 2C                CMP     #','            ; else compare with ","
0013B1  1  F0 03                BEQ     LAB_19C2        ; branch if ","
0013B3  1               
0013B3  1  4C 01 13             JMP     LAB_1904        ; else go handle bad input data
0013B6  1               
0013B6  1               ; got good input data
0013B6  1               LAB_19C2:
0013B6  1                       .IFDEF  DUODYNE
0013B6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0013BA  1                       .ELSE
0013BA  1                       JSR     LAB_IGBY        ; increment and scan memory
0013BA  1                       .ENDIF
0013BA  1               
0013BA  1               LAB_19C5:
0013BA  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
0013BC  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
0013BE  1  85 91                STA     Rdptrl          ; save for now
0013C0  1  84 92                STY     Rdptrh          ; save for now
0013C2  1  A5 11                LDA     Itempl          ; get temporary integer low byte (temp BASIC execute ptr)
0013C4  1  A4 12                LDY     Itemph          ; get temporary integer high byte (temp BASIC execute ptr)
0013C6  1  85 C3                STA     Bpntrl          ; set BASIC execute pointer low byte
0013C8  1  84 C4                STY     Bpntrh          ; set BASIC execute pointer high byte
0013CA  1                       .IFDEF  DUODYNE
0013CA  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0013CE  1                       .ELSE
0013CE  1                       JSR     LAB_GBYT        ; scan memory
0013CE  1                       .ENDIF
0013CE  1               
0013CE  1  D0 03 4C 05          LBEQ    LAB_1A03        ; if null go do extra ignored message
0013D2  1  14           
0013D3  1               
0013D3  1  20 44 16             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
0013D6  1  4C 4C 13             JMP     LAB_195B        ; go INPUT next variable from list
0013D9  1               
0013D9  1               ; find next DATA statement or do "Out of DATA" error
0013D9  1               LAB_19DD:
0013D9  1  20 71 0F             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0013DC  1  C8                   INY                     ; increment index
0013DD  1  AA                   TAX                     ; copy character ([:] or [EOL])
0013DE  1  D0 15                BNE     LAB_19F6        ; branch if [:]
0013E0  1               
0013E0  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
0013E2  1  C8                   INY                     ; increment index, now points to next line pointer high byte
0013E3  1  B1 C3                LDA     (Bpntrl),Y      ; get next line pointer high byte
0013E5  1  D0 03 4C A1          LBEQ    LAB_1A54        ; branch if end (eventually does error X)
0013E9  1  14           
0013EA  1               
0013EA  1  C8                   INY                     ; increment index
0013EB  1  B1 C3                LDA     (Bpntrl),Y      ; get next line # low byte
0013ED  1  85 8D                STA     Dlinel          ; save current DATA line low byte
0013EF  1  C8                   INY                     ; increment index
0013F0  1  B1 C3                LDA     (Bpntrl),Y      ; get next line # high byte
0013F2  1  C8                   INY                     ; increment index
0013F3  1  85 8E                STA     Dlineh          ; save current DATA line high byte
0013F5  1               LAB_19F6:
0013F5  1  B1 C3                LDA     (Bpntrl),Y      ; get byte
0013F7  1  C8                   INY                     ; increment index
0013F8  1  AA                   TAX                     ; copy to X
0013F9  1  20 63 0F             JSR     LAB_170F        ; set BASIC execute pointer
0013FC  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
0013FE  1  D0 03 4C 77          LBEQ    LAB_1985        ; was "DATA" so go do next READ
001402  1  13           
001403  1               
001403  1  D0 D4                BNE     LAB_19DD        ; go find next statement if not "DATA"
001405  1               
001405  1               ; end of INPUT/READ routine
001405  1               
001405  1               LAB_1A03:
001405  1  A5 91                LDA     Rdptrl          ; get temp READ pointer low byte
001407  1  A4 92                LDY     Rdptrh          ; get temp READ pointer high byte
001409  1  A6 62                LDX     Imode           ; get input mode flag, $00=INPUT, $80=READ
00140B  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
00140D  1               
00140D  1  4C 17 0E             JMP     LAB_1624        ; save AY as DATA pointer and return
001410  1               
001410  1               ; we were getting INPUT
001410  1               LAB_1A0E:
001410  1  A0 00                LDY     #$00            ; clear index
001412  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
001416  1  B5 91 C9 00  
00141A  1  D0 04 A2 00  
001428  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
00142A  1               
00142A  1  60                   RTS
00142B  1               
00142B  1               ; user typed too much
00142B  1               LAB_1A1B:
00142B  1  A9 E9                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
00142D  1  A0 37                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
00142F  1  4C 98 12             JMP     LAB_18C3        ; print null terminated string from memory and return
001432  1               
001432  1               ; search the stack for FOR activity
001432  1               ; exit with z=1 if FOR else exit with z=0
001432  1                       .IFDEF  DUODYNE
001432  1               
001432  1               LAB_11A1:
001432  1  C2 10                INDEX16
001434  1  BA                   TSX                     ; copy stack pointer
001435  1  E8                   INX                     ; +1 pass return address
001436  1  E8                   INX                     ; +2 pass return address
001437  1  E8                   INX                     ; +3 pass calling routine return address
001438  1  E8                   INX                     ; +4 pass calling routine return address
001439  1               LAB_11A6:
001439  1  8B                   PHB
00143A  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
00143C  1  48                   PHA
00143D  1  AB                   PLB
00143E  1  B5 01                LDA     1,X             ; get token byte from stack
001440  1  AB                   PLB
001441  1  C9 81                CMP     #TK_FOR         ; is it FOR token
001443  1  D0 43                BNE     LAB_11CE        ; exit if not FOR token
001445  1               
001445  1               ; was FOR token
001445  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
001447  1  D0 0E                BNE     LAB_11BB        ; branch if not null
001449  1               
001449  1  8B                   PHB
00144A  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
00144C  1  48                   PHA
00144D  1  AB                   PLB
00144E  1  B5 02                LDA     2,X             ; get FOR variable pointer low byte
001450  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
001452  1  B5 03                LDA     3,X             ; get FOR variable pointer high byte
001454  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
001456  1  AB                   PLB
001457  1               LAB_11BB:
001457  1  8B                   PHB
001458  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
00145A  1  48                   PHA
00145B  1  AB                   PLB
00145C  1  B5 03                LDA     3,X
00145E  1  85 04                STA     <TMPFLG
001460  1  AB                   PLB
001461  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
001463  1  D0 10                BNE     LAB_11C7        ; branch if no match
001465  1               
001465  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
001467  1  8B                   PHB
001468  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
00146A  1  48                   PHA
00146B  1  AB                   PLB
00146C  1  B5 02                LDA     2,X
00146E  1  85 04                STA     <TMPFLG
001470  1  AB                   PLB
001471  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
001473  1  F0 13                BEQ     LAB_11CE        ; exit if match found
001475  1               
001475  1               LAB_11C7:
001475  1  E8                   INX
001476  1  E8                   INX
001477  1  E8                   INX
001478  1  E8                   INX
001479  1  E8                   INX
00147A  1  E8                   INX
00147B  1  E8                   INX
00147C  1  E8                   INX
00147D  1  E8                   INX
00147E  1  E8                   INX
00147F  1  E8                   INX
001480  1  E8                   INX
001481  1  E8                   INX
001482  1  E8                   INX
001483  1  E8                   INX
001484  1  E8                   INX
001485  1  9A                   TXS                     ; copy back to index
001486  1  D0 B1                BNE     LAB_11A6        ; loop if not at start of stack
001488  1               LAB_11CE:
001488  1  86 FD                STX     <TEMPW
00148A  1  E2 10                INDEX8
00148C  1  60                   RTS
00148D  1               
00148D  1               ; perform NEXT
00148D  1               
00148D  1               LAB_NEXT:
00148D  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
00148F  1               
00148F  1  A0 00                LDY     #$00            ; else clear Y
001491  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
001493  1               
001493  1               ; NEXT var
001493  1               
001493  1               LAB_1A46:
001493  1  20 1F 18             JSR     LAB_GVAR        ; get variable address
001496  1               LAB_1A49:
001496  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
001498  1  84 98                STY     <Frnxth         ; store variable pointer high byte
00149A  1               ; (both cleared if no variable defined)
00149A  1  20 32 14             JSR     LAB_11A1        ; search the stack for FOR activity
00149D  1  F0 04                BEQ     LAB_1A56        ; branch if found
00149F  1               
00149F  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
0014A1  1               LAB_1A54:
0014A1  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
0014A3  1               
0014A3  1               
0014A3  1               LAB_1A56:
0014A3  1  C2 30                ACCUMULATORINDEX16
0014A5  1  A6 FD                LDX     <TEMPW
0014A7  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
0014A8  1  8A                   TXA                     ; copy stack pointer
0014A9  1  18                   CLC                     ; CLEAR carry
0014AA  1               
0014AA  1  69 09 00             ADC     #$0009          ; point to TO var
0014AD  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
0014AF  1  38                   SEC
0014B0  1  E9 05 00             SBC     #$0005          ; point to STEP var
0014B3  1  85 FD                STA     <TEMPW
0014B5  1               
0014B5  1  E2 30                ACCUMULATORINDEX8
0014B7  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
0014B9  1               
0014B9  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
0014BA  1  DA                   PHX
0014BB  1  A2 00                LDX     #$00
0014BD  1  DA                   PHX
0014BE  1  AB                   PLB
0014BF  1  FA                   PLX
0014C0  1  20 C4 26             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
0014C3  1  AB                   PLB
0014C4  1               
0014C4  1  A3 08                LDA     8,S             ; get step sign
0014C6  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0014C8  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
0014CA  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
0014CC  1  20 AF 23             JSR     LAB_246C        ; add (FOR variable) to FAC1
0014CF  1  20 3A 27             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
0014D2  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
0014D4  1               
0014D4  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
0014D5  1  DA                   PHX
0014D6  1  A2 00                LDX     #$00
0014D8  1  DA                   PHX
0014D9  1  AB                   PLB
0014DA  1  FA                   PLX
0014DB  1               
0014DB  1  20 00 28             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
0014DE  1  AB                   PLB
0014DF  1               
0014DF  1               
0014DF  1  C3 08                CMP     8,S             ; compare step sign
0014E1  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
0014E3  1               ;
0014E3  1               ;					; loop back and do it all again
0014E3  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
0014E5  1  85 87                STA     <Clinel         ; save current line low byte
0014E7  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
0014E9  1  85 88                STA     <Clineh         ; save current line high byte
0014EB  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
0014ED  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0014EF  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
0014F1  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0014F3  1               LAB_1A98:
0014F3  1  4C 7A 0D             JMP     LAB_15C2        ; go do interpreter inner loop
0014F6  1               
0014F6  1               LAB_1A9B:
0014F6  1  C2 30                ACCUMULATORINDEX16
0014F8  1  3B                   TSC                     ; stack copy to A
0014F9  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
0014FC  1  1B                   TCS                     ; copy back to index
0014FD  1  E2 30                ACCUMULATORINDEX8
0014FF  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001503  1  C9 2C                CMP     #','            ; compare with ","
001505  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
001507  1               ; was "," so another NEXT variable to do
001507  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
00150B  1  20 93 14             JSR     LAB_1A46        ; do NEXT (var)
00150E  1                       .ELSE
00150E  1               LAB_11A1:
00150E  1                       TSX                     ; copy stack pointer
00150E  1                       INX                     ; +1 pass return address
00150E  1                       INX                     ; +2 pass return address
00150E  1                       INX                     ; +3 pass calling routine return address
00150E  1                       INX                     ; +4 pass calling routine return address
00150E  1               LAB_11A6:
00150E  1                       LDA     LAB_STAK+1,X    ; get token byte from stack
00150E  1                       CMP     #TK_FOR         ; is it FOR token
00150E  1                       BNE     LAB_11CE        ; exit if not FOR token
00150E  1               
00150E  1               ; was FOR token
00150E  1                       LDA     Frnxth          ; get var pointer for FOR/NEXT high byte
00150E  1                       BNE     LAB_11BB        ; branch if not null
00150E  1                       LDA     LAB_STAK+2,X    ; get FOR variable pointer low byte
00150E  1                       STA     Frnxtl          ; save var pointer for FOR/NEXT low byte
00150E  1                       LDA     LAB_STAK+3,X    ; get FOR variable pointer high byte
00150E  1                       STA     Frnxth          ; save var pointer for FOR/NEXT high byte
00150E  1               LAB_11BB:
00150E  1                       CMP     LAB_STAK+3,X    ; compare var pointer with stacked var pointer (high byte)
00150E  1                       BNE     LAB_11C7        ; branch if no match
00150E  1               
00150E  1                       LDA     Frnxtl          ; get var pointer for FOR/NEXT low byte
00150E  1                       CMP     LAB_STAK+2,X    ; compare var pointer with stacked var pointer (low byte)
00150E  1                       BEQ     LAB_11CE        ; exit if match found
00150E  1               
00150E  1               LAB_11C7:
00150E  1                       TXA                     ; copy index
00150E  1                       CLC                     ; clear carry for add
00150E  1                       ADC     #$10            ; add FOR stack use size
00150E  1                       TAX                     ; copy back to index
00150E  1                       BNE     LAB_11A6        ; loop if not at start of stack
00150E  1               
00150E  1               LAB_11CE:
00150E  1                       RTS
00150E  1               
00150E  1               ; perform NEXT
00150E  1               
00150E  1               LAB_NEXT:
00150E  1                       BNE     LAB_1A46        ; branch if NEXT var
00150E  1               
00150E  1                       LDY     #$00            ; else clear Y
00150E  1                       BEQ     LAB_1A49        ; branch always (no variable to search for)
00150E  1               
00150E  1               ; NEXT var
00150E  1               
00150E  1               LAB_1A46:
00150E  1                       JSR     LAB_GVAR        ; get variable address
00150E  1               LAB_1A49:
00150E  1                       STA     Frnxtl          ; store variable pointer low byte
00150E  1                       STY     Frnxth          ; store variable pointer high byte
00150E  1               ; (both cleared if no variable defined)
00150E  1                       JSR     LAB_11A1        ; search the stack for FOR activity
00150E  1                       BEQ     LAB_1A56        ; branch if found
00150E  1               
00150E  1                       LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
00150E  1               LAB_1A54:
00150E  1                       BEQ     LAB_1ABE        ; do error #X, then warm start
00150E  1               
00150E  1               LAB_1A56:
00150E  1                       TXS                     ; set stack pointer, X set by search, dumps return addresses
00150E  1               
00150E  1                       TXA                     ; copy stack pointer
00150E  1                       SEC                     ; set carry for subtract
00150E  1                       SBC     #$F7            ; point to TO var
00150E  1                       STA     ut2_pl          ; save pointer to TO var for compare
00150E  1                       ADC     #$FB            ; point to STEP var
00150E  1               
00150E  1                       LDY     #>LAB_STAK      ; point to stack page high byte
00150E  1                       JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
00150E  1                       TSX                     ; get stack pointer back
00150E  1                       LDA     LAB_STAK+8,X    ; get step sign
00150E  1                       STA     FAC1_s          ; save FAC1 sign (b7)
00150E  1                       LDA     Frnxtl          ; get FOR variable pointer low byte
00150E  1                       LDY     Frnxth          ; get FOR variable pointer high byte
00150E  1                       JSR     LAB_246C        ; add (FOR variable) to FAC1
00150E  1                       JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
00150E  1                       LDY     #>LAB_STAK      ; point to stack page high byte
00150E  1                       JSR     LAB_27FA        ; compare FAC1 with (Y,ut2_pl) (TO value)
00150E  1                       TSX                     ; get stack pointer back
00150E  1                       CMP     LAB_STAK+8,X    ; compare step sign
00150E  1                       BEQ     LAB_1A9B        ; branch if = (loop complete)
00150E  1               
00150E  1               ; loop back and do it all again
00150E  1                       LDA     LAB_STAK+$0D,X  ; get FOR line low byte
00150E  1                       STA     Clinel          ; save current line low byte
00150E  1                       LDA     LAB_STAK+$0E,X  ; get FOR line high byte
00150E  1                       STA     Clineh          ; save current line high byte
00150E  1                       LDA     LAB_STAK+$10,X  ; get BASIC execute pointer low byte
00150E  1                       STA     Bpntrl          ; save BASIC execute pointer low byte
00150E  1                       LDA     LAB_STAK+$0F,X  ; get BASIC execute pointer high byte
00150E  1                       STA     Bpntrh          ; save BASIC execute pointer high byte
00150E  1               LAB_1A98:
00150E  1                       JMP     LAB_15C2        ; go do interpreter inner loop
00150E  1               
00150E  1               ; loop complete so carry on
00150E  1               LAB_1A9B:
00150E  1                       TXA                     ; stack copy to A
00150E  1                       ADC     #$0F            ; add $10 ($0F+carry) to dump FOR structure
00150E  1                       TAX                     ; copy back to index
00150E  1                       TXS                     ; copy to stack pointer
00150E  1                       JSR     LAB_GBYT        ; scan memory
00150E  1               
00150E  1                       CMP     #','            ; compare with ","
00150E  1                       BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
00150E  1               
00150E  1               ; was "," so another NEXT variable to do
00150E  1                       JSR     LAB_IGBY        ; increment and scan memory
00150E  1               
00150E  1                       JSR     LAB_1A46        ; do NEXT (var)
00150E  1                       .ENDIF
00150E  1               ; evaluate expression and check is numeric, else do type mismatch
00150E  1               
00150E  1               LAB_EVNM:
00150E  1  20 22 15             JSR     LAB_EVEX        ; evaluate expression
001511  1               
001511  1               ; check if source is numeric, else do type mismatch
001511  1               
001511  1               LAB_CTNM:
001511  1  18                   CLC                     ; destination is numeric
001512  1  24                   .BYTE   $24             ; makes next line BIT $38
001513  1               
001513  1               ; check if source is string, else do type mismatch
001513  1               
001513  1               LAB_CTST:
001513  1  38                   SEC                     ; required type is string
001514  1               
001514  1               ; type match check, set C for string, clear C for numeric
001514  1               
001514  1               LAB_CKTM:
001514  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
001516  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
001518  1               
001518  1               ; else data type was numeric
001518  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
00151A  1               LAB_1AB9:
00151A  1  60                   RTS
00151B  1               
00151B  1               ; data type was string, now check required type
00151B  1               LAB_1ABA:
00151B  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
00151D  1               
00151D  1               ; else do type mismatch error
00151D  1               LAB_1ABC:
00151D  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
00151F  1               LAB_1ABE:
00151F  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
001522  1               
001522  1               ; evaluate expression
001522  1               
001522  1               LAB_EVEX:
001522  1  A6 C3                LDX     Bpntrl          ; get BASIC execute pointer low byte
001524  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
001526  1               
001526  1  C6 C4                DEC     Bpntrh          ; else decrement BASIC execute pointer high byte
001528  1               LAB_1AC7:
001528  1  C6 C3                DEC     Bpntrl          ; decrement BASIC execute pointer low byte
00152A  1               
00152A  1               LAB_EVEZ:
00152A  1  A9 00                LDA     #$00            ; set null precedence (flag done)
00152C  1               LAB_1ACC:
00152C  1  48                   PHA                     ; push precedence byte
00152D  1  A9 02                LDA     #$02            ; 2 bytes
00152F  1  20 9A 09             JSR     LAB_1212        ; check room on stack for A bytes
001532  1  20 10 16             JSR     LAB_GVAL        ; get value from line
001535  1  A9 00                LDA     #$00            ; clear A
001537  1  85 9B                STA     comp_f          ; clear compare function flag
001539  1               LAB_1ADB:
001539  1                       .IFDEF  DUODYNE
001539  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00153D  1                       .ELSE
00153D  1                       JSR     LAB_GBYT        ; scan memory
00153D  1                       .ENDIF
00153D  1               
00153D  1               LAB_1ADE:
00153D  1  38                   SEC                     ; set carry for subtract
00153E  1  E9 C1                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
001540  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
001542  1               
001542  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
001544  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
001546  1               
001546  1               ; was token for > = or < (A = 0, 1 or 2)
001546  1  C9 01                CMP     #$01            ; compare with token for =
001548  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
001549  1               ; (A = 0, 3 or 5)
001549  1  49 01                EOR     #$01            ; toggle b0
00154B  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
00154B  1  45 9B                EOR     comp_f          ; EOR with compare function flag bits
00154D  1  C5 9B                CMP     comp_f          ; compare with compare function flag
00154F  1  90 68                BCC     LAB_1B53        ; if <(comp_f) do syntax error then warm start
001551  1               ; was more than one <, = or >)
001551  1               
001551  1  85 9B                STA     comp_f          ; save new compare function flag
001553  1                       .IFDEF  DUODYNE
001553  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001557  1                       .ELSE
001557  1                       JSR     LAB_IGBY        ; increment and scan memory
001557  1                       .ENDIF
001557  1               
001557  1  4C 3D 15             JMP     LAB_1ADE        ; go do next character
00155A  1               
00155A  1               ; token is < ">" or > "<" tokens
00155A  1               LAB_1AFA:
00155A  1  A6 9B                LDX     comp_f          ; get compare function flag
00155C  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
00155E  1               
00155E  1  B0 79                BCS     LAB_1B78        ; go do functions
001560  1               
001560  1               ; else was <  TK_GT so is operator or lower
001560  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
001562  1  90 75                BCC     LAB_1B78        ; branch if < + operator
001564  1               
001564  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
001564  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
001566  1               
001566  1  24 5F                BIT     Dtypef          ; test data type flag, $FF=string, $00=numeric
001568  1  10 03                BPL     LAB_1B0B        ; branch if not string
00156A  1               
00156A  1               ; will only be $00 if type is string and token was +
00156A  1  4C 4E 1E             JMP     LAB_224D        ; add strings, string 1 is in descriptor des_pl, string 2
00156D  1               ; is in line, and return
00156D  1               
00156D  1               LAB_1B0B:
00156D  1  85 71                STA     ut1_pl          ; save it
00156F  1  0A                   ASL     A               ; *2
001570  1  65 71                ADC     ut1_pl          ; *3
001572  1  A8                   TAY                     ; copy to index
001573  1               LAB_1B13:
001573  1  68                   PLA                     ; pull previous precedence
001574  1  D9 C6 32             CMP     LAB_OPPT,Y      ; compare with precedence byte
001577  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
001579  1               
001579  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00157C  1               LAB_1B1C:
00157C  1  48                   PHA                     ; save precedence
00157D  1               LAB_1B1D:
00157D  1  20 A5 15             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
001580  1  68                   PLA                     ; restore precedence
001581  1  A4 99                LDY     prstk           ; get precedence stacked flag
001583  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
001585  1               
001585  1  AA                   TAX                     ; copy precedence (set flags)
001586  1  F0 76                BEQ     LAB_1B9D        ; exit if done
001588  1               
001588  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
00158A  1               
00158A  1               LAB_1B2A:
00158A  1  26 5F                ROL     Dtypef          ; shift data type flag into Cb
00158C  1  8A                   TXA                     ; copy compare function flag
00158D  1  85 5F                STA     Dtypef          ; clear data type flag, X is 0xxx xxxx
00158F  1  2A                   ROL     A               ; shift data type into compare function byte b0
001590  1  A6 C3                LDX     Bpntrl          ; get BASIC execute pointer low byte
001592  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
001594  1               
001594  1  C6 C4                DEC     Bpntrh          ; else decrement BASIC execute pointer high byte
001596  1               LAB_1B34:
001596  1  C6 C3                DEC     Bpntrl          ; decrement BASIC execute pointer low byte
001598  1               TK_LT_PLUS      = TK_LT-TK_PLUS
001598  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
00159A  1  85 9B                STA     comp_f          ; save new compare function flag
00159C  1  D0 D5                BNE     LAB_1B13        ; branch always
00159E  1               
00159E  1               LAB_1B3C:
00159E  1  D9 C6 32             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
0015A1  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
0015A3  1               
0015A3  1  90 D7                BCC     LAB_1B1C        ; branch always
0015A5  1               
0015A5  1               ;.get vector, execute function then continue evaluation
0015A5  1               
0015A5  1               LAB_1B43:
0015A5  1  B9 C8 32             LDA     LAB_OPPT+2,Y    ; get function vector high byte
0015A8  1  48                   PHA                     ; onto stack
0015A9  1  B9 C7 32             LDA     LAB_OPPT+1,Y    ; get function vector low byte
0015AC  1  48                   PHA                     ; onto stack
0015AD  1               ; now push sign, round FAC1 and put on stack
0015AD  1  20 BC 15             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
0015B0  1               ; the function
0015B0  1  A5 9B                LDA     comp_f          ; get compare function flag
0015B2  1  48                   PHA                     ; push compare evaluation byte
0015B3  1  B9 C6 32             LDA     LAB_OPPT,Y      ; get precedence byte
0015B6  1  4C 2C 15             JMP     LAB_1ACC        ; continue evaluating expression
0015B9  1               
0015B9  1               LAB_1B53:
0015B9  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
0015BC  1               
0015BC  1               ; push sign, round FAC1 and put on stack
0015BC  1               
0015BC  1               LAB_1B5B:
0015BC  1  68                   PLA                     ; get return addr low byte
0015BD  1  85 71                STA     ut1_pl          ; save it
0015BF  1  E6 71                INC     ut1_pl          ; increment it (was ret-1 pushed? yes!)
0015C1  1               ; note! no check is made on the high byte! if the calling
0015C1  1               ; routine assembles to a page edge then this all goes
0015C1  1               ; horribly wrong !!!
0015C1  1  68                   PLA                     ; get return addr high byte
0015C2  1  85 72                STA     ut1_ph          ; save it
0015C4  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
0015C6  1  48                   PHA                     ; push sign
0015C7  1               
0015C7  1               ; round FAC1 and put on stack
0015C7  1               
0015C7  1               LAB_1B66:
0015C7  1  20 C0 27             JSR     LAB_27BA        ; round FAC1
0015CA  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0015CC  1  48                   PHA                     ; push on stack
0015CD  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
0015CF  1  48                   PHA                     ; push on stack
0015D0  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
0015D2  1  48                   PHA                     ; push on stack
0015D3  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0015D5  1  48                   PHA                     ; push on stack
0015D6  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
0015D9  1               
0015D9  1               
0015D9  1               ; do functions
0015D9  1               
0015D9  1               LAB_1B78:
0015D9  1  A0 FF                LDY     #$FF            ; flag function
0015DB  1  68                   PLA                     ; pull precedence byte
0015DC  1               LAB_1B7B:
0015DC  1  F0 20                BEQ     LAB_1B9D        ; exit if done
0015DE  1               
0015DE  1               LAB_1B7D:
0015DE  1  C9 64                CMP     #$64            ; compare previous precedence with $64
0015E0  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
0015E2  1               
0015E2  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0015E5  1               LAB_1B84:
0015E5  1  84 99                STY     prstk           ; save precedence stacked flag
0015E7  1               
0015E7  1               ; pop FAC2 and return
0015E7  1               LAB_1B86:
0015E7  1  68                   PLA                     ; pop byte
0015E8  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
0015E9  1  85 63                STA     Cflag           ; save comparison evaluation flag
0015EB  1  68                   PLA                     ; pop exponent
0015EC  1  85 B3                STA     FAC2_e          ; save FAC2 exponent
0015EE  1  68                   PLA                     ; pop mantissa1
0015EF  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
0015F1  1  68                   PLA                     ; pop mantissa2
0015F2  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
0015F4  1  68                   PLA                     ; pop mantissa3
0015F5  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
0015F7  1  68                   PLA                     ; pop sign
0015F8  1  85 B7                STA     FAC2_s          ; save FAC2 sign (b7)
0015FA  1  45 B0                EOR     FAC1_s          ; EOR FAC1 sign (b7)
0015FC  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
0015FE  1               LAB_1B9D:
0015FE  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
001600  1  60                   RTS
001601  1               
001601  1               ; print "..." string to string util area
001601  1               
001601  1               LAB_1BC1:
001601  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001603  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
001605  1  69 00                ADC     #$00            ; add carry to low byte
001607  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
001609  1               
001609  1  C8                   INY                     ; increment high byte
00160A  1               LAB_1BCA:
00160A  1  20 68 1C             JSR     LAB_20AE        ; print " terminated string to Sutill/Sutilh
00160D  1  4C 52 22             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
001610  1               
001610  1               ; get value from line
001610  1               
001610  1               LAB_GVAL:
001610  1                       .IFDEF  DUODYNE
001610  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001614  1                       .ELSE
001614  1                       JSR     LAB_IGBY        ; increment and scan memory
001614  1                       .ENDIF
001614  1               
001614  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
001616  1               
001616  1               ; else numeric string found (e.g. 123)
001616  1               LAB_1BA9:
001616  1  4C F1 28             JMP     LAB_2887        ; get FAC1 from string and return
001619  1               
001619  1               ; get value from line .. continued
001619  1               
001619  1               ; wasn't a number so ..
001619  1               LAB_1BAC:
001619  1  AA                   TAX                     ; set the flags
00161A  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
00161C  1               
00161C  1               ; else it is either a string, number, variable or (<expr>)
00161C  1  C9 24                CMP     #'$'            ; compare with "$"
00161E  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
001620  1               
001620  1  C9 25                CMP     #'%'            ; else compare with "%"
001622  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
001624  1               
001624  1  C9 2E                CMP     #'.'            ; compare with "."
001626  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
001628  1               
001628  1               ; it wasn't any sort of number so ..
001628  1  C9 22                CMP     #$22            ; compare with "
00162A  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
00162C  1               
00162C  1               ; wasn't any sort of number so ..
00162C  1               
00162C  1               ; evaluate expression within parentheses
00162C  1               
00162C  1  C9 28                CMP     #'('            ; compare with "("
00162E  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
001630  1               
001630  1               LAB_1BF7:
001630  1  20 2A 15             JSR     LAB_EVEZ        ; evaluate expression, no decrement
001633  1               
001633  1               ; all the 'scan for' routines return the character after the sought character
001633  1               
001633  1               ; scan for ")" , else do syntax error then warm start
001633  1               
001633  1               LAB_1BFB:
001633  1  A9 29                LDA     #$29            ; load A with ")"
001635  1               
001635  1               ; scan for CHR$(A) , else do syntax error then warm start
001635  1               
001635  1               LAB_SCCA:
001635  1  A0 00                LDY     #$00            ; clear index
001637  1  D1 C3                CMP     (Bpntrl),Y      ; check next byte is = A
001639  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
00163B  1                       .IFDEF  DUODYNE
00163B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00163F  1                       .ELSE
00163F  1                       JSR     LAB_IGBY        ; increment and scan memory
00163F  1                       .ENDIF
00163F  1  60                   RTS
001640  1               ; scan for "(" , else do syntax error then warm start
001640  1               
001640  1               LAB_1BFE:
001640  1  A9 28                LDA     #$28            ; load A with "("
001642  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
001644  1               ; (branch always)
001644  1               
001644  1               ; scan for "," , else do syntax error then warm start
001644  1               
001644  1               LAB_1C01:
001644  1  A9 2C                LDA     #$2C            ; load A with ","
001646  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
001648  1               ; (branch always)
001648  1               
001648  1               ; syntax error then warm start
001648  1               
001648  1               LAB_SNER:
001648  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
00164A  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
00164D  1               
00164D  1               ; get value from line .. continued
00164D  1               ; do tokens
00164D  1               
00164D  1               LAB_1BD0:
00164D  1  C9 B8                CMP     #TK_MINUS       ; compare with token for -
00164F  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
001651  1               
001651  1               ; wasn't -n so ..
001651  1  C9 B7                CMP     #TK_PLUS        ; compare with token for +
001653  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
001655  1               
001655  1  C9 B2                CMP     #TK_NOT         ; compare with token for NOT
001657  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
001659  1               
001659  1               ; was NOT token
001659  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
001659  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
00165B  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
00165D  1               
00165D  1               ; do = compare
00165D  1               
00165D  1               LAB_EQUAL:
00165D  1  20 23 19             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
001660  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
001662  1  49 FF                EOR     #$FF            ; invert it
001664  1  A8                   TAY                     ; copy it
001665  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
001667  1  49 FF                EOR     #$FF            ; invert it
001669  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00166C  1               
00166C  1               ; get value from line .. continued
00166C  1               
00166C  1               ; wasn't +, -, or NOT so ..
00166C  1               LAB_1BE7:
00166C  1  C9 AF                CMP     #TK_FN          ; compare with token for FN
00166E  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
001670  1               
001670  1  4C 4B 1B             JMP     LAB_201E        ; go evaluate FNx
001673  1               
001673  1               ; get value from line .. continued
001673  1               
001673  1               ; wasn't +, -, NOT or FN so ..
001673  1               LAB_1BEE:
001673  1  E9 C4                SBC     #TK_SGN         ; subtract with token for SGN
001675  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
001677  1               
001677  1  4C 48 16             JMP     LAB_SNER        ; else do syntax error
00167A  1               
00167A  1               ; set-up for functions
00167A  1               
00167A  1               LAB_1C11:
00167A  1               TK_GT_PLUS      = TK_GT-TK_PLUS
00167A  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
00167C  1               LAB_1C13:
00167C  1  68                   PLA                     ; dump return address low byte
00167D  1  68                   PLA                     ; dump return address high byte
00167E  1  4C 7D 15             JMP     LAB_1B1D        ; execute function then continue evaluation
001681  1               
001681  1               ; variable name set-up
001681  1               ; get (var), return value in FAC_1 and $ flag
001681  1               
001681  1               LAB_1C18:
001681  1  20 1F 18             JSR     LAB_GVAR        ; get (var) address
001684  1  85 AE                STA     FAC1_2          ; save address low byte in FAC1 mantissa2
001686  1  84 AF                STY     FAC1_3          ; save address high byte in FAC1 mantissa3
001688  1  A6 5F                LDX     Dtypef          ; get data type flag, $FF=string, $00=numeric
00168A  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
00168C  1               
00168C  1               LAB_1C24:
00168C  1  4C C4 26             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
00168F  1               
00168F  1               LAB_1C25:
00168F  1  60                   RTS
001690  1               
001690  1               ; get value from line .. continued
001690  1               ; only functions left so ..
001690  1               
001690  1               ; set up function references
001690  1               
001690  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
001690  1               ; to process function calls. now the function vector is computed and pushed on the stack
001690  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
001690  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
001690  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
001690  1               ; the function code
001690  1               
001690  1               ; this also removes some less than elegant code that was used to bypass type checking
001690  1               ; for functions that returned strings
001690  1               
001690  1               LAB_1C27:
001690  1  0A                   ASL     A               ; *2 (2 bytes per function address)
001691  1  A8                   TAY                     ; copy to index
001692  1               
001692  1  B9 81 32             LDA     LAB_FTBM,Y      ; get function jump vector high byte
001695  1  48                   PHA                     ; push functions jump vector high byte
001696  1  B9 80 32             LDA     LAB_FTBL,Y      ; get function jump vector low byte
001699  1  48                   PHA                     ; push functions jump vector low byte
00169A  1               
00169A  1  B9 3B 32             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
00169D  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
00169F  1               
00169F  1  48                   PHA                     ; push functions pre process vector high byte
0016A0  1  B9 3A 32             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
0016A3  1  48                   PHA                     ; push functions pre process vector low byte
0016A4  1               
0016A4  1               LAB_1C56:
0016A4  1  60                   RTS                     ; do function, or pre process, call
0016A5  1               
0016A5  1               ; process string expression in parenthesis
0016A5  1               
0016A5  1               LAB_PPFS:
0016A5  1  20 30 16             JSR     LAB_1BF7        ; process expression in parenthesis
0016A8  1  4C 13 15             JMP     LAB_CTST        ; check if source is string then do function,
0016AB  1               ; else do type mismatch
0016AB  1               
0016AB  1               ; process numeric expression in parenthesis
0016AB  1               
0016AB  1               LAB_PPFN:
0016AB  1  20 30 16             JSR     LAB_1BF7        ; process expression in parenthesis
0016AE  1  4C 11 15             JMP     LAB_CTNM        ; check if source is numeric then do function,
0016B1  1               ; else do type mismatch
0016B1  1               
0016B1  1               ; set numeric data type and increment BASIC execute pointer
0016B1  1               
0016B1  1               LAB_PPBI:
0016B1  1  46 5F                LSR     Dtypef          ; clear data type flag, $FF=string, $00=numeric
0016B3  1                       .IFDEF  DUODYNE
0016B3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0016B7  1                       .ELSE
0016B7  1                       JSR     LAB_IGBY        ; increment and scan memory
0016B7  1                       .ENDIF
0016B7  1  60                   RTS
0016B8  1               
0016B8  1               ; process string for LEFT$, RIGHT$ or MID$
0016B8  1               
0016B8  1               LAB_LRMS:
0016B8  1  20 2A 15             JSR     LAB_EVEZ        ; evaluate (should be string) expression
0016BB  1  20 44 16             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
0016BE  1  20 13 15             JSR     LAB_CTST        ; check if source is string, else do type mismatch
0016C1  1               
0016C1  1  68                   PLA                     ; get function jump vector low byte
0016C2  1  AA                   TAX                     ; save functions jump vector low byte
0016C3  1  68                   PLA                     ; get function jump vector high byte
0016C4  1  A8                   TAY                     ; save functions jump vector high byte
0016C5  1  A5 AF                LDA     des_ph          ; get descriptor pointer high byte
0016C7  1  48                   PHA                     ; push string pointer high byte
0016C8  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
0016CA  1  48                   PHA                     ; push string pointer low byte
0016CB  1  98                   TYA                     ; get function jump vector high byte back
0016CC  1  48                   PHA                     ; save functions jump vector high byte
0016CD  1  8A                   TXA                     ; get function jump vector low byte back
0016CE  1  48                   PHA                     ; save functions jump vector low byte
0016CF  1  20 D0 21             JSR     LAB_GTBY        ; get byte parameter
0016D2  1  8A                   TXA                     ; copy byte parameter to A
0016D3  1  60                   RTS                     ; go do function
0016D4  1               
0016D4  1               ; process numeric expression(s) for BIN$ or HEX$
0016D4  1               
0016D4  1               LAB_BHSS:
0016D4  1  20 2A 15             JSR     LAB_EVEZ        ; process expression
0016D7  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0016DA  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0016DC  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
0016DE  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
0016E0  1               
0016E0  1  20 9B 28             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0016E3  1  A2 02                LDX     #$02            ; 3 bytes to do
0016E5  1               LAB_CFAC:
0016E5  1  B5 AD                LDA     FAC1_1,X        ; get byte from FAC1
0016E7  1  95 11                STA     nums_1,X        ; save byte to temp
0016E9  1  CA                   DEX                     ; decrement index
0016EA  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
0016EC  1               
0016EC  1                       .IFDEF  DUODYNE
0016EC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0016F0  1                       .ELSE
0016F0  1                       JSR     LAB_GBYT        ; scan memory
0016F0  1                       .ENDIF
0016F0  1               
0016F0  1  A2 00                LDX     #$00            ; set default to no leading "0"s
0016F2  1  C9 29                CMP     #')'            ; compare with close bracket
0016F4  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
0016F6  1               
0016F6  1  20 61 22             JSR     LAB_SCGB        ; scan for "," and get byte
0016F9  1                       .IFDEF  DUODYNE
0016F9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0016FD  1                       .ELSE
0016FD  1                       JSR     LAB_GBYT        ; scan memory
0016FD  1                       .ENDIF
0016FD  1               
0016FD  1  C9 29                CMP     #')'            ; is next character )
0016FF  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
001701  1               
001701  1               LAB_1C54:
001701  1  60                   RTS                     ; else do function
001702  1               
001702  1               LAB_BHER:
001702  1  4C AD 19             JMP     LAB_FCER        ; do function call error then warm start
001705  1               
001705  1               ; perform EOR
001705  1               
001705  1               ; added operator format is the same as AND or OR, precedence is the same as OR
001705  1               
001705  1               ; this bit worked first time but it took a while to sort out the operator table
001705  1               ; pointers and offsets afterwards!
001705  1               
001705  1               LAB_EOR:
001705  1  20 2C 17             JSR     GetFirst        ; get first integer expression (no sign check)
001708  1  45 5B                EOR     XOAw_l          ; EOR with expression 1 low byte
00170A  1  A8                   TAY                     ; save in Y
00170B  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00170D  1  45 5C                EOR     XOAw_h          ; EOR with expression 1 high byte
00170F  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
001712  1               
001712  1               ; perform OR
001712  1               
001712  1               LAB_OR:
001712  1  20 2C 17             JSR     GetFirst        ; get first integer expression (no sign check)
001715  1  05 5B                ORA     XOAw_l          ; OR with expression 1 low byte
001717  1  A8                   TAY                     ; save in Y
001718  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00171A  1  05 5C                ORA     XOAw_h          ; OR with expression 1 high byte
00171C  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00171F  1               
00171F  1               ; perform AND
00171F  1               
00171F  1               LAB_AND:
00171F  1  20 2C 17             JSR     GetFirst        ; get first integer expression (no sign check)
001722  1  25 5B                AND     XOAw_l          ; AND with expression 1 low byte
001724  1  A8                   TAY                     ; save in Y
001725  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
001727  1  25 5C                AND     XOAw_h          ; AND with expression 1 high byte
001729  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00172C  1               
00172C  1               ; get first value for OR, AND or EOR
00172C  1               
00172C  1               GetFirst:
00172C  1  20 23 19             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
00172F  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
001731  1  85 5C                STA     XOAw_h          ; save it
001733  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
001735  1  85 5B                STA     XOAw_l          ; save it
001737  1  20 B4 23             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
00173A  1  20 23 19             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
00173D  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
00173F  1               LAB_1C95:
00173F  1  60                   RTS
001740  1               
001740  1               ; perform comparisons
001740  1               
001740  1               ; do < compare
001740  1               
001740  1               LAB_LTHAN:
001740  1  20 14 15             JSR     LAB_CKTM        ; type match check, set C for string
001743  1  B0 13                BCS     LAB_1CAE        ; branch if string
001745  1               
001745  1               ; do numeric < compare
001745  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
001747  1  09 7F                ORA     #$7F            ; set all non sign bits
001749  1  25 B4                AND     FAC2_1          ; and FAC2 mantissa1 (AND in sign bit)
00174B  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
00174D  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
00174F  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
001751  1  20 FE 27             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
001754  1  AA                   TAX                     ; copy result
001755  1  4C 89 17             JMP     LAB_1CE1        ; go evaluate result
001758  1               
001758  1               ; do string < compare
001758  1               LAB_1CAE:
001758  1  46 5F                LSR     Dtypef          ; clear data type flag, $FF=string, $00=numeric
00175A  1  C6 9B                DEC     comp_f          ; clear < bit in compare function flag
00175C  1  20 47 1F             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00175F  1               ; space returns with A = length, X=pointer low byte,
00175F  1               ; Y=pointer high byte
00175F  1  85 AC                STA     str_ln          ; save length
001761  1  86 AD                STX     str_pl          ; save string pointer low byte
001763  1  84 AE                STY     str_ph          ; save string pointer high byte
001765  1  A5 B5                LDA     FAC2_2          ; get descriptor pointer low byte
001767  1  A4 B6                LDY     FAC2_3          ; get descriptor pointer high byte
001769  1  20 4B 1F             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
00176C  1               ; returns with A = length, X=pointer low byte,
00176C  1               ; Y=pointer high byte
00176C  1  86 B5                STX     FAC2_2          ; save string pointer low byte
00176E  1  84 B6                STY     FAC2_3          ; save string pointer high byte
001770  1  AA                   TAX                     ; copy length
001771  1  38                   SEC                     ; set carry for subtract
001772  1  E5 AC                SBC     str_ln          ; subtract string 1 length
001774  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
001776  1               
001776  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
001778  1  90 04                BCC     LAB_1CD6        ; branch if so
00177A  1               
00177A  1  A6 AC                LDX     str_ln          ; get string 1 length
00177C  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
00177E  1               LAB_1CD6:
00177E  1  85 B0                STA     FAC1_s          ; save length compare
001780  1  A0 FF                LDY     #$FF            ; set index
001782  1  E8                   INX                     ; adjust for loop
001783  1               LAB_1CDB:
001783  1  C8                   INY                     ; increment index
001784  1  CA                   DEX                     ; decrement count
001785  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
001787  1               
001787  1  A6 B0                LDX     FAC1_s          ; get length compare back
001789  1               LAB_1CE1:
001789  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
00178B  1               
00178B  1  18                   CLC                     ; flag str 1 <= str 2
00178C  1  90 36                BCC     LAB_1CF2        ; go evaluate result
00178E  1               
00178E  1               LAB_1CE6:
00178E  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
001792  1  B5 B5 C9 00  
001796  1  D0 04 A2 00  
0017A4  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
0017A8  1  01 B5 AD C9  
0017AC  1  00 D0 04 A2  
0017BC  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
0017BE  1               
0017BE  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
0017C0  1  B0 02                BCS     LAB_1CF2        ; branch if so
0017C2  1               
0017C2  1  A2 01                LDX     #$01            ;  set str 1 > string 2
0017C4  1               LAB_1CF2:
0017C4  1  E8                   INX                     ; x = 0, 1 or 2
0017C5  1  8A                   TXA                     ; copy to A
0017C6  1  2A                   ROL     A               ; *2 (1, 2 or 4)
0017C7  1  25 63                AND     Cflag           ; AND with comparison evaluation flag
0017C9  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
0017CB  1               
0017CB  1  A9 FF                LDA     #$FF            ; else set result true
0017CD  1               LAB_1CFB:
0017CD  1  4C E1 27             JMP     LAB_27DB        ; save A as integer byte and return
0017D0  1               
0017D0  1               LAB_1CFE:
0017D0  1  20 44 16             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
0017D3  1               
0017D3  1               ; perform DIM
0017D3  1               
0017D3  1               LAB_DIM:
0017D3  1  AA                   TAX                     ; copy "DIM" flag to X
0017D4  1  20 25 18             JSR     LAB_1D10        ; search for variable
0017D7  1                       .IFDEF  DUODYNE
0017D7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0017DB  1                       .ELSE
0017DB  1                       JSR     LAB_GBYT        ; scan memory
0017DB  1                       .ENDIF
0017DB  1               
0017DB  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
0017DD  1               
0017DD  1  60                   RTS
0017DE  1               
0017DE  1               ; perform << (left shift)
0017DE  1               
0017DE  1               LAB_LSHIFT:
0017DE  1  20 14 18             JSR     GetPair         ; get integer expression and byte (no sign check)
0017E1  1  A5 AE                LDA     FAC1_2          ; get expression high byte
0017E3  1  A6 78                LDX     TempB           ; get shift count
0017E5  1  F0 22                BEQ     NoShift         ; branch if zero
0017E7  1               
0017E7  1  E0 10                CPX     #$10            ; compare bit count with 16d
0017E9  1  B0 23                BCS     TooBig          ; branch if >=
0017EB  1               
0017EB  1               Ls_loop:
0017EB  1  06 AF                ASL     FAC1_3          ; shift low byte
0017ED  1  2A                   ROL     A               ; shift high byte
0017EE  1  CA                   DEX                     ; decrement bit count
0017EF  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
0017F1  1               
0017F1  1  A4 AF                LDY     FAC1_3          ; get expression low byte
0017F3  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0017F6  1               
0017F6  1               ; perform >> (right shift)
0017F6  1               
0017F6  1               LAB_RSHIFT:
0017F6  1  20 14 18             JSR     GetPair         ; get integer expression and byte (no sign check)
0017F9  1  A5 AE                LDA     FAC1_2          ; get expression high byte
0017FB  1  A6 78                LDX     TempB           ; get shift count
0017FD  1  F0 0A                BEQ     NoShift         ; branch if zero
0017FF  1               
0017FF  1  E0 10                CPX     #$10            ; compare bit count with 16d
001801  1  B0 0B                BCS     TooBig          ; branch if >=
001803  1               
001803  1               Rs_loop:
001803  1  4A                   LSR     A               ; shift high byte
001804  1  66 AF                ROR     FAC1_3          ; shift low byte
001806  1  CA                   DEX                     ; decrement bit count
001807  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
001809  1               
001809  1               NoShift:
001809  1  A4 AF                LDY     FAC1_3          ; get expression low byte
00180B  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00180E  1               
00180E  1               TooBig:
00180E  1  A9 00                LDA     #$00            ; clear high byte
001810  1  A8                   TAY                     ; copy to low byte
001811  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
001814  1               
001814  1               GetPair:
001814  1  20 D3 21             JSR     LAB_EVBY        ; evaluate byte expression, result in X
001817  1  86 78                STX     TempB           ; save it
001819  1  20 B4 23             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
00181C  1  4C 23 19             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
00181F  1               
00181F  1               ; search for variable
00181F  1               
00181F  1               ; return pointer to variable in Cvaral/Cvarah
00181F  1               
00181F  1               LAB_GVAR:
00181F  1  A2 00                LDX     #$00            ; set DIM flag = $00
001821  1                       .IFDEF  DUODYNE
001821  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001825  1                       .ELSE
001825  1                       JSR     LAB_GBYT        ; scan memory
001825  1                       .ENDIF
001825  1               
001825  1               LAB_1D10:
001825  1  86 5E                STX     Defdim          ; save DIM flag
001827  1               LAB_1D12:
001827  1  85 93                STA     Varnm1          ; save 1st character
001829  1  29 7F                AND     #$7F            ; clear FN flag bit
00182B  1  20 9A 18             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
00182E  1  B0 03                BCS     LAB_1D1F        ; branch if ok
001830  1               
001830  1  4C 48 16             JMP     LAB_SNER        ; else syntax error then warm start
001833  1               
001833  1               ; was variable name so ..
001833  1               LAB_1D1F:
001833  1  A2 00                LDX     #$00            ; clear 2nd character temp
001835  1  86 5F                STX     Dtypef          ; clear data type flag, $FF=string, $00=numeric
001837  1                       .IFDEF  DUODYNE
001837  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00183B  1                       .ELSE
00183B  1                       JSR     LAB_IGBY        ; increment and scan memory
00183B  1                       .ENDIF
00183B  1               
00183B  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
00183D  1               
00183D  1               ; 2nd character wasn't "0" to "9" so ..
00183D  1  20 9A 18             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
001840  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
001842  1               
001842  1               LAB_1D2D:
001842  1  AA                   TAX                     ; copy 2nd character
001843  1               
001843  1               ; ignore further (valid) characters in the variable name
001843  1               LAB_1D2E:
001843  1                       .IFDEF  DUODYNE
001843  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
001847  1                       .ELSE
001847  1                       JSR     LAB_IGBY        ; increment and scan memory
001847  1                       .ENDIF
001847  1               
001847  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
001849  1               
001849  1  20 9A 18             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
00184C  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
00184E  1               
00184E  1               ; check if string variable
00184E  1               LAB_1D38:
00184E  1  C9 24                CMP     #'$'            ; compare with "$"
001850  1  D0 0C                BNE     LAB_1D47        ; branch if not string
001852  1               
001852  1               ; to introduce a new variable type (% suffix for integers say) then this branch
001852  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
001852  1               
001852  1               ; type is string
001852  1  A9 FF                LDA     #$FF            ; set data type = string
001854  1  85 5F                STA     Dtypef          ; set data type flag, $FF=string, $00=numeric
001856  1  8A                   TXA                     ; get 2nd character back
001857  1  09 80                ORA     #$80            ; set top bit (indicate string var)
001859  1  AA                   TAX                     ; copy back to 2nd character temp
00185A  1                       .IFDEF  DUODYNE
00185A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00185E  1                       .ELSE
00185E  1                       JSR     LAB_IGBY        ; increment and scan memory
00185E  1                       .ENDIF
00185E  1               
00185E  1               
00185E  1               ; after we have determined the variable type we need to come back here to determine
00185E  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
00185E  1               
00185E  1               
00185E  1               LAB_1D47:                       ; gets here with character after var name in A
00185E  1  86 94                STX     Varnm2          ; save 2nd character
001860  1  05 61                ORA     Sufnxf          ; or with subscript/FNX flag (or FN name)
001862  1  C9 28                CMP     #'('            ; compare with "("
001864  1  D0 03                BNE     LAB_1D53        ; branch if not "("
001866  1               
001866  1  4C 38 19             JMP     LAB_1E17        ; go find, or make, array
001869  1               
001869  1               ; either find or create var
001869  1               ; var name (1st two characters only!) is in Varnm1,Varnm2
001869  1               
001869  1               ; variable name wasn't var(... so look for plain var
001869  1               LAB_1D53:
001869  1  A9 00                LDA     #$00            ; clear A
00186B  1  85 61                STA     Sufnxf          ; clear subscript/FNX flag
00186D  1  A5 7B                LDA     Svarl           ; get start of vars low byte
00186F  1  A6 7C                LDX     Svarh           ; get start of vars high byte
001871  1  A0 00                LDY     #$00            ; clear index
001873  1               LAB_1D5D:
001873  1  86 AB                STX     Vrschh          ; save search address high byte
001875  1               LAB_1D5F:
001875  1  85 AA                STA     Vrschl          ; save search address low byte
001877  1  E4 7E                CPX     Sarryh          ; compare high address with var space end
001879  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
00187B  1               
00187B  1               ; high addresses were = so compare low addresses
00187B  1  C5 7D                CMP     Sarryl          ; compare low address with var space end
00187D  1  F0 2F                BEQ     LAB_1D8B        ; if not found go make new var
00187F  1               
00187F  1               LAB_1D69:
00187F  1  A5 93                LDA     Varnm1          ; get 1st character of var to find
001881  1  D1 AA                CMP     (Vrschl),Y      ; compare with variable name 1st character
001883  1  D0 0B                BNE     LAB_1D77        ; branch if no match
001885  1               
001885  1               ; 1st characters match so compare 2nd characters
001885  1  A5 94                LDA     Varnm2          ; get 2nd character of var to find
001887  1  C8                   INY                     ; index to point to variable name 2nd character
001888  1  D1 AA                CMP     (Vrschl),Y      ; compare with variable name 2nd character
00188A  1  D0 03 4C F8          LBEQ    LAB_1DD7        ; branch if match (found var)
00188E  1  18           
00188F  1               
00188F  1  88                   DEY                     ; else decrement index (now = $00)
001890  1               LAB_1D77:
001890  1  18                   CLC                     ; clear carry for add
001891  1  A5 AA                LDA     Vrschl          ; get search address low byte
001893  1  69 06                ADC     #$06            ; +6 (offset to next var name)
001895  1  90 DE                BCC     LAB_1D5F        ; loop if no overflow to high byte
001897  1               
001897  1  E8                   INX                     ; else increment high byte
001898  1  D0 D9                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
00189A  1               
00189A  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
00189A  1               
00189A  1               LAB_CASC:
00189A  1  C9 61                CMP     #'a'            ; compare with "a"
00189C  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
00189E  1               
00189E  1               ; check byte, return C=0 if<"A" or >"Z"
00189E  1               
00189E  1               LAB_1D82:
00189E  1  C9 41                CMP     #'A'            ; compare with "A"
0018A0  1  90 05                BCC     LAB_1D8A        ; exit if less
0018A2  1               
0018A2  1               ; carry is set
0018A2  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
0018A4  1  38                   SEC                     ; set carry
0018A5  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
0018A7  1               ; carry clear if byte>$5A
0018A7  1               LAB_1D8A:
0018A7  1  60                   RTS
0018A8  1               
0018A8  1               LAB_1D83:
0018A8  1  E9 7B                SBC     #$7B            ; subtract "z"+1
0018AA  1  38                   SEC                     ; set carry
0018AB  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
0018AD  1               ; carry clear if byte>$7A
0018AD  1  60                   RTS
0018AE  1               
0018AE  1               ; reached end of variable mem without match
0018AE  1               ; .. so create new variable
0018AE  1               LAB_1D8B:
0018AE  1  68                   PLA                     ; pop return address low byte
0018AF  1  48                   PHA                     ; push return address low byte
0018B0  1               LAB_1C18p2      = LAB_1C18+2
0018B0  1  C9 83                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
0018B2  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
0018B4  1               
0018B4  1               ; This will only drop through if the call was from LAB_1C18 and is only called
0018B4  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
0018B4  1               ; it prevents the creation of variables not assigned a value.
0018B4  1               
0018B4  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
0018B4  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
0018B4  1               
0018B4  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
0018B4  1               
0018B4  1               ; this is where you would put the undefined variable error call e.g.
0018B4  1               
0018B4  1               ;					; variable doesn't exist so flag error
0018B4  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
0018B4  1               ;	JMP	LAB_XERR		; do error #X then warm start
0018B4  1               
0018B4  1               ; the above code has been tested and works a treat! (it replaces the three code lines
0018B4  1               ; below)
0018B4  1               
0018B4  1               ; else return dummy null value
0018B4  1  A9 BC                LDA     #<LAB_1D96      ; low byte point to $00,$00
0018B6  1               ; (uses part of misc constants table)
0018B6  1  A0 31                LDY     #>LAB_1D96      ; high byte point to $00,$00
0018B8  1  60                   RTS
0018B9  1               
0018B9  1               ; create new numeric variable
0018B9  1               LAB_1D98:
0018B9  1  A5 7D                LDA     Sarryl          ; get var mem end low byte
0018BB  1  A4 7E                LDY     Sarryh          ; get var mem end high byte
0018BD  1  85 AA                STA     Ostrtl          ; save old block start low byte
0018BF  1  84 AB                STY     Ostrth          ; save old block start high byte
0018C1  1  A5 7F                LDA     Earryl          ; get array mem end low byte
0018C3  1  A4 80                LDY     Earryh          ; get array mem end high byte
0018C5  1  85 A6                STA     Obendl          ; save old block end low byte
0018C7  1  84 A7                STY     Obendh          ; save old block end high byte
0018C9  1  18                   CLC                     ; clear carry for add
0018CA  1  69 06                ADC     #$06            ; +6 (space for one var)
0018CC  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
0018CE  1               
0018CE  1  C8                   INY                     ; else increment high byte
0018CF  1               LAB_1DAE:
0018CF  1  85 A4                STA     Nbendl          ; set new block end low byte
0018D1  1  84 A5                STY     Nbendh          ; set new block end high byte
0018D3  1  20 08 09             JSR     LAB_11CF        ; open up space in memory
0018D6  1  A5 A4                LDA     Nbendl          ; get new start low byte
0018D8  1  A4 A5                LDY     Nbendh          ; get new start high byte (-$100)
0018DA  1  C8                   INY                     ; correct high byte
0018DB  1  85 7D                STA     Sarryl          ; save new var mem end low byte
0018DD  1  84 7E                STY     Sarryh          ; save new var mem end high byte
0018DF  1  A0 00                LDY     #$00            ; clear index
0018E1  1  A5 93                LDA     Varnm1          ; get var name 1st character
0018E3  1  91 AA                STA     (Vrschl),Y      ; save var name 1st character
0018E5  1  C8                   INY                     ; increment index
0018E6  1  A5 94                LDA     Varnm2          ; get var name 2nd character
0018E8  1  91 AA                STA     (Vrschl),Y      ; save var name 2nd character
0018EA  1  A9 00                LDA     #$00            ; clear A
0018EC  1  C8                   INY                     ; increment index
0018ED  1  91 AA                STA     (Vrschl),Y      ; initialise var byte
0018EF  1  C8                   INY                     ; increment index
0018F0  1  91 AA                STA     (Vrschl),Y      ; initialise var byte
0018F2  1  C8                   INY                     ; increment index
0018F3  1  91 AA                STA     (Vrschl),Y      ; initialise var byte
0018F5  1  C8                   INY                     ; increment index
0018F6  1  91 AA                STA     (Vrschl),Y      ; initialise var byte
0018F8  1               
0018F8  1               ; found a match for var ((Vrschl) = ptr)
0018F8  1               LAB_1DD7
0018F8  1  A5 AA                LDA     Vrschl          ; get var address low byte
0018FA  1  18                   CLC                     ; clear carry for add
0018FB  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
0018FD  1  A4 AB                LDY     Vrschh          ; get var address high byte
0018FF  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
001901  1               
001901  1  C8                   INY                     ; else increment high byte
001902  1               LAB_1DE1
001902  1  85 95                STA     Cvaral          ; save current var address low byte
001904  1  84 96                STY     Cvarah          ; save current var address high byte
001906  1  60                   RTS
001907  1               
001907  1               ; set-up array pointer (Adatal/h) to first element in array
001907  1               ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
001907  1               
001907  1               LAB_1DE6
001907  1  A5 5D                LDA     Dimcnt          ; get # of dimensions (1, 2 or 3)
001909  1  0A                   ASL     A               ; *2 (also clears the carry !)
00190A  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
00190C  1  65 AA                ADC     Astrtl          ; add array start pointer low byte
00190E  1  A4 AB                LDY     Astrth          ; get array pointer high byte
001910  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
001912  1               
001912  1  C8                   INY                     ; else increment high byte
001913  1               LAB_1DF2
001913  1  85 A4                STA     Adatal          ; save array data pointer low byte
001915  1  84 A5                STY     Adatah          ; save array data pointer high byte
001917  1  60                   RTS
001918  1               
001918  1               ; evaluate integer expression
001918  1               
001918  1               LAB_EVIN
001918  1                       .IFDEF  DUODYNE
001918  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00191C  1                       .ELSE
00191C  1                       JSR     LAB_IGBY        ; increment and scan memory
00191C  1                       .ENDIF
00191C  1               
00191C  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00191F  1               ; else do type mismatch
00191F  1               
00191F  1               ; evaluate integer expression (no check)
00191F  1               
00191F  1               LAB_EVPI
00191F  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
001921  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
001923  1               
001923  1               ; evaluate integer expression (no sign check)
001923  1               
001923  1               LAB_EVIR
001923  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
001925  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
001927  1  90 0C                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
001929  1               
001929  1  A9 C3                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
00192B  1  A0 31                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
00192D  1  20 FE 27             JSR     LAB_27F8        ; compare FAC1 with (AY)
001930  1               LAB_1E12
001930  1  F0 03 4C AD          LBNE    LAB_FCER        ; if <> do function call error then warm start
001934  1  19           
001935  1               
001935  1               LAB_1E14
001935  1  4C 9B 28             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
001938  1               
001938  1               ; find or make array
001938  1               
001938  1               LAB_1E17
001938  1  A5 5E                LDA     Defdim          ; get DIM flag
00193A  1  48                   PHA                     ; push it
00193B  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
00193D  1  48                   PHA                     ; push it
00193E  1  A0 00                LDY     #$00            ; clear dimensions count
001940  1               
001940  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
001940  1               
001940  1               LAB_1E1F
001940  1  98                   TYA                     ; copy dimensions count
001941  1  48                   PHA                     ; save it
001942  1  A5 94                LDA     Varnm2          ; get array name 2nd byte
001944  1  48                   PHA                     ; save it
001945  1  A5 93                LDA     Varnm1          ; get array name 1st byte
001947  1  48                   PHA                     ; save it
001948  1  20 18 19             JSR     LAB_EVIN        ; evaluate integer expression
00194B  1  68                   PLA                     ; pull array name 1st byte
00194C  1  85 93                STA     Varnm1          ; restore array name 1st byte
00194E  1  68                   PLA                     ; pull array name 2nd byte
00194F  1  85 94                STA     Varnm2          ; restore array name 2nd byte
001951  1  68                   PLA                     ; pull dimensions count
001952  1  A8                   TAY                     ; restore it
001953  1  BA                   TSX                     ; copy stack pointer
001954  1  BD 02 01             LDA     LAB_STAK+2,X    ; get DIM flag
001957  1  48                   PHA                     ; push it
001958  1  BD 01 01             LDA     LAB_STAK+1,X    ; get data type flag
00195B  1  48                   PHA                     ; push it
00195C  1  A5 AE                LDA     FAC1_2          ; get this dimension size high byte
00195E  1  9D 02 01             STA     LAB_STAK+2,X    ; stack before flag bytes
001961  1  A5 AF                LDA     FAC1_3          ; get this dimension size low byte
001963  1  9D 01 01             STA     LAB_STAK+1,X    ; stack before flag bytes
001966  1  C8                   INY                     ; increment dimensions count
001967  1                       .IFDEF  DUODYNE
001967  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00196B  1                       .ELSE
00196B  1                       JSR     LAB_GBYT        ; scan memory
00196B  1                       .ENDIF
00196B  1               
00196B  1  C9 2C                CMP     #','            ; compare with ","
00196D  1  F0 D1                BEQ     LAB_1E1F        ; if found go do next dimension
00196F  1               
00196F  1  84 5D                STY     Dimcnt          ; store dimensions count
001971  1  20 33 16             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
001974  1  68                   PLA                     ; pull data type flag
001975  1  85 5F                STA     Dtypef          ; restore data type flag, $FF=string, $00=numeric
001977  1  68                   PLA                     ; pull DIM flag
001978  1  85 5E                STA     Defdim          ; restore DIM flag
00197A  1  A6 7D                LDX     Sarryl          ; get array mem start low byte
00197C  1  A5 7E                LDA     Sarryh          ; get array mem start high byte
00197E  1               
00197E  1               ; now check to see if we are at the end of array memory (we would be if there were
00197E  1               ; no arrays).
00197E  1               
00197E  1               LAB_1E5C
00197E  1  86 AA                STX     Astrtl          ; save as array start pointer low byte
001980  1  85 AB                STA     Astrth          ; save as array start pointer high byte
001982  1  C5 80                CMP     Earryh          ; compare with array mem end high byte
001984  1  D0 07                BNE     LAB_1E68        ; branch if not reached array mem end
001986  1               
001986  1  E4 7F                CPX     Earryl          ; else compare with array mem end low byte
001988  1  D0 03 4C C6          LBEQ    LAB_1EA1        ; go build array if not found
00198C  1  19           
00198D  1               
00198D  1               ; search for array
00198D  1               LAB_1E68
00198D  1  A0 00                LDY     #$00            ; clear index
00198F  1  B1 AA                LDA     (Astrtl),Y      ; get array name first byte
001991  1  C8                   INY                     ; increment index to second name byte
001992  1  C5 93                CMP     Varnm1          ; compare with this array name first byte
001994  1  D0 06                BNE     LAB_1E77        ; branch if no match
001996  1               
001996  1  A5 94                LDA     Varnm2          ; else get this array name second byte
001998  1  D1 AA                CMP     (Astrtl),Y      ; compare with array name second byte
00199A  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
00199C  1               
00199C  1               ; no match
00199C  1               LAB_1E77
00199C  1  C8                   INY                     ; increment index
00199D  1  B1 AA                LDA     (Astrtl),Y      ; get array size low byte
00199F  1  18                   CLC                     ; clear carry for add
0019A0  1  65 AA                ADC     Astrtl          ; add array start pointer low byte
0019A2  1  AA                   TAX                     ; copy low byte to X
0019A3  1  C8                   INY                     ; increment index
0019A4  1  B1 AA                LDA     (Astrtl),Y      ; get array size high byte
0019A6  1  65 AB                ADC     Astrth          ; add array mem pointer high byte
0019A8  1  90 D4                BCC     LAB_1E5C        ; if no overflow go check next array
0019AA  1               
0019AA  1               ; do array bounds error
0019AA  1               
0019AA  1               LAB_1E85
0019AA  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
0019AC  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
0019AD  1               
0019AD  1               ; do function call error
0019AD  1               
0019AD  1               LAB_FCER
0019AD  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
0019AF  1               LAB_1E8A
0019AF  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
0019B2  1               
0019B2  1               ; found array, are we trying to dimension it?
0019B2  1               LAB_1E8D
0019B2  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
0019B4  1  A5 5E                LDA     Defdim          ; get DIM flag
0019B6  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
0019B8  1               ; start
0019B8  1               
0019B8  1               ; found the array and we're not dimensioning it so we must find an element in it
0019B8  1               
0019B8  1  20 07 19             JSR     LAB_1DE6        ; set-up array pointer (Adatal/h) to first element in array
0019BB  1               ; (Astrtl,Astrth points to start of array)
0019BB  1  A5 5D                LDA     Dimcnt          ; get dimensions count
0019BD  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
0019BF  1  D1 AA                CMP     (Astrtl),Y      ; compare with no of dimensions
0019C1  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
0019C3  1               ; dimensions" error here .. if we want a different
0019C3  1               ; error message
0019C3  1               
0019C3  1  4C 54 1A             JMP     LAB_1F28        ; found array so go get element
0019C6  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
0019C6  1               ; Dimcnt and save it at (Astrtl),Y which is already the
0019C6  1               ; same or we would have taken the BNE)
0019C6  1               
0019C6  1               ; array not found, so build it
0019C6  1               LAB_1EA1
0019C6  1  20 07 19             JSR     LAB_1DE6        ; set-up array pointer (Adatal/h) to first element in array
0019C9  1               ; (Astrtl,Astrth points to start of array)
0019C9  1  20 B2 09             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0019CC  1               ; addr to check is in AY (low/high)
0019CC  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
0019CE  1  84 BB                STY     Aspth           ; clear array data size high byte
0019D0  1  A5 93                LDA     Varnm1          ; get variable name 1st byte
0019D2  1  91 AA                STA     (Astrtl),Y      ; save array name 1st byte
0019D4  1  C8                   INY                     ; increment index
0019D5  1  A5 94                LDA     Varnm2          ; get variable name 2nd byte
0019D7  1  91 AA                STA     (Astrtl),Y      ; save array name 2nd byte
0019D9  1  A5 5D                LDA     Dimcnt          ; get dimensions count
0019DB  1  A0 04                LDY     #$04            ; index to dimension count
0019DD  1  84 BA                STY     Asptl           ; set array data size low byte (four bytes per element)
0019DF  1  91 AA                STA     (Astrtl),Y      ; set array's dimensions count
0019E1  1               
0019E1  1               ; now calculate the size of the data space for the array
0019E1  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
0019E2  1               LAB_1EC0
0019E2  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
0019E4  1  A9 00                LDA     #$00            ; set default dimension value high byte
0019E6  1  24 5E                BIT     Defdim          ; test default DIM flag
0019E8  1  50 07                BVC     LAB_1ED0        ; branch if b6 of Defdim is clear
0019EA  1               
0019EA  1  68                   PLA                     ; else pull dimension value low byte
0019EB  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
0019ED  1  AA                   TAX                     ; copy low byte to X
0019EE  1  68                   PLA                     ; pull dimension value high byte
0019EF  1  69 00                ADC     #$00            ; add carry from low byte
0019F1  1               
0019F1  1               LAB_1ED0
0019F1  1  C8                   INY                     ; index to dimension value high byte
0019F2  1  91 AA                STA     (Astrtl),Y      ; save dimension value high byte
0019F4  1  C8                   INY                     ; index to dimension value high byte
0019F5  1  8A                   TXA                     ; get dimension value low byte
0019F6  1  91 AA                STA     (Astrtl),Y      ; save dimension value low byte
0019F8  1  20 A3 1A             JSR     LAB_1F7C        ; does XY = (Astrtl),Y * (Asptl)
0019FB  1  86 BA                STX     Asptl           ; save array data size low byte
0019FD  1  85 BB                STA     Aspth           ; save array data size high byte
0019FF  1  A4 71                LDY     ut1_pl          ; restore index (saved by subroutine)
001A01  1  C6 5D                DEC     Dimcnt          ; decrement dimensions count
001A03  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
001A05  1               
001A05  1  65 A5                ADC     Adatah          ; add size high byte to first element high byte
001A07  1               ; (carry is always clear here)
001A07  1  B0 02 80 03          LBCS    LAB_1F45        ; if overflow go do "Out of memory" error
001A0B  1  4C 71 1A     
001A0E  1               
001A0E  1  85 A5                STA     Adatah          ; save end of array high byte
001A10  1  A8                   TAY                     ; copy end high byte to Y
001A11  1  8A                   TXA                     ; get array size low byte
001A12  1  65 A4                ADC     Adatal          ; add array start low byte
001A14  1  90 06                BCC     LAB_1EF3        ; branch if no carry
001A16  1               
001A16  1  C8                   INY                     ; else increment end of array high byte
001A17  1  D0 03 4C 71          LBEQ    LAB_1F45        ; if overflow go do "Out of memory" error
001A1B  1  1A           
001A1C  1               
001A1C  1               ; set-up mostly complete, now zero the array
001A1C  1               LAB_1EF3
001A1C  1  20 B2 09             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
001A1F  1               ; addr to check is in AY (low/high)
001A1F  1  85 7F                STA     Earryl          ; save array mem end low byte
001A21  1  84 80                STY     Earryh          ; save array mem end high byte
001A23  1  A9 00                LDA     #$00            ; clear byte for array clear
001A25  1  E6 BB                INC     Aspth           ; increment array size high byte (now block count)
001A27  1  A4 BA                LDY     Asptl           ; get array size low byte (now index to block)
001A29  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
001A2B  1               
001A2B  1               LAB_1F02
001A2B  1  88                   DEY                     ; decrement index (do 0 to n-1)
001A2C  1  91 A4                STA     (Adatal),Y      ; zero byte
001A2E  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
001A30  1               
001A30  1               LAB_1F07
001A30  1  C6 A5                DEC     Adatah          ; decrement array pointer high byte
001A32  1  C6 BB                DEC     Aspth           ; decrement block count high byte
001A34  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
001A36  1               
001A36  1  E6 A5                INC     Adatah          ; correct for last loop
001A38  1  38                   SEC                     ; set carry for subtract
001A39  1  A0 02                LDY     #$02            ; index to array size low byte
001A3B  1  A5 7F                LDA     Earryl          ; get array mem end low byte
001A3D  1  E5 AA                SBC     Astrtl          ; subtract array start low byte
001A3F  1  91 AA                STA     (Astrtl),Y      ; save array size low byte
001A41  1  C8                   INY                     ; index to array size high byte
001A42  1  A5 80                LDA     Earryh          ; get array mem end high byte
001A44  1  E5 AB                SBC     Astrth          ; subtract array start high byte
001A46  1  91 AA                STA     (Astrtl),Y      ; save array size high byte
001A48  1  A5 5E                LDA     Defdim          ; get default DIM flag
001A4A  1  F0 03 4C A2          LBNE    LAB_1F7B        ; exit (RET) if this was a DIM command
001A4E  1  1A           
001A4F  1               
001A4F  1               ; else, find element
001A4F  1  C8                   INY                     ; index to # of dimensions
001A50  1               
001A50  1               LAB_1F24
001A50  1  B1 AA                LDA     (Astrtl),Y      ; get array's dimension count
001A52  1  85 5D                STA     Dimcnt          ; save it
001A54  1               
001A54  1               ; we have found, or built, the array. now we need to find the element
001A54  1               
001A54  1               LAB_1F28
001A54  1  A9 00                LDA     #$00            ; clear byte
001A56  1  85 BA                STA     Asptl           ; clear array data pointer low byte
001A58  1               LAB_1F2C
001A58  1  85 BB                STA     Aspth           ; save array data pointer high byte
001A5A  1  C8                   INY                     ; increment index (point to array bound high byte)
001A5B  1  68                   PLA                     ; pull array index low byte
001A5C  1  AA                   TAX                     ; copy to X
001A5D  1  85 AE                STA     FAC1_2          ; save index low byte to FAC1 mantissa2
001A5F  1  68                   PLA                     ; pull array index high byte
001A60  1  85 AF                STA     FAC1_3          ; save index high byte to FAC1 mantissa3
001A62  1  D1 AA                CMP     (Astrtl),Y      ; compare with array bound high byte
001A64  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
001A66  1               
001A66  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
001A68  1               
001A68  1               ; else high byte was = so test low bytes
001A68  1  C8                   INY                     ; index to array bound low byte
001A69  1  8A                   TXA                     ; get array index low byte
001A6A  1  D1 AA                CMP     (Astrtl),Y      ; compare with array bound low byte
001A6C  1  90 07                BCC     LAB_1F49        ; branch if within bounds
001A6E  1               
001A6E  1               LAB_1F42
001A6E  1  4C AA 19             JMP     LAB_1E85        ; else do array bounds error
001A71  1               
001A71  1               LAB_1F45
001A71  1  4C E1 09             JMP     LAB_OMER        ; do "Out of memory" error then warm start
001A74  1               
001A74  1               LAB_1F48
001A74  1  C8                   INY                     ; index to array bound low byte
001A75  1               LAB_1F49
001A75  1  A5 BB                LDA     Aspth           ; get array data pointer high byte
001A77  1  05 BA                ORA     Asptl           ; OR with array data pointer low byte
001A79  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
001A7B  1               
001A7B  1  20 A3 1A             JSR     LAB_1F7C        ; does XY = (Astrtl),Y * (Asptl)
001A7E  1  8A                   TXA                     ; get result low byte
001A7F  1  65 AE                ADC     FAC1_2          ; add index low byte from FAC1 mantissa2
001A81  1  AA                   TAX                     ; save result low byte
001A82  1  98                   TYA                     ; get result high byte
001A83  1  A4 71                LDY     ut1_pl          ; restore index
001A85  1               LAB_1F5A
001A85  1  65 AF                ADC     FAC1_3          ; add index high byte from FAC1 mantissa3
001A87  1  86 BA                STX     Asptl           ; save array data pointer low byte
001A89  1  C6 5D                DEC     Dimcnt          ; decrement dimensions count
001A8B  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
001A8D  1               
001A8D  1  06 BA                ASL     Asptl           ; array data pointer low byte * 2
001A8F  1  2A                   ROL     A               ; array data pointer high byte * 2
001A90  1  06 BA                ASL     Asptl           ; array data pointer low byte * 4
001A92  1  2A                   ROL     A               ; array data pointer high byte * 4
001A93  1  A8                   TAY                     ; copy high byte
001A94  1  A5 BA                LDA     Asptl           ; get low byte
001A96  1  65 A4                ADC     Adatal          ; add array data start pointer low byte
001A98  1  85 95                STA     Cvaral          ; save as current var address low byte
001A9A  1  98                   TYA                     ; get high byte back
001A9B  1  65 A5                ADC     Adatah          ; add array data start pointer high byte
001A9D  1  85 96                STA     Cvarah          ; save as current var address high byte
001A9F  1  A8                   TAY                     ; copy high byte to Y
001AA0  1  A5 95                LDA     Cvaral          ; get current var address low byte
001AA2  1               LAB_1F7B
001AA2  1  60                   RTS
001AA3  1               
001AA3  1               ; does XY = (Astrtl),Y * (Asptl)
001AA3  1               
001AA3  1               LAB_1F7C
001AA3  1  84 71                STY     ut1_pl          ; save index
001AA5  1  B1 AA                LDA     (Astrtl),Y      ; get dimension size low byte
001AA7  1  85 76                STA     dims_l          ; save dimension size low byte
001AA9  1  88                   DEY                     ; decrement index
001AAA  1  B1 AA                LDA     (Astrtl),Y      ; get dimension size high byte
001AAC  1  85 77                STA     dims_h          ; save dimension size high byte
001AAE  1               
001AAE  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
001AB0  1  85 A8                STA     numbit          ; save bit count
001AB2  1  A2 00                LDX     #$00            ; clear result low byte
001AB4  1  A0 00                LDY     #$00            ; clear result high byte
001AB6  1               LAB_1F8F
001AB6  1  8A                   TXA                     ; get result low byte
001AB7  1  0A                   ASL     A               ; *2
001AB8  1  AA                   TAX                     ; save result low byte
001AB9  1  98                   TYA                     ; get result high byte
001ABA  1  2A                   ROL     A               ; *2
001ABB  1  A8                   TAY                     ; save result high byte
001ABC  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
001ABE  1               
001ABE  1  06 BA                ASL     Asptl           ; shift multiplier low byte
001AC0  1  26 BB                ROL     Aspth           ; shift multiplier high byte
001AC2  1  90 10                BCC     LAB_1FA8        ; skip add if no carry
001AC4  1               
001AC4  1  18                   CLC                     ; else clear carry for add
001AC5  1  8A                   TXA                     ; get result low byte
001AC6  1  65 76                ADC     dims_l          ; add dimension size low byte
001AC8  1  AA                   TAX                     ; save result low byte
001AC9  1  98                   TYA                     ; get result high byte
001ACA  1  65 77                ADC     dims_h          ; add dimension size high byte
001ACC  1  A8                   TAY                     ; save result high byte
001ACD  1  B0 02 80 03          LBCS    LAB_1F45        ; if overflow go do "Out of memory" error
001AD1  1  4C 71 1A     
001AD4  1               
001AD4  1               LAB_1FA8
001AD4  1  C6 A8                DEC     numbit          ; decrement bit count
001AD6  1  D0 DE                BNE     LAB_1F8F        ; loop until all done
001AD8  1               
001AD8  1  60                   RTS
001AD9  1               
001AD9  1               ; perform FRE()
001AD9  1               
001AD9  1               LAB_FRE
001AD9  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
001ADB  1  10 03                BPL     LAB_1FB4        ; branch if numeric
001ADD  1               
001ADD  1  20 47 1F             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001AE0  1               ; space returns with A = length, X=$71=pointer low byte,
001AE0  1               ; Y=$72=pointer high byte
001AE0  1               
001AE0  1               ; FRE(n) was numeric so do this
001AE0  1               LAB_1FB4
001AE0  1  20 17 1D             JSR     LAB_GARB        ; go do garbage collection
001AE3  1  38                   SEC                     ; set carry for subtract
001AE4  1  A5 81                LDA     Sstorl          ; get bottom of string space low byte
001AE6  1  E5 7F                SBC     Earryl          ; subtract array mem end low byte
001AE8  1  A8                   TAY                     ; copy result to Y
001AE9  1  A5 82                LDA     Sstorh          ; get bottom of string space high byte
001AEB  1  E5 80                SBC     Earryh          ; subtract array mem end high byte
001AED  1               
001AED  1               ; save and convert integer AY to FAC1
001AED  1               
001AED  1               LAB_AYFC
001AED  1  46 5F                LSR     Dtypef          ; clear data type flag, $FF=string, $00=numeric
001AEF  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
001AF1  1  84 AE                STY     FAC1_2          ; save FAC1 mantissa2
001AF3  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
001AF5  1  4C E9 27             JMP     LAB_27E3        ; set exp=X, clear FAC1_3, normalise and return
001AF8  1               
001AF8  1               ; perform POS()
001AF8  1               
001AF8  1               LAB_POS
001AF8  1  A4 0E                LDY     TPos            ; get terminal position
001AFA  1               
001AFA  1               ; convert Y to byte in FAC1
001AFA  1               
001AFA  1               LAB_1FD0
001AFA  1  A9 00                LDA     #$00            ; clear high byte
001AFC  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
001AFE  1               
001AFE  1               ; check not Direct (used by DEF and INPUT)
001AFE  1               
001AFE  1               LAB_CKRN
001AFE  1  A6 88                LDX     Clineh          ; get current line high byte
001B00  1  E8                   INX                     ; increment it
001B01  1  F0 03 4C A2          LBNE    LAB_1F7B        ; return if can continue not direct mode
001B05  1  1A           
001B06  1               
001B06  1               ; else do illegal direct error
001B06  1               LAB_1FD9
001B06  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
001B08  1               LAB_1FDB
001B08  1  4C E3 09             JMP     LAB_XERR        ; go do error #X, then warm start
001B0B  1               
001B0B  1               ; perform DEF
001B0B  1               
001B0B  1               LAB_DEF
001B0B  1  20 3C 1B             JSR     LAB_200B        ; check FNx syntax
001B0E  1  85 9C                STA     func_l          ; save function pointer low byte
001B10  1  84 9D                STY     func_h          ; save function pointer high byte
001B12  1  20 FE 1A             JSR     LAB_CKRN        ; check not Direct (back here if ok)
001B15  1  20 40 16             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
001B18  1  A9 80                LDA     #$80            ; set flag for FNx
001B1A  1  85 61                STA     Sufnxf          ; save subscript/FNx flag
001B1C  1  20 1F 18             JSR     LAB_GVAR        ; get (var) address
001B1F  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001B22  1  20 33 16             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
001B25  1  A9 C2                LDA     #TK_EQUAL       ; get = token
001B27  1  20 35 16             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
001B2A  1  A5 96                LDA     Cvarah          ; get current var address high byte
001B2C  1  48                   PHA                     ; push it
001B2D  1  A5 95                LDA     Cvaral          ; get current var address low byte
001B2F  1  48                   PHA                     ; push it
001B30  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
001B32  1  48                   PHA                     ; push it
001B33  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001B35  1  48                   PHA                     ; push it
001B36  1  20 60 0F             JSR     LAB_DATA        ; go perform DATA
001B39  1  4C E8 1B             JMP     LAB_207A        ; put execute pointer and variable pointer into function
001B3C  1               ; and return
001B3C  1               
001B3C  1               ; check FNx syntax
001B3C  1               
001B3C  1               LAB_200B
001B3C  1  A9 AF                LDA     #TK_FN          ; get FN" token
001B3E  1  20 35 16             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
001B41  1               ; return character after A
001B41  1  09 80                ORA     #$80            ; set FN flag bit
001B43  1  85 61                STA     Sufnxf          ; save FN flag so array variable test fails
001B45  1  20 27 18             JSR     LAB_1D12        ; search for FN variable
001B48  1  4C 11 15             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
001B4B  1               ; mismatch
001B4B  1               
001B4B  1               ; Evaluate FNx
001B4B  1               LAB_201E
001B4B  1  20 3C 1B             JSR     LAB_200B        ; check FNx syntax
001B4E  1  48                   PHA                     ; push function pointer low byte
001B4F  1  98                   TYA                     ; copy function pointer high byte
001B50  1  48                   PHA                     ; push function pointer high byte
001B51  1  20 40 16             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
001B54  1  20 22 15             JSR     LAB_EVEX        ; evaluate expression
001B57  1  20 33 16             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
001B5A  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001B5D  1  68                   PLA                     ; pop function pointer high byte
001B5E  1  85 9D                STA     func_h          ; restore it
001B60  1  68                   PLA                     ; pop function pointer low byte
001B61  1  85 9C                STA     func_l          ; restore it
001B63  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
001B65  1  A0 03                LDY     #$03            ; index to variable pointer high byte
001B67  1  B1 9C                LDA     (func_l),Y      ; get variable pointer high byte
001B69  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
001B6B  1               
001B6B  1  85 96                STA     Cvarah          ; save variable address high byte
001B6D  1  88                   DEY                     ; index to variable address low byte
001B6E  1  B1 9C                LDA     (func_l),Y      ; get variable address low byte
001B70  1  85 95                STA     Cvaral          ; save variable address low byte
001B72  1  AA                   TAX                     ; copy address low byte
001B73  1               
001B73  1               ; now stack the function variable value before use
001B73  1  C8                   INY                     ; index to mantissa_3
001B74  1               LAB_2043
001B74  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
001B78  1  B5 95 C9 00  
001B7C  1  D0 04 A2 00  
001B8A  1  48                   PHA                     ; stack it
001B8B  1  88                   DEY                     ; decrement index
001B8C  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
001B8E  1               
001B8E  1  A4 96                LDY     Cvarah          ; get variable address high byte
001B90  1  20 3E 27             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
001B93  1               ; (function variable), return Y=0, always
001B93  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
001B95  1  48                   PHA                     ; push it
001B96  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
001B98  1  48                   PHA                     ; push it
001B99  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
001B9D  1  B5 9C C9 00  
001BA1  1  D0 04 A2 00  
001BAF  1  85 C3                STA     Bpntrl          ; save as BASIC execute pointer low byte
001BB1  1  C8                   INY                     ; index to high byte
001BB2  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
001BB6  1  B5 9C C9 00  
001BBA  1  D0 04 A2 00  
001BC8  1  85 C4                STA     Bpntrh          ; save as BASIC execute pointer high byte
001BCA  1  A5 96                LDA     Cvarah          ; get variable address high byte
001BCC  1  48                   PHA                     ; push it
001BCD  1  A5 95                LDA     Cvaral          ; get variable address low byte
001BCF  1  48                   PHA                     ; push it
001BD0  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001BD3  1               ; else do type mismatch
001BD3  1  68                   PLA                     ; pull variable address low byte
001BD4  1  85 9C                STA     func_l          ; save variable address low byte
001BD6  1  68                   PLA                     ; pull variable address high byte
001BD7  1  85 9D                STA     func_h          ; save variable address high byte
001BD9  1                       .IFDEF  DUODYNE
001BD9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
001BDD  1                       .ELSE
001BDD  1                       JSR     LAB_GBYT        ; scan memory
001BDD  1                       .ENDIF
001BDD  1               
001BDD  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
001BDF  1               
001BDF  1  4C 48 16             JMP     LAB_SNER        ; else syntax error then warm start
001BE2  1               
001BE2  1               ; restore Bpntrl,Bpntrh and function variable from stack
001BE2  1               
001BE2  1               LAB_2074
001BE2  1  68                   PLA                     ; pull BASIC execute pointer low byte
001BE3  1  85 C3                STA     Bpntrl          ; restore BASIC execute pointer low byte
001BE5  1  68                   PLA                     ; pull BASIC execute pointer high byte
001BE6  1  85 C4                STA     Bpntrh          ; restore BASIC execute pointer high byte
001BE8  1               
001BE8  1               ; put execute pointer and variable pointer into function
001BE8  1               
001BE8  1               LAB_207A
001BE8  1  A0 00                LDY     #$00            ; clear index
001BEA  1  68                   PLA                     ; pull BASIC execute pointer low byte
001BEB  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001BEF  1  01 B5 9C C9  
001BF3  1  00 D0 04 A2  
001C01  1  C8                   INY                     ; increment index
001C02  1  68                   PLA                     ; pull BASIC execute pointer high byte
001C03  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001C07  1  01 B5 9C C9  
001C0B  1  00 D0 04 A2  
001C19  1  C8                   INY                     ; increment index
001C1A  1  68                   PLA                     ; pull current var address low byte
001C1B  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001C1F  1  01 B5 9C C9  
001C23  1  00 D0 04 A2  
001C31  1  C8                   INY                     ; increment index
001C32  1  68                   PLA                     ; pull current var address high byte
001C33  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
001C37  1  01 B5 9C C9  
001C3B  1  00 D0 04 A2  
001C49  1  60                   RTS
001C4A  1               
001C4A  1               ; perform STR$()
001C4A  1               
001C4A  1               LAB_STRS
001C4A  1  20 11 15             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
001C4D  1  20 FE 29             JSR     LAB_296E        ; convert FAC1 to string
001C50  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
001C52  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
001C54  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to Sutill/Sutilh
001C56  1               
001C56  1               ; Do string vector
001C56  1               ; copy des_pl/h to des_2l/h and make string space A bytes long
001C56  1               
001C56  1               LAB_209C
001C56  1  A6 AE                LDX     des_pl          ; get descriptor pointer low byte
001C58  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
001C5A  1  86 9E                STX     des_2l          ; save descriptor pointer low byte
001C5C  1  84 9F                STY     des_2h          ; save descriptor pointer high byte
001C5E  1               
001C5E  1               ; make string space A bytes long
001C5E  1               ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001C5E  1               
001C5E  1               LAB_MSSP
001C5E  1  20 E5 1C             JSR     LAB_2115        ; make space in string memory for string A long
001C61  1               ; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
001C61  1  86 AD                STX     str_pl          ; save string pointer low byte
001C63  1  84 AE                STY     str_ph          ; save string pointer high byte
001C65  1  85 AC                STA     str_ln          ; save length
001C67  1  60                   RTS
001C68  1               
001C68  1               ; Scan, set up string
001C68  1               ; print " terminated string to Sutill/Sutilh
001C68  1               
001C68  1               LAB_20AE
001C68  1  A2 22                LDX     #$22            ; set terminator to "
001C6A  1  86 5B                STX     Srchc           ; set search character (terminator 1)
001C6C  1  86 5C                STX     Asrch           ; set terminator 2
001C6E  1               
001C6E  1               ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
001C6E  1               ; source is AY
001C6E  1               
001C6E  1               LAB_20B4
001C6E  1  85 B8                STA     ssptr_l         ; store string start low byte
001C70  1  84 B9                STY     ssptr_h         ; store string start high byte
001C72  1  85 AD                STA     str_pl          ; save string pointer low byte
001C74  1  84 AE                STY     str_ph          ; save string pointer high byte
001C76  1  A0 FF                LDY     #$FF            ; set length to -1
001C78  1               LAB_20BE
001C78  1  C8                   INY                     ; increment length
001C79  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
001C7D  1  B5 B8 C9 00  
001C81  1  D0 04 A2 00  
001C8F  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
001C91  1               
001C91  1  C5 5B                CMP     Srchc           ; compare with search character (terminator 1)
001C93  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
001C95  1               
001C95  1  C5 5C                CMP     Asrch           ; compare with terminator 2
001C97  1  D0 DF                BNE     LAB_20BE        ; loop if not terminator 2
001C99  1               
001C99  1               LAB_20CB
001C99  1  C9 22                CMP     #$22            ; compare with "
001C9B  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
001C9D  1               
001C9D  1               LAB_20CF
001C9D  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
001C9E  1               LAB_20D0
001C9E  1  84 AC                STY     str_ln          ; save length in FAC1 exponent
001CA0  1  98                   TYA                     ; copy length to A
001CA1  1  65 B8                ADC     ssptr_l         ; add string start low byte
001CA3  1  85 BA                STA     Sendl           ; save string end low byte
001CA5  1  A6 B9                LDX     ssptr_h         ; get string start high byte
001CA7  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
001CA9  1               
001CA9  1  E8                   INX                     ; else increment high byte
001CAA  1               LAB_20DC
001CAA  1  86 BB                STX     Sendh           ; save string end high byte
001CAC  1  A5 B9                LDA     ssptr_h         ; get string start high byte
001CAE  1  C9 08                CMP     #>BASICBEGIN    ; compare with BASICBEGIN, FORMERLY (Ram_base) start of program memory
001CB0  1  B0 0B                BCS     LAB_RTST        ; branch if not in utility area
001CB2  1               
001CB2  1               ; string in utility area, move to string memory
001CB2  1  98                   TYA                     ; copy length to A
001CB3  1  20 56 1C             JSR     LAB_209C        ; copy des_pl/h to des_2l/h and make string space A bytes
001CB6  1               ; long
001CB6  1  A6 B8                LDX     ssptr_l         ; get string start low byte
001CB8  1  A4 B9                LDY     ssptr_h         ; get string start high byte
001CBA  1  20 00 1F             JSR     LAB_2298        ; store string A bytes long from XY to (Sutill)
001CBD  1               
001CBD  1               ; check for space on descriptor stack then ..
001CBD  1               ; put string address and length on descriptor stack and update stack pointers
001CBD  1               
001CBD  1               LAB_RTST
001CBD  1  A6 65                LDX     next_s          ; get string stack pointer
001CBF  1  E0 71                CPX     #des_sk+$09     ; compare with max+1
001CC1  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
001CC3  1               
001CC3  1               ; else do string too complex error
001CC3  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
001CC5  1               LAB_20F5
001CC5  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
001CC8  1               
001CC8  1               ; put string address and length on descriptor stack and update stack pointers
001CC8  1               
001CC8  1               LAB_20F8
001CC8  1  A5 AC                LDA     str_ln          ; get string length
001CCA  1  95 00                STA     PLUS_0,X        ; put on string stack
001CCC  1  A5 AD                LDA     str_pl          ; get string pointer low byte
001CCE  1  95 01                STA     PLUS_1,X        ; put on string stack
001CD0  1  A5 AE                LDA     str_ph          ; get string pointer high byte
001CD2  1  95 02                STA     PLUS_2,X        ; put on string stack
001CD4  1  A0 00                LDY     #$00            ; clear Y
001CD6  1  86 AE                STX     des_pl          ; save string descriptor pointer low byte
001CD8  1  84 AF                STY     des_ph          ; save string descriptor pointer high byte (always $00)
001CDA  1  88                   DEY                     ; Y = $FF
001CDB  1  84 5F                STY     Dtypef          ; save data type flag, $FF=string
001CDD  1  86 66                STX     last_sl         ; save old stack pointer (current top item)
001CDF  1  E8                   INX                     ; update stack pointer
001CE0  1  E8                   INX                     ; update stack pointer
001CE1  1  E8                   INX                     ; update stack pointer
001CE2  1  86 65                STX     next_s          ; save new top item value
001CE4  1  60                   RTS
001CE5  1               
001CE5  1               ; Build descriptor
001CE5  1               ; make space in string memory for string A long
001CE5  1               ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
001CE5  1               
001CE5  1               LAB_2115
001CE5  1  46 60                LSR     Gclctd          ; clear garbage collected flag (b7)
001CE7  1               
001CE7  1               ; make space for string A long
001CE7  1               LAB_2117
001CE7  1  48                   PHA                     ; save string length
001CE8  1  49 FF                EOR     #$FF            ; complement it
001CEA  1  38                   SEC                     ; set carry for subtract (twos comp add)
001CEB  1  65 81                ADC     Sstorl          ; add bottom of string space low byte (subtract length)
001CED  1  A4 82                LDY     Sstorh          ; get bottom of string space high byte
001CEF  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
001CF1  1               
001CF1  1  88                   DEY                     ; decrement bottom of string space high byte
001CF2  1               LAB_2122
001CF2  1  C4 80                CPY     Earryh          ; compare with array mem end high byte
001CF4  1  90 11                BCC     LAB_2137        ; do out of memory error if less
001CF6  1               
001CF6  1  D0 04                BNE     LAB_212C        ; if not = skip next test
001CF8  1               
001CF8  1  C5 7F                CMP     Earryl          ; compare with array mem end low byte
001CFA  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
001CFC  1               
001CFC  1               LAB_212C
001CFC  1  85 81                STA     Sstorl          ; save bottom of string space low byte
001CFE  1  84 82                STY     Sstorh          ; save bottom of string space high byte
001D00  1  85 83                STA     Sutill          ; save string utility ptr low byte
001D02  1  84 84                STY     Sutilh          ; save string utility ptr high byte
001D04  1  AA                   TAX                     ; copy low byte to X
001D05  1  68                   PLA                     ; get string length back
001D06  1  60                   RTS
001D07  1               
001D07  1               LAB_2137
001D07  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
001D09  1  A5 60                LDA     Gclctd          ; get garbage collected flag
001D0B  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
001D0D  1               
001D0D  1  20 17 1D             JSR     LAB_GARB        ; else go do garbage collection
001D10  1  A9 80                LDA     #$80            ; flag for garbage collected
001D12  1  85 60                STA     Gclctd          ; set garbage collected flag
001D14  1  68                   PLA                     ; pull length
001D15  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
001D17  1               
001D17  1               ; garbage collection routine
001D17  1               
001D17  1               LAB_GARB
001D17  1  A6 85                LDX     Ememl           ; get end of mem low byte
001D19  1  A5 86                LDA     Ememh           ; get end of mem high byte
001D1B  1               
001D1B  1               ; re-run routine from last ending
001D1B  1               
001D1B  1               LAB_214B
001D1B  1  86 81                STX     Sstorl          ; set string storage low byte
001D1D  1  85 82                STA     Sstorh          ; set string storage high byte
001D1F  1  A0 00                LDY     #$00            ; clear index
001D21  1  84 9D                STY     garb_h          ; clear working pointer high byte (flag no strings to move)
001D23  1  A5 7F                LDA     Earryl          ; get array mem end low byte
001D25  1  A6 80                LDX     Earryh          ; get array mem end high byte
001D27  1  85 AA                STA     Histrl          ; save as highest string low byte
001D29  1  86 AB                STX     Histrh          ; save as highest string high byte
001D2B  1  A9 68                LDA     #des_sk         ; set descriptor stack pointer
001D2D  1  85 71                STA     ut1_pl          ; save descriptor stack pointer low byte
001D2F  1  84 72                STY     ut1_ph          ; save descriptor stack pointer high byte ($00)
001D31  1               LAB_2161
001D31  1  C5 65                CMP     next_s          ; compare with descriptor stack pointer
001D33  1  F0 05                BEQ     LAB_216A        ; branch if =
001D35  1               
001D35  1  20 A1 1D             JSR     LAB_21D7        ; go garbage collect descriptor stack
001D38  1  F0 F7                BEQ     LAB_2161        ; loop always
001D3A  1               
001D3A  1               ; done stacked strings, now do string vars
001D3A  1               LAB_216A
001D3A  1  06 A0                ASL     g_step          ; set step size = $06
001D3C  1  A5 7B                LDA     Svarl           ; get start of vars low byte
001D3E  1  A6 7C                LDX     Svarh           ; get start of vars high byte
001D40  1  85 71                STA     ut1_pl          ; save as pointer low byte
001D42  1  86 72                STX     ut1_ph          ; save as pointer high byte
001D44  1               LAB_2176
001D44  1  E4 7E                CPX     Sarryh          ; compare start of arrays high byte
001D46  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
001D48  1               
001D48  1  C5 7D                CMP     Sarryl          ; else compare start of arrays low byte
001D4A  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
001D4C  1               
001D4C  1               LAB_217E
001D4C  1  20 9B 1D             JSR     LAB_21D1        ; go garbage collect strings
001D4F  1  F0 F3                BEQ     LAB_2176        ; loop always
001D51  1               
001D51  1               ; done string vars, now do string arrays
001D51  1               LAB_2183
001D51  1  85 A4                STA     Nbendl          ; save start of arrays low byte as working pointer
001D53  1  86 A5                STX     Nbendh          ; save start of arrays high byte as working pointer
001D55  1  A9 04                LDA     #$04            ; set step size
001D57  1  85 A0                STA     g_step          ; save step size
001D59  1               LAB_218B
001D59  1  A5 A4                LDA     Nbendl          ; get pointer low byte
001D5B  1  A6 A5                LDX     Nbendh          ; get pointer high byte
001D5D  1               LAB_218F
001D5D  1  E4 80                CPX     Earryh          ; compare with array mem end high byte
001D5F  1  D0 07                BNE     LAB_219A        ; branch if not at end
001D61  1               
001D61  1  C5 7F                CMP     Earryl          ; else compare with array mem end low byte
001D63  1  D0 03 4C E0          LBEQ    LAB_2216        ; tidy up and exit if at end
001D67  1  1D           
001D68  1               
001D68  1               LAB_219A
001D68  1  85 71                STA     ut1_pl          ; save pointer low byte
001D6A  1  86 72                STX     ut1_ph          ; save pointer high byte
001D6C  1  A0 02                LDY     #$02            ; set index
001D6E  1  B1 71                LDA     (ut1_pl),Y      ; get array size low byte
001D70  1  65 A4                ADC     Nbendl          ; add start of this array low byte
001D72  1  85 A4                STA     Nbendl          ; save start of next array low byte
001D74  1  C8                   INY                     ; increment index
001D75  1  B1 71                LDA     (ut1_pl),Y      ; get array size high byte
001D77  1  65 A5                ADC     Nbendh          ; add start of this array high byte
001D79  1  85 A5                STA     Nbendh          ; save start of next array high byte
001D7B  1  A0 01                LDY     #$01            ; set index
001D7D  1  B1 71                LDA     (ut1_pl),Y      ; get name second byte
001D7F  1  10 D8                BPL     LAB_218B        ; skip if not string array
001D81  1               
001D81  1               ; was string array so ..
001D81  1               
001D81  1  A0 04                LDY     #$04            ; set index
001D83  1  B1 71                LDA     (ut1_pl),Y      ; get # of dimensions
001D85  1  0A                   ASL     A               ; *2
001D86  1  69 05                ADC     #$05            ; +5 (array header size)
001D88  1  20 D3 1D             JSR     LAB_2208        ; go set up for first element
001D8B  1               LAB_21C4
001D8B  1  E4 A5                CPX     Nbendh          ; compare with start of next array high byte
001D8D  1  D0 07                BNE     LAB_21CC        ; branch if <> (go do this array)
001D8F  1               
001D8F  1  C5 A4                CMP     Nbendl          ; else compare element pointer low byte with next array
001D91  1               ; low byte
001D91  1  D0 03 4C 5D          LBEQ    LAB_218F        ; if equal then go do next array
001D95  1  1D           
001D96  1               
001D96  1               LAB_21CC
001D96  1  20 A1 1D             JSR     LAB_21D7        ; go defrag array strings
001D99  1  F0 F0                BEQ     LAB_21C4        ; go do next array string (loop always)
001D9B  1               
001D9B  1               ; defrag string variables
001D9B  1               ; enter with XA = variable pointer
001D9B  1               ; return with XA = next variable pointer
001D9B  1               
001D9B  1               LAB_21D1
001D9B  1  C8                   INY                     ; increment index (Y was $00)
001D9C  1  B1 71                LDA     (ut1_pl),Y      ; get var name byte 2
001D9E  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
001DA0  1               
001DA0  1  C8                   INY                     ; else increment index
001DA1  1               LAB_21D7
001DA1  1  B1 71                LDA     (ut1_pl),Y      ; get string length
001DA3  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
001DA5  1               
001DA5  1  C8                   INY                     ; else increment index
001DA6  1  B1 71                LDA     (ut1_pl),Y      ; get string pointer low byte
001DA8  1  AA                   TAX                     ; copy to X
001DA9  1  C8                   INY                     ; increment index
001DAA  1  B1 71                LDA     (ut1_pl),Y      ; get string pointer high byte
001DAC  1  C5 82                CMP     Sstorh          ; compare bottom of string space high byte
001DAE  1  90 06                BCC     LAB_21EC        ; branch if less
001DB0  1               
001DB0  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
001DB2  1               
001DB2  1               ; high bytes were = so compare low bytes
001DB2  1  E4 81                CPX     Sstorl          ; compare bottom of string space low byte
001DB4  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
001DB6  1               
001DB6  1               ; string pointer is < string storage pointer (pos in mem)
001DB6  1               LAB_21EC
001DB6  1  C5 AB                CMP     Histrh          ; compare to highest string high byte
001DB8  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
001DBA  1               
001DBA  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
001DBC  1               
001DBC  1               ; high bytes were = so compare low bytes
001DBC  1  E4 AA                CPX     Histrl          ; compare to highest string low byte
001DBE  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
001DC0  1               
001DC0  1               ; string is in string memory space
001DC0  1               LAB_21F6
001DC0  1  86 AA                STX     Histrl          ; save as new highest string low byte
001DC2  1  85 AB                STA     Histrh          ; save as new highest string high byte
001DC4  1  A5 71                LDA     ut1_pl          ; get start of vars(descriptors) low byte
001DC6  1  A6 72                LDX     ut1_ph          ; get start of vars(descriptors) high byte
001DC8  1  85 9C                STA     garb_l          ; save as working pointer low byte
001DCA  1  86 9D                STX     garb_h          ; save as working pointer high byte
001DCC  1  88                   DEY                     ; decrement index DIFFERS
001DCD  1  88                   DEY                     ; decrement index (should point to descriptor start)
001DCE  1  84 A2                STY     g_indx          ; save index pointer
001DD0  1               
001DD0  1               ; step pointer to next string
001DD0  1               LAB_2206
001DD0  1  18                   CLC                     ; clear carry for add
001DD1  1               LAB_2207
001DD1  1  A5 A0                LDA     g_step          ; get step size
001DD3  1               LAB_2208
001DD3  1  65 71                ADC     ut1_pl          ; add pointer low byte
001DD5  1  85 71                STA     ut1_pl          ; save pointer low byte
001DD7  1  90 02                BCC     LAB_2211        ; branch if no overflow
001DD9  1               
001DD9  1  E6 72                INC     ut1_ph          ; else increment high byte
001DDB  1               LAB_2211
001DDB  1  A6 72                LDX     ut1_ph          ; get pointer high byte
001DDD  1  A0 00                LDY     #$00            ; clear Y
001DDF  1  60                   RTS
001DE0  1               
001DE0  1               ; search complete, now either exit or set-up and move string
001DE0  1               
001DE0  1               LAB_2216
001DE0  1  C6 A0                DEC     g_step          ; decrement step size (now $03 for descriptor stack)
001DE2  1  A6 9D                LDX     garb_h          ; get string to move high byte
001DE4  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
001DE6  1               
001DE6  1  A4 A2                LDY     g_indx          ; get index byte back (points to descriptor)
001DE8  1  18                   CLC                     ; clear carry for add
001DE9  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
001DED  1  B5 9C C9 00  
001DF1  1  D0 04 A2 00  
001DFF  1  65 AA                ADC     Histrl          ; add highest string low byte
001E01  1  85 A6                STA     Obendl          ; save old block end low pointer
001E03  1  A5 AB                LDA     Histrh          ; get highest string high byte
001E05  1  69 00                ADC     #$00            ; add any carry
001E07  1  85 A7                STA     Obendh          ; save old block end high byte
001E09  1  A5 81                LDA     Sstorl          ; get bottom of string space low byte
001E0B  1  A6 82                LDX     Sstorh          ; get bottom of string space high byte
001E0D  1  85 A4                STA     Nbendl          ; save new block end low byte
001E0F  1  86 A5                STX     Nbendh          ; save new block end high byte
001E11  1  20 0F 09             JSR     LAB_11D6        ; open up space in memory, don't set array end
001E14  1  A4 A2                LDY     g_indx          ; get index byte
001E16  1  C8                   INY                     ; point to descriptor low byte
001E17  1  A5 A4                LDA     Nbendl          ; get string pointer low byte
001E19  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
001E1D  1  01 B5 9C C9  
001E21  1  00 D0 04 A2  
001E2F  1  AA                   TAX                     ; copy string pointer low byte
001E30  1  E6 A5                INC     Nbendh          ; correct high byte (move sets high byte -1)
001E32  1  A5 A5                LDA     Nbendh          ; get new string pointer high byte
001E34  1  C8                   INY                     ; point to descriptor high byte
001E35  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
001E39  1  01 B5 9C C9  
001E3D  1  00 D0 04 A2  
001E4B  1  4C 1B 1D             JMP     LAB_214B        ; re-run routine from last ending
001E4E  1               ; (but don't collect this string)
001E4E  1               
001E4E  1               ; concatenate
001E4E  1               ; add strings, string 1 is in descriptor des_pl, string 2 is in line
001E4E  1               
001E4E  1               LAB_224D
001E4E  1  A5 AF                LDA     des_ph          ; get descriptor pointer high byte
001E50  1  48                   PHA                     ; put on stack
001E51  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
001E53  1  48                   PHA                     ; put on stack
001E54  1  20 10 16             JSR     LAB_GVAL        ; get value from line
001E57  1  20 13 15             JSR     LAB_CTST        ; check if source is string, else do type mismatch
001E5A  1  68                   PLA                     ; get descriptor pointer low byte back
001E5B  1  85 B8                STA     ssptr_l         ; set pointer low byte
001E5D  1  68                   PLA                     ; get descriptor pointer high byte back
001E5E  1  85 B9                STA     ssptr_h         ; set pointer high byte
001E60  1  A0 00                LDY     #$00            ; clear index
001E62  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
001E66  1  B5 B8 C9 00  
001E6A  1  D0 04 A2 00  
001E78  1  18                   CLC                     ; clear carry for add
001E79  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
001E7D  1  01 B5 AE C9  
001E81  1  00 D0 04 A2  
001E92  1  90 05                BCC     LAB_226D        ; branch if no overflow
001E94  1               
001E94  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
001E96  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
001E99  1               
001E99  1               LAB_226D
001E99  1  20 56 1C             JSR     LAB_209C        ; copy des_pl/h to des_2l/h and make string space A bytes
001E9C  1               ; long
001E9C  1  20 B6 1E             JSR     LAB_228A        ; copy string from descriptor (sdescr) to (Sutill)
001E9F  1  A5 9E                LDA     des_2l          ; get descriptor pointer low byte
001EA1  1  A4 9F                LDY     des_2h          ; get descriptor pointer high byte
001EA3  1  20 4B 1F             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
001EA6  1               ; returns with A = length, ut1_pl = pointer low byte,
001EA6  1               ; ut1_ph = pointer high byte
001EA6  1  20 04 1F             JSR     LAB_229C        ; store string A bytes long from (ut1_pl) to (Sutill)
001EA9  1  A5 B8                LDA     ssptr_l         ;.set descriptor pointer low byte
001EAB  1  A4 B9                LDY     ssptr_h         ;.set descriptor pointer high byte
001EAD  1  20 4B 1F             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
001EB0  1               ; returns with A = length, X=ut1_pl=pointer low byte,
001EB0  1               ; Y=ut1_ph=pointer high byte
001EB0  1  20 BD 1C             JSR     LAB_RTST        ; check for space on descriptor stack then put string
001EB3  1               ; address and length on descriptor stack and update stack
001EB3  1               ; pointers
001EB3  1  4C 39 15             JMP     LAB_1ADB        ;.continue evaluation
001EB6  1               
001EB6  1               ; copy string from descriptor (sdescr) to (Sutill)
001EB6  1               
001EB6  1               LAB_228A
001EB6  1  A0 00                LDY     #$00            ; clear index
001EB8  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
001EBC  1  B5 B8 C9 00  
001EC0  1  D0 04 A2 00  
001ECE  1  48                   PHA                     ; save on stack
001ECF  1  C8                   INY                     ; increment index
001ED0  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
001ED4  1  B5 B8 C9 00  
001ED8  1  D0 04 A2 00  
001EE6  1  AA                   TAX                     ; copy to X
001EE7  1  C8                   INY                     ; increment index
001EE8  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
001EEC  1  B5 B8 C9 00  
001EF0  1  D0 04 A2 00  
001EFE  1  A8                   TAY                     ; copy to Y
001EFF  1  68                   PLA                     ; get length back
001F00  1               
001F00  1               ; store string A bytes long from YX to (Sutill)
001F00  1               
001F00  1               LAB_2298
001F00  1  86 71                STX     ut1_pl          ; save source string pointer low byte
001F02  1  84 72                STY     ut1_ph          ; save source string pointer high byte
001F04  1               
001F04  1               ; store string A bytes long from (ut1_pl) to (Sutill)
001F04  1               
001F04  1               LAB_229C
001F04  1  AA                   TAX                     ; copy length to index (don't count with Y)
001F05  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
001F07  1               
001F07  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
001F09  1               LAB_22A0
001F09  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
001F0D  1  B5 71 C9 00  
001F11  1  D0 04 A2 00  
001F1F  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
001F23  1  01 B5 83 C9  
001F27  1  00 D0 04 A2  
001F35  1               
001F35  1  C8                   INY                     ; increment index
001F36  1  CA                   DEX                     ; decrement counter
001F37  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
001F39  1               
001F39  1  98                   TYA                     ; restore length from Y
001F3A  1               LAB_22A9
001F3A  1  18                   CLC                     ; clear carry for add
001F3B  1  65 83                ADC     Sutill          ; add string utility ptr low byte
001F3D  1  85 83                STA     Sutill          ; save string utility ptr low byte
001F3F  1  90 02                BCC     LAB_22B2        ; branch if no carry
001F41  1               
001F41  1  E6 84                INC     Sutilh          ; else increment string utility ptr high byte
001F43  1               LAB_22B2
001F43  1  60                   RTS
001F44  1               
001F44  1               ; evaluate string
001F44  1               
001F44  1               LAB_EVST
001F44  1  20 13 15             JSR     LAB_CTST        ; check if source is string, else do type mismatch
001F47  1               
001F47  1               ; pop string off descriptor stack, or from top of string space
001F47  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
001F47  1               
001F47  1               LAB_22B6
001F47  1  A5 AE                LDA     des_pl          ; get descriptor pointer low byte
001F49  1  A4 AF                LDY     des_ph          ; get descriptor pointer high byte
001F4B  1               
001F4B  1               ; pop (YA) descriptor off stack or from top of string space
001F4B  1               ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
001F4B  1               
001F4B  1               LAB_22BA
001F4B  1  85 71                STA     ut1_pl          ; save descriptor pointer low byte
001F4D  1  84 72                STY     ut1_ph          ; save descriptor pointer high byte
001F4F  1  20 B8 1F             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
001F52  1  08                   PHP                     ; save status flags
001F53  1  A0 00                LDY     #$00            ; clear index
001F55  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
001F59  1  B5 71 C9 00  
001F5D  1  D0 04 A2 00  
001F6B  1  48                   PHA                     ; put on stack
001F6C  1  C8                   INY                     ; increment index
001F6D  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
001F71  1  B5 71 C9 00  
001F75  1  D0 04 A2 00  
001F83  1  AA                   TAX                     ; copy to X
001F84  1  C8                   INY                     ; increment index
001F85  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
001F89  1  B5 71 C9 00  
001F8D  1  D0 04 A2 00  
001F9B  1  A8                   TAY                     ; copy to Y
001F9C  1  68                   PLA                     ; get string length back
001F9D  1  28                   PLP                     ; restore status
001F9E  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> last_sl,last_sh
001FA0  1               
001FA0  1  C4 82                CPY     Sstorh          ; compare bottom of string space high byte
001FA2  1  D0 0F                BNE     LAB_22E6        ; branch if <>
001FA4  1               
001FA4  1  E4 81                CPX     Sstorl          ; else compare bottom of string space low byte
001FA6  1  D0 0B                BNE     LAB_22E6        ; branch if <>
001FA8  1               
001FA8  1  48                   PHA                     ; save string length
001FA9  1  18                   CLC                     ; clear carry for add
001FAA  1  65 81                ADC     Sstorl          ; add bottom of string space low byte
001FAC  1  85 81                STA     Sstorl          ; save bottom of string space low byte
001FAE  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
001FB0  1               
001FB0  1  E6 82                INC     Sstorh          ; increment bottom of string space high byte
001FB2  1               LAB_22E5
001FB2  1  68                   PLA                     ; restore string length
001FB3  1               LAB_22E6
001FB3  1  86 71                STX     ut1_pl          ; save string pointer low byte
001FB5  1  84 72                STY     ut1_ph          ; save string pointer high byte
001FB7  1  60                   RTS
001FB8  1               
001FB8  1               ; clean descriptor stack, YA = pointer
001FB8  1               ; checks if AY is on the descriptor stack, if so does a stack discard
001FB8  1               
001FB8  1               LAB_22EB
001FB8  1  C4 67                CPY     last_sh         ; compare pointer high byte
001FBA  1  D0 0C                BNE     LAB_22FB        ; exit if <>
001FBC  1               
001FBC  1  C5 66                CMP     last_sl         ; compare pointer low byte
001FBE  1  D0 08                BNE     LAB_22FB        ; exit if <>
001FC0  1               
001FC0  1  85 65                STA     next_s          ; save descriptor stack pointer
001FC2  1  E9 03                SBC     #$03            ; -3
001FC4  1  85 66                STA     last_sl         ; save low byte -3
001FC6  1  A0 00                LDY     #$00            ; clear high byte
001FC8  1               LAB_22FB
001FC8  1  60                   RTS
001FC9  1               
001FC9  1               ; perform CHR$()
001FC9  1               
001FC9  1               LAB_CHRS
001FC9  1  20 D3 21             JSR     LAB_EVBY        ; evaluate byte expression, result in X
001FCC  1  8A                   TXA                     ; copy to A
001FCD  1  48                   PHA                     ; save character
001FCE  1  A9 01                LDA     #$01            ; string is single byte
001FD0  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001FD3  1               ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
001FD3  1  68                   PLA                     ; get character back
001FD4  1  A0 00                LDY     #$00            ; clear index
001FD6  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001FDA  1  01 B5 AD C9  
001FDE  1  00 D0 04 A2  
001FEC  1  4C BD 1C             JMP     LAB_RTST        ; check for space on descriptor stack then put string
001FEF  1               ; address and length on descriptor stack and update stack
001FEF  1               ; pointers
001FEF  1               
001FEF  1               ; perform LEFT$()
001FEF  1               
001FEF  1               LAB_LEFT
001FEF  1  48                   PHA                     ; push byte parameter
001FF0  1  20 A7 20             JSR     LAB_236F        ; pull string data and byte parameter from stack
001FF3  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
001FF3  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
001FF7  1  01 B5 9E C9  
001FFB  1  00 D0 04 A2  
00200B  1  98                   TYA                     ; clear A
00200C  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
00200E  1               
00200E  1               ; perform RIGHT$()
00200E  1               
00200E  1               LAB_RIGHT
00200E  1  48                   PHA                     ; push byte parameter
00200F  1  20 A7 20             JSR     LAB_236F        ; pull string data and byte parameter from stack
002012  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
002012  1                       .IFDEF  DUODYNE
002012  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
002016  1  01 B5 9E C9  
00201A  1  00 D0 04 A2  
002028  1  18                   CLC                     ; clear carry for add-1
002029  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
00202B  1                       .ELSE
00202B  1                       CLC                     ; clear carry for add-1
00202B  1                       SBC     (des_2l),Y      ; subtract string length
00202B  1                       .ENDIF
00202B  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
00202D  1               
00202D  1               LAB_2316
00202D  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
00202F  1               
00202F  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
002033  1  B5 9E C9 00  
002037  1  D0 04 A2 00  
002045  1  AA                   TAX                     ; copy to byte parameter copy
002046  1  98                   TYA                     ; clear string start offset
002047  1               LAB_231C
002047  1  48                   PHA                     ; save string start offset
002048  1               LAB_231D
002048  1  8A                   TXA                     ; copy byte parameter (or string length if <)
002049  1               LAB_231E
002049  1  48                   PHA                     ; save string length
00204A  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
00204D  1               ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
00204D  1  A5 9E                LDA     des_2l          ; get descriptor pointer low byte
00204F  1  A4 9F                LDY     des_2h          ; get descriptor pointer high byte
002051  1  20 4B 1F             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
002054  1               ; returns with A = length, X=ut1_pl=pointer low byte,
002054  1               ; Y=ut1_ph=pointer high byte
002054  1  68                   PLA                     ; get string length back
002055  1  A8                   TAY                     ; copy length to Y
002056  1  68                   PLA                     ; get string start offset back
002057  1  18                   CLC                     ; clear carry for add
002058  1  65 71                ADC     ut1_pl          ; add start offset to string start pointer low byte
00205A  1  85 71                STA     ut1_pl          ; save string start pointer low byte
00205C  1  90 02                BCC     LAB_2335        ; branch if no overflow
00205E  1               
00205E  1  E6 72                INC     ut1_ph          ; else increment string start pointer high byte
002060  1               LAB_2335
002060  1  98                   TYA                     ; copy length to A
002061  1  20 04 1F             JSR     LAB_229C        ; store string A bytes long from (ut1_pl) to (Sutill)
002064  1  4C BD 1C             JMP     LAB_RTST        ; check for space on descriptor stack then put string
002067  1               ; address and length on descriptor stack and update stack
002067  1               ; pointers
002067  1               
002067  1               ; perform MID$()
002067  1               
002067  1               LAB_MIDS
002067  1  48                   PHA                     ; push byte parameter
002068  1  A9 FF                LDA     #$FF            ; set default length = 255
00206A  1  85 AF                STA     mids_l          ; save default length
00206C  1                       .IFDEF  DUODYNE
00206C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002070  1                       .ELSE
002070  1                       JSR     LAB_GBYT        ; scan memory
002070  1                       .ENDIF
002070  1               
002070  1  C9 29                CMP     #')'            ; compare with ")"
002072  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
002074  1               
002074  1  20 44 16             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
002077  1  20 D0 21             JSR     LAB_GTBY        ; get byte parameter (use copy in mids_l)
00207A  1               LAB_2358
00207A  1  20 A7 20             JSR     LAB_236F        ; pull string data and byte parameter from stack
00207D  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
00207D  1  CA                   DEX                     ; decrement start index
00207E  1  8A                   TXA                     ; copy to A
00207F  1  48                   PHA                     ; save string start offset
002080  1                       .IFDEF  DUODYNE
002080  1  8B 48 DA A2          FETCHINDIRECTY des_2l
002084  1  01 B5 9E C9  
002088  1  00 D0 04 A2  
002096  1  18                   CLC                     ; clear carry for sub-1
002097  1  A2 00                LDX     #$00            ; clear output string length
002099  1  E5 04                SBC     <TMPFLG         ; subtract string length
00209B  1                       .ELSE
00209B  1                       CLC                     ; clear carry for sub-1
00209B  1                       LDX     #$00            ; clear output string length
00209B  1                       SBC     (des_2l),Y      ; subtract string length
00209B  1                       .ENDIF
00209B  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
00209D  1               
00209D  1  49 FF                EOR     #$FF            ; complement -length
00209F  1  C5 AF                CMP     mids_l          ; compare byte parameter
0020A1  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
0020A3  1               
0020A3  1  A5 AF                LDA     mids_l          ; get length byte
0020A5  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
0020A7  1               
0020A7  1               ; pull string data and byte parameter from stack
0020A7  1               ; return pointer in des_2l/h, byte in A (and X), Y=0
0020A7  1               
0020A7  1               LAB_236F
0020A7  1  20 33 16             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0020AA  1  68                   PLA                     ; pull return address low byte (return address)
0020AB  1  85 A2                STA     Fnxjpl          ; save functions jump vector low byte
0020AD  1  68                   PLA                     ; pull return address high byte (return address)
0020AE  1  85 A3                STA     Fnxjph          ; save functions jump vector high byte
0020B0  1  68                   PLA                     ; pull byte parameter
0020B1  1  AA                   TAX                     ; copy byte parameter to X
0020B2  1  68                   PLA                     ; pull string pointer low byte
0020B3  1  85 9E                STA     des_2l          ; save it
0020B5  1  68                   PLA                     ; pull string pointer high byte
0020B6  1  85 9F                STA     des_2h          ; save it
0020B8  1  A0 00                LDY     #$00            ; clear index
0020BA  1  8A                   TXA                     ; copy byte parameter
0020BB  1  D0 03 4C C9          LBEQ    LAB_23A8        ; if null do function call error then warm start
0020BF  1  21           
0020C0  1               
0020C0  1  E6 A2                INC     Fnxjpl          ; increment function jump vector low byte
0020C2  1               ; (JSR pushes return addr-1. this is all very nice
0020C2  1               ; but will go tits up if either call is on a page
0020C2  1               ; boundary!)
0020C2  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
0020C5  1               
0020C5  1               
0020C5  1               ; perform LCASE$()
0020C5  1               
0020C5  1               LAB_LCASE
0020C5  1  20 44 1F             JSR     LAB_EVST        ; evaluate string
0020C8  1  85 AC                STA     str_ln          ; set string length
0020CA  1  A8                   TAY                     ; copy length to Y
0020CB  1  D0 03 4C 58          LBEQ    NoString        ; branch if null string
0020CF  1  21           
0020D0  1               
0020D0  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long A=length,
0020D3  1               ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
0020D3  1  86 AD                STX     str_pl          ; save string pointer low byte
0020D5  1  84 AE                STY     str_ph          ; save string pointer high byte
0020D7  1  A8                   TAY                     ; get string length back
0020D8  1               
0020D8  1               LC_loop
0020D8  1  88                   DEY                     ; decrement index
0020D9  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
0020DD  1  B5 71 C9 00  
0020E1  1  D0 04 A2 00  
0020EF  1  20 9E 18             JSR     LAB_1D82        ; is character "A" to "Z"
0020F2  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
0020F4  1               
0020F4  1  09 20                ORA     #$20            ; convert upper to lower case
0020F6  1               NoUcase
0020F6  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
0020FA  1  01 B5 83 C9  
0020FE  1  00 D0 04 A2  
00210C  1  98                   TYA                     ; test index
00210D  1  D0 C9                BNE     LC_loop         ; loop if not all done
00210F  1               
00210F  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
002111  1               
002111  1               ; perform UCASE$()
002111  1               
002111  1               LAB_UCASE
002111  1  20 44 1F             JSR     LAB_EVST        ; evaluate string
002114  1  85 AC                STA     str_ln          ; set string length
002116  1  A8                   TAY                     ; copy length to Y
002117  1  F0 3F                BEQ     NoString        ; branch if null string
002119  1               
002119  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long A=length,
00211C  1               ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
00211C  1  86 AD                STX     str_pl          ; save string pointer low byte
00211E  1  84 AE                STY     str_ph          ; save string pointer high byte
002120  1  A8                   TAY                     ; get string length back
002121  1               
002121  1               UC_loop
002121  1  88                   DEY                     ; decrement index
002122  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
002126  1  B5 71 C9 00  
00212A  1  D0 04 A2 00  
002138  1  20 9A 18             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
00213B  1  90 02                BCC     NoLcase         ; branch if not alpha
00213D  1               
00213D  1  29 DF                AND     #$DF            ; convert lower to upper case
00213F  1               NoLcase
00213F  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
002143  1  01 B5 83 C9  
002147  1  00 D0 04 A2  
002155  1  98                   TYA                     ; test index
002156  1  D0 C9                BNE     UC_loop         ; loop if not all done
002158  1               
002158  1               NoString
002158  1  4C BD 1C             JMP     LAB_RTST        ; check for space on descriptor stack then put string
00215B  1               ; address and length on descriptor stack and update stack
00215B  1               ; pointers
00215B  1               
00215B  1               ; perform SADD()
00215B  1               
00215B  1               LAB_SADD
00215B  1                       .IFDEF  DUODYNE
00215B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00215F  1                       .ELSE
00215F  1                       JSR     LAB_IGBY        ; increment and scan memory
00215F  1                       .ENDIF
00215F  1               
00215F  1  20 1F 18             JSR     LAB_GVAR        ; get var address
002162  1               
002162  1  20 33 16             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
002165  1  20 13 15             JSR     LAB_CTST        ; check if source is string, else do type mismatch
002168  1               
002168  1  A0 02                LDY     #$02            ; index to string pointer high byte
00216A  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
00216E  1  B5 95 C9 00  
002172  1  D0 04 A2 00  
002180  1  AA                   TAX                     ; copy string pointer high byte to X
002181  1  88                   DEY                     ; index to string pointer low byte
002182  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
002186  1  B5 95 C9 00  
00218A  1  D0 04 A2 00  
002198  1  A8                   TAY                     ; copy string pointer low byte to Y
002199  1  8A                   TXA                     ; copy string pointer high byte to A
00219A  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00219D  1               
00219D  1               ; perform LEN()
00219D  1               
00219D  1               LAB_LENS
00219D  1  20 A3 21             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
0021A0  1  4C FA 1A             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
0021A3  1               
0021A3  1               ; evaluate string, get length in Y
0021A3  1               
0021A3  1               LAB_ESGL
0021A3  1  20 44 1F             JSR     LAB_EVST        ; evaluate string
0021A6  1  A8                   TAY                     ; copy length to Y
0021A7  1  60                   RTS
0021A8  1               
0021A8  1               ; perform ASC()
0021A8  1               
0021A8  1               LAB_ASC
0021A8  1  20 A3 21             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
0021AB  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
0021AD  1               
0021AD  1  A0 00                LDY     #$00            ; set index to first character
0021AF  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
0021B3  1  B5 71 C9 00  
0021B7  1  D0 04 A2 00  
0021C5  1  A8                   TAY                     ; copy to Y
0021C6  1  4C FA 1A             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
0021C9  1               
0021C9  1               ; do function call error then warm start
0021C9  1               
0021C9  1               LAB_23A8
0021C9  1  4C AD 19             JMP     LAB_FCER        ; do function call error then warm start
0021CC  1               
0021CC  1               ; scan and get byte parameter
0021CC  1               
0021CC  1               LAB_SGBY
0021CC  1                       .IFDEF  DUODYNE
0021CC  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0021D0  1                       .ELSE
0021D0  1                       JSR     LAB_IGBY        ; increment and scan memory
0021D0  1                       .ENDIF
0021D0  1               
0021D0  1               
0021D0  1               ; get byte parameter
0021D0  1               
0021D0  1               LAB_GTBY
0021D0  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0021D3  1               ; else do type mismatch
0021D3  1               
0021D3  1               ; evaluate byte expression, result in X
0021D3  1               
0021D3  1               LAB_EVBY
0021D3  1  20 1F 19             JSR     LAB_EVPI        ; evaluate integer expression (no check)
0021D6  1               
0021D6  1  A4 AE                LDY     FAC1_2          ; get FAC1 mantissa2
0021D8  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
0021DA  1               
0021DA  1  A6 AF                LDX     FAC1_3          ; get FAC1 mantissa3
0021DC  1                       .IFDEF  DUODYNE
0021DC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0021E0  1                       .ELSE
0021E0  1                       JSR     LAB_GBYT        ; scan memory
0021E0  1                       .ENDIF
0021E0  1  60                   RTS
0021E1  1               
0021E1  1               ; perform VAL()
0021E1  1               
0021E1  1               LAB_VAL
0021E1  1  20 A3 21             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
0021E4  1  D0 03                BNE     LAB_23C5        ; branch if not null string
0021E6  1               
0021E6  1               ; string was null so set result = $00
0021E6  1  4C 47 24             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
0021E9  1               
0021E9  1               LAB_23C5
0021E9  1  A6 C3                LDX     Bpntrl          ; get BASIC execute pointer low byte
0021EB  1  A4 C4                LDY     Bpntrh          ; get BASIC execute pointer high byte
0021ED  1  86 BA                STX     Btmpl           ; save BASIC execute pointer low byte
0021EF  1  84 BB                STY     Btmph           ; save BASIC execute pointer high byte
0021F1  1  A6 71                LDX     ut1_pl          ; get string pointer low byte
0021F3  1  86 C3                STX     Bpntrl          ; save as BASIC execute pointer low byte
0021F5  1  18                   CLC                     ; clear carry
0021F6  1  65 71                ADC     ut1_pl          ; add string length
0021F8  1  85 73                STA     ut2_pl          ; save string end low byte
0021FA  1  A5 72                LDA     ut1_ph          ; get string pointer high byte
0021FC  1  85 C4                STA     Bpntrh          ; save as BASIC execute pointer high byte
0021FE  1  69 00                ADC     #$00            ; add carry to high byte
002200  1  85 74                STA     ut2_ph          ; save string end high byte
002202  1  A0 00                LDY     #$00            ; set index to $00
002204  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
002208  1  B5 73 C9 00  
00220C  1  D0 04 A2 00  
00221A  1  48                   PHA                     ; push it
00221B  1  98                   TYA                     ; clear A
00221C  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
002220  1  01 B5 73 C9  
002224  1  00 D0 04 A2  
002232  1                       .IFDEF  DUODYNE
002232  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002236  1                       .ELSE
002236  1                       JSR     LAB_GBYT        ; scan memory
002236  1                       .ENDIF
002236  1               
002236  1  20 F1 28             JSR     LAB_2887        ; get FAC1 from string
002239  1  68                   PLA                     ; restore string end +1 byte
00223A  1  A0 00                LDY     #$00            ; set index to zero
00223C  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
002240  1  01 B5 73 C9  
002244  1  00 D0 04 A2  
002252  1               
002252  1               ; restore BASIC execute pointer from temp (Btmpl/Btmph)
002252  1               
002252  1               LAB_23F3
002252  1  A6 BA                LDX     Btmpl           ; get BASIC execute pointer low byte back
002254  1  A4 BB                LDY     Btmph           ; get BASIC execute pointer high byte back
002256  1  86 C3                STX     Bpntrl          ; save BASIC execute pointer low byte
002258  1  84 C4                STY     Bpntrh          ; save BASIC execute pointer high byte
00225A  1  60                   RTS
00225B  1               
00225B  1               ; get two parameters for POKE or WAIT
00225B  1               
00225B  1               LAB_GADB
00225B  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00225E  1               ; else do type mismatch
00225E  1  20 74 22             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
002261  1               
002261  1               ; scan for "," and get byte, else do Syntax error then warm start
002261  1               
002261  1               LAB_SCGB
002261  1  20 44 16             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
002264  1  A5 12                LDA     Itemph          ; save temporary integer high byte
002266  1  48                   PHA                     ; on stack
002267  1  A5 11                LDA     Itempl          ; save temporary integer low byte
002269  1  48                   PHA                     ; on stack
00226A  1  20 D0 21             JSR     LAB_GTBY        ; get byte parameter
00226D  1  68                   PLA                     ; pull low byte
00226E  1  85 11                STA     Itempl          ; restore temporary integer low byte
002270  1  68                   PLA                     ; pull high byte
002271  1  85 12                STA     Itemph          ; restore temporary integer high byte
002273  1  60                   RTS
002274  1               
002274  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
002274  1               ; -ve and converts it into a right truncated integer in Itempl and Itemph
002274  1               
002274  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
002274  1               
002274  1               LAB_F2FX
002274  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002276  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
002278  1  B0 02 80 03          LBCS    LAB_23A8        ; if >= do function call error then warm start
00227C  1  4C C9 21     
00227F  1               
00227F  1               LAB_F2FU
00227F  1  20 9B 28             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
002282  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002284  1  A4 AF                LDY     FAC1_3          ; get FAC1 mantissa3
002286  1  84 11                STY     Itempl          ; save temporary integer low byte
002288  1  85 12                STA     Itemph          ; save temporary integer high byte
00228A  1  60                   RTS
00228B  1               
00228B  1               ; perform PEEK()
00228B  1               
00228B  1               LAB_PEEK
00228B  1  20 74 22             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
00228E  1  A2 00                LDX     #$00            ; clear index
002290  1  A1 11                LDA     (Itempl,X)      ; get byte via temporary integer (addr)
002292  1  A8                   TAY                     ; copy byte to Y
002293  1  4C FA 1A             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
002296  1               
002296  1               ; perform POKE
002296  1               
002296  1               LAB_POKE
002296  1  20 5B 22             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
002299  1  8A                   TXA                     ; copy byte argument to A
00229A  1  A2 00                LDX     #$00            ; clear index
00229C  1  81 11                STA     (Itempl,X)      ; save byte via temporary integer (addr)
00229E  1  60                   RTS
00229F  1               
00229F  1               ; perform DEEK()
00229F  1               
00229F  1               LAB_DEEK
00229F  1  20 74 22             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0022A2  1  A2 00                LDX     #$00            ; clear index
0022A4  1  A1 11                LDA     (Itempl,X)      ; PEEK low byte
0022A6  1  A8                   TAY                     ; copy to Y
0022A7  1  E6 11                INC     Itempl          ; increment pointer low byte
0022A9  1  D0 02                BNE     Deekh           ; skip high increment if no rollover
0022AB  1               
0022AB  1  E6 12                INC     Itemph          ; increment pointer high byte
0022AD  1               Deekh
0022AD  1  A1 11                LDA     (Itempl,X)      ; PEEK high byte
0022AF  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0022B2  1               
0022B2  1               ; perform DOKE
0022B2  1               
0022B2  1               LAB_DOKE
0022B2  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0022B5  1               ; else do type mismatch
0022B5  1  20 74 22             JSR     LAB_F2FX        ; convert floating-to-fixed
0022B8  1               
0022B8  1  84 97                STY     Frnxtl          ; save pointer low byte (float to fixed returns word in AY)
0022BA  1  85 98                STA     Frnxth          ; save pointer high byte
0022BC  1               
0022BC  1  20 44 16             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
0022BF  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0022C2  1               ; else do type mismatch
0022C2  1  20 74 22             JSR     LAB_F2FX        ; convert floating-to-fixed
0022C5  1               
0022C5  1  98                   TYA                     ; copy value low byte (float to fixed returns word in AY)
0022C6  1  A2 00                LDX     #$00            ; clear index
0022C8  1  81 97                STA     (Frnxtl,X)      ; POKE low byte
0022CA  1  E6 97                INC     Frnxtl          ; increment pointer low byte
0022CC  1  D0 02                BNE     Dokeh           ; skip high increment if no rollover
0022CE  1               
0022CE  1  E6 98                INC     Frnxth          ; increment pointer high byte
0022D0  1               Dokeh
0022D0  1  A5 12                LDA     Itemph          ; get value high byte
0022D2  1  81 97                STA     (Frnxtl,X)      ; POKE high byte
0022D4  1                       .IFDEF  DUODYNE
0022D4  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0022D8  1                       .ELSE
0022D8  1                       JSR     LAB_GBYT        ; scan memory
0022D8  1                       .ENDIF
0022D8  1  60                   RTS
0022D9  1               
0022D9  1               ; perform SWAP
0022D9  1               
0022D9  1               LAB_SWAP
0022D9  1  20 1F 18             JSR     LAB_GVAR        ; get var1 address
0022DC  1  85 97                STA     Lvarpl          ; save var1 address low byte
0022DE  1  84 98                STY     Lvarph          ; save var1 address high byte
0022E0  1  A5 5F                LDA     Dtypef          ; get data type flag, $FF=string, $00=numeric
0022E2  1  48                   PHA                     ; save data type flag
0022E3  1               
0022E3  1  20 44 16             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
0022E6  1  20 1F 18             JSR     LAB_GVAR        ; get var2 address (pointer in Cvaral/h)
0022E9  1  68                   PLA                     ; pull var1 data type flag
0022EA  1  45 5F                EOR     Dtypef          ; compare with var2 data type
0022EC  1  10 60                BPL     SwapErr         ; exit if not both the same type
0022EE  1               
0022EE  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
0022F0  1               SwapLp
0022F0  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
0022F4  1  B5 97 C9 00  
0022F8  1  D0 04 A2 00  
002306  1  AA                   TAX                     ; save var1 byte
002307  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
00230B  1  B5 95 C9 00  
00230F  1  D0 04 A2 00  
00231D  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
002321  1  01 B5 97 C9  
002325  1  00 D0 04 A2  
002333  1  8A                   TXA                     ; restore var1 byte
002334  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
002338  1  01 B5 95 C9  
00233C  1  00 D0 04 A2  
00234A  1  88                   DEY                     ; decrement index
00234B  1  10 A3                BPL     SwapLp          ; loop until done
00234D  1               
00234D  1  60                   RTS
00234E  1               
00234E  1               SwapErr
00234E  1  4C 1D 15             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
002351  1               
002351  1               ; perform CALL
002351  1               
002351  1               LAB_CALL
002351  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002354  1               ; else do type mismatch
002354  1  20 74 22             JSR     LAB_F2FX        ; convert floating-to-fixed
002357  1  A9 23                LDA     #>CallExit      ; set return address high byte
002359  1  48                   PHA                     ; put on stack
00235A  1  A9 5F                LDA     #<CallExit-1    ; set return address low byte
00235C  1  48                   PHA                     ; put on stack
00235D  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
002360  1               
002360  1               
002360  1               ; if the called routine exits correctly then it will return to here. this will then get
002360  1               ; the next byte for the interpreter and return
002360  1               
002360  1               CallExit
002360  1                       .IFDEF  DUODYNE
002360  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002364  1                       .ELSE
002364  1                       JSR     LAB_GBYT        ; scan memory
002364  1                       .ENDIF
002364  1  60                   RTS
002365  1               
002365  1               ; perform WAIT
002365  1               
002365  1               LAB_WAIT
002365  1  20 5B 22             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
002368  1  86 97                STX     Frnxtl          ; save byte
00236A  1  A2 00                LDX     #$00            ; clear mask
00236C  1                       .IFDEF  DUODYNE
00236C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002370  1                       .ELSE
002370  1                       JSR     LAB_GBYT        ; scan memory
002370  1                       .ENDIF
002370  1               
002370  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
002372  1               
002372  1  20 61 22             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
002375  1               LAB_2441
002375  1  86 98                STX     Frnxth          ; save EOR argument
002377  1               LAB_2445
002377  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
00237B  1  B5 11 C9 00  
00237F  1  D0 04 A2 00  
00238D  1  45 98                EOR     Frnxth          ; EOR with second argument (mask)
00238F  1  25 97                AND     Frnxtl          ; AND with first argument (byte)
002391  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
002393  1               
002393  1               LAB_244D
002393  1  60                   RTS
002394  1               
002394  1               ; perform subtraction, FAC1 from (AY)
002394  1               
002394  1               LAB_2455
002394  1  20 82 25             JSR     LAB_264D        ; unpack memory (AY) into FAC2
002397  1               
002397  1               ; perform subtraction, FAC1 from FAC2
002397  1               
002397  1               LAB_SUBTRACT
002397  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002399  1  49 FF                EOR     #$FF            ; complement it
00239B  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
00239D  1  45 B7                EOR     FAC2_s          ; EOR with FAC2 sign (b7)
00239F  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
0023A1  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0023A3  1  4C B2 23             JMP     LAB_ADD         ; go add FAC2 to FAC1
0023A6  1               
0023A6  1               ; perform addition
0023A6  1               
0023A6  1               LAB_2467
0023A6  1  20 D1 24             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
0023A9  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
0023AB  1               
0023AB  1               ; add 0.5 to FAC1
0023AB  1               
0023AB  1               LAB_244E
0023AB  1  A9 C4                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
0023AD  1  A0 31                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
0023AF  1               
0023AF  1               ; add (AY) to FAC1
0023AF  1               
0023AF  1               LAB_246C
0023AF  1  20 82 25             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0023B2  1               
0023B2  1               ; add FAC2 to FAC1
0023B2  1               
0023B2  1               LAB_ADD
0023B2  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
0023B4  1               
0023B4  1               ; copy FAC2 to FAC1
0023B4  1               
0023B4  1               LAB_279B
0023B4  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
0023B6  1               
0023B6  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
0023B6  1               
0023B6  1               LAB_279D
0023B6  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
0023B8  1  A2 04                LDX     #$04            ; 4 bytes to copy
0023BA  1               LAB_27A1
0023BA  1  B5 B2                LDA     FAC1_o,X        ; get byte from FAC2,X
0023BC  1  95 AB                STA     FAC1_e-1,X      ; save byte at FAC1,X
0023BE  1  CA                   DEX                     ; decrement count
0023BF  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
0023C1  1               
0023C1  1  86 B9                STX     FAC1_r          ; clear FAC1 rounding byte
0023C3  1  60                   RTS
0023C4  1               
0023C4  1               ; FAC1 is non zero
0023C4  1               LAB_2474
0023C4  1  A6 B9                LDX     FAC1_r          ; get FAC1 rounding byte
0023C6  1  86 A3                STX     FAC2_r          ; save as FAC2 rounding byte
0023C8  1  A2 B3                LDX     #FAC2_e         ; set index to FAC2 exponent addr
0023CA  1  A5 B3                LDA     FAC2_e          ; get FAC2 exponent
0023CC  1               LAB_247C
0023CC  1  A8                   TAY                     ; copy exponent
0023CD  1  F0 C4                BEQ     LAB_244D        ; exit if zero
0023CF  1               
0023CF  1  38                   SEC                     ; set carry for subtract
0023D0  1  E5 AC                SBC     FAC1_e          ; subtract FAC1 exponent
0023D2  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
0023D4  1               
0023D4  1  90 12                BCC     LAB_2498        ; branch if <
0023D6  1               
0023D6  1               ; FAC2>FAC1
0023D6  1  84 AC                STY     FAC1_e          ; save FAC1 exponent
0023D8  1  A4 B7                LDY     FAC2_s          ; get FAC2 sign (b7)
0023DA  1  84 B0                STY     FAC1_s          ; save FAC1 sign (b7)
0023DC  1  49 FF                EOR     #$FF            ; complement A
0023DE  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
0023E0  1  A0 00                LDY     #$00            ; clear Y
0023E2  1  84 A3                STY     FAC2_r          ; clear FAC2 rounding byte
0023E4  1  A2 AC                LDX     #FAC1_e         ; set index to FAC1 exponent addr
0023E6  1  D0 04                BNE     LAB_249C        ; branch always
0023E8  1               
0023E8  1               LAB_2498
0023E8  1  A0 00                LDY     #$00            ; clear Y
0023EA  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
0023EC  1               LAB_249C
0023EC  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
0023EE  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
0023F0  1               
0023F0  1  A8                   TAY                     ; copy exponent difference to Y
0023F1  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
0023F3  1  56 01                LSR     PLUS_1,X        ; shift FAC? mantissa1
0023F5  1  20 E8 24             JSR     LAB_2592        ; shift FACX Y times right
0023F8  1               
0023F8  1               ; exponents are equal now do mantissa subtract
0023F8  1               LAB_24A8
0023F8  1  24 B8                BIT     FAC_sc          ; test sign compare (FAC1 EOR FAC2)
0023FA  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
0023FC  1               
0023FC  1  A0 AC                LDY     #FAC1_e         ; set index to FAC1 exponent addr
0023FE  1  E0 B3                CPX     #FAC2_e         ; compare X to FAC2 exponent addr
002400  1  F0 02                BEQ     LAB_24B4        ; branch if =
002402  1               
002402  1  A0 B3                LDY     #FAC2_e         ; else set index to FAC2 exponent addr
002404  1               
002404  1               ; subtract smaller from bigger (take sign of bigger)
002404  1               LAB_24B4
002404  1  38                   SEC                     ; set carry for subtract
002405  1  49 FF                EOR     #$FF            ; ones complement A
002407  1  65 A3                ADC     FAC2_r          ; add FAC2 rounding byte
002409  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
00240B  1                       .IFDEF  DUODYNE
00240B  1  DA                   PHX
00240C  1  BB                   TYX
00240D  1  B5 03                LDA     PLUS_3,X        ; get FACY mantissa3
00240F  1  FA                   PLX
002410  1                       .ELSE
002410  1                       LDA     PLUS_3,Y        ; get FACY mantissa3
002410  1                       .ENDIF
002410  1  F5 03                SBC     PLUS_3,X        ; subtract FACX mantissa3
002412  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
002414  1                       .IFDEF  DUODYNE
002414  1  DA                   PHX
002415  1  BB                   TYX
002416  1  B5 02                LDA     PLUS_2,X        ; get FACY mantissa2
002418  1  FA                   PLX
002419  1                       .ELSE
002419  1                       LDA     PLUS_2,Y        ; get FACY mantissa2
002419  1                       .ENDIF
002419  1  F5 02                SBC     PLUS_2,X        ; subtract FACX mantissa2
00241B  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
00241D  1               
00241D  1                       .IFDEF  DUODYNE
00241D  1  DA                   PHX
00241E  1  BB                   TYX
00241F  1  B5 01                LDA     PLUS_1,X        ; get FACY mantissa1
002421  1  FA                   PLX
002422  1                       .ELSE
002422  1                       LDA     PLUS_1,Y        ; get FACY mantissa1
002422  1                       .ENDIF
002422  1  F5 01                SBC     PLUS_1,X        ; subtract FACX mantissa1
002424  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002426  1               
002426  1               ; do ABS and normalise FAC1
002426  1               
002426  1               LAB_24D0
002426  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
002428  1               
002428  1  20 8D 24             JSR     LAB_2537        ; negate FAC1
00242B  1               
00242B  1               ; normalise FAC1
00242B  1               
00242B  1               LAB_24D5
00242B  1  A0 00                LDY     #$00            ; clear Y
00242D  1  98                   TYA                     ; clear A
00242E  1  18                   CLC                     ; clear carry for add
00242F  1               LAB_24D9
00242F  1  A6 AD                LDX     FAC1_1          ; get FAC1 mantissa1
002431  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
002433  1               
002433  1  A6 AE                LDX     FAC1_2          ; get FAC1 mantissa2
002435  1  86 AD                STX     FAC1_1          ; save FAC1 mantissa1
002437  1  A6 AF                LDX     FAC1_3          ; get FAC1 mantissa3
002439  1  86 AE                STX     FAC1_2          ; save FAC1 mantissa2
00243B  1  A6 B9                LDX     FAC1_r          ; get FAC1 rounding byte
00243D  1  86 AF                STX     FAC1_3          ; save FAC1 mantissa3
00243F  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
002441  1  69 08                ADC     #$08            ; add x to exponent offset
002443  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
002445  1  D0 E8                BNE     LAB_24D9        ; loop if not max
002447  1               
002447  1               ; clear FAC1 exponent and sign
002447  1               
002447  1               LAB_24F1
002447  1  A9 00                LDA     #$00            ; clear A
002449  1               LAB_24F3
002449  1  85 AC                STA     FAC1_e          ; set FAC1 exponent
00244B  1               
00244B  1               ; save FAC1 sign
00244B  1               
00244B  1               LAB_24F5
00244B  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
00244D  1  60                   RTS
00244E  1               
00244E  1               ; add FAC2 mantissa to FAC1 mantissa
00244E  1               
00244E  1               LAB_24F8
00244E  1  65 A3                ADC     FAC2_r          ; add FAC2 rounding byte
002450  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
002452  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002454  1  65 B6                ADC     FAC2_3          ; add FAC2 mantissa3
002456  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
002458  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00245A  1  65 B5                ADC     FAC2_2          ; add FAC2 mantissa2
00245C  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
00245E  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
002460  1  65 B4                ADC     FAC2_1          ; add FAC2 mantissa1
002462  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002464  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
002466  1               
002466  1  60                   RTS                     ; else just exit
002467  1               
002467  1               LAB_2511
002467  1  69 01                ADC     #$01            ; add 1 to exponent offset
002469  1  06 B9                ASL     FAC1_r          ; shift FAC1 rounding byte
00246B  1  26 AF                ROL     FAC1_3          ; shift FAC1 mantissa3
00246D  1  26 AE                ROL     FAC1_2          ; shift FAC1 mantissa2
00246F  1  26 AD                ROL     FAC1_1          ; shift FAC1 mantissa1
002471  1               
002471  1               ; normalise FAC1
002471  1               
002471  1               LAB_251B
002471  1  10 F4                BPL     LAB_2511        ; loop if not normalised
002473  1               
002473  1  38                   SEC                     ; set carry for subtract
002474  1  E5 AC                SBC     FAC1_e          ; subtract FAC1 exponent
002476  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
002478  1               
002478  1  49 FF                EOR     #$FF            ; complement exponent
00247A  1  69 01                ADC     #$01            ; +1 (twos complement)
00247C  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
00247E  1               
00247E  1               ; test and normalise FAC1 for C=0/1
00247E  1               
00247E  1               LAB_2528
00247E  1  90 0C                BCC     LAB_2536        ; exit if no overflow
002480  1               
002480  1               ; normalise FAC1 for C=1
002480  1               
002480  1               LAB_252A
002480  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent
002482  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
002484  1               
002484  1  66 AD                ROR     FAC1_1          ; shift FAC1 mantissa1
002486  1  66 AE                ROR     FAC1_2          ; shift FAC1 mantissa2
002488  1  66 AF                ROR     FAC1_3          ; shift FAC1 mantissa3
00248A  1  66 B9                ROR     FAC1_r          ; shift FAC1 rounding byte
00248C  1               LAB_2536
00248C  1  60                   RTS
00248D  1               
00248D  1               ; negate FAC1
00248D  1               
00248D  1               LAB_2537
00248D  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
00248F  1  49 FF                EOR     #$FF            ; complement it
002491  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002493  1               
002493  1               ; twos complement FAC1 mantissa
002493  1               
002493  1               LAB_253D
002493  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
002495  1  49 FF                EOR     #$FF            ; complement it
002497  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002499  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00249B  1  49 FF                EOR     #$FF            ; complement it
00249D  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
00249F  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0024A1  1  49 FF                EOR     #$FF            ; complement it
0024A3  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
0024A5  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
0024A7  1  49 FF                EOR     #$FF            ; complement it
0024A9  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
0024AB  1  E6 B9                INC     FAC1_r          ; increment FAC1 rounding byte
0024AD  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
0024AF  1               
0024AF  1               ; increment FAC1 mantissa
0024AF  1               
0024AF  1               LAB_2559
0024AF  1  E6 AF                INC     FAC1_3          ; increment FAC1 mantissa3
0024B1  1  D0 06                BNE     LAB_2563        ; finished if no rollover
0024B3  1               
0024B3  1  E6 AE                INC     FAC1_2          ; increment FAC1 mantissa2
0024B5  1  D0 02                BNE     LAB_2563        ; finished if no rollover
0024B7  1               
0024B7  1  E6 AD                INC     FAC1_1          ; increment FAC1 mantissa1
0024B9  1               LAB_2563
0024B9  1  60                   RTS
0024BA  1               
0024BA  1               ; do overflow error (overflow exit)
0024BA  1               
0024BA  1               LAB_2564
0024BA  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
0024BC  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
0024BF  1               
0024BF  1               ; shift FCAtemp << A+8 times
0024BF  1               
0024BF  1               LAB_2569
0024BF  1  A2 74                LDX     #FACt_1-1       ; set offset to FACtemp
0024C1  1               LAB_256B
0024C1  1  B4 03                LDY     PLUS_3,X        ; get FACX mantissa3
0024C3  1  84 B9                STY     FAC1_r          ; save as FAC1 rounding byte
0024C5  1  B4 02                LDY     PLUS_2,X        ; get FACX mantissa2
0024C7  1  94 03                STY     PLUS_3,X        ; save FACX mantissa3
0024C9  1  B4 01                LDY     PLUS_1,X        ; get FACX mantissa1
0024CB  1  94 02                STY     PLUS_2,X        ; save FACX mantissa2
0024CD  1  A4 B2                LDY     FAC1_o          ; get FAC1 overflow byte
0024CF  1  94 01                STY     PLUS_1,X        ; save FACX mantissa1
0024D1  1               
0024D1  1               ; shift FACX -A times right (> 8 shifts)
0024D1  1               
0024D1  1               LAB_257B
0024D1  1  69 08                ADC     #$08            ; add 8 to shift count
0024D3  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
0024D5  1               
0024D5  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
0024D7  1               
0024D7  1  E9 08                SBC     #$08            ; else subtract 8 again
0024D9  1  A8                   TAY                     ; save count to Y
0024DA  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
0024DC  1  B0 12                BCS     LAB_259A        ;.
0024DE  1               
0024DE  1               LAB_2588
0024DE  1  16 01                ASL     PLUS_1,X        ; shift FACX mantissa1
0024E0  1  90 02                BCC     LAB_258E        ; branch if +ve
0024E2  1               
0024E2  1  F6 01                INC     PLUS_1,X        ; this sets b7 eventually
0024E4  1               LAB_258E
0024E4  1  76 01                ROR     PLUS_1,X        ; shift FACX mantissa1 (correct for ASL)
0024E6  1  76 01                ROR     PLUS_1,X        ; shift FACX mantissa1 (put carry in b7)
0024E8  1               
0024E8  1               ; shift FACX Y times right
0024E8  1               
0024E8  1               LAB_2592
0024E8  1  76 02                ROR     PLUS_2,X        ; shift FACX mantissa2
0024EA  1  76 03                ROR     PLUS_3,X        ; shift FACX mantissa3
0024EC  1  6A                   ROR     A               ; shift FACX rounding byte
0024ED  1  C8                   INY                     ; increment exponent diff
0024EE  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
0024F0  1               
0024F0  1               LAB_259A
0024F0  1  18                   CLC                     ; just clear it
0024F1  1  60                   RTS
0024F2  1               
0024F2  1               ; perform LOG()
0024F2  1               
0024F2  1               LAB_LOG
0024F2  1  20 D0 27             JSR     LAB_27CA        ; test sign and zero
0024F5  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
0024F7  1               
0024F7  1  10 03                BPL     LAB_25C7        ; skip error if +ve
0024F9  1               
0024F9  1               LAB_25C4
0024F9  1  4C AD 19             JMP     LAB_FCER        ; do function call error then warm start (-ve)
0024FC  1               
0024FC  1               LAB_25C7
0024FC  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0024FE  1  E9 7F                SBC     #$7F            ; normalise it
002500  1  48                   PHA                     ; save it
002501  1  A9 80                LDA     #$80            ; set exponent to zero
002503  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002505  1  A9 44                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
002507  1  A0 31                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
002509  1  20 AF 23             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
00250C  1  A9 48                LDA     #<LAB_25B1      ; set root2 pointer low byte
00250E  1  A0 31                LDY     #>LAB_25B1      ; set root2 pointer high byte
002510  1  20 48 26             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
002513  1  A9 BB                LDA     #<LAB_259C      ; set 1 pointer low byte
002515  1  A0 31                LDY     #>LAB_259C      ; set 1 pointer high byte
002517  1  20 94 23             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
00251A  1  A9 37                LDA     #<LAB_25A0      ; set pointer low byte to counter
00251C  1  A0 31                LDY     #>LAB_25A0      ; set pointer high byte to counter
00251E  1  20 D4 2B             JSR     LAB_2B6E        ; ^2 then series evaluation
002521  1  A9 4C                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
002523  1  A0 31                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
002525  1  20 AF 23             JSR     LAB_246C        ; add (AY) to FAC1
002528  1  68                   PLA                     ; restore FAC1 exponent
002529  1  20 97 29             JSR     LAB_2912        ; evaluate new ASCII digit
00252C  1  A9 50                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
00252E  1  A0 31                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
002530  1               
002530  1               ; do convert AY, FCA1*(AY)
002530  1               
002530  1               LAB_25FB
002530  1  20 82 25             JSR     LAB_264D        ; unpack memory (AY) into FAC2
002533  1               LAB_MULTIPLY
002533  1  F0 4C                BEQ     LAB_264C        ; exit if zero
002535  1               
002535  1  20 F8 25             JSR     LAB_2673        ; test and adjust accumulators
002538  1  A9 00                LDA     #$00            ; clear A
00253A  1  85 75                STA     FACt_1          ; clear temp mantissa1
00253C  1  85 76                STA     FACt_2          ; clear temp mantissa2
00253E  1  85 77                STA     FACt_3          ; clear temp mantissa3
002540  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
002542  1  20 57 25             JSR     LAB_2622        ; go do shift/add FAC2
002545  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002547  1  20 57 25             JSR     LAB_2622        ; go do shift/add FAC2
00254A  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
00254C  1  20 57 25             JSR     LAB_2622        ; go do shift/add FAC2
00254F  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
002551  1  20 5C 25             JSR     LAB_2627        ; go do shift/add FAC2
002554  1  4C B5 26             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
002557  1               
002557  1               LAB_2622
002557  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
002559  1               
002559  1  4C BF 24             JMP     LAB_2569        ; shift FCAtemp << A+8 times
00255C  1               
00255C  1               ; else do shift and add
00255C  1               LAB_2627
00255C  1  4A                   LSR     A               ; shift byte
00255D  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
00255F  1               LAB_262A
00255F  1  A8                   TAY                     ; copy result
002560  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
002562  1               
002562  1  18                   CLC                     ; clear carry for add
002563  1  A5 77                LDA     FACt_3          ; get temp mantissa3
002565  1  65 B6                ADC     FAC2_3          ; add FAC2 mantissa3
002567  1  85 77                STA     FACt_3          ; save temp mantissa3
002569  1  A5 76                LDA     FACt_2          ; get temp mantissa2
00256B  1  65 B5                ADC     FAC2_2          ; add FAC2 mantissa2
00256D  1  85 76                STA     FACt_2          ; save temp mantissa2
00256F  1  A5 75                LDA     FACt_1          ; get temp mantissa1
002571  1  65 B4                ADC     FAC2_1          ; add FAC2 mantissa1
002573  1  85 75                STA     FACt_1          ; save temp mantissa1
002575  1               LAB_2640
002575  1  66 75                ROR     FACt_1          ; shift temp mantissa1
002577  1  66 76                ROR     FACt_2          ; shift temp mantissa2
002579  1  66 77                ROR     FACt_3          ; shift temp mantissa3
00257B  1  66 B9                ROR     FAC1_r          ; shift temp rounding byte
00257D  1  98                   TYA                     ; get byte back
00257E  1  4A                   LSR     A               ; shift byte
00257F  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
002581  1               
002581  1               LAB_264C
002581  1  60                   RTS
002582  1               
002582  1               ; unpack memory (AY) into FAC2
002582  1               
002582  1               LAB_264D
002582  1  85 71                STA     ut1_pl          ; save pointer low byte
002584  1  84 72                STY     ut1_ph          ; save pointer high byte
002586  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
002588  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
00258C  1  B5 71 C9 00  
002590  1  D0 04 A2 00  
00259E  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
0025A0  1  88                   DEY                     ; decrement index
0025A1  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
0025A5  1  B5 71 C9 00  
0025A9  1  D0 04 A2 00  
0025B7  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
0025B9  1  88                   DEY                     ; decrement index
0025BA  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
0025BE  1  B5 71 C9 00  
0025C2  1  D0 04 A2 00  
0025D0  1  85 B7                STA     FAC2_s          ; save FAC2 sign (b7)
0025D2  1  45 B0                EOR     FAC1_s          ; EOR with FAC1 sign (b7)
0025D4  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
0025D6  1  A5 B7                LDA     FAC2_s          ; recover FAC2 sign (b7)
0025D8  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
0025DA  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
0025DC  1  88                   DEY                     ; decrement index
0025DD  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
0025E1  1  B5 71 C9 00  
0025E5  1  D0 04 A2 00  
0025F3  1  85 B3                STA     FAC2_e          ; save FAC2 exponent
0025F5  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0025F7  1  60                   RTS
0025F8  1               
0025F8  1               ; test and adjust accumulators
0025F8  1               
0025F8  1               LAB_2673
0025F8  1  A5 B3                LDA     FAC2_e          ; get FAC2 exponent
0025FA  1               LAB_2675
0025FA  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
0025FC  1               
0025FC  1  18                   CLC                     ; clear carry for add
0025FD  1  65 AC                ADC     FAC1_e          ; add FAC1 exponent
0025FF  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
002601  1               
002601  1  30 31                BMI     LAB_269B        ; do overflow error
002603  1               
002603  1  18                   CLC                     ; clear carry for the add
002604  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
002605  1               LAB_2680
002605  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
002607  1               
002607  1  69 80                ADC     #$80            ; adjust exponent
002609  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
00260B  1  D0 03                BNE     LAB_268B        ; branch if not zero
00260D  1               
00260D  1  4C 4B 24             JMP     LAB_24F5        ; save FAC1 sign and return
002610  1               
002610  1               LAB_268B
002610  1  A5 B8                LDA     FAC_sc          ; get sign compare (FAC1 EOR FAC2)
002612  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002614  1               LAB_268F
002614  1  60                   RTS
002615  1               
002615  1               ; handle overflow and underflow
002615  1               
002615  1               LAB_2690
002615  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002617  1  10 1B                BPL     LAB_269B        ; do overflow error
002619  1               
002619  1               ; handle underflow
002619  1               LAB_2696
002619  1  68                   PLA                     ; pop return address low byte
00261A  1  68                   PLA                     ; pop return address high byte
00261B  1  4C 47 24             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
00261E  1               
00261E  1               ; multiply by 10
00261E  1               
00261E  1               LAB_269E
00261E  1  20 B1 27             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
002621  1  AA                   TAX                     ; copy exponent (set the flags)
002622  1  F0 F0                BEQ     LAB_268F        ; exit if zero
002624  1               
002624  1  18                   CLC                     ; clear carry for add
002625  1  69 02                ADC     #$02            ; add two to exponent (*4)
002627  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
002629  1               
002629  1  A2 00                LDX     #$00            ; clear byte
00262B  1  86 B8                STX     FAC_sc          ; clear sign compare (FAC1 EOR FAC2)
00262D  1  20 CC 23             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
002630  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent (*10)
002632  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
002634  1               
002634  1               LAB_269B
002634  1  4C BA 24             JMP     LAB_2564        ; do overflow error and warm start
002637  1               
002637  1               ; divide by 10
002637  1               
002637  1               LAB_26B9
002637  1  20 B1 27             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00263A  1  A9 CC                LDA     #<LAB_26B5      ; set pointer to 10d low addr
00263C  1  A0 31                LDY     #>LAB_26B5      ; set pointer to 10d high addr
00263E  1  A2 00                LDX     #$00            ; clear sign
002640  1               
002640  1               ; divide by (AY) (X=sign)
002640  1               
002640  1               LAB_26C2
002640  1  86 B8                STX     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
002642  1  20 C4 26             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002645  1  4C 4B 26             JMP     LAB_DIVIDE      ; do FAC2/FAC1
002648  1               
002648  1               ; Perform divide-by
002648  1               ; convert AY and do (AY)/FAC1
002648  1               
002648  1               LAB_26CA
002648  1  20 82 25             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00264B  1               
00264B  1               ; Perform divide-into
00264B  1               LAB_DIVIDE
00264B  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
00264D  1               
00264D  1  20 C0 27             JSR     LAB_27BA        ; round FAC1
002650  1  A9 00                LDA     #$00            ; clear A
002652  1  38                   SEC                     ; set carry for subtract
002653  1  E5 AC                SBC     FAC1_e          ; subtract FAC1 exponent (2s complement)
002655  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002657  1  20 F8 25             JSR     LAB_2673        ; test and adjust accumulators
00265A  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent
00265C  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
00265E  1               
00265E  1  A2 FF                LDX     #$FF            ; set index for pre increment
002660  1  A9 01                LDA     #$01            ; set bit to flag byte save
002662  1               LAB_26E4
002662  1  A4 B4                LDY     FAC2_1          ; get FAC2 mantissa1
002664  1  C4 AD                CPY     FAC1_1          ; compare FAC1 mantissa1
002666  1  D0 0A                BNE     LAB_26F4        ; branch if <>
002668  1               
002668  1  A4 B5                LDY     FAC2_2          ; get FAC2 mantissa2
00266A  1  C4 AE                CPY     FAC1_2          ; compare FAC1 mantissa2
00266C  1  D0 04                BNE     LAB_26F4        ; branch if <>
00266E  1               
00266E  1  A4 B6                LDY     FAC2_3          ; get FAC2 mantissa3
002670  1  C4 AF                CPY     FAC1_3          ; compare FAC1 mantissa3
002672  1               LAB_26F4
002672  1  08                   PHP                     ; save FAC2-FAC1 compare status
002673  1  2A                   ROL     A               ; shift the result byte
002674  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
002676  1               
002676  1  A0 01                LDY     #$01            ; set bit to flag byte save
002678  1  E8                   INX                     ; else increment the index to FACt
002679  1  E0 02                CPX     #$02            ; compare with the index to FACt_3
00267B  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
00267D  1               
00267D  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
00267F  1               ; return
00267F  1               
00267F  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
002681  1               LAB_2701
002681  1  95 75                STA     FACt_1,X        ; write result byte to FACt_1 + index
002683  1  98                   TYA                     ; copy the next save byte flag
002684  1               LAB_2702
002684  1  28                   PLP                     ; restore FAC2-FAC1 compare status
002685  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
002687  1               
002687  1  A8                   TAY                     ; save FAC2-FAC1 compare status
002688  1  A5 B6                LDA     FAC2_3          ; get FAC2 mantissa3
00268A  1  E5 AF                SBC     FAC1_3          ; subtract FAC1 mantissa3
00268C  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
00268E  1  A5 B5                LDA     FAC2_2          ; get FAC2 mantissa2
002690  1  E5 AE                SBC     FAC1_2          ; subtract FAC1 mantissa2
002692  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
002694  1  A5 B4                LDA     FAC2_1          ; get FAC2 mantissa1
002696  1  E5 AD                SBC     FAC1_1          ; subtract FAC1 mantissa1
002698  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
00269A  1  98                   TYA                     ; restore FAC2-FAC1 compare status
00269B  1               
00269B  1               ; FAC2 = FAC2*2
00269B  1               LAB_2704
00269B  1  06 B6                ASL     FAC2_3          ; shift FAC2 mantissa3
00269D  1  26 B5                ROL     FAC2_2          ; shift FAC2 mantissa2
00269F  1  26 B4                ROL     FAC2_1          ; shift FAC2 mantissa1
0026A1  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
0026A3  1               
0026A3  1  30 BD                BMI     LAB_26E4        ; loop with compare
0026A5  1               
0026A5  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
0026A7  1               
0026A7  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
0026A7  1               
0026A7  1               LAB_272B
0026A7  1  4A                   LSR     A               ; shift b1 - b0 ..
0026A8  1  6A                   ROR     A               ; ..
0026A9  1  6A                   ROR     A               ; .. to b7 - b6
0026AA  1  85 B9                STA     FAC1_r          ; save FAC1 rounding byte
0026AC  1  28                   PLP                     ; dump FAC2-FAC1 compare status
0026AD  1  4C B5 26             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
0026B0  1               
0026B0  1               ; do "Divide by zero" error
0026B0  1               
0026B0  1               LAB_2737
0026B0  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
0026B2  1  4C E3 09             JMP     LAB_XERR        ; do error #X, then warm start
0026B5  1               
0026B5  1               ; copy temp to FAC1 and normalise
0026B5  1               
0026B5  1               LAB_273C
0026B5  1  A5 75                LDA     FACt_1          ; get temp mantissa1
0026B7  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
0026B9  1  A5 76                LDA     FACt_2          ; get temp mantissa2
0026BB  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
0026BD  1  A5 77                LDA     FACt_3          ; get temp mantissa3
0026BF  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
0026C1  1  4C 2B 24             JMP     LAB_24D5        ; normalise FAC1 and return
0026C4  1               
0026C4  1               ; unpack memory (AY) into FAC1
0026C4  1               
0026C4  1               LAB_UFAC
0026C4  1  85 71                STA     ut1_pl          ; save pointer low byte
0026C6  1  84 72                STY     ut1_ph          ; save pointer high byte
0026C8  1  A0 03                LDY     #$03            ; 4 bytes to do
0026CA  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
0026CE  1  B5 71 C9 00  
0026D2  1  D0 04 A2 00  
0026E0  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
0026E2  1  88                   DEY                     ; decrement index
0026E3  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
0026E7  1  B5 71 C9 00  
0026EB  1  D0 04 A2 00  
0026F9  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
0026FB  1  88                   DEY                     ; decrement index
0026FC  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
002700  1  B5 71 C9 00  
002704  1  D0 04 A2 00  
002712  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002714  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
002716  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002718  1  88                   DEY                     ; decrement index
002719  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
00271D  1  B5 71 C9 00  
002721  1  D0 04 A2 00  
00272F  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002731  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
002733  1  60                   RTS
002734  1               
002734  1               ; pack FAC1 into Adatal
002734  1               
002734  1               LAB_276E
002734  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
002736  1               LAB_2770
002736  1  A0 00                LDY     #>Adatal        ; set pointer high byte
002738  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
00273A  1               
00273A  1               ; pack FAC1 into (Lvarpl)
00273A  1               
00273A  1               LAB_PFAC
00273A  1  A6 97                LDX     Lvarpl          ; get destination pointer low byte
00273C  1  A4 98                LDY     Lvarph          ; get destination pointer high byte
00273E  1               
00273E  1               ; pack FAC1 into (XY)
00273E  1               
00273E  1               LAB_2778
00273E  1  20 C0 27             JSR     LAB_27BA        ; round FAC1
002741  1  86 71                STX     ut1_pl          ; save pointer low byte
002743  1  84 72                STY     ut1_ph          ; save pointer high byte
002745  1  A0 03                LDY     #$03            ; set index
002747  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002749  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
00274D  1  01 B5 71 C9  
002751  1  00 D0 04 A2  
00275F  1  88                   DEY                     ; decrement index
002760  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002762  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
002766  1  01 B5 71 C9  
00276A  1  00 D0 04 A2  
002778  1  88                   DEY                     ; decrement index
002779  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
00277B  1  09 7F                ORA     #$7F            ; set bits x111 1111
00277D  1  25 AD                AND     FAC1_1          ; AND in FAC1 mantissa1
00277F  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
002783  1  01 B5 71 C9  
002787  1  00 D0 04 A2  
002795  1  88                   DEY                     ; decrement index
002796  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002798  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
00279C  1  01 B5 71 C9  
0027A0  1  00 D0 04 A2  
0027AE  1  84 B9                STY     FAC1_r          ; clear FAC1 rounding byte
0027B0  1  60                   RTS
0027B1  1               
0027B1  1               ; round and copy FAC1 to FAC2
0027B1  1               
0027B1  1               LAB_27AB
0027B1  1  20 C0 27             JSR     LAB_27BA        ; round FAC1
0027B4  1               
0027B4  1               ; copy FAC1 to FAC2
0027B4  1               
0027B4  1               LAB_27AE
0027B4  1  A2 05                LDX     #$05            ; 5 bytes to copy
0027B6  1               LAB_27B0
0027B6  1  B5 AB                LDA     FAC1_e-1,X      ; get byte from FAC1,X
0027B8  1  95 B2                STA     FAC1_o,X        ; save byte at FAC2,X
0027BA  1  CA                   DEX                     ; decrement count
0027BB  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
0027BD  1               
0027BD  1  86 B9                STX     FAC1_r          ; clear FAC1 rounding byte
0027BF  1               LAB_27B9
0027BF  1  60                   RTS
0027C0  1               
0027C0  1               ; round FAC1
0027C0  1               
0027C0  1               LAB_27BA
0027C0  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0027C2  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
0027C4  1               
0027C4  1  06 B9                ASL     FAC1_r          ; shift FAC1 rounding byte
0027C6  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
0027C8  1               
0027C8  1               ; round FAC1 (no check)
0027C8  1               
0027C8  1               LAB_27C2
0027C8  1  20 AF 24             JSR     LAB_2559        ; increment FAC1 mantissa
0027CB  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
0027CD  1               
0027CD  1  4C 80 24             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
0027D0  1               
0027D0  1               ; get FAC1 sign
0027D0  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0027D0  1               
0027D0  1               LAB_27CA
0027D0  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0027D2  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
0027D4  1               
0027D4  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0027D4  1               ; no = 0 check
0027D4  1               
0027D4  1               LAB_27CE
0027D4  1  A5 B0                LDA     FAC1_s          ; else get FAC1 sign (b7)
0027D6  1               
0027D6  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0027D6  1               ; no = 0 check, sign in A
0027D6  1               
0027D6  1               LAB_27D0
0027D6  1  2A                   ROL     A               ; move sign bit to carry
0027D7  1  A9 FF                LDA     #$FF            ; set byte for -ve result
0027D9  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
0027DB  1               
0027DB  1  A9 01                LDA     #$01            ; else set byte for +ve result
0027DD  1               LAB_27D7
0027DD  1  60                   RTS
0027DE  1               
0027DE  1               ; perform SGN()
0027DE  1               
0027DE  1               LAB_SGN
0027DE  1  20 D0 27             JSR     LAB_27CA        ; get FAC1 sign
0027E1  1               ; return A=$FF/-ve A=$01/+ve
0027E1  1               ; save A as integer byte
0027E1  1               
0027E1  1               LAB_27DB
0027E1  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
0027E3  1  A9 00                LDA     #$00            ; clear A
0027E5  1  85 AE                STA     FAC1_2          ; clear FAC1 mantissa2
0027E7  1  A2 88                LDX     #$88            ; set exponent
0027E9  1               
0027E9  1               ; set exp=X, clearFAC1 mantissa3 and normalise
0027E9  1               
0027E9  1               LAB_27E3
0027E9  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
0027EB  1  49 FF                EOR     #$FF            ; complement it
0027ED  1  2A                   ROL     A               ; sign bit into carry
0027EE  1               
0027EE  1               ; set exp=X, clearFAC1 mantissa3 and normalise
0027EE  1               
0027EE  1               LAB_STFA
0027EE  1  A9 00                LDA     #$00            ; clear A
0027F0  1  85 AF                STA     FAC1_3          ; clear FAC1 mantissa3
0027F2  1  86 AC                STX     FAC1_e          ; set FAC1 exponent
0027F4  1  85 B9                STA     FAC1_r          ; clear FAC1 rounding byte
0027F6  1  85 B0                STA     FAC1_s          ; clear FAC1 sign (b7)
0027F8  1  4C 26 24             JMP     LAB_24D0        ; do ABS and normalise FAC1
0027FB  1               
0027FB  1               ; perform ABS()
0027FB  1               
0027FB  1               LAB_ABS
0027FB  1  46 B0                LSR     FAC1_s          ; clear FAC1 sign (put zero in b7)
0027FD  1  60                   RTS
0027FE  1               
0027FE  1               ; compare FAC1 with (AY)
0027FE  1               ; returns A=$00 if FAC1 = (AY)
0027FE  1               ; returns A=$01 if FAC1 > (AY)
0027FE  1               ; returns A=$FF if FAC1 < (AY)
0027FE  1               
0027FE  1               LAB_27F8
0027FE  1  85 73                STA     ut2_pl          ; save pointer low byte
002800  1               LAB_27FA
002800  1  84 74                STY     ut2_ph          ; save pointer high byte
002802  1  A0 00                LDY     #$00            ; clear index
002804  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
002808  1  B5 73 C9 00  
00280C  1  D0 04 A2 00  
00281A  1  C8                   INY                     ; increment index
00281B  1  AA                   TAX                     ; copy (AY) exponent to X
00281C  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
00281E  1               ; A=FF,C=1/-ve A=01,C=0/+ve
00281E  1               
00281E  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
002822  1  B5 73 C9 00  
002826  1  D0 04 A2 00  
002834  1  45 B0                EOR     FAC1_s          ; EOR FAC1 sign (b7)
002836  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
002838  1               ; A=01,C=0/+ve and return
002838  1               
002838  1  E4 AC                CPX     FAC1_e          ; compare (AY) exponent with FAC1 exponent
00283A  1  D0 56                BNE     LAB_2828        ; branch if different
00283C  1               
00283C  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
002840  1  B5 73 C9 00  
002844  1  D0 04 A2 00  
002852  1  09 80                ORA     #$80            ; normalise top bit
002854  1  C5 AD                CMP     FAC1_1          ; compare with FAC1 mantissa1
002856  1  D0 3A                BNE     LAB_2828        ; branch if different
002858  1               
002858  1  C8                   INY                     ; increment index
002859  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
00285D  1  B5 73 C9 00  
002861  1  D0 04 A2 00  
00286F  1  C5 AE                CMP     FAC1_2          ; compare with FAC1 mantissa2
002871  1  D0 1F                BNE     LAB_2828        ; branch if different
002873  1               
002873  1  C8                   INY                     ; increment index
002874  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
002876  1  C5 B9                CMP     FAC1_r          ; compare with FAC1 rounding byte (set carry)
002878  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
00287C  1  B5 73 C9 00  
002880  1  D0 04 A2 00  
00288E  1  E5 AF                SBC     FAC1_3          ; subtract FAC1 mantissa3
002890  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
002892  1               
002892  1               ; gets here if number <> FAC1
002892  1               
002892  1               LAB_2828
002892  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002894  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
002896  1               
002896  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
002898  1               LAB_282E
002898  1  4C D6 27             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
00289B  1               
00289B  1               ; convert FAC1 floating-to-fixed
00289B  1               
00289B  1               LAB_2831
00289B  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
00289D  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
00289F  1               
00289F  1  38                   SEC                     ; set carry for subtract
0028A0  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
0028A2  1  24 B0                BIT     FAC1_s          ; test FAC1 sign (b7)
0028A4  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
0028A6  1               
0028A6  1               ; FAC1 was -ve
0028A6  1  AA                   TAX                     ; copy subtracted exponent
0028A7  1  A9 FF                LDA     #$FF            ; overflow for -ve number
0028A9  1  85 B2                STA     FAC1_o          ; set FAC1 overflow byte
0028AB  1  20 93 24             JSR     LAB_253D        ; twos complement FAC1 mantissa
0028AE  1  8A                   TXA                     ; restore subtracted exponent
0028AF  1               LAB_2845
0028AF  1  A2 AC                LDX     #FAC1_e         ; set index to FAC1
0028B1  1  C9 F9                CMP     #$F9            ; compare exponent result
0028B3  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
0028B5  1               
0028B5  1  20 D1 24             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
0028B8  1  84 B2                STY     FAC1_o          ; clear FAC1 overflow byte
0028BA  1               LAB_2850
0028BA  1  60                   RTS
0028BB  1               
0028BB  1               ; shift FAC1 A times right
0028BB  1               
0028BB  1               LAB_2851
0028BB  1  A8                   TAY                     ; copy shift count
0028BC  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
0028BE  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
0028C0  1  46 AD                LSR     FAC1_1          ; shift FAC1 mantissa1
0028C2  1  05 AD                ORA     FAC1_1          ; OR sign in b7 FAC1 mantissa1
0028C4  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
0028C6  1  20 E8 24             JSR     LAB_2592        ; shift FAC1 Y times right
0028C9  1  84 B2                STY     FAC1_o          ; clear FAC1 overflow byte
0028CB  1  60                   RTS
0028CC  1               
0028CC  1               ; perform INT()
0028CC  1               
0028CC  1               LAB_INT
0028CC  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
0028CE  1  C9 98                CMP     #$98            ; compare with max int
0028D0  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
0028D2  1               
0028D2  1  20 9B 28             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0028D5  1  84 B9                STY     FAC1_r          ; save FAC1 rounding byte
0028D7  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
0028D9  1  84 B0                STY     FAC1_s          ; save FAC1 sign (b7)
0028DB  1  49 80                EOR     #$80            ; toggle FAC1 sign
0028DD  1  2A                   ROL     A               ; shift into carry
0028DE  1  A9 98                LDA     #$98            ; set new exponent
0028E0  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
0028E2  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
0028E4  1  85 5B                STA     Temp3           ; save for EXP() function
0028E6  1  4C 26 24             JMP     LAB_24D0        ; do ABS and normalise FAC1
0028E9  1               
0028E9  1               ; clear FAC1 and return
0028E9  1               
0028E9  1               LAB_287F
0028E9  1  85 AD                STA     FAC1_1          ; clear FAC1 mantissa1
0028EB  1  85 AE                STA     FAC1_2          ; clear FAC1 mantissa2
0028ED  1  85 AF                STA     FAC1_3          ; clear FAC1 mantissa3
0028EF  1  A8                   TAY                     ; clear Y
0028F0  1               LAB_2886
0028F0  1  60                   RTS
0028F1  1               
0028F1  1               ; get FAC1 from string
0028F1  1               ; this routine now handles hex and binary values from strings
0028F1  1               ; starting with "$" and "%" respectively
0028F1  1               
0028F1  1               LAB_2887
0028F1  1  A0 00                LDY     #$00            ; clear Y
0028F3  1  84 5F                STY     Dtypef          ; clear data type flag, $FF=string, $00=numeric
0028F5  1  A2 09                LDX     #$09            ; set index
0028F7  1               LAB_288B
0028F7  1  94 A8                STY     numexp,X        ; clear byte
0028F9  1  CA                   DEX                     ; decrement index
0028FA  1  10 FB                BPL     LAB_288B        ; loop until numexp to negnum (and FAC1) = $00
0028FC  1               
0028FC  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
0028FE  1  4C 84 29             JMP     LAB_28FE        ; branch if 1st character numeric
002901  1               LAB_s28FE:
002901  1               
002901  1               ; get FAC1 from string .. first character wasn't numeric
002901  1               
002901  1  C9 2D                CMP     #'-'            ; else compare with "-"
002903  1  D0 04                BNE     LAB_289A        ; branch if not "-"
002905  1               
002905  1  86 B1                STX     negnum          ; set flag for -ve number (X = $FF)
002907  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
002909  1               
002909  1               ; get FAC1 from string .. first character wasn't numeric or -
002909  1               
002909  1               LAB_289A
002909  1  C9 2B                CMP     #'+'            ; else compare with "+"
00290B  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
00290D  1               
00290D  1               ; was "+" or "-" to start, so get next character
00290D  1               
00290D  1               LAB_289C
00290D  1                       .IFDEF  DUODYNE
00290D  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002911  1                       .ELSE
002911  1                       JSR     LAB_IGBY        ; increment and scan memory
002911  1                       .ENDIF
002911  1               
002911  1  90 71                BCC     LAB_28FE        ; branch if numeric character
002913  1               
002913  1               ; code here for hex and binary numbers
002913  1               
002913  1               LAB_289D
002913  1  C9 24                CMP     #'$'            ; else compare with "$"
002915  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
002917  1               
002917  1  4C 45 2E             JMP     LAB_CHEX        ; branch if "$"
00291A  1               
00291A  1               LAB_NHEX
00291A  1  C9 25                CMP     #'%'            ; else compare with "%"
00291C  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
00291E  1               
00291E  1  4C 74 2E             JMP     LAB_CBIN        ; branch if "%"
002921  1               
002921  1               LAB_289E
002921  1                       .IFDEF  DUODYNE
002921  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002925  1                       .ELSE
002925  1                       JSR     LAB_IGBY        ; increment and scan memory
002925  1                       .ENDIF
002925  1               
002925  1               LAB_28A1
002925  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
002927  1               
002927  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
002927  1               
002927  1               LAB_28A3
002927  1  C9 2E                CMP     #'.'            ; else compare with "."
002929  1  F0 30                BEQ     LAB_28D5        ; branch if "."
00292B  1               
00292B  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
00292B  1               
00292B  1  C9 45                CMP     #'E'            ; else compare with "E"
00292D  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
00292F  1               
00292F  1               ; was "E" so evaluate exponential part
00292F  1                       .IFDEF  DUODYNE
00292F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002933  1                       .ELSE
002933  1                       JSR     LAB_IGBY        ; increment and scan memory
002933  1                       .ENDIF
002933  1               
002933  1  90 18                BCC     LAB_28C7        ; branch if numeric character
002935  1               
002935  1  C9 B8                CMP     #TK_MINUS       ; else compare with token for -
002937  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
002939  1               
002939  1  C9 2D                CMP     #'-'            ; else compare with "-"
00293B  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
00293D  1               
00293D  1  C9 B7                CMP     #TK_PLUS        ; else compare with token for +
00293F  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
002941  1               
002941  1  C9 2B                CMP     #'+'            ; else compare with "+"
002943  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
002945  1               
002945  1  D0 08                BNE     LAB_28C9        ; branch always
002947  1               
002947  1               LAB_28C2
002947  1  66 AB                ROR     expneg          ; set exponent -ve flag (C, which=1, into b7)
002949  1               LAB_28C4
002949  1                       .IFDEF  DUODYNE
002949  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00294D  1                       .ELSE
00294D  1                       JSR     LAB_IGBY        ; increment and scan memory
00294D  1                       .ENDIF
00294D  1               
00294D  1               LAB_28C7
00294D  1  90 5B                BCC     LAB_2925        ; branch if numeric character
00294F  1               
00294F  1               LAB_28C9
00294F  1  24 AB                BIT     expneg          ; test exponent -ve flag
002951  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
002953  1               
002953  1               ; else do exponent = -exponent
002953  1  A9 00                LDA     #$00            ; clear result
002955  1  38                   SEC                     ; set carry for subtract
002956  1  E5 A9                SBC     expcnt          ; subtract exponent byte
002958  1  4C 63 29             JMP     LAB_28DD        ; go evaluate exponent
00295B  1               
00295B  1               LAB_28D5
00295B  1  66 AA                ROR     numdpf          ; set decimal point flag
00295D  1  24 AA                BIT     numdpf          ; test decimal point flag
00295F  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
002961  1               
002961  1               ; evaluate exponent
002961  1               LAB_28DB
002961  1  A5 A9                LDA     expcnt          ; get exponent count byte
002963  1               LAB_28DD
002963  1  38                   SEC                     ; set carry for subtract
002964  1  E5 A8                SBC     numexp          ; subtract numerator exponent
002966  1  85 A9                STA     expcnt          ; save exponent count byte
002968  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
00296A  1               
00296A  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^expcnt
00296C  1               
00296C  1               ; else go do FAC1/10^(0-expcnt)
00296C  1               LAB_28E6
00296C  1  20 37 26             JSR     LAB_26B9        ; divide by 10
00296F  1  E6 A9                INC     expcnt          ; increment exponent count byte
002971  1  D0 F9                BNE     LAB_28E6        ; loop until all done
002973  1               
002973  1  F0 07                BEQ     LAB_28F6        ; branch always
002975  1               
002975  1               LAB_28EF
002975  1  20 1E 26             JSR     LAB_269E        ; multiply by 10
002978  1  C6 A9                DEC     expcnt          ; decrement exponent count byte
00297A  1  D0 F9                BNE     LAB_28EF        ; loop until all done
00297C  1               
00297C  1               LAB_28F6
00297C  1  A5 B1                LDA     negnum          ; get -ve flag
00297E  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
002980  1               
002980  1  60                   RTS
002981  1               
002981  1               ; do - FAC1 and return
002981  1               
002981  1               LAB_28FB
002981  1  4C 77 2B             JMP     LAB_GTHAN       ; do - FAC1 and return
002984  1               
002984  1               ; do unsigned FAC1*10+number
002984  1               
002984  1               LAB_28FE
002984  1  48                   PHA                     ; save character
002985  1  24 AA                BIT     numdpf          ; test decimal point flag
002987  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
002989  1               
002989  1  E6 A8                INC     numexp          ; else increment number exponent
00298B  1               LAB_2905
00298B  1  20 1E 26             JSR     LAB_269E        ; multiply FAC1 by 10
00298E  1  68                   PLA                     ; restore character
00298F  1  29 0F                AND     #$0F            ; convert to binary
002991  1  20 97 29             JSR     LAB_2912        ; evaluate new ASCII digit
002994  1  4C 21 29             JMP     LAB_289E        ; go do next character
002997  1               
002997  1               ; evaluate new ASCII digit
002997  1               
002997  1               LAB_2912
002997  1  48                   PHA                     ; save digit
002998  1  20 B1 27             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00299B  1  68                   PLA                     ; restore digit
00299C  1  20 E1 27             JSR     LAB_27DB        ; save A as integer byte
00299F  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
0029A1  1  45 B0                EOR     FAC1_s          ; toggle with FAC1 sign (b7)
0029A3  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
0029A5  1  A6 AC                LDX     FAC1_e          ; get FAC1 exponent
0029A7  1  4C B2 23             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
0029AA  1               
0029AA  1               ; evaluate next character of exponential part of number
0029AA  1               
0029AA  1               LAB_2925
0029AA  1  A5 A9                LDA     expcnt          ; get exponent count byte
0029AC  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
0029AE  1  90 09                BCC     LAB_2934        ; branch if less
0029B0  1               
0029B0  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
0029B2  1  24 AB                BIT     expneg          ; test exponent -ve flag
0029B4  1  30 25                BMI     LAB_2942        ; branch if -ve
0029B6  1               
0029B6  1  4C BA 24             JMP     LAB_2564        ; else do overflow error
0029B9  1               
0029B9  1               LAB_2934
0029B9  1  0A                   ASL     A               ; * 2
0029BA  1  0A                   ASL     A               ; * 4
0029BB  1  65 A9                ADC     expcnt          ; * 5
0029BD  1  0A                   ASL     A               ; * 10
0029BE  1  A0 00                LDY     #$00            ; set index
0029C0  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
0029C4  1  01 B5 C3 C9  
0029C8  1  00 D0 04 A2  
0029D9  1  E9 2F                SBC     #'0'-1          ; convert character to binary
0029DB  1               LAB_2942
0029DB  1  85 A9                STA     expcnt          ; save exponent count byte
0029DD  1  4C 49 29             JMP     LAB_28C4        ; go get next character
0029E0  1               
0029E0  1               ; print " in line [LINE #]"
0029E0  1               
0029E0  1               LAB_2953
0029E0  1  A9 D5                LDA     #<LAB_LMSG      ; point to " in line " message low byte
0029E2  1  A0 37                LDY     #>LAB_LMSG      ; point to " in line " message high byte
0029E4  1  20 98 12             JSR     LAB_18C3        ; print null terminated string from memory
0029E7  1               
0029E7  1               ; print Basic line #
0029E7  1  A5 88                LDA     Clineh          ; get current line high byte
0029E9  1  A6 87                LDX     Clinel          ; get current line low byte
0029EB  1               
0029EB  1               ; print XA as unsigned integer
0029EB  1               
0029EB  1               LAB_295E
0029EB  1  85 AD                STA     FAC1_1          ; save low byte as FAC1 mantissa1
0029ED  1  86 AE                STX     FAC1_2          ; save high byte as FAC1 mantissa2
0029EF  1  A2 90                LDX     #$90            ; set exponent to 16d bits
0029F1  1  38                   SEC                     ; set integer is +ve flag
0029F2  1  20 EE 27             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
0029F5  1  A0 00                LDY     #$00            ; clear index
0029F7  1  98                   TYA                     ; clear A
0029F8  1  20 0D 2A             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
0029FB  1  4C 98 12             JMP     LAB_18C3        ; print null terminated string from memory and return
0029FE  1               
0029FE  1               ; convert FAC1 to ASCII string result in (AY)
0029FE  1               ; not any more, moved scratchpad to page 0
0029FE  1               
0029FE  1               LAB_296E
0029FE  1  A0 01                LDY     #$01            ; set index = 1
002A00  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
002A02  1  24 B0                BIT     FAC1_s          ; test FAC1 sign (b7)
002A04  1  10 02                BPL     LAB_2978        ; branch if +ve
002A06  1               
002A06  1  A9 2D                LDA     #$2D            ; else character = "-"
002A08  1               LAB_2978
002A08  1                       .IFDEF  DUODYNE
002A08  1  DA                   PHX
002A09  1  BB                   TYX
002A0A  1  95 EF                STA     Decss,X         ; save leading character (" " or "-")
002A0C  1  FA                   PLX
002A0D  1                       .ELSE
002A0D  1                       STA     Decss,Y         ; save leading character (" " or "-")
002A0D  1                       .ENDIF
002A0D  1               LAB_297B
002A0D  1  85 B0                STA     FAC1_s          ; clear FAC1 sign (b7)
002A0F  1  84 BA                STY     Sendl           ; save index
002A11  1  C8                   INY                     ; increment index
002A12  1  A6 AC                LDX     FAC1_e          ; get FAC1 exponent
002A14  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
002A16  1               
002A16  1               ; exponent was $00 so FAC1 is 0
002A16  1  A9 30                LDA     #'0'            ; set character = "0"
002A18  1  4C 2D 2B             JMP     LAB_2A89        ; save last character, [EOT] and exit
002A1B  1               
002A1B  1               ; FAC1 is some non zero value
002A1B  1               LAB_2989
002A1B  1  A9 00                LDA     #$00            ; clear (number exponent count)
002A1D  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
002A1F  1               
002A1F  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
002A21  1               
002A21  1               ; FAC1<1
002A21  1  A9 5C                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
002A23  1  A0 31                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
002A25  1  20 30 25             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
002A28  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
002A2A  1               LAB_299A
002A2A  1  85 A8                STA     numexp          ; save number exponent count
002A2C  1               LAB_299C
002A2C  1  A9 58                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
002A2E  1  A0 31                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
002A30  1  20 FE 27             JSR     LAB_27F8        ; compare FAC1 with (AY)
002A33  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
002A35  1               
002A35  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
002A37  1               
002A37  1               ; FAC1 < (AY)
002A37  1               LAB_29A7
002A37  1  A9 54                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
002A39  1  A0 31                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
002A3B  1  20 FE 27             JSR     LAB_27F8        ; compare FAC1 with (AY)
002A3E  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
002A40  1               
002A40  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
002A42  1               
002A42  1               ; FAC1 <= (AY)
002A42  1               LAB_29B2
002A42  1  20 1E 26             JSR     LAB_269E        ; multiply by 10
002A45  1  C6 A8                DEC     numexp          ; decrement number exponent count
002A47  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
002A49  1               
002A49  1               LAB_29B9
002A49  1  20 37 26             JSR     LAB_26B9        ; divide by 10
002A4C  1  E6 A8                INC     numexp          ; increment number exponent count
002A4E  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
002A50  1               
002A50  1               ; now we have just the digits to do
002A50  1               
002A50  1               LAB_29C0
002A50  1  20 AB 23             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
002A53  1               LAB_29C3
002A53  1  20 9B 28             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
002A56  1  A2 01                LDX     #$01            ; set default digits before dp = 1
002A58  1  A5 A8                LDA     numexp          ; get number exponent count
002A5A  1  18                   CLC                     ; clear carry for add
002A5B  1  69 07                ADC     #$07            ; up to 6 digits before point
002A5D  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
002A5F  1               
002A5F  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
002A61  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
002A63  1               
002A63  1               ; carry is clear
002A63  1  69 FF                ADC     #$FF            ; take 1 from digit count
002A65  1  AA                   TAX                     ; copy to A
002A66  1  A9 02                LDA     #$02            ;.set exponent adjust
002A68  1               LAB_29D8
002A68  1  38                   SEC                     ; set carry for subtract
002A69  1               LAB_29D9
002A69  1  E9 02                SBC     #$02            ; -2
002A6B  1  85 A9                STA     expcnt          ;.save exponent adjust
002A6D  1  86 A8                STX     numexp          ; save digits before dp count
002A6F  1  8A                   TXA                     ; copy to A
002A70  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
002A72  1               
002A72  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
002A74  1               
002A74  1               LAB_29E4
002A74  1  A4 BA                LDY     Sendl           ; get output string index
002A76  1  A9 2E                LDA     #$2E            ; character "."
002A78  1  C8                   INY                     ; increment index
002A79  1                       .IFDEF  DUODYNE
002A79  1  DA                   PHX
002A7A  1  BB                   TYX
002A7B  1  95 EF                STA     Decss,X         ; save to output string
002A7D  1  FA                   PLX
002A7E  1                       .ELSE
002A7E  1                       STA     Decss,Y         ; save to output string
002A7E  1                       .ENDIF
002A7E  1  8A                   TXA                     ;.
002A7F  1  F0 08                BEQ     LAB_29F5        ;.
002A81  1               
002A81  1  A9 30                LDA     #'0'            ; character "0"
002A83  1  C8                   INY                     ; increment index
002A84  1                       .IFDEF  DUODYNE
002A84  1  DA                   PHX
002A85  1  BB                   TYX
002A86  1  95 EF                STA     Decss,X         ; save to output string
002A88  1  FA                   PLX
002A89  1                       .ELSE
002A89  1                       STA     Decss,Y         ; save to output string
002A89  1                       .ENDIF
002A89  1               
002A89  1               LAB_29F5
002A89  1  84 BA                STY     Sendl           ; save output string index
002A8B  1               LAB_29F7
002A8B  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
002A8D  1  A2 80                LDX     #$80            ;
002A8F  1               LAB_29FB
002A8F  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002A91  1  18                   CLC                     ; clear carry for add
002A92  1  79 D2 31             ADC     LAB_2A9C,Y      ; add -ve LSB
002A95  1  85 AF                STA     FAC1_3          ; save FAC1 mantissa3
002A97  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002A99  1  79 D1 31             ADC     LAB_2A9B,Y      ; add -ve NMSB
002A9C  1  85 AE                STA     FAC1_2          ; save FAC1 mantissa2
002A9E  1  A5 AD                LDA     FAC1_1          ; get FAC1 mantissa1
002AA0  1  79 D0 31             ADC     LAB_2A9A,Y      ; add -ve MSB
002AA3  1  85 AD                STA     FAC1_1          ; save FAC1 mantissa1
002AA5  1  E8                   INX                     ;
002AA6  1  B0 04                BCS     LAB_2A18        ;
002AA8  1               
002AA8  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
002AAA  1               
002AAA  1  30 02                BMI     LAB_2A1A        ;
002AAC  1               
002AAC  1               LAB_2A18
002AAC  1  30 E1                BMI     LAB_29FB        ;
002AAE  1               
002AAE  1               LAB_2A1A
002AAE  1  8A                   TXA                     ;
002AAF  1  90 04                BCC     LAB_2A21        ;
002AB1  1               
002AB1  1  49 FF                EOR     #$FF            ;
002AB3  1  69 0A                ADC     #$0A            ;
002AB5  1               LAB_2A21
002AB5  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
002AB7  1  C8                   INY                     ; increment index ..
002AB8  1  C8                   INY                     ; .. to next less ..
002AB9  1  C8                   INY                     ; .. power of ten
002ABA  1  84 95                STY     Cvaral          ; save as current var address low byte
002ABC  1  A4 BA                LDY     Sendl           ; get output string index
002ABE  1  C8                   INY                     ; increment output string index
002ABF  1  AA                   TAX                     ; copy character to X
002AC0  1  29 7F                AND     #$7F            ; mask out top bit
002AC2  1                       .IFDEF  DUODYNE
002AC2  1  DA                   PHX
002AC3  1  BB                   TYX
002AC4  1  95 EF                STA     Decss,X         ; save to output string
002AC6  1  FA                   PLX
002AC7  1                       .ELSE
002AC7  1                       STA     Decss,Y         ; save to output string
002AC7  1                       .ENDIF
002AC7  1  C6 A8                DEC     numexp          ; decrement # of characters before the dp
002AC9  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
002ACB  1               
002ACB  1               ; else output the point
002ACB  1  A9 2E                LDA     #$2E            ; character "."
002ACD  1  C8                   INY                     ; increment output string index
002ACE  1                       .IFDEF  DUODYNE
002ACE  1  DA                   PHX
002ACF  1  BB                   TYX
002AD0  1  95 EF                STA     Decss,X         ; save to output string
002AD2  1  FA                   PLX
002AD3  1                       .ELSE
002AD3  1                       STA     Decss,Y         ; save to output string
002AD3  1                       .ENDIF
002AD3  1               LAB_2A3B
002AD3  1  84 BA                STY     Sendl           ; save output string index
002AD5  1  A4 95                LDY     Cvaral          ; get current var address low byte
002AD7  1  8A                   TXA                     ; get character back
002AD8  1  49 FF                EOR     #$FF            ;
002ADA  1  29 80                AND     #$80            ;
002ADC  1  AA                   TAX                     ;
002ADD  1  C0 12                CPY     #$12            ; compare index with max
002ADF  1  D0 AE                BNE     LAB_29FB        ; loop if not max
002AE1  1               
002AE1  1               ; now remove trailing zeroes
002AE1  1  A4 BA                LDY     Sendl           ; get output string index
002AE3  1               LAB_2A4B
002AE3  1                       .IFDEF  DUODYNE
002AE3  1  DA                   PHX
002AE4  1  BB                   TYX
002AE5  1  B5 EF                LDA     Decss,X         ; save to output string
002AE7  1  FA                   PLX
002AE8  1                       .ELSE
002AE8  1                       LDA     Decss,Y         ; GET FROM output string
002AE8  1                       .ENDIF
002AE8  1  88                   DEY                     ; decrement output string index
002AE9  1  C9 30                CMP     #'0'            ; compare with "0"
002AEB  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
002AED  1               
002AED  1  C9 2E                CMP     #'.'            ; compare with "."
002AEF  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
002AF1  1               
002AF1  1               ; restore last character
002AF1  1  C8                   INY                     ; increment output string index
002AF2  1               LAB_2A58
002AF2  1  A9 2B                LDA     #$2B            ; character "+"
002AF4  1  A6 A9                LDX     expcnt          ; get exponent count
002AF6  1  F0 3A                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
002AF8  1               
002AF8  1               ; exponent isn't zero so write exponent
002AF8  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
002AFA  1               
002AFA  1  A9 00                LDA     #$00            ; clear A
002AFC  1  38                   SEC                     ; set carry for subtract
002AFD  1  E5 A9                SBC     expcnt          ; subtract exponent count adjust (convert -ve to +ve)
002AFF  1  AA                   TAX                     ; copy exponent count to X
002B00  1  A9 2D                LDA     #'-'            ; character "-"
002B02  1               LAB_2A68
002B02  1               
002B02  1                       .IFDEF  DUODYNE
002B02  1  DA                   PHX
002B03  1  BB                   TYX
002B04  1  95 F1                STA     Decss+2,X       ; save to output string
002B06  1  FA                   PLX
002B07  1                       .ELSE
002B07  1                       STA     Decss+2,Y       ; save to output string
002B07  1                       .ENDIF
002B07  1  A9 45                LDA     #$45            ; character "E"
002B09  1                       .IFDEF  DUODYNE
002B09  1  DA                   PHX
002B0A  1  BB                   TYX
002B0B  1  95 F0                STA     Decss+1,X       ; save EXPONENT SIGN to output string
002B0D  1  FA                   PLX
002B0E  1                       .ELSE
002B0E  1                       STA     Decss+1,Y       ; save EXPONENT SIGN to output string
002B0E  1                       .ENDIF
002B0E  1  8A                   TXA                     ; get exponent count back
002B0F  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
002B11  1  38                   SEC                     ; set carry for subtract
002B12  1               LAB_2A74
002B12  1  E8                   INX                     ; increment 10's character
002B13  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
002B15  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
002B17  1               
002B17  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
002B19  1                       .IFDEF  DUODYNE
002B19  1  DA                   PHX
002B1A  1  BB                   TYX
002B1B  1  95 F3                STA     Decss+4,X       ; save to output string
002B1D  1  FA                   PLX
002B1E  1                       .ELSE
002B1E  1                       STA     Decss+4,Y       ; save to output string
002B1E  1                       .ENDIF
002B1E  1  8A                   TXA                     ; copy 10's character
002B1F  1                       .IFDEF  DUODYNE
002B1F  1  DA                   PHX
002B20  1  BB                   TYX
002B21  1  95 F2                STA     Decss+3,X       ; save to output string
002B23  1  FA                   PLX
002B24  1                       .ELSE
002B24  1                       STA     Decss+3,Y       ; save to output string
002B24  1                       .ENDIF
002B24  1  A9 00                LDA     #$00            ; set null terminator
002B26  1                       .IFDEF  DUODYNE
002B26  1  DA                   PHX
002B27  1  BB                   TYX
002B28  1  95 F4                STA     Decss+5,X       ; save to output string
002B2A  1  FA                   PLX
002B2B  1                       .ELSE
002B2B  1                       STA     Decss+5,Y       ; save to output string
002B2B  1                       .ENDIF
002B2B  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
002B2D  1               
002B2D  1               ; save last character, [EOT] and exit
002B2D  1               LAB_2A89
002B2D  1                       .IFDEF  DUODYNE
002B2D  1  DA                   PHX
002B2E  1  BB                   TYX
002B2F  1  95 EF                STA     Decss,X         ; save to output string
002B31  1  FA                   PLX
002B32  1                       .ELSE
002B32  1                       STA     Decss,Y         ; save to output string
002B32  1                       .ENDIF
002B32  1               
002B32  1               ; set null terminator and exit
002B32  1               LAB_2A8C
002B32  1  A9 00                LDA     #$00            ; set null terminator
002B34  1                       .IFDEF  DUODYNE
002B34  1  DA                   PHX
002B35  1  BB                   TYX
002B36  1  95 F0                STA     Decss+1,X       ; save to output string
002B38  1  FA                   PLX
002B39  1                       .ELSE
002B39  1                       STA     Decss+1,Y       ; save to output string
002B39  1                       .ENDIF
002B39  1               
002B39  1               ; set string pointer (AY) and exit
002B39  1               LAB_2A91
002B39  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
002B3B  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
002B3D  1  60                   RTS
002B3E  1               
002B3E  1               ; perform power function
002B3E  1               
002B3E  1               LAB_POWER
002B3E  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
002B40  1               
002B40  1  A5 B3                LDA     FAC2_e          ; get FAC2 exponent
002B42  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
002B44  1               
002B44  1  4C 49 24             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
002B47  1               
002B47  1               LAB_2ABF
002B47  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
002B49  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
002B4B  1  20 3E 27             JSR     LAB_2778        ; pack FAC1 into (XY)
002B4E  1  A5 B7                LDA     FAC2_s          ; get FAC2 sign (b7)
002B50  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
002B52  1               
002B52  1               ; else FAC2 is -ve and can only be raised to an
002B52  1               ; integer power which gives an x +j0 result
002B52  1  20 CC 28             JSR     LAB_INT         ; perform INT
002B55  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
002B57  1  A0 00                LDY     #>func_l        ; set source pointer high byte
002B59  1  20 FE 27             JSR     LAB_27F8        ; compare FAC1 with (AY)
002B5C  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
002B5E  1               ; this will leave FAC1 -ve and cause a Function Call
002B5E  1               ; error when LOG() is called
002B5E  1               
002B5E  1  98                   TYA                     ; clear sign b7
002B5F  1  A4 5B                LDY     Temp3           ; save mantissa 3 from INT() function as sign in Y
002B61  1               ; for possible later negation, b0
002B61  1               LAB_2AD9
002B61  1  20 B6 23             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
002B64  1  98                   TYA                     ; copy sign back ..
002B65  1  48                   PHA                     ; .. and save it
002B66  1  20 F2 24             JSR     LAB_LOG         ; do LOG(n)
002B69  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
002B6B  1  A0 00                LDY     #>garb_l        ; set pointer high byte
002B6D  1  20 30 25             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
002B70  1  20 82 2B             JSR     LAB_EXP         ; go do EXP(n)
002B73  1  68                   PLA                     ; pull sign from stack
002B74  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
002B75  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
002B77  1               
002B77  1               ; Perform negation
002B77  1               ; do - FAC1
002B77  1               
002B77  1               LAB_GTHAN
002B77  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002B79  1  F0 06                BEQ     LAB_2AF9        ; exit if FAC1_e = $00
002B7B  1               
002B7B  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002B7D  1  49 FF                EOR     #$FF            ; complement it
002B7F  1  85 B0                STA     FAC1_s          ; save FAC1 sign (b7)
002B81  1               LAB_2AF9
002B81  1  60                   RTS
002B82  1               
002B82  1               ; perform EXP()	(x^e)
002B82  1               
002B82  1               LAB_EXP
002B82  1  A9 60                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
002B84  1  A0 31                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
002B86  1  20 30 25             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
002B89  1  A5 B9                LDA     FAC1_r          ; get FAC1 rounding byte
002B8B  1  69 50                ADC     #$50            ; +$50/$100
002B8D  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
002B8F  1               
002B8F  1  20 C8 27             JSR     LAB_27C2        ; round FAC1 (no check)
002B92  1               LAB_2B2B
002B92  1  85 A3                STA     FAC2_r          ; save FAC2 rounding byte
002B94  1  20 B4 27             JSR     LAB_27AE        ; copy FAC1 to FAC2
002B97  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002B99  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
002B9B  1  90 03                BCC     LAB_2B39        ; branch if less
002B9D  1               
002B9D  1               LAB_2B36
002B9D  1  20 15 26             JSR     LAB_2690        ; handle overflow and underflow
002BA0  1               LAB_2B39
002BA0  1  20 CC 28             JSR     LAB_INT         ; perform INT
002BA3  1  A5 5B                LDA     Temp3           ; get mantissa 3 from INT() function
002BA5  1  18                   CLC                     ; clear carry for add
002BA6  1  69 81                ADC     #$81            ; normalise +1
002BA8  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
002BAA  1               
002BAA  1  38                   SEC                     ; set carry for subtract
002BAB  1  E9 01                SBC     #$01            ; now correct for exponent
002BAD  1  48                   PHA                     ; save FAC2 exponent
002BAE  1               
002BAE  1               ; swap FAC1 and FAC2
002BAE  1  A2 04                LDX     #$04            ; 4 bytes to do
002BB0  1               LAB_2B49
002BB0  1  B5 B3                LDA     FAC2_e,X        ; get FAC2,X
002BB2  1  B4 AC                LDY     FAC1_e,X        ; get FAC1,X
002BB4  1  95 AC                STA     FAC1_e,X        ; save FAC1,X
002BB6  1  94 B3                STY     FAC2_e,X        ; save FAC2,X
002BB8  1  CA                   DEX                     ; decrement count/index
002BB9  1  10 F5                BPL     LAB_2B49        ; loop if not all done
002BBB  1               
002BBB  1  A5 A3                LDA     FAC2_r          ; get FAC2 rounding byte
002BBD  1  85 B9                STA     FAC1_r          ; save as FAC1 rounding byte
002BBF  1  20 97 23             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
002BC2  1  20 77 2B             JSR     LAB_GTHAN       ; do - FAC1
002BC5  1  A9 64                LDA     #<LAB_2AFE      ; set counter pointer low byte
002BC7  1  A0 31                LDY     #>LAB_2AFE      ; set counter pointer high byte
002BC9  1  20 EA 2B             JSR     LAB_2B84        ; go do series evaluation
002BCC  1  A9 00                LDA     #$00            ; clear A
002BCE  1  85 B8                STA     FAC_sc          ; clear sign compare (FAC1 EOR FAC2)
002BD0  1  68                   PLA                     ;.get saved FAC2 exponent
002BD1  1  4C FA 25             JMP     LAB_2675        ; test and adjust accumulators and return
002BD4  1               
002BD4  1               ; ^2 then series evaluation
002BD4  1               
002BD4  1               LAB_2B6E
002BD4  1  85 BA                STA     Cptrl           ; save count pointer low byte
002BD6  1  84 BB                STY     Cptrh           ; save count pointer high byte
002BD8  1  20 34 27             JSR     LAB_276E        ; pack FAC1 into Adatal
002BDB  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
002BDD  1  20 30 25             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
002BE0  1  20 EE 2B             JSR     LAB_2B88        ; go do series evaluation
002BE3  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
002BE5  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
002BE7  1  4C 30 25             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
002BEA  1               
002BEA  1               ; series evaluation
002BEA  1               
002BEA  1               LAB_2B84
002BEA  1  85 BA                STA     Cptrl           ; save count pointer low byte
002BEC  1  84 BB                STY     Cptrh           ; save count pointer high byte
002BEE  1               LAB_2B88
002BEE  1  A2 A8                LDX     #<numexp        ; set pointer low byte
002BF0  1  20 36 27             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into numexp
002BF3  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
002BF7  1  B5 BA C9 00  
002BFB  1  D0 04 A2 00  
002C09  1  85 B1                STA     numcon          ; save constants count
002C0B  1  A4 BA                LDY     Cptrl           ; get count pointer low byte
002C0D  1  C8                   INY                     ; increment it (now constants pointer)
002C0E  1  98                   TYA                     ; copy it
002C0F  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
002C11  1               
002C11  1  E6 BB                INC     Cptrh           ; else increment high byte
002C13  1               LAB_2B97
002C13  1  85 BA                STA     Cptrl           ; save low byte
002C15  1  A4 BB                LDY     Cptrh           ; get high byte
002C17  1               LAB_2B9B
002C17  1  20 30 25             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
002C1A  1  A5 BA                LDA     Cptrl           ; get constants pointer low byte
002C1C  1  A4 BB                LDY     Cptrh           ; get constants pointer high byte
002C1E  1  18                   CLC                     ; clear carry for add
002C1F  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
002C21  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
002C23  1               
002C23  1  C8                   INY                     ; increment high byte
002C24  1               LAB_2BA8
002C24  1  85 BA                STA     Cptrl           ; save pointer low byte
002C26  1  84 BB                STY     Cptrh           ; save pointer high byte
002C28  1  20 AF 23             JSR     LAB_246C        ; add (AY) to FAC1
002C2B  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ numexp
002C2D  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ numexp
002C2F  1  C6 B1                DEC     numcon          ; decrement constants count
002C31  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
002C33  1               
002C33  1  60                   RTS
002C34  1               
002C34  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
002C34  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
002C34  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
002C34  1               
002C34  1               ; Entropy = 7.997442 bits per byte
002C34  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
002C34  1               
002C34  1               ; Chi square distribution for 65536 samples is 232.01, and
002C34  1               ; randomly would exceed this value 75.00 percent of the time
002C34  1               
002C34  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
002C34  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
002C34  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
002C34  1               
002C34  1               LAB_RND:
002C34  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002C36  1  F0 07                BEQ     NextPRN         ; do next random # if zero
002C38  1               
002C38  1               ; else get seed into random number store
002C38  1  A2 E1                LDX     #Rbyte4         ; set PRNG pointer low byte
002C3A  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
002C3C  1  20 3E 27             JSR     LAB_2778        ; pack FAC1 into (XY)
002C3F  1               NextPRN:
002C3F  1  A2 AF                LDX     #$AF            ; set EOR byte
002C41  1  A0 13                LDY     #$13            ; do this nineteen times
002C43  1               LoopPRN:
002C43  1  06 E2                ASL     Rbyte1          ; shift PRNG most significant byte
002C45  1  26 E3                ROL     Rbyte2          ; shift PRNG middle byte
002C47  1  26 E4                ROL     Rbyte3          ; shift PRNG least significant byte
002C49  1  26 E1                ROL     Rbyte4          ; shift PRNG extra byte
002C4B  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
002C4D  1               
002C4D  1  8A                   TXA                     ; set EOR byte
002C4E  1  45 E2                EOR     Rbyte1          ; EOR PRNG extra byte
002C50  1  85 E2                STA     Rbyte1          ; save new PRNG extra byte
002C52  1               Ninc1:
002C52  1  88                   DEY                     ; decrement loop count
002C53  1  D0 EE                BNE     LoopPRN         ; loop if not all done
002C55  1               
002C55  1  A2 02                LDX     #$02            ; three bytes to copy
002C57  1               CopyPRNG:
002C57  1  B5 E2                LDA     Rbyte1,X        ; get PRNG byte
002C59  1  95 AD                STA     FAC1_1,X        ; save FAC1 byte
002C5B  1  CA                   DEX
002C5C  1  10 F9                BPL     CopyPRNG        ; loop if not complete
002C5E  1               
002C5E  1  A9 80                LDA     #$80            ; set the exponent
002C60  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002C62  1               
002C62  1  0A                   ASL     A               ; clear A
002C63  1  85 B0                STA     FAC1_s          ; save FAC1 sign
002C65  1               
002C65  1  4C 2B 24             JMP     LAB_24D5        ; normalise FAC1 and return
002C68  1               
002C68  1               ; perform COS()
002C68  1               
002C68  1               LAB_COS:
002C68  1  A9 81                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
002C6A  1  A0 31                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
002C6C  1  20 AF 23             JSR     LAB_246C        ; add (AY) to FAC1
002C6F  1               
002C6F  1               ; perform SIN()
002C6F  1               
002C6F  1               LAB_SIN:
002C6F  1  20 B1 27             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
002C72  1  A9 96                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
002C74  1  A0 31                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
002C76  1  A6 B7                LDX     FAC2_s          ; get FAC2 sign (b7)
002C78  1  20 40 26             JSR     LAB_26C2        ; divide by (AY) (X=sign)
002C7B  1  20 B1 27             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
002C7E  1  20 CC 28             JSR     LAB_INT         ; perform INT
002C81  1  A9 00                LDA     #$00            ; clear byte
002C83  1  85 B8                STA     FAC_sc          ; clear sign compare (FAC1 EOR FAC2)
002C85  1  20 97 23             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
002C88  1  A9 C8                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
002C8A  1  A0 31                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
002C8C  1  20 94 23             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
002C8F  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002C91  1  48                   PHA                     ; save FAC1 sign
002C92  1  10 0D                BPL     LAB_2C35        ; branch if +ve
002C94  1               
002C94  1               ; FAC1 sign was -ve
002C94  1  20 AB 23             JSR     LAB_244E        ; add 0.5 to FAC1
002C97  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002C99  1  30 09                BMI     LAB_2C38        ; branch if -ve
002C9B  1               
002C9B  1  A5 63                LDA     Cflag           ; get comparison evaluation flag
002C9D  1  49 FF                EOR     #$FF            ; toggle flag
002C9F  1  85 63                STA     Cflag           ; save comparison evaluation flag
002CA1  1               LAB_2C35
002CA1  1  20 77 2B             JSR     LAB_GTHAN       ; do - FAC1
002CA4  1               LAB_2C38:
002CA4  1  A9 C8                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
002CA6  1  A0 31                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
002CA8  1  20 AF 23             JSR     LAB_246C        ; add (AY) to FAC1
002CAB  1  68                   PLA                     ; restore FAC1 sign
002CAC  1  10 03                BPL     LAB_2C45        ; branch if was +ve
002CAE  1               
002CAE  1               ; else correct FAC1
002CAE  1  20 77 2B             JSR     LAB_GTHAN       ; do - FAC1
002CB1  1               LAB_2C45:
002CB1  1  A9 85                LDA     #<LAB_2C84      ; set pointer low byte to counter
002CB3  1  A0 31                LDY     #>LAB_2C84      ; set pointer high byte to counter
002CB5  1  4C D4 2B             JMP     LAB_2B6E        ; ^2 then series evaluation and return
002CB8  1               
002CB8  1               ; perform TAN()
002CB8  1               
002CB8  1               LAB_TAN:
002CB8  1  20 34 27             JSR     LAB_276E        ; pack FAC1 into Adatal
002CBB  1  A9 00                LDA     #$00            ; clear byte
002CBD  1  85 63                STA     Cflag           ; clear comparison evaluation flag
002CBF  1  20 6F 2C             JSR     LAB_SIN         ; go do SIN(n)
002CC2  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
002CC4  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
002CC6  1  20 3E 27             JSR     LAB_2778        ; pack FAC1 into (XY)
002CC9  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
002CCB  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
002CCD  1  20 C4 26             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002CD0  1  A9 00                LDA     #$00            ; clear byte
002CD2  1  85 B0                STA     FAC1_s          ; clear FAC1 sign (b7)
002CD4  1  A5 63                LDA     Cflag           ; get comparison evaluation flag
002CD6  1  20 E0 2C             JSR     LAB_2C74        ; save flag and go do series evaluation
002CD9  1               
002CD9  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
002CDB  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
002CDD  1  4C 48 26             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
002CE0  1               
002CE0  1               LAB_2C74:
002CE0  1  48                   PHA                     ; save comparison evaluation flag
002CE1  1  4C A1 2C             JMP     LAB_2C35        ; go do series evaluation
002CE4  1               
002CE4  1               ; perform USR()
002CE4  1               
002CE4  1               LAB_USR:
002CE4  1  20 0A 00             JSR     Usrjmp          ; call user code
002CE7  1  4C 33 16             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
002CEA  1               
002CEA  1               ; perform ATN()
002CEA  1               
002CEA  1               LAB_ATN:
002CEA  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign (b7)
002CEC  1  48                   PHA                     ; save sign
002CED  1  10 03                BPL     LAB_2CA1        ; branch if +ve
002CEF  1               
002CEF  1  20 77 2B             JSR     LAB_GTHAN       ; else do - FAC1
002CF2  1               LAB_2CA1:
002CF2  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002CF4  1  48                   PHA                     ; push exponent
002CF5  1  C9 81                CMP     #$81            ; compare with 1
002CF7  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
002CF9  1               
002CF9  1  A9 BB                LDA     #<LAB_259C      ; set 1 pointer low byte
002CFB  1  A0 31                LDY     #>LAB_259C      ; set 1 pointer high byte
002CFD  1  20 48 26             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
002D00  1               LAB_2CAF:
002D00  1  A9 9A                LDA     #<LAB_2CC9      ; set pointer low byte to counter
002D02  1  A0 31                LDY     #>LAB_2CC9      ; set pointer high byte to counter
002D04  1  20 D4 2B             JSR     LAB_2B6E        ; ^2 then series evaluation
002D07  1  68                   PLA                     ; restore old FAC1 exponent
002D08  1  C9 81                CMP     #$81            ; compare with 1
002D0A  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
002D0C  1               
002D0C  1  A9 81                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
002D0E  1  A0 31                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
002D10  1  20 94 23             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
002D13  1               LAB_2CC2:
002D13  1  68                   PLA                     ; restore FAC1 sign
002D14  1  10 16                BPL     LAB_2D04        ; exit if was +ve
002D16  1               
002D16  1  4C 77 2B             JMP     LAB_GTHAN       ; else do - FAC1 and return
002D19  1               
002D19  1               ; perform BITSET
002D19  1               
002D19  1               LAB_BITSET:
002D19  1  20 5B 22             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
002D1C  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
002D1E  1  B0 20                BCS     FCError         ; branch if > 7
002D20  1               
002D20  1  A9 00                LDA     #$00            ; clear A
002D22  1  38                   SEC                     ; set the carry
002D23  1               S_Bits:
002D23  1  2A                   ROL     A               ; shift bit
002D24  1  CA                   DEX                     ; decrement bit number
002D25  1  10 FC                BPL     S_Bits          ; loop if still +ve
002D27  1               
002D27  1  E8                   INX                     ; make X = $00
002D28  1  01 11                ORA     (Itempl,X)      ; or with byte via temporary integer (addr)
002D2A  1  81 11                STA     (Itempl,X)      ; save byte via temporary integer (addr)
002D2C  1               LAB_2D04:
002D2C  1  60                   RTS
002D2D  1               
002D2D  1               ; perform BITCLR
002D2D  1               
002D2D  1               LAB_BITCLR:
002D2D  1  20 5B 22             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
002D30  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
002D32  1  B0 0C                BCS     FCError         ; branch if > 7
002D34  1               
002D34  1  A9 FF                LDA     #$FF            ; set A
002D36  1               S_Bitc:
002D36  1  2A                   ROL     A               ; shift bit
002D37  1  CA                   DEX                     ; decrement bit number
002D38  1  10 FC                BPL     S_Bitc          ; loop if still +ve
002D3A  1               
002D3A  1  E8                   INX                     ; make X = $00
002D3B  1  21 11                AND     (Itempl,X)      ; and with byte via temporary integer (addr)
002D3D  1  81 11                STA     (Itempl,X)      ; save byte via temporary integer (addr)
002D3F  1  60                   RTS
002D40  1               
002D40  1               FCError:
002D40  1  4C AD 19             JMP     LAB_FCER        ; do function call error then warm start
002D43  1               
002D43  1               ; perform BITTST()
002D43  1               
002D43  1               LAB_BTST:
002D43  1                       .IFDEF  DUODYNE
002D43  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D47  1                       .ELSE
002D47  1                       JSR     LAB_IGBY        ; increment and scan memory
002D47  1                       .ENDIF
002D47  1               
002D47  1  20 5B 22             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
002D4A  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
002D4C  1  B0 F2                BCS     FCError         ; branch if > 7
002D4E  1               
002D4E  1                       .IFDEF  DUODYNE
002D4E  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D52  1                       .ELSE
002D52  1                       JSR     LAB_GBYT        ; scan memory
002D52  1                       .ENDIF
002D52  1               
002D52  1  C9 29                CMP     #')'            ; is next character ")"
002D54  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
002D56  1               
002D56  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
002D59  1               
002D59  1               TST_OK:
002D59  1                       .IFDEF  DUODYNE
002D59  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D5D  1                       .ELSE
002D5D  1                       JSR     LAB_IGBY        ; increment and scan memory
002D5D  1                       .ENDIF
002D5D  1               
002D5D  1  A9 00                LDA     #$00            ; clear A
002D5F  1  38                   SEC                     ; set the carry
002D60  1               T_Bits:
002D60  1  2A                   ROL     A               ; shift bit
002D61  1  CA                   DEX                     ; decrement bit number
002D62  1  10 FC                BPL     T_Bits          ; loop if still +ve
002D64  1               
002D64  1  E8                   INX                     ; make X = $00
002D65  1  21 11                AND     (Itempl,X)      ; AND with byte via temporary integer (addr)
002D67  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
002D69  1               
002D69  1  A9 FF                LDA     #$FF            ; set for -1 result
002D6B  1               LAB_NOTT:
002D6B  1  4C E1 27             JMP     LAB_27DB        ; go do SGN tail
002D6E  1               
002D6E  1               ; perform BIN$()
002D6E  1               
002D6E  1               LAB_BINS:
002D6E  1  E0 19                CPX     #$19            ; max + 1
002D70  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
002D72  1               
002D72  1  86 78                STX     TempB           ; save # of characters ($00 = leading zero remove)
002D74  1  A9 18                LDA     #$18            ; need A byte long space
002D76  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long
002D79  1  A0 17                LDY     #$17            ; set index
002D7B  1  A2 18                LDX     #$18            ; character count
002D7D  1               NextB1:
002D7D  1  46 11                LSR     nums_1          ; shift highest byte
002D7F  1  66 12                ROR     nums_2          ; shift middle byte
002D81  1  66 13                ROR     nums_3          ; shift lowest byte bit 0 to carry
002D83  1  8A                   TXA                     ; load with "0"/2
002D84  1  2A                   ROL     A               ; shift in carry
002D85  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
002D89  1  01 B5 AD C9  
002D8D  1  00 D0 04 A2  
002D9B  1  88                   DEY                     ; decrement index
002D9C  1  10 DF                BPL     NextB1          ; loop if not done
002D9E  1               
002D9E  1  A5 78                LDA     TempB           ; get # of characters
002DA0  1  F0 0A                BEQ     EndBHS          ; branch if truncate
002DA2  1               
002DA2  1  AA                   TAX                     ; copy length to X
002DA3  1  38                   SEC                     ; set carry for add !
002DA4  1  49 FF                EOR     #$FF            ; 1's complement
002DA6  1  69 18                ADC     #$18            ; add 24d
002DA8  1  F0 30                BEQ     GoPr2           ; if zero print whole string
002DAA  1               
002DAA  1  D0 23                BNE     GoPr1           ; else go make output string
002DAC  1               
002DAC  1               ; this is the exit code and is also used by HEX$()
002DAC  1               ; truncate string to remove leading "0"s
002DAC  1               
002DAC  1               EndBHS:
002DAC  1  A8                   TAY                     ; clear index (A=0, X=length here)
002DAD  1               NextB2:
002DAD  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
002DB1  1  B5 AD C9 00  
002DB5  1  D0 04 A2 00  
002DC3  1  C9 30                CMP     #'0'            ; compare with "0"
002DC5  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
002DC7  1               
002DC7  1  CA                   DEX                     ; decrement character count
002DC8  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
002DCA  1               
002DCA  1  C8                   INY                     ; else increment index
002DCB  1  10 E0                BPL     NextB2          ; loop always
002DCD  1               
002DCD  1               ; make fixed length output string - ignore overflows!
002DCD  1               
002DCD  1               GoPr3:
002DCD  1  E8                   INX                     ; need at least 1 character
002DCE  1               GoPr:
002DCE  1  98                   TYA                     ; copy result
002DCF  1               GoPr1:
002DCF  1  18                   CLC                     ; clear carry for add
002DD0  1  65 AD                ADC     str_pl          ; add low address
002DD2  1  85 AD                STA     str_pl          ; save low address
002DD4  1  A9 00                LDA     #$00            ; do high byte
002DD6  1  65 AE                ADC     str_ph          ; add high address
002DD8  1  85 AE                STA     str_ph          ; save high address
002DDA  1               GoPr2:
002DDA  1  86 AC                STX     str_ln          ; X holds string length
002DDC  1                       .IFDEF  DUODYNE
002DDC  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002DE0  1                       .ELSE
002DE0  1                       JSR     LAB_IGBY        ; increment and scan memory
002DE0  1                       .ENDIF
002DE0  1               
002DE0  1  4C BD 1C             JMP     LAB_RTST        ; check for space on descriptor stack then put address
002DE3  1               ; and length on descriptor stack and update stack pointers
002DE3  1               
002DE3  1               BinFErr:
002DE3  1  4C AD 19             JMP     LAB_FCER        ; do function call error then warm start
002DE6  1               
002DE6  1               ; perform HEX$()
002DE6  1               
002DE6  1               LAB_HEXS:
002DE6  1  E0 07                CPX     #$07            ; max + 1
002DE8  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
002DEA  1               
002DEA  1  86 78                STX     TempB           ; save # of characters
002DEC  1               
002DEC  1  A9 06                LDA     #$06            ; need 6 bytes for string
002DEE  1  20 5E 1C             JSR     LAB_MSSP        ; make string space A bytes long
002DF1  1  A0 05                LDY     #$05            ; set string index
002DF3  1               
002DF3  1  F8                   SED                     ; need decimal mode for nibble convert
002DF4  1  A5 13                LDA     nums_3          ; get lowest byte
002DF6  1  20 14 2E             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
002DF9  1  A5 12                LDA     nums_2          ; get middle byte
002DFB  1  20 14 2E             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
002DFE  1  A5 11                LDA     nums_1          ; get highest byte
002E00  1  20 14 2E             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
002E03  1  D8                   CLD                     ; back to binary
002E04  1               
002E04  1  A2 06                LDX     #$06            ; character count
002E06  1  A5 78                LDA     TempB           ; get # of characters
002E08  1  F0 A2                BEQ     EndBHS          ; branch if truncate
002E0A  1               
002E0A  1  AA                   TAX                     ; copy length to X
002E0B  1  38                   SEC                     ; set carry for add !
002E0C  1  49 FF                EOR     #$FF            ; 1's complement
002E0E  1  69 06                ADC     #$06            ; add 6d
002E10  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
002E12  1               
002E12  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
002E14  1               
002E14  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
002E14  1               
002E14  1               LAB_A2HX:
002E14  1  AA                   TAX                     ; save byte
002E15  1  29 0F                AND     #$0F            ; mask off top bits
002E17  1  20 1F 2E             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
002E1A  1  8A                   TXA                     ; get byte back
002E1B  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
002E1C  1  4A                   LSR     A               ; /4
002E1D  1  4A                   LSR     A               ; /8
002E1E  1  4A                   LSR     A               ; /16
002E1F  1               LAB_AL2X:
002E1F  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
002E21  1  69 30                ADC     #'0'            ; add ASCII "0"
002E23  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
002E27  1  01 B5 AD C9  
002E2B  1  00 D0 04 A2  
002E39  1  88                   DEY                     ; decrement counter
002E3A  1  60                   RTS
002E3B  1               
002E3B  1               LAB_NLTO:
002E3B  1  85 AC                STA     FAC1_e          ; save FAC1 exponent
002E3D  1  A9 00                LDA     #$00            ; clear sign compare
002E3F  1               LAB_MLTE:
002E3F  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
002E41  1  8A                   TXA                     ; restore character
002E42  1  20 97 29             JSR     LAB_2912        ; evaluate new ASCII digit
002E45  1               
002E45  1               ; gets here if the first character was "$" for hex
002E45  1               ; get hex number
002E45  1               
002E45  1               LAB_CHEX:
002E45  1                       .IFDEF  DUODYNE
002E45  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E49  1                       .ELSE
002E49  1                       JSR     LAB_IGBY        ; increment and scan memory
002E49  1                       .ENDIF
002E49  1               
002E49  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
002E4B  1               
002E4B  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
002E4D  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
002E4F  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
002E51  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
002E53  1               
002E53  1  69 0A                ADC     #$0A            ; convert to nibble
002E55  1               LAB_ISHN:
002E55  1  29 0F                AND     #$0F            ; convert to binary
002E57  1  AA                   TAX                     ; save nibble
002E58  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002E5A  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
002E5C  1               
002E5C  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
002E5E  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
002E60  1               
002E60  1               LAB_MLTO:
002E60  1  4C BA 24             JMP     LAB_2564        ; do overflow error and warm start
002E63  1               
002E63  1               LAB_NXCH:
002E63  1  AA                   TAX                     ; save bit
002E64  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002E66  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
002E68  1               
002E68  1  E6 AC                INC     FAC1_e          ; increment FAC1 exponent (*2)
002E6A  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
002E6C  1               
002E6C  1  A9 00                LDA     #$00            ; clear sign compare
002E6E  1               LAB_MLBT:
002E6E  1  85 B8                STA     FAC_sc          ; save sign compare (FAC1 EOR FAC2)
002E70  1  8A                   TXA                     ; restore bit
002E71  1  20 97 29             JSR     LAB_2912        ; evaluate new ASCII digit
002E74  1               
002E74  1               ; gets here if the first character was  "%" for binary
002E74  1               ; get binary number
002E74  1               
002E74  1               LAB_CBIN:
002E74  1                       .IFDEF  DUODYNE
002E74  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E78  1                       .ELSE
002E78  1                       JSR     LAB_IGBY        ; increment and scan memory
002E78  1                       .ENDIF
002E78  1               
002E78  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
002E7A  1  C9 02                CMP     #$02            ; compare with max+1
002E7C  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
002E7E  1               
002E7E  1               LAB_EXCH:
002E7E  1  4C 7C 29             JMP     LAB_28F6        ; evaluate -ve flag and return
002E81  1               
002E81  1               ; ctrl-c check routine. includes limited "life" byte save for INGET routine
002E81  1               ; now also the code that checks to see if an interrupt has occurred
002E81  1               
002E81  1               CTRLC:
002E81  1  AD 00 06             LDA     ccflag          ; get [CTRL-C] check flag
002E84  1  D0 18                BNE     LAB_FBA2        ; exit if inhibited
002E86  1               
002E86  1  20 0D 38             JSR     V_INPT          ; scan input device
002E89  1  90 0B                BCC     LAB_FBA0        ; exit if buffer empty
002E8B  1               
002E8B  1  8D 01 06             STA     ccbyte          ; save received byte
002E8E  1  A2 20                LDX     #$20            ; "life" timer for bytes
002E90  1  8E 02 06             STX     ccnull          ; set countdown
002E93  1  4C E0 0D             JMP     LAB_1636        ; return to BASIC
002E96  1               
002E96  1               LAB_FBA0:
002E96  1  AE 02 06             LDX     ccnull          ; get countdown byte
002E99  1  F0 03                BEQ     LAB_FBA2        ; exit if finished
002E9B  1               
002E9B  1  CE 02 06             DEC     ccnull          ; else decrement countdown
002E9E  1               LAB_FBA2:
002E9E  1  A2 E5                LDX     #NmiBase        ; set pointer to NMI values
002EA0  1  20 A9 2E             JSR     LAB_CKIN        ; go check interrupt
002EA3  1  A2 E8                LDX     #IrqBase        ; set pointer to IRQ values
002EA5  1  20 A9 2E             JSR     LAB_CKIN        ; go check interrupt
002EA8  1               LAB_CRTS:
002EA8  1  60                   RTS
002EA9  1               
002EA9  1               ; check whichever interrupt is indexed by X
002EA9  1               
002EA9  1               LAB_CKIN:
002EA9  1  B5 00                LDA     PLUS_0,X        ; get interrupt flag byte
002EAB  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
002EAD  1               
002EAD  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
002EAD  1               ; automatically enable the interrupt when we exit
002EAD  1               
002EAD  1  0A                   ASL     A               ; move happened bit to setup bit
002EAE  1  29 40                AND     #$40            ; mask happened bits
002EB0  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
002EB2  1               
002EB2  1  95 00                STA     PLUS_0,X        ; save interrupt flag byte
002EB4  1               
002EB4  1  8A                   TXA                     ; copy index ..
002EB5  1  A8                   TAY                     ; .. to Y
002EB6  1               
002EB6  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
002EB7  1  68                   PLA                     ; dump return address high byte
002EB8  1               
002EB8  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
002EBA  1  20 9A 09             JSR     LAB_1212        ; check room on stack for A bytes
002EBD  1  A5 C4                LDA     Bpntrh          ; get BASIC execute pointer high byte
002EBF  1  48                   PHA                     ; push on stack
002EC0  1  A5 C3                LDA     Bpntrl          ; get BASIC execute pointer low byte
002EC2  1  48                   PHA                     ; push on stack
002EC3  1  A5 88                LDA     Clineh          ; get current line high byte
002EC5  1  48                   PHA                     ; push on stack
002EC6  1  A5 87                LDA     Clinel          ; get current line low byte
002EC8  1  48                   PHA                     ; push on stack
002EC9  1  A9 8D                LDA     #TK_GOSUB       ; token for GOSUB
002ECB  1  48                   PHA                     ; push on stack
002ECC  1                       .IFDEF  DUODYNE
002ECC  1  DA                   PHX
002ECD  1  BB                   TYX
002ECE  1  B5 01                LDA     PLUS_1,X        ; get interrupt code pointer low byte
002ED0  1  FA                   PLX
002ED1  1                       .ELSE
002ED1  1                       LDA     PLUS_1,Y        ; get interrupt code pointer low byte
002ED1  1                       .ENDIF
002ED1  1  85 C3                STA     Bpntrl          ; save as BASIC execute pointer low byte
002ED3  1                       .IFDEF  DUODYNE
002ED3  1  DA                   PHX
002ED4  1  BB                   TYX
002ED5  1  B5 02                LDA     PLUS_2,X        ; get interrupt code pointer low byte
002ED7  1  FA                   PLX
002ED8  1                       .ELSE
002ED8  1                       LDA     PLUS_2,Y        ; get interrupt code pointer low byte
002ED8  1                       .ENDIF
002ED8  1  85 C4                STA     Bpntrh          ; save as BASIC execute pointer high byte
002EDA  1               
002EDA  1  4C 7A 0D             JMP     LAB_15C2        ; go do interpreter inner loop
002EDD  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
002EDD  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
002EDD  1               ; executed at the end of the subroutine
002EDD  1               
002EDD  1               ; get byte from input device, no waiting
002EDD  1               ; returns with carry set if byte in A
002EDD  1               
002EDD  1               INGET:
002EDD  1  20 0D 38             JSR     V_INPT          ; call scan input device
002EE0  1  B0 09                BCS     LAB_FB95        ; if byte go reset timer
002EE2  1               
002EE2  1  AD 02 06             LDA     ccnull          ; get countdown
002EE5  1  F0 09                BEQ     LAB_FB96        ; exit if empty
002EE7  1               
002EE7  1  AD 01 06             LDA     ccbyte          ; get last received byte
002EEA  1  38                   SEC                     ; flag we got a byte
002EEB  1               LAB_FB95:
002EEB  1  A2 00                LDX     #$00            ; clear X
002EED  1  8E 02 06             STX     ccnull          ; clear timer because we got a byte
002EF0  1               LAB_FB96:
002EF0  1  60                   RTS
002EF1  1               
002EF1  1               ; these routines only enable the interrupts if the set-up flag is set
002EF1  1               ; if not they have no effect
002EF1  1               
002EF1  1               ; perform IRQ {ON|OFF|CLEAR}
002EF1  1               
002EF1  1               LAB_IRQ:
002EF1  1  A2 E8                LDX     #IrqBase        ; set pointer to IRQ values
002EF3  1  2C                   .BYTE   $2C             ; make next line BIT abs.
002EF4  1               
002EF4  1               ; perform NMI {ON|OFF|CLEAR}
002EF4  1               
002EF4  1               LAB_NMI:
002EF4  1  A2 E5                LDX     #NmiBase        ; set pointer to NMI values
002EF6  1  C9 93                CMP     #TK_ON          ; compare with token for ON
002EF8  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
002EFA  1               
002EFA  1  C9 B6                CMP     #TK_OFF         ; compare with token for OFF
002EFC  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
002EFE  1               
002EFE  1  49 A2                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
002F00  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
002F02  1               
002F02  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
002F05  1               
002F05  1               LAB_IOFF:
002F05  1  A9 7F                LDA     #$7F            ; clear A
002F07  1  35 00                AND     PLUS_0,X        ; AND with interrupt setup flag
002F09  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
002F0B  1               
002F0B  1               LAB_INON:
002F0B  1  B5 00                LDA     PLUS_0,X        ; get interrupt setup flag
002F0D  1  0A                   ASL     A               ; Shift bit to enabled flag
002F0E  1  15 00                ORA     PLUS_0,X        ; OR with flag byte
002F10  1               LAB_INEX:
002F10  1  95 00                STA     PLUS_0,X        ; save interrupt flag byte
002F12  1                       .IFDEF  DUODYNE
002F12  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F16  1                       .ELSE
002F16  1                       JSR     LAB_IGBY        ; increment and scan memory
002F16  1                       .ENDIF
002F16  1  60                   RTS
002F17  1               
002F17  1               ; these routines set up the pointers and flags for the interrupt routines
002F17  1               ; note that the interrupts are also enabled by these commands
002F17  1               
002F17  1               ; perform ON IRQ
002F17  1               
002F17  1               LAB_SIRQ:
002F17  1  58                   CLI                     ; enable interrupts
002F18  1  A2 E8                LDX     #IrqBase        ; set pointer to IRQ values
002F1A  1  2C                   .BYTE   $2C             ; make next line BIT abs.
002F1B  1               
002F1B  1               ; perform ON NMI
002F1B  1               
002F1B  1               LAB_SNMI:
002F1B  1  A2 E5                LDX     #NmiBase        ; set pointer to NMI values
002F1D  1               
002F1D  1  86 78                STX     TempB           ; save interrupt pointer
002F1F  1                       .IFDEF  DUODYNE
002F1F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F23  1                       .ELSE
002F23  1                       JSR     LAB_IGBY        ; increment and scan memory
002F23  1                       .ENDIF
002F23  1               
002F23  1  20 31 10             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002F26  1  A5 79                LDA     Smeml           ; get start of mem low byte
002F28  1  A6 7A                LDX     Smemh           ; get start of mem high byte
002F2A  1  20 D7 0B             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002F2D  1  B0 03                BCS     LAB_LFND        ; if carry set go set-up interrupt
002F2F  1               
002F2F  1  4C 46 0F             JMP     LAB_16F7        ; else go do "Undefined statement" error and warm start
002F32  1               
002F32  1               LAB_LFND:
002F32  1  A6 78                LDX     TempB           ; get interrupt pointer
002F34  1  A5 AA                LDA     Baslnl          ; get pointer low byte
002F36  1  E9 01                SBC     #$01            ; -1 (carry already set for subtract)
002F38  1  95 01                STA     PLUS_1,X        ; save as interrupt pointer low byte
002F3A  1  A5 AB                LDA     Baslnh          ; get pointer high byte
002F3C  1  E9 00                SBC     #$00            ; subtract carry
002F3E  1  95 02                STA     PLUS_2,X        ; save as interrupt pointer high byte
002F40  1               
002F40  1  A9 C0                LDA     #$C0            ; set interrupt enabled/setup bits
002F42  1  95 00                STA     PLUS_0,X        ; set interrupt flags
002F44  1               LAB_IRTS:
002F44  1  60                   RTS
002F45  1               
002F45  1               ; return from IRQ service, restores the enabled flag.
002F45  1               
002F45  1               ; perform RETIRQ
002F45  1               
002F45  1               LAB_RETIRQ:
002F45  1  D0 FD                BNE     LAB_IRTS        ; exit if following token (to allow syntax error)
002F47  1               
002F47  1  A5 E8                LDA     IrqBase         ; get interrupt flags
002F49  1  0A                   ASL     A               ; copy setup to enabled (b7)
002F4A  1  05 E8                ORA     IrqBase         ; OR in setup flag
002F4C  1  85 E8                STA     IrqBase         ; save enabled flag
002F4E  1  4C 4D 0F             JMP     LAB_16E8        ; go do rest of RETURN
002F51  1               
002F51  1               ; return from NMI service, restores the enabled flag.
002F51  1               
002F51  1               ; perform RETNMI
002F51  1               
002F51  1               LAB_RETNMI:
002F51  1  D0 F1                BNE     LAB_IRTS        ; exit if following token (to allow syntax error)
002F53  1               
002F53  1  A5 E5                LDA     NmiBase         ; get set-up flag
002F55  1  0A                   ASL     A               ; copy setup to enabled (b7)
002F56  1  05 E5                ORA     NmiBase         ; OR in setup flag
002F58  1  85 E5                STA     NmiBase         ; save enabled flag
002F5A  1  4C 4D 0F             JMP     LAB_16E8        ; go do rest of RETURN
002F5D  1               
002F5D  1               ; MAX() MIN() pre process
002F5D  1               
002F5D  1               LAB_MMPP:
002F5D  1  20 2A 15             JSR     LAB_EVEZ        ; process expression
002F60  1  4C 11 15             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
002F63  1               
002F63  1               ; perform MAX()
002F63  1               
002F63  1               LAB_MAX:
002F63  1  20 93 2F             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
002F66  1               ; pull FAC2 and compare with FAC1
002F66  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
002F68  1               
002F68  1  A5 B4                LDA     FAC2_1          ; get FAC2 mantissa1
002F6A  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
002F6C  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
002F6E  1  20 B4 23             JSR     LAB_279B        ; copy FAC2 to FAC1
002F71  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
002F73  1               
002F73  1               ; perform MIN()
002F73  1               
002F73  1               LAB_MIN:
002F73  1  20 93 2F             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
002F76  1               ; pull FAC2 and compare with FAC1
002F76  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
002F78  1               
002F78  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
002F7A  1               
002F7A  1  A5 B4                LDA     FAC2_1          ; get FAC2 mantissa1
002F7C  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
002F7E  1  85 B4                STA     FAC2_1          ; save FAC2 mantissa1
002F80  1  20 B4 23             JSR     LAB_279B        ; copy FAC2 to FAC1
002F83  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
002F85  1               
002F85  1               ; exit routine. don't bother returning to the loop code
002F85  1               ; check for correct exit, else so syntax error
002F85  1               
002F85  1               LAB_MMEC:
002F85  1  C9 29                CMP     #')'            ; is it end of function?
002F87  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
002F89  1               
002F89  1  68                   PLA                     ; dump return address low byte
002F8A  1  68                   PLA                     ; dump return address high byte
002F8B  1                       .IFDEF  DUODYNE
002F8B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F8F  1                       .ELSE
002F8F  1                       JSR     LAB_IGBY        ; increment and scan memory
002F8F  1                       .ENDIF
002F8F  1               
002F8F  1  60                   RTS                     ; update BASIC execute pointer (to chr past ")")
002F90  1               
002F90  1               LAB_MMSE:
002F90  1  4C 48 16             JMP     LAB_SNER        ; do syntax error then warm start
002F93  1               
002F93  1               ; check for next, evaluate and return or exit
002F93  1               ; this is the routine that does most of the work
002F93  1               
002F93  1               LAB_PHFA:
002F93  1                       .IFDEF  DUODYNE
002F93  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002F97  1                       .ELSE
002F97  1                       JSR     LAB_GBYT        ; scan memory
002F97  1                       .ENDIF
002F97  1               
002F97  1  C9 2C                CMP     #','            ; is there more ?
002F99  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
002F9B  1               
002F9B  1               ; push FAC1
002F9B  1  20 C0 27             JSR     LAB_27BA        ; round FAC1
002F9E  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign
002FA0  1  09 7F                ORA     #$7F            ; set all non sign bits
002FA2  1  25 AD                AND     FAC1_1          ; AND FAC1 mantissa1 (AND in sign bit)
002FA4  1  48                   PHA                     ; push on stack
002FA5  1  A5 AE                LDA     FAC1_2          ; get FAC1 mantissa2
002FA7  1  48                   PHA                     ; push on stack
002FA8  1  A5 AF                LDA     FAC1_3          ; get FAC1 mantissa3
002FAA  1  48                   PHA                     ; push on stack
002FAB  1  A5 AC                LDA     FAC1_e          ; get FAC1 exponent
002FAD  1  48                   PHA                     ; push on stack
002FAE  1               
002FAE  1                       .IFDEF  DUODYNE
002FAE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002FB2  1                       .ELSE
002FB2  1                       JSR     LAB_IGBY        ; increment and scan memory
002FB2  1                       .ENDIF
002FB2  1               
002FB2  1  20 0E 15             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002FB5  1               ; else do type mismatch
002FB5  1               
002FB5  1               ; pop FAC2 (MAX/MIN expression so far)
002FB5  1  68                   PLA                     ; pop exponent
002FB6  1  85 B3                STA     FAC2_e          ; save FAC2 exponent
002FB8  1  68                   PLA                     ; pop mantissa3
002FB9  1  85 B6                STA     FAC2_3          ; save FAC2 mantissa3
002FBB  1  68                   PLA                     ; pop mantissa1
002FBC  1  85 B5                STA     FAC2_2          ; save FAC2 mantissa2
002FBE  1  68                   PLA                     ; pop sign/mantissa1
002FBF  1  85 B4                STA     FAC2_1          ; save FAC2 sign/mantissa1
002FC1  1  85 B7                STA     FAC2_s          ; save FAC2 sign
002FC3  1               
002FC3  1               ; compare FAC1 with (packed) FAC2
002FC3  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
002FC5  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
002FC7  1  4C FE 27             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
002FCA  1               ; returns A=$00 if FAC1 = (AY)
002FCA  1               ; returns A=$01 if FAC1 > (AY)
002FCA  1               ; returns A=$FF if FAC1 < (AY)
002FCA  1               
002FCA  1               ; perform WIDTH
002FCA  1               
002FCA  1               LAB_WDTH:
002FCA  1  C9 2C                CMP     #','            ; is next byte ","
002FCC  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
002FCE  1               
002FCE  1  20 D0 21             JSR     LAB_GTBY        ; get byte parameter
002FD1  1  8A                   TXA                     ; copy width to A
002FD2  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
002FD4  1               
002FD4  1  E0 10                CPX     #$10            ; else make min width = 16d
002FD6  1  90 46                BCC     TabErr          ; if less do function call error and exit
002FD8  1               
002FD8  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
002FD8  1               ; tab size greater than the line length.
002FD8  1               
002FD8  1  E4 64                CPX     TabSiz          ; compare with tab size
002FDA  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
002FDC  1               
002FDC  1  86 64                STX     TabSiz          ; else make tab size = terminal width
002FDE  1               LAB_NSTT:
002FDE  1  86 0F                STX     TWidth          ; set the terminal width
002FE0  1                       .IFDEF  DUODYNE
002FE0  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002FE4  1                       .ELSE
002FE4  1                       JSR     LAB_GBYT        ; scan memory
002FE4  1                       .ENDIF
002FE4  1               
002FE4  1  F0 1A                BEQ     WExit           ; exit if no following
002FE6  1               
002FE6  1  C9 2C                CMP     #','            ; else is it ","
002FE8  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
002FEA  1               
002FEA  1               LAB_TBSZ:
002FEA  1  20 CC 21             JSR     LAB_SGBY        ; scan and get byte parameter
002FED  1  8A                   TXA                     ; copy TAB size
002FEE  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
002FF0  1               
002FF0  1  E0 01                CPX     #$01            ; compare with min-1
002FF2  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
002FF4  1               
002FF4  1  A5 0F                LDA     TWidth          ; set flags for width
002FF6  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
002FF8  1               
002FF8  1  E4 0F                CPX     TWidth          ; compare TAB with width
002FFA  1  F0 02                BEQ     LAB_SVTB        ; ok if =
002FFC  1               
002FFC  1  B0 20                BCS     TabErr          ; branch if too big
002FFE  1               
002FFE  1               LAB_SVTB:
002FFE  1  86 64                STX     TabSiz          ; save TAB size
003000  1               
003000  1               ; calculate tab column limit from TAB size. The Iclim is set to the last tab
003000  1               ; position on a line that still has at least one whole tab width between it
003000  1               ; and the end of the line.
003000  1               
003000  1               WExit:
003000  1  A5 0F                LDA     TWidth          ; get width
003002  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
003004  1               
003004  1  C5 64                CMP     TabSiz          ; compare with tab size
003006  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
003008  1               
003008  1  85 64                STA     TabSiz          ; else make tab size = terminal width
00300A  1               LAB_SULP:
00300A  1  38                   SEC                     ; set carry for subtract
00300B  1               LAB_WDLP:
00300B  1  E5 64                SBC     TabSiz          ; subtract tab size
00300D  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
00300F  1               
00300F  1  65 64                ADC     TabSiz          ; add tab size back
003011  1  18                   CLC                     ; clear carry for add
003012  1  65 64                ADC     TabSiz          ; add tab size back again
003014  1  85 10                STA     Iclim           ; save for now
003016  1  A5 0F                LDA     TWidth          ; get width back
003018  1  38                   SEC                     ; set carry for subtract
003019  1  E5 10                SBC     Iclim           ; subtract remainder
00301B  1  85 10                STA     Iclim           ; save tab column limit
00301D  1               LAB_NOSQ:
00301D  1  60                   RTS
00301E  1               
00301E  1               TabErr:
00301E  1  4C AD 19             JMP     LAB_FCER        ; do function call error then warm start
003021  1               
003021  1               ; perform SQR()
003021  1               
003021  1               LAB_SQR:
003021  1  A5 B0                LDA     FAC1_s          ; get FAC1 sign
003023  1  30 F9                BMI     TabErr          ; if -ve do function call error
003025  1               
003025  1  A5 AC                LDA     FAC1_e          ; get exponent
003027  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
003029  1               
003029  1               ; else do root
003029  1  20 B1 27             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00302C  1  A9 00                LDA     #$00            ; clear A
00302E  1               
00302E  1  85 77                STA     FACt_3          ; clear remainder
003030  1  85 76                STA     FACt_2          ; ..
003032  1  85 75                STA     FACt_1          ; ..
003034  1  85 78                STA     TempB           ; ..
003036  1               
003036  1  85 AF                STA     FAC1_3          ; clear root
003038  1  85 AE                STA     FAC1_2          ; ..
00303A  1  85 AD                STA     FAC1_1          ; ..
00303C  1               
00303C  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
00303E  1  A5 B3                LDA     FAC2_e          ; get exponent
003040  1  4A                   LSR     A               ; check odd/even
003041  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
003043  1               
003043  1               LAB_SQE1:
003043  1  06 B6                ASL     FAC2_3          ; shift highest bit of number ..
003045  1  26 B5                ROL     FAC2_2          ; ..
003047  1  26 B4                ROL     FAC2_1          ; ..
003049  1  26 77                ROL     FACt_3          ; .. into remainder
00304B  1  26 76                ROL     FACt_2          ; ..
00304D  1  26 75                ROL     FACt_1          ; ..
00304F  1  26 78                ROL     TempB           ; .. never overflows
003051  1               LAB_SQE2:
003051  1  06 B6                ASL     FAC2_3          ; shift highest bit of number ..
003053  1  26 B5                ROL     FAC2_2          ; ..
003055  1  26 B4                ROL     FAC2_1          ; ..
003057  1  26 77                ROL     FACt_3          ; .. into remainder
003059  1  26 76                ROL     FACt_2          ; ..
00305B  1  26 75                ROL     FACt_1          ; ..
00305D  1  26 78                ROL     TempB           ; .. never overflows
00305F  1               
00305F  1  06 AF                ASL     FAC1_3          ; root = root * 2
003061  1  26 AE                ROL     FAC1_2          ; ..
003063  1  26 AD                ROL     FAC1_1          ; .. never overflows
003065  1               
003065  1  A5 AF                LDA     FAC1_3          ; get root low byte
003067  1  2A                   ROL     A               ; *2
003068  1  85 5B                STA     Temp3           ; save partial low byte
00306A  1  A5 AE                LDA     FAC1_2          ; get root low mid byte
00306C  1  2A                   ROL     A               ; *2
00306D  1  85 5C                STA     Temp3+1         ; save partial low mid byte
00306F  1  A5 AD                LDA     FAC1_1          ; get root high mid byte
003071  1  2A                   ROL     A               ; *2
003072  1  85 5D                STA     Temp3+2         ; save partial high mid byte
003074  1  A9 00                LDA     #$00            ; get root high byte (always $00)
003076  1  2A                   ROL     A               ; *2
003077  1  85 5E                STA     Temp3+3         ; save partial high byte
003079  1               
003079  1               ; carry clear for subtract +1
003079  1  A5 77                LDA     FACt_3          ; get remainder low byte
00307B  1  E5 5B                SBC     Temp3           ; subtract partial low byte
00307D  1  85 5B                STA     Temp3           ; save partial low byte
00307F  1               
00307F  1  A5 76                LDA     FACt_2          ; get remainder low mid byte
003081  1  E5 5C                SBC     Temp3+1         ; subtract partial low mid byte
003083  1  85 5C                STA     Temp3+1         ; save partial low mid byte
003085  1               
003085  1  A5 75                LDA     FACt_1          ; get remainder high mid byte
003087  1  E5 5D                SBC     Temp3+2         ; subtract partial high mid byte
003089  1  A8                   TAY                     ; copy partial high mid byte
00308A  1               
00308A  1  A5 78                LDA     TempB           ; get remainder high byte
00308C  1  E5 5E                SBC     Temp3+3         ; subtract partial high byte
00308E  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
003090  1               
003090  1  85 78                STA     TempB           ; save remainder high byte
003092  1               
003092  1  84 75                STY     FACt_1          ; save remainder high mid byte
003094  1               
003094  1  A5 5C                LDA     Temp3+1         ; get remainder low mid byte
003096  1  85 76                STA     FACt_2          ; save remainder low mid byte
003098  1               
003098  1  A5 5B                LDA     Temp3           ; get partial low byte
00309A  1  85 77                STA     FACt_3          ; save remainder low byte
00309C  1               
00309C  1  E6 AF                INC     FAC1_3          ; increment root low byte (never any rollover)
00309E  1               LAB_SQNS:
00309E  1  CA                   DEX                     ; decrement bit pair count
00309F  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
0030A1  1               
0030A1  1  38                   SEC                     ; set carry for subtract
0030A2  1  A5 B3                LDA     FAC2_e          ; get exponent
0030A4  1  E9 80                SBC     #$80            ; normalise
0030A6  1  6A                   ROR     A               ; /2 and re-bias to $80
0030A7  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
0030A9  1  85 AC                STA     FAC1_e          ; save it
0030AB  1  4C 2B 24             JMP     LAB_24D5        ; normalise FAC1 and return
0030AE  1               
0030AE  1               ; perform VARPTR()
0030AE  1               
0030AE  1               LAB_VARPTR:
0030AE  1                       .IFDEF  DUODYNE
0030AE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0030B2  1                       .ELSE
0030B2  1                       JSR     LAB_IGBY        ; increment and scan memory
0030B2  1                       .ENDIF
0030B2  1               
0030B2  1  20 1F 18             JSR     LAB_GVAR        ; get var address
0030B5  1  20 33 16             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0030B8  1  A4 95                LDY     Cvaral          ; get var address low byte
0030BA  1  A5 96                LDA     Cvarah          ; get var address high byte
0030BC  1  4C ED 1A             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0030BF  1               
0030BF  1               ; perform PI
0030BF  1               
0030BF  1               LAB_PI:
0030BF  1  A9 96                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
0030C1  1  A0 31                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
0030C3  1  20 C4 26             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0030C6  1  C6 AC                DEC     FAC1_e          ; make result = PI
0030C8  1  60                   RTS
0030C9  1               
0030C9  1               ; perform TWOPI
0030C9  1               
0030C9  1               LAB_TWOPI:
0030C9  1  A9 96                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
0030CB  1  A0 31                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
0030CD  1  4C C4 26             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1 and return
0030D0  1               
0030D0  1               
0030D0  1               ; The rest are tables messages and code for RAM
0030D0  1               
0030D0  1               ; the rest of the code is tables and BASIC start-up code
0030D0  1               
0030D0  1               PG2_TABS:
0030D0  1  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
0030D1  1  00                   .BYTE   $00             ; ctrl-c byte		-	GET needs this
0030D2  1  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
0030D3  1  81 2E                .WORD   CTRLC           ; ctrl c check vector
0030D5  1               ;	.word	xxxx			; non halting key input	-	monitor to set this
0030D5  1               ;	.word	xxxx			; output vector		-	monitor to set this
0030D5  1               ;	.word	xxxx			; load vector		-	monitor to set this
0030D5  1               ;	.word	xxxx			; save vector		-	monitor to set this
0030D5  1               PG2_TABE:
0030D5  1               
0030D5  1               ; character get subroutine for zero page
0030D5  1               
0030D5  1               ; For a 1.8432MHz 6502 including the JSR and RTS
0030D5  1               ; fastest (>=":")	=  29 cycles =  15.7uS
0030D5  1               ; slowest (<":")	=  40 cycles =  21.7uS
0030D5  1               ; space skip	= +21 cycles = +11.4uS
0030D5  1               ; inc across page	=  +4 cycles =  +2.2uS
0030D5  1               
0030D5  1               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
0030D5  1               ; block is copied to it's destination, any non zero page address will do at assembly
0030D5  1               ; time, to assemble a three byte instruction.
0030D5  1               
0030D5  1               ; page 0 initialisation table from $BC
0030D5  1               ; increment and scan memory
0030D5  1               
0030D5  1               LAB_2CEE:
0030D5  1  E6 C3                INC     Bpntrl          ; increment BASIC execute pointer low byte
0030D7  1  D0 02                BNE     LAB_2CF4        ; branch if no carry
0030D9  1               ; else
0030D9  1  E6 C4                INC     Bpntrh          ; increment BASIC execute pointer high byte
0030DB  1               
0030DB  1               ; page 0 initialisation table from $C2
0030DB  1               ; scan memory
0030DB  1                       .IFDEF  DUODYNE
0030DB  1               LAB_2CF4:
0030DB  1  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
0030DF  1  C9 AD                CMP     #TK_ELSE        ; compare with the token for ELSE
0030E1  1  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
0030E3  1               
0030E3  1  C9 3A                CMP     #':'            ; compare with ":"
0030E5  1  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
0030E7  1               
0030E7  1  C9 20                CMP     #' '            ; compare with " "
0030E9  1  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
0030EB  1               
0030EB  1  38                   SEC                     ; set carry for SBC
0030EC  1  E9 30                SBC     #'0'            ; subtract "0"
0030EE  1  38                   SEC                     ; set carry for SBC
0030EF  1  E9 D0                SBC     #$D0            ; subtract -"0"
0030F1  1               ; clear carry if byte = "0"-"9"
0030F1  1               LAB_2D05:
0030F1  1  6B                   RTL
0030F2  1                       .ELSE
0030F2  1               LAB_2CF4:
0030F2  1                       LDA     $FFFF           ; get byte to scan (addr set by call routine)
0030F2  1                       CMP     #TK_ELSE        ; compare with the token for ELSE
0030F2  1                       BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
0030F2  1               
0030F2  1                       CMP     #':'            ; compare with ":"
0030F2  1                       BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
0030F2  1               
0030F2  1                       CMP     #' '            ; compare with " "
0030F2  1                       BEQ     LAB_2CEE        ; if " " go do next
0030F2  1               
0030F2  1                       SEC                     ; set carry for SBC
0030F2  1                       SBC     #'0'            ; subtract "0"
0030F2  1                       SEC                     ; set carry for SBC
0030F2  1                       SBC     #$D0            ; subtract -"0"
0030F2  1               ; clear carry if byte = "0"-"9"
0030F2  1               LAB_2D05:
0030F2  1                       RTS
0030F2  1                       .ENDIF
0030F2  1               
0030F2  1               ; page zero initialisation table $00-$12 inclusive
0030F2  1               
0030F2  1               StrTab:
0030F2  1  4C                   .BYTE   $4C             ; JMP opcode
0030F3  1  0C 08                .WORD   LAB_COLD        ; initial warm start vector (cold start)
0030F5  1               
0030F5  1  00                   .BYTE   $00             ; these bytes are not used by BASIC
0030F6  1  00 00                .WORD   $0000           ;
0030F8  1  00 00                .WORD   $0000           ;
0030FA  1  00 00                .WORD   $0000           ;
0030FC  1               
0030FC  1  4C                   .BYTE   $4C             ; JMP opcode
0030FD  1  AD 19                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
0030FF  1  00                   .BYTE   $00             ; default NULL count
003100  1  00                   .BYTE   $00             ; clear terminal position
003101  1  00                   .BYTE   $00             ; default terminal width byte
003102  1  F2                   .BYTE   $F2             ; default limit for TAB = 14
003103  1  00 3C                .WORD   Ram_base        ; start of user RAM
003105  1               EndTab:
003105  1               
003105  1               LAB_MSZM:
003105  1  0D 0A 4D 65          .BYTE   $0D,$0A,"Memory size ",$00
003109  1  6D 6F 72 79  
00310D  1  20 73 69 7A  
003114  1               
003114  1               LAB_SMSG:
003114  1  20 42 79 74          .BYTE   " Bytes free",$0D,$0A,$0A
003118  1  65 73 20 66  
00311C  1  72 65 65 0D  
003122  1  45 6E 68 61          .BYTE   "Enhanced BASIC 2.22",$0A,$00
003126  1  6E 63 65 64  
00312A  1  20 42 41 53  
003137  1               
003137  1               ; numeric constants and series
003137  1               
003137  1               ; constants and series for LOG(n)
003137  1               LAB_25A0:
003137  1  02                   .BYTE   $02             ; counter
003138  1  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
00313C  1  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
003140  1               ;##	.byte	$80,$76,$22,$F1	; 0.96147
003140  1  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
003144  1               ;##	.byte	$82,$38,$AA,$45	; 2.88539
003144  1               
003144  1               LAB_25AD:
003144  1  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
003148  1               LAB_25B1:
003148  1  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
00314C  1               LAB_25B5:
00314C  1  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
003150  1               LAB_25B9:
003150  1  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
003154  1               
003154  1               ; numeric PRINT constants
003154  1               LAB_2947:
003154  1  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
003158  1               LAB_294B:
003158  1  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
00315C  1               LAB_294F:
00315C  1  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
003160  1               
003160  1               ; EXP(n) constants and series
003160  1               LAB_2AFA:
003160  1  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
003164  1               LAB_2AFE:
003164  1  06                   .BYTE   $06             ; counter
003165  1  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
003169  1  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
00316D  1  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
003171  1  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
003175  1  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
003179  1  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
00317D  1  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
003181  1               
003181  1               ;##	.byte	$07			; counter
003181  1               ;##	.byte	$74,$94,$2E,$40	; -1/7! (-1/5040)
003181  1               ;##	.byte	$77,$2E,$4F,$70	;  1/6! ( 1/720)
003181  1               ;##	.byte	$7A,$88,$02,$6E	; -1/5! (-1/120)
003181  1               ;##	.byte	$7C,$2A,$A0,$E6	;  1/4! ( 1/24)
003181  1               ;##	.byte	$7E,$AA,$AA,$50	; -1/3! (-1/6)
003181  1               ;##	.byte	$7F,$7F,$FF,$FF	;  1/2! ( 1/2)
003181  1               ;##	.byte	$81,$80,$00,$00	; -1/1! (-1/1)
003181  1               ;##	.byte	$81,$00,$00,$00	;  1/0! ( 1/1)
003181  1               
003181  1               ; trigonometric constants and series
003181  1               LAB_2C78:
003181  1  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
003185  1               LAB_2C84:
003185  1  04                   .BYTE   $04             ; counter
003186  1  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
00318A  1               ;##	.byte	$86,$1E,$D7,$BA	; 39.7109
00318A  1  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
00318E  1               ;##	.byte	$87,$99,$26,$64	;-76.575
00318E  1  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
003192  1  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
003196  1               ;##	.byte	$86,$A5,$5D,$E0	;-41.3417
003196  1               LAB_2C7C:
003196  1  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
00319A  1               ;##	.byte	$83,$49,$0F,$DA	; 6.28319 (2*pi) as floating #
00319A  1               
00319A  1               LAB_2CC9:
00319A  1  08                   .BYTE   $08             ; counter
00319B  1  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
00319F  1  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
0031A3  1  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
0031A7  1  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
0031AB  1  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
0031AF  1  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
0031B3  1  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
0031B7  1  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
0031BB  1               
0031BB  1               ;##	.byte	$08			; counter
0031BB  1               ;##	.byte	$78,$3B,$D7,$4A	; 1/17
0031BB  1               ;##	.byte	$7B,$84,$6E,$02	;-1/15
0031BB  1               ;##	.byte	$7C,$2F,$C1,$FE	; 1/13
0031BB  1               ;##	.byte	$7D,$9A,$31,$74	;-1/11
0031BB  1               ;##	.byte	$7D,$5A,$3D,$84	; 1/9
0031BB  1               ;##	.byte	$7E,$91,$7F,$C8	;-1/7
0031BB  1               ;##	.byte	$7E,$4C,$BB,$E4	; 1/5
0031BB  1               ;##	.byte	$7F,$AA,$AA,$6C	;-1/3
0031BB  1               
0031BB  1               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
0031BB  1               LAB_259C:
0031BB  1  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
0031BF  1               LAB_2AFD:
0031BF  1  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
0031C3  1               
0031C3  1               ; misc constants
0031C3  1               LAB_1DF7:
0031C3  1  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
0031C4  1               LAB_2A96:
0031C4  1  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
0031C8  1               LAB_2C80:
0031C8  1  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
0031CC  1               LAB_26B5:
0031CC  1  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
0031D0  1               
0031D0  1               ; This table is used in converting numbers to ASCII.
0031D0  1               
0031D0  1               LAB_2A9A:
0031D0  1               LAB_2A9B        = LAB_2A9A+1
0031D0  1               LAB_2A9C        = LAB_2A9B+1
0031D0  1  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
0031D3  1  00 27 10             .BYTE   $00,$27,$10     ; 10000
0031D6  1  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
0031D9  1  00 00 64             .BYTE   $00,$00,$64     ; 100
0031DC  1  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
0031DF  1  00 00 01             .BYTE   $00,$00,$01     ; 1
0031E2  1               
0031E2  1               LAB_CTBL:
0031E2  1  E3 0D                .WORD   LAB_END-1       ; END
0031E4  1  13 0D                .WORD   LAB_FOR-1       ; FOR
0031E6  1  8C 14                .WORD   LAB_NEXT-1      ; NEXT
0031E8  1  5F 0F                .WORD   LAB_DATA-1      ; DATA
0031EA  1  1F 13                .WORD   LAB_INPUT-1     ; INPUT
0031EC  1  D2 17                .WORD   LAB_DIM-1       ; DIM
0031EE  1  3F 13                .WORD   LAB_READ-1      ; READ
0031F0  1  92 10                .WORD   LAB_LET-1       ; LET
0031F2  1  62 10                .WORD   LAB_DEC-1       ; DEC			new command
0031F4  1  B5 0E                .WORD   LAB_GOTO-1      ; GOTO
0031F6  1  72 0E                .WORD   LAB_RUN-1       ; RUN
0031F8  1  8D 0F                .WORD   LAB_IF-1        ; IF
0031FA  1  0A 0E                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
0031FC  1  97 0E                .WORD   LAB_GOSUB-1     ; GOSUB
0031FE  1  44 2F                .WORD   LAB_RETIRQ-1    ; RETIRQ		new command
003200  1  50 2F                .WORD   LAB_RETNMI-1    ; RETNMI		new command
003202  1  4A 0F                .WORD   LAB_RETURN-1    ; RETURN
003204  1  F8 0F                .WORD   LAB_REM-1       ; REM
003206  1  E1 0D                .WORD   LAB_STOP-1      ; STOP
003208  1  01 10                .WORD   LAB_ON-1        ; ON			modified command
00320A  1  48 0E                .WORD   LAB_NULL-1      ; NULL		modified command
00320C  1  65 10                .WORD   LAB_INC-1       ; INC			new command
00320E  1  64 23                .WORD   LAB_WAIT-1      ; WAIT
003210  1  03 39                .WORD   V_LOAD-1        ; LOAD
003212  1  53 38                .WORD   V_SAVE-1        ; SAVE
003214  1  0A 1B                .WORD   LAB_DEF-1       ; DEF
003216  1  95 22                .WORD   LAB_POKE-1      ; POKE
003218  1  B1 22                .WORD   LAB_DOKE-1      ; DOKE		new command
00321A  1  50 23                .WORD   LAB_CALL-1      ; CALL		new command
00321C  1  7C 0E                .WORD   LAB_DO-1        ; DO			new command
00321E  1  E7 0E                .WORD   LAB_LOOP-1      ; LOOP		new command
003220  1  FC 11                .WORD   LAB_PRINT-1     ; PRINT
003222  1  4E 0E                .WORD   LAB_CONT-1      ; CONT
003224  1  50 0C                .WORD   LAB_LIST-1      ; LIST
003226  1  4D 0C                .WORD   LAB_CLEAR-1     ; CLEAR
003228  1  01 0C                .WORD   LAB_NEW-1       ; NEW
00322A  1  C9 2F                .WORD   LAB_WDTH-1      ; WIDTH		new command
00322C  1  B6 11                .WORD   LAB_GET-1       ; GET			new command
00322E  1  D8 22                .WORD   LAB_SWAP-1      ; SWAP		new command
003230  1  18 2D                .WORD   LAB_BITSET-1    ; BITSET		new command
003232  1  2C 2D                .WORD   LAB_BITCLR-1    ; BITCLR		new command
003234  1  F0 2E                .WORD   LAB_IRQ-1       ; IRQ			new command
003236  1  F3 2E                .WORD   LAB_NMI-1       ; NMI			new command
003238  1  50 38                .WORD   LAB_KILL-1      ; KILL			new command
00323A  1               
00323A  1               ; function pre process routine table
00323A  1               
00323A  1               LAB_FTPL:
00323A  1               LAB_FTPM        = LAB_FTPL+$01
00323A  1  AA 16                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
00323C  1  AA 16                .WORD   LAB_PPFN-1      ; INT(n)		"
00323E  1  AA 16                .WORD   LAB_PPFN-1      ; ABS(n)		"
003240  1  29 15                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
003242  1  2F 16                .WORD   LAB_1BF7-1      ; FRE(x)		"
003244  1  2F 16                .WORD   LAB_1BF7-1      ; POS(x)		"
003246  1  AA 16                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
003248  1  AA 16                .WORD   LAB_PPFN-1      ; RND(n)		"
00324A  1  AA 16                .WORD   LAB_PPFN-1      ; LOG(n)		"
00324C  1  AA 16                .WORD   LAB_PPFN-1      ; EXP(n)		"
00324E  1  AA 16                .WORD   LAB_PPFN-1      ; COS(n)		"
003250  1  AA 16                .WORD   LAB_PPFN-1      ; SIN(n)		"
003252  1  AA 16                .WORD   LAB_PPFN-1      ; TAN(n)		"
003254  1  AA 16                .WORD   LAB_PPFN-1      ; ATN(n)		"
003256  1  AA 16                .WORD   LAB_PPFN-1      ; PEEK(n)		"
003258  1  AA 16                .WORD   LAB_PPFN-1      ; DEEK(n)		"
00325A  1  00 00                .WORD   $0000           ; SADD()	none
00325C  1  A4 16                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
00325E  1  AA 16                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
003260  1  A4 16                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
003262  1  A4 16                .WORD   LAB_PPFS-1      ; ASC($)		"
003264  1  A4 16                .WORD   LAB_PPFS-1      ; UCASE$($)		"
003266  1  A4 16                .WORD   LAB_PPFS-1      ; LCASE$($)		"
003268  1  AA 16                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
00326A  1  D3 16                .WORD   LAB_BHSS-1      ; HEX$(n)		"
00326C  1  D3 16                .WORD   LAB_BHSS-1      ; BIN$(n)		"
00326E  1  00 00                .WORD   $0000           ; BITTST()	none
003270  1  5C 2F                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
003272  1  5C 2F                .WORD   LAB_MMPP-1      ; MIN()		"
003274  1  B0 16                .WORD   LAB_PPBI-1      ; PI		advance pointer
003276  1  B0 16                .WORD   LAB_PPBI-1      ; TWOPI		"
003278  1  00 00                .WORD   $0000           ; VARPTR()	none
00327A  1  B7 16                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
00327C  1  B7 16                .WORD   LAB_LRMS-1      ; RIGHT$()		"
00327E  1  B7 16                .WORD   LAB_LRMS-1      ; MID$()		"
003280  1               
003280  1               ; action addresses for functions
003280  1               
003280  1               LAB_FTBL:
003280  1               LAB_FTBM        = LAB_FTBL+$01
003280  1  DD 27                .WORD   LAB_SGN-1       ; SGN()
003282  1  CB 28                .WORD   LAB_INT-1       ; INT()
003284  1  FA 27                .WORD   LAB_ABS-1       ; ABS()
003286  1  E3 2C                .WORD   LAB_USR-1       ; USR()
003288  1  D8 1A                .WORD   LAB_FRE-1       ; FRE()
00328A  1  F7 1A                .WORD   LAB_POS-1       ; POS()
00328C  1  20 30                .WORD   LAB_SQR-1       ; SQR()
00328E  1  33 2C                .WORD   LAB_RND-1       ; RND()		modified function
003290  1  F1 24                .WORD   LAB_LOG-1       ; LOG()
003292  1  81 2B                .WORD   LAB_EXP-1       ; EXP()
003294  1  67 2C                .WORD   LAB_COS-1       ; COS()
003296  1  6E 2C                .WORD   LAB_SIN-1       ; SIN()
003298  1  B7 2C                .WORD   LAB_TAN-1       ; TAN()
00329A  1  E9 2C                .WORD   LAB_ATN-1       ; ATN()
00329C  1  8A 22                .WORD   LAB_PEEK-1      ; PEEK()
00329E  1  9E 22                .WORD   LAB_DEEK-1      ; DEEK()		new function
0032A0  1  5A 21                .WORD   LAB_SADD-1      ; SADD()		new function
0032A2  1  9C 21                .WORD   LAB_LENS-1      ; LEN()
0032A4  1  49 1C                .WORD   LAB_STRS-1      ; STR$()
0032A6  1  E0 21                .WORD   LAB_VAL-1       ; VAL()
0032A8  1  A7 21                .WORD   LAB_ASC-1       ; ASC()
0032AA  1  10 21                .WORD   LAB_UCASE-1     ; UCASE$()		new function
0032AC  1  C4 20                .WORD   LAB_LCASE-1     ; LCASE$()		new function
0032AE  1  C8 1F                .WORD   LAB_CHRS-1      ; CHR$()
0032B0  1  E5 2D                .WORD   LAB_HEXS-1      ; HEX$()		new function
0032B2  1  6D 2D                .WORD   LAB_BINS-1      ; BIN$()		new function
0032B4  1  42 2D                .WORD   LAB_BTST-1      ; BITTST()		new function
0032B6  1  62 2F                .WORD   LAB_MAX-1       ; MAX()		new function
0032B8  1  72 2F                .WORD   LAB_MIN-1       ; MIN()		new function
0032BA  1  BE 30                .WORD   LAB_PI-1        ; PI			new function
0032BC  1  C8 30                .WORD   LAB_TWOPI-1     ; TWOPI		new function
0032BE  1  AD 30                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
0032C0  1  EE 1F                .WORD   LAB_LEFT-1      ; LEFT$()
0032C2  1  0D 20                .WORD   LAB_RIGHT-1     ; RIGHT$()
0032C4  1  66 20                .WORD   LAB_MIDS-1      ; MID$()
0032C6  1               
0032C6  1               ; hierarchy and action addresses for operator
0032C6  1               
0032C6  1               LAB_OPPT:
0032C6  1  79                   .BYTE   $79             ; +
0032C7  1  B1 23                .WORD   LAB_ADD-1
0032C9  1  79                   .BYTE   $79             ; -
0032CA  1  96 23                .WORD   LAB_SUBTRACT-1
0032CC  1  7B                   .BYTE   $7B             ; *
0032CD  1  32 25                .WORD   LAB_MULTIPLY-1
0032CF  1  7B                   .BYTE   $7B             ; /
0032D0  1  4A 26                .WORD   LAB_DIVIDE-1
0032D2  1  7F                   .BYTE   $7F             ; ^
0032D3  1  3D 2B                .WORD   LAB_POWER-1
0032D5  1  50                   .BYTE   $50             ; AND
0032D6  1  1E 17                .WORD   LAB_AND-1
0032D8  1  46                   .BYTE   $46             ; EOR			new operator
0032D9  1  04 17                .WORD   LAB_EOR-1
0032DB  1  46                   .BYTE   $46             ; OR
0032DC  1  11 17                .WORD   LAB_OR-1
0032DE  1  56                   .BYTE   $56             ; >>			new operator
0032DF  1  F5 17                .WORD   LAB_RSHIFT-1
0032E1  1  56                   .BYTE   $56             ; <<			new operator
0032E2  1  DD 17                .WORD   LAB_LSHIFT-1
0032E4  1  7D                   .BYTE   $7D             ; >
0032E5  1  76 2B                .WORD   LAB_GTHAN-1
0032E7  1  5A                   .BYTE   $5A             ; =
0032E8  1  5C 16                .WORD   LAB_EQUAL-1
0032EA  1  64                   .BYTE   $64             ; <
0032EB  1  3F 17                .WORD   LAB_LTHAN-1
0032ED  1               
0032ED  1               ; keywords start with ..
0032ED  1               ; this is the first character table and must be in alphabetic order
0032ED  1               
0032ED  1               TAB_1STC:
0032ED  1  2A                   .BYTE   "*"
0032EE  1  2B                   .BYTE   "+"
0032EF  1  2D                   .BYTE   "-"
0032F0  1  2F                   .BYTE   "/"
0032F1  1  3C                   .BYTE   "<"
0032F2  1  3D                   .BYTE   "="
0032F3  1  3E                   .BYTE   ">"
0032F4  1  3F                   .BYTE   "?"
0032F5  1  41                   .BYTE   "A"
0032F6  1  42                   .BYTE   "B"
0032F7  1  43                   .BYTE   "C"
0032F8  1  44                   .BYTE   "D"
0032F9  1  45                   .BYTE   "E"
0032FA  1  46                   .BYTE   "F"
0032FB  1  47                   .BYTE   "G"
0032FC  1  48                   .BYTE   "H"
0032FD  1  49                   .BYTE   "I"
0032FE  1  4B                   .BYTE   "K"
0032FF  1  4C                   .BYTE   "L"
003300  1  4D                   .BYTE   "M"
003301  1  4E                   .BYTE   "N"
003302  1  4F                   .BYTE   "O"
003303  1  50                   .BYTE   "P"
003304  1  52                   .BYTE   "R"
003305  1  53                   .BYTE   "S"
003306  1  54                   .BYTE   "T"
003307  1  55                   .BYTE   "U"
003308  1  56                   .BYTE   "V"
003309  1  57                   .BYTE   "W"
00330A  1  5E                   .BYTE   "^"
00330B  1  00                   .BYTE   $00             ; table terminator
00330C  1               
00330C  1               ; pointers to keyword tables
00330C  1               
00330C  1               TAB_CHRT:
00330C  1  48 33                .WORD   TAB_STAR        ; table for "*"
00330E  1  4A 33                .WORD   TAB_PLUS        ; table for "+"
003310  1  4C 33                .WORD   TAB_MNUS        ; table for "-"
003312  1  4E 33                .WORD   TAB_SLAS        ; table for "/"
003314  1  50 33                .WORD   TAB_LESS        ; table for "<"
003316  1  54 33                .WORD   TAB_EQUL        ; table for "="
003318  1  56 33                .WORD   TAB_MORE        ; table for ">"
00331A  1  5A 33                .WORD   TAB_QEST        ; table for "?"
00331C  1  5C 33                .WORD   TAB_ASCA        ; table for "A"
00331E  1  6C 33                .WORD   TAB_ASCB        ; table for "B"
003320  1  85 33                .WORD   TAB_ASCC        ; table for "C"
003322  1  9C 33                .WORD   TAB_ASCD        ; table for "D"
003324  1  B5 33                .WORD   TAB_ASCE        ; table for "E"
003326  1  C4 33                .WORD   TAB_ASCF        ; table for "F"
003328  1  CE 33                .WORD   TAB_ASCG        ; table for "G"
00332A  1  DB 33                .WORD   TAB_ASCH        ; table for "H"
00332C  1  E1 33                .WORD   TAB_ASCI        ; table for "I"
00332E  1  F3 33                .WORD   TAB_ASCK        ; table for "K"
003330  1  F7 33                .WORD   TAB_ASCL        ; table for "L"
003332  1  1C 34                .WORD   TAB_ASCM        ; table for "M"
003334  1  2A 34                .WORD   TAB_ASCN        ; table for "N"
003336  1  3C 34                .WORD   TAB_ASCO        ; table for "O"
003338  1  44 34                .WORD   TAB_ASCP        ; table for "P"
00333A  1  59 34                .WORD   TAB_ASCR        ; table for "R"
00333C  1  88 34                .WORD   TAB_ASCS        ; table for "S"
00333E  1  B3 34                .WORD   TAB_ASCT        ; table for "T"
003340  1  C7 34                .WORD   TAB_ASCU        ; table for "U"
003342  1  D8 34                .WORD   TAB_ASCV        ; table for "V"
003344  1  E4 34                .WORD   TAB_ASCW        ; table for "W"
003346  1  F3 34                .WORD   TAB_POWR        ; table for "^"
003348  1               
003348  1               ; tables for each start character, note if a longer keyword with the same start
003348  1               ; letters as a shorter one exists then it must come first, else the list is in
003348  1               ; alphabetical order as follows ..
003348  1               
003348  1               ; [keyword,token
003348  1               ; [keyword,token]]
003348  1               ; end marker (#$00)
003348  1               
003348  1               TAB_STAR:
003348  1  B9 00                .BYTE   TK_MUL,$00      ; *
00334A  1               TAB_PLUS:
00334A  1  B7 00                .BYTE   TK_PLUS,$00     ; +
00334C  1               TAB_MNUS:
00334C  1  B8 00                .BYTE   TK_MINUS,$00    ; -
00334E  1               TAB_SLAS:
00334E  1  BA 00                .BYTE   TK_DIV,$00      ; /
003350  1               TAB_LESS:
003350  1               LBB_LSHIFT:
003350  1  3C C0                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
003352  1  C3                   .BYTE   TK_LT           ; <
003353  1  00                   .BYTE   $00
003354  1               TAB_EQUL:
003354  1  C2 00                .BYTE   TK_EQUAL,$00    ; =
003356  1               TAB_MORE:
003356  1               LBB_RSHIFT:
003356  1  3E BF                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
003358  1  C1                   .BYTE   TK_GT           ; >
003359  1  00                   .BYTE   $00
00335A  1               TAB_QEST:
00335A  1  9F 00                .BYTE   TK_PRINT,$00    ; ?
00335C  1               TAB_ASCA:
00335C  1               LBB_ABS:
00335C  1  42 53 28 C6          .BYTE   "BS(",TK_ABS    ; ABS(
003360  1               LBB_AND:
003360  1  4E 44 BC             .BYTE   "ND",TK_AND     ; AND
003363  1               LBB_ASC:
003363  1  53 43 28 D8          .BYTE   "SC(",TK_ASC    ; ASC(
003367  1               LBB_ATN:
003367  1  54 4E 28 D1          .BYTE   "TN(",TK_ATN    ; ATN(
00336B  1  00                   .BYTE   $00
00336C  1               TAB_ASCB:
00336C  1               LBB_BINS:
00336C  1  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
003370  1  DD           
003371  1               LBB_BITCLR:
003371  1  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
003375  1  52 A8        
003377  1               LBB_BITSET:
003377  1  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
00337B  1  54 A7        
00337D  1               LBB_BITTST:
00337D  1  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
003381  1  54 28 DE     
003384  1               ; BITTST(
003384  1  00                   .BYTE   $00
003385  1               TAB_ASCC:
003385  1               LBB_CALL:
003385  1  41 4C 4C 9C          .BYTE   "ALL",TK_CALL   ; CALL
003389  1               LBB_CHRS:
003389  1  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
00338D  1  DB           
00338E  1               LBB_CLEAR:
00338E  1  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
003392  1  A2           
003393  1               LBB_CONT:
003393  1  4F 4E 54 A0          .BYTE   "ONT",TK_CONT   ; CONT
003397  1               LBB_COS:
003397  1  4F 53 28 CE          .BYTE   "OS(",TK_COS    ; COS(
00339B  1  00                   .BYTE   $00
00339C  1               TAB_ASCD:
00339C  1               LBB_DATA:
00339C  1  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
0033A0  1               LBB_DEC:
0033A0  1  45 43 88             .BYTE   "EC",TK_DEC     ; DEC
0033A3  1               LBB_DEEK:
0033A3  1  45 45 4B 28          .BYTE   "EEK(",TK_DEEK  ; DEEK(
0033A7  1  D3           
0033A8  1               LBB_DEF:
0033A8  1  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
0033AB  1               LBB_DIM:
0033AB  1  49 4D 85             .BYTE   "IM",TK_DIM     ; DIM
0033AE  1               LBB_DOKE:
0033AE  1  4F 4B 45 9B          .BYTE   "OKE",TK_DOKE   ; DOKE note - "DOKE" must come before "DO"
0033B2  1               LBB_DO:
0033B2  1  4F 9D                .BYTE   "O",TK_DO       ; DO
0033B4  1  00                   .BYTE   $00
0033B5  1               TAB_ASCE:
0033B5  1               LBB_ELSE:
0033B5  1  4C 53 45 AD          .BYTE   "LSE",TK_ELSE   ; ELSE
0033B9  1               LBB_END:
0033B9  1  4E 44 80             .BYTE   "ND",TK_END     ; END
0033BC  1               LBB_EOR:
0033BC  1  4F 52 BD             .BYTE   "OR",TK_EOR     ; EOR
0033BF  1               LBB_EXP:
0033BF  1  58 50 28 CD          .BYTE   "XP(",TK_EXP    ; EXP(
0033C3  1  00                   .BYTE   $00
0033C4  1               TAB_ASCF:
0033C4  1               LBB_FN:
0033C4  1  4E AF                .BYTE   "N",TK_FN       ; FN
0033C6  1               LBB_FOR:
0033C6  1  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
0033C9  1               LBB_FRE:
0033C9  1  52 45 28 C8          .BYTE   "RE(",TK_FRE    ; FRE(
0033CD  1  00                   .BYTE   $00
0033CE  1               TAB_ASCG:
0033CE  1               LBB_GET:
0033CE  1  45 54 A5             .BYTE   "ET",TK_GET     ; GET
0033D1  1               LBB_GOSUB:
0033D1  1  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
0033D5  1  8D           
0033D6  1               LBB_GOTO:
0033D6  1  4F 54 4F 89          .BYTE   "OTO",TK_GOTO   ; GOTO
0033DA  1  00                   .BYTE   $00
0033DB  1               TAB_ASCH:
0033DB  1               LBB_HEXS:
0033DB  1  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
0033DF  1  DC           
0033E0  1  00                   .BYTE   $00
0033E1  1               TAB_ASCI:
0033E1  1               LBB_IF:
0033E1  1  46 8B                .BYTE   "F",TK_IF       ; IF
0033E3  1               LBB_INC:
0033E3  1  4E 43 95             .BYTE   "NC",TK_INC     ; INC
0033E6  1               LBB_INPUT:
0033E6  1  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
0033EA  1  84           
0033EB  1               LBB_INT:
0033EB  1  4E 54 28 C5          .BYTE   "NT(",TK_INT    ; INT(
0033EF  1               LBB_IRQ:
0033EF  1  52 51 A9             .BYTE   "RQ",TK_IRQ     ; IRQ
0033F2  1  00                   .BYTE   $00
0033F3  1               TAB_ASCK:
0033F3  1               LBB_KILL:
0033F3  1  49 4C 4C AB          .BYTE   "ILL",TK_KILL   ; KILL
0033F7  1               TAB_ASCL:
0033F7  1               LBB_LCASES:
0033F7  1  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0033FB  1  24 28 DA     
0033FE  1               ; LCASE$(
0033FE  1               LBB_LEFTS:
0033FE  1  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
003402  1  28 E4        
003404  1               LBB_LEN:
003404  1  45 4E 28 D5          .BYTE   "EN(",TK_LEN    ; LEN(
003408  1               LBB_LET:
003408  1  45 54 87             .BYTE   "ET",TK_LET     ; LET
00340B  1               LBB_LIST:
00340B  1  49 53 54 A1          .BYTE   "IST",TK_LIST   ; LIST
00340F  1               LBB_LOAD:
00340F  1  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
003413  1               LBB_LOG:
003413  1  4F 47 28 CC          .BYTE   "OG(",TK_LOG    ; LOG(
003417  1               LBB_LOOP:
003417  1  4F 4F 50 9E          .BYTE   "OOP",TK_LOOP   ; LOOP
00341B  1  00                   .BYTE   $00
00341C  1               TAB_ASCM:
00341C  1               LBB_MAX:
00341C  1  41 58 28 DF          .BYTE   "AX(",TK_MAX    ; MAX(
003420  1               LBB_MIDS:
003420  1  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
003424  1  E6           
003425  1               LBB_MIN:
003425  1  49 4E 28 E0          .BYTE   "IN(",TK_MIN    ; MIN(
003429  1  00                   .BYTE   $00
00342A  1               TAB_ASCN:
00342A  1               LBB_NEW:
00342A  1  45 57 A3             .BYTE   "EW",TK_NEW     ; NEW
00342D  1               LBB_NEXT:
00342D  1  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
003431  1               LBB_NMI:
003431  1  4D 49 AA             .BYTE   "MI",TK_NMI     ; NMI
003434  1               LBB_NOT:
003434  1  4F 54 B2             .BYTE   "OT",TK_NOT     ; NOT
003437  1               LBB_NULL:
003437  1  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
00343B  1  00                   .BYTE   $00
00343C  1               TAB_ASCO:
00343C  1               LBB_OFF:
00343C  1  46 46 B6             .BYTE   "FF",TK_OFF     ; OFF
00343F  1               LBB_ON:
00343F  1  4E 93                .BYTE   "N",TK_ON       ; ON
003441  1               LBB_OR:
003441  1  52 BE                .BYTE   "R",TK_OR       ; OR
003443  1  00                   .BYTE   $00
003444  1               TAB_ASCP:
003444  1               LBB_PEEK:
003444  1  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
003448  1  D2           
003449  1               LBB_PI:
003449  1  49 E1                .BYTE   "I",TK_PI       ; PI
00344B  1               LBB_POKE:
00344B  1  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
00344F  1               LBB_POS:
00344F  1  4F 53 28 C9          .BYTE   "OS(",TK_POS    ; POS(
003453  1               LBB_PRINT:
003453  1  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
003457  1  9F           
003458  1  00                   .BYTE   $00
003459  1               TAB_ASCR:
003459  1               LBB_READ:
003459  1  45 41 44 86          .BYTE   "EAD",TK_READ   ; READ
00345D  1               LBB_REM:
00345D  1  45 4D 91             .BYTE   "EM",TK_REM     ; REM
003460  1               LBB_RESTORE:
003460  1  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
003464  1  52 45 8C     
003467  1               ; RESTORE
003467  1               LBB_RETIRQ:
003467  1  45 54 49 52          .BYTE   "ETIRQ",TK_RETIRQ; RETIRQ
00346B  1  51 8E        
00346D  1               LBB_RETNMI:
00346D  1  45 54 4E 4D          .BYTE   "ETNMI",TK_RETNMI; RETNMI
003471  1  49 8F        
003473  1               LBB_RETURN:
003473  1  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
003477  1  4E 90        
003479  1               LBB_RIGHTS:
003479  1  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
00347D  1  24 28 E5     
003480  1               ; RIGHT$(
003480  1               LBB_RND:
003480  1  4E 44 28 CB          .BYTE   "ND(",TK_RND    ; RND(
003484  1               LBB_RUN:
003484  1  55 4E 8A             .BYTE   "UN",TK_RUN     ; RUN
003487  1  00                   .BYTE   $00
003488  1               TAB_ASCS:
003488  1               LBB_SADD:
003488  1  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
00348C  1  D4           
00348D  1               LBB_SAVE:
00348D  1  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
003491  1               LBB_SGN:
003491  1  47 4E 28 C4          .BYTE   "GN(",TK_SGN    ; SGN(
003495  1               LBB_SIN:
003495  1  49 4E 28 CF          .BYTE   "IN(",TK_SIN    ; SIN(
003499  1               LBB_SPC:
003499  1  50 43 28 B0          .BYTE   "PC(",TK_SPC    ; SPC(
00349D  1               LBB_SQR:
00349D  1  51 52 28 CA          .BYTE   "QR(",TK_SQR    ; SQR(
0034A1  1               LBB_STEP:
0034A1  1  54 45 50 B3          .BYTE   "TEP",TK_STEP   ; STEP
0034A5  1               LBB_STOP:
0034A5  1  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
0034A9  1               LBB_STRS:
0034A9  1  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
0034AD  1  D6           
0034AE  1               LBB_SWAP:
0034AE  1  57 41 50 A6          .BYTE   "WAP",TK_SWAP   ; SWAP
0034B2  1  00                   .BYTE   $00
0034B3  1               TAB_ASCT:
0034B3  1               LBB_TAB:
0034B3  1  41 42 28 AC          .BYTE   "AB(",TK_TAB    ; TAB(
0034B7  1               LBB_TAN:
0034B7  1  41 4E 28 D0          .BYTE   "AN(",TK_TAN    ; TAN(
0034BB  1               LBB_THEN:
0034BB  1  48 45 4E B1          .BYTE   "HEN",TK_THEN   ; THEN
0034BF  1               LBB_TO:
0034BF  1  4F AE                .BYTE   "O",TK_TO       ; TO
0034C1  1               LBB_TWOPI:
0034C1  1  57 4F 50 49          .BYTE   "WOPI",TK_TWOPI ; TWOPI
0034C5  1  E2           
0034C6  1  00                   .BYTE   $00
0034C7  1               TAB_ASCU:
0034C7  1               LBB_UCASES:
0034C7  1  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
0034CB  1  24 28 D9     
0034CE  1               ; UCASE$(
0034CE  1               LBB_UNTIL:
0034CE  1  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0034D2  1  B4           
0034D3  1               LBB_USR:
0034D3  1  53 52 28 C7          .BYTE   "SR(",TK_USR    ; USR(
0034D7  1  00                   .BYTE   $00
0034D8  1               TAB_ASCV:
0034D8  1               LBB_VAL:
0034D8  1  41 4C 28 D7          .BYTE   "AL(",TK_VAL    ; VAL(
0034DC  1               LBB_VPTR:
0034DC  1  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0034E0  1  52 28 E3     
0034E3  1  00                   .BYTE   $00
0034E4  1               TAB_ASCW:
0034E4  1               LBB_WAIT:
0034E4  1  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0034E8  1               LBB_WHILE:
0034E8  1  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
0034EC  1  B5           
0034ED  1               LBB_WIDTH:
0034ED  1  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
0034F1  1  A4           
0034F2  1  00                   .BYTE   $00
0034F3  1               TAB_POWR:
0034F3  1  BB 00                .BYTE   TK_POWER,$00    ; ^
0034F5  1               
0034F5  1               ; new decode table for LIST
0034F5  1               ; Table is ..
0034F5  1               ; byte - keyword length, keyword first character
0034F5  1               ; word - pointer to rest of keyword from dictionary
0034F5  1               
0034F5  1               ; note if length is 1 then the pointer is ignored
0034F5  1               
0034F5  1               LAB_KEYT:
0034F5  1  03 45                .BYTE   3,'E'
0034F7  1  B9 33                .WORD   LBB_END         ; END
0034F9  1  03 46                .BYTE   3,'F'
0034FB  1  C6 33                .WORD   LBB_FOR         ; FOR
0034FD  1  04 4E                .BYTE   4,'N'
0034FF  1  2D 34                .WORD   LBB_NEXT        ; NEXT
003501  1  04 44                .BYTE   4,'D'
003503  1  9C 33                .WORD   LBB_DATA        ; DATA
003505  1  05 49                .BYTE   5,'I'
003507  1  E6 33                .WORD   LBB_INPUT       ; INPUT
003509  1  03 44                .BYTE   3,'D'
00350B  1  AB 33                .WORD   LBB_DIM         ; DIM
00350D  1  04 52                .BYTE   4,'R'
00350F  1  59 34                .WORD   LBB_READ        ; READ
003511  1  03 4C                .BYTE   3,'L'
003513  1  08 34                .WORD   LBB_LET         ; LET
003515  1  03 44                .BYTE   3,'D'
003517  1  A0 33                .WORD   LBB_DEC         ; DEC
003519  1  04 47                .BYTE   4,'G'
00351B  1  D6 33                .WORD   LBB_GOTO        ; GOTO
00351D  1  03 52                .BYTE   3,'R'
00351F  1  84 34                .WORD   LBB_RUN         ; RUN
003521  1  02 49                .BYTE   2,'I'
003523  1  E1 33                .WORD   LBB_IF          ; IF
003525  1  07 52                .BYTE   7,'R'
003527  1  60 34                .WORD   LBB_RESTORE     ; RESTORE
003529  1  05 47                .BYTE   5,'G'
00352B  1  D1 33                .WORD   LBB_GOSUB       ; GOSUB
00352D  1  06 52                .BYTE   6,'R'
00352F  1  67 34                .WORD   LBB_RETIRQ      ; RETIRQ
003531  1  06 52                .BYTE   6,'R'
003533  1  6D 34                .WORD   LBB_RETNMI      ; RETNMI
003535  1  06 52                .BYTE   6,'R'
003537  1  73 34                .WORD   LBB_RETURN      ; RETURN
003539  1  03 52                .BYTE   3,'R'
00353B  1  5D 34                .WORD   LBB_REM         ; REM
00353D  1  04 53                .BYTE   4,'S'
00353F  1  A5 34                .WORD   LBB_STOP        ; STOP
003541  1  02 4F                .BYTE   2,'O'
003543  1  3F 34                .WORD   LBB_ON          ; ON
003545  1  04 4E                .BYTE   4,'N'
003547  1  37 34                .WORD   LBB_NULL        ; NULL
003549  1  03 49                .BYTE   3,'I'
00354B  1  E3 33                .WORD   LBB_INC         ; INC
00354D  1  04 57                .BYTE   4,'W'
00354F  1  E4 34                .WORD   LBB_WAIT        ; WAIT
003551  1  04 4C                .BYTE   4,'L'
003553  1  0F 34                .WORD   LBB_LOAD        ; LOAD
003555  1  04 53                .BYTE   4,'S'
003557  1  8D 34                .WORD   LBB_SAVE        ; SAVE
003559  1  03 44                .BYTE   3,'D'
00355B  1  A8 33                .WORD   LBB_DEF         ; DEF
00355D  1  04 50                .BYTE   4,'P'
00355F  1  4B 34                .WORD   LBB_POKE        ; POKE
003561  1  04 44                .BYTE   4,'D'
003563  1  AE 33                .WORD   LBB_DOKE        ; DOKE
003565  1  04 43                .BYTE   4,'C'
003567  1  85 33                .WORD   LBB_CALL        ; CALL
003569  1  02 44                .BYTE   2,'D'
00356B  1  B2 33                .WORD   LBB_DO          ; DO
00356D  1  04 4C                .BYTE   4,'L'
00356F  1  17 34                .WORD   LBB_LOOP        ; LOOP
003571  1  05 50                .BYTE   5,'P'
003573  1  53 34                .WORD   LBB_PRINT       ; PRINT
003575  1  04 43                .BYTE   4,'C'
003577  1  93 33                .WORD   LBB_CONT        ; CONT
003579  1  04 4C                .BYTE   4,'L'
00357B  1  0B 34                .WORD   LBB_LIST        ; LIST
00357D  1  05 43                .BYTE   5,'C'
00357F  1  8E 33                .WORD   LBB_CLEAR       ; CLEAR
003581  1  03 4E                .BYTE   3,'N'
003583  1  2A 34                .WORD   LBB_NEW         ; NEW
003585  1  05 57                .BYTE   5,'W'
003587  1  ED 34                .WORD   LBB_WIDTH       ; WIDTH
003589  1  03 47                .BYTE   3,'G'
00358B  1  CE 33                .WORD   LBB_GET         ; GET
00358D  1  04 53                .BYTE   4,'S'
00358F  1  AE 34                .WORD   LBB_SWAP        ; SWAP
003591  1  06 42                .BYTE   6,'B'
003593  1  77 33                .WORD   LBB_BITSET      ; BITSET
003595  1  06 42                .BYTE   6,'B'
003597  1  71 33                .WORD   LBB_BITCLR      ; BITCLR
003599  1  03 49                .BYTE   3,'I'
00359B  1  EF 33                .WORD   LBB_IRQ         ; IRQ
00359D  1  03 4E                .BYTE   3,'N'
00359F  1  31 34                .WORD   LBB_NMI         ; NMI
0035A1  1  04 4B                .BYTE   4,'K'
0035A3  1  F3 33                .WORD   LBB_KILL        ; KILL
0035A5  1               
0035A5  1               
0035A5  1               ; secondary commands (can't start a statement)
0035A5  1               
0035A5  1  04 54                .BYTE   4,'T'
0035A7  1  B3 34                .WORD   LBB_TAB         ; TAB
0035A9  1  04 45                .BYTE   4,'E'
0035AB  1  B5 33                .WORD   LBB_ELSE        ; ELSE
0035AD  1  02 54                .BYTE   2,'T'
0035AF  1  BF 34                .WORD   LBB_TO          ; TO
0035B1  1  02 46                .BYTE   2,'F'
0035B3  1  C4 33                .WORD   LBB_FN          ; FN
0035B5  1  04 53                .BYTE   4,'S'
0035B7  1  99 34                .WORD   LBB_SPC         ; SPC
0035B9  1  04 54                .BYTE   4,'T'
0035BB  1  BB 34                .WORD   LBB_THEN        ; THEN
0035BD  1  03 4E                .BYTE   3,'N'
0035BF  1  34 34                .WORD   LBB_NOT         ; NOT
0035C1  1  04 53                .BYTE   4,'S'
0035C3  1  A1 34                .WORD   LBB_STEP        ; STEP
0035C5  1  05 55                .BYTE   5,'U'
0035C7  1  CE 34                .WORD   LBB_UNTIL       ; UNTIL
0035C9  1  05 57                .BYTE   5,'W'
0035CB  1  E8 34                .WORD   LBB_WHILE       ; WHILE
0035CD  1  03 4F                .BYTE   3,'O'
0035CF  1  3C 34                .WORD   LBB_OFF         ; OFF
0035D1  1               
0035D1  1               ; opperators
0035D1  1               
0035D1  1  01 2B                .BYTE   1,'+'
0035D3  1  00 00                .WORD   $0000           ; +
0035D5  1  01 2D                .BYTE   1,'-'
0035D7  1  00 00                .WORD   $0000           ; -
0035D9  1  01 2A                .BYTE   1,'*'
0035DB  1  00 00                .WORD   $0000           ; *
0035DD  1  01 2F                .BYTE   1,'/'
0035DF  1  00 00                .WORD   $0000           ; /
0035E1  1  01 5E                .BYTE   1,'^'
0035E3  1  00 00                .WORD   $0000           ; ^
0035E5  1  03 41                .BYTE   3,'A'
0035E7  1  60 33                .WORD   LBB_AND         ; AND
0035E9  1  03 45                .BYTE   3,'E'
0035EB  1  BC 33                .WORD   LBB_EOR         ; EOR
0035ED  1  02 4F                .BYTE   2,'O'
0035EF  1  41 34                .WORD   LBB_OR          ; OR
0035F1  1  02 3E                .BYTE   2,'>'
0035F3  1  56 33                .WORD   LBB_RSHIFT      ; >>
0035F5  1  02 3C                .BYTE   2,'<'
0035F7  1  50 33                .WORD   LBB_LSHIFT      ; <<
0035F9  1  01 3E                .BYTE   1,'>'
0035FB  1  00 00                .WORD   $0000           ; >
0035FD  1  01 3D                .BYTE   1,'='
0035FF  1  00 00                .WORD   $0000           ; =
003601  1  01 3C                .BYTE   1,'<'
003603  1  00 00                .WORD   $0000           ; <
003605  1               
003605  1               ; functions
003605  1               
003605  1  04 53                .BYTE   4,'S'           ;
003607  1  91 34                .WORD   LBB_SGN         ; SGN
003609  1  04 49                .BYTE   4,'I'           ;
00360B  1  EB 33                .WORD   LBB_INT         ; INT
00360D  1  04 41                .BYTE   4,'A'           ;
00360F  1  5C 33                .WORD   LBB_ABS         ; ABS
003611  1  04 55                .BYTE   4,'U'           ;
003613  1  D3 34                .WORD   LBB_USR         ; USR
003615  1  04 46                .BYTE   4,'F'           ;
003617  1  C9 33                .WORD   LBB_FRE         ; FRE
003619  1  04 50                .BYTE   4,'P'           ;
00361B  1  4F 34                .WORD   LBB_POS         ; POS
00361D  1  04 53                .BYTE   4,'S'           ;
00361F  1  9D 34                .WORD   LBB_SQR         ; SQR
003621  1  04 52                .BYTE   4,'R'           ;
003623  1  80 34                .WORD   LBB_RND         ; RND
003625  1  04 4C                .BYTE   4,'L'           ;
003627  1  13 34                .WORD   LBB_LOG         ; LOG
003629  1  04 45                .BYTE   4,'E'           ;
00362B  1  BF 33                .WORD   LBB_EXP         ; EXP
00362D  1  04 43                .BYTE   4,'C'           ;
00362F  1  97 33                .WORD   LBB_COS         ; COS
003631  1  04 53                .BYTE   4,'S'           ;
003633  1  95 34                .WORD   LBB_SIN         ; SIN
003635  1  04 54                .BYTE   4,'T'           ;
003637  1  B7 34                .WORD   LBB_TAN         ; TAN
003639  1  04 41                .BYTE   4,'A'           ;
00363B  1  67 33                .WORD   LBB_ATN         ; ATN
00363D  1  05 50                .BYTE   5,'P'           ;
00363F  1  44 34                .WORD   LBB_PEEK        ; PEEK
003641  1  05 44                .BYTE   5,'D'           ;
003643  1  A3 33                .WORD   LBB_DEEK        ; DEEK
003645  1  05 53                .BYTE   5,'S'           ;
003647  1  88 34                .WORD   LBB_SADD        ; SADD
003649  1  04 4C                .BYTE   4,'L'           ;
00364B  1  04 34                .WORD   LBB_LEN         ; LEN
00364D  1  05 53                .BYTE   5,'S'           ;
00364F  1  A9 34                .WORD   LBB_STRS        ; STR$
003651  1  04 56                .BYTE   4,'V'           ;
003653  1  D8 34                .WORD   LBB_VAL         ; VAL
003655  1  04 41                .BYTE   4,'A'           ;
003657  1  63 33                .WORD   LBB_ASC         ; ASC
003659  1  07 55                .BYTE   7,'U'           ;
00365B  1  C7 34                .WORD   LBB_UCASES      ; UCASE$
00365D  1  07 4C                .BYTE   7,'L'           ;
00365F  1  F7 33                .WORD   LBB_LCASES      ; LCASE$
003661  1  05 43                .BYTE   5,'C'           ;
003663  1  89 33                .WORD   LBB_CHRS        ; CHR$
003665  1  05 48                .BYTE   5,'H'           ;
003667  1  DB 33                .WORD   LBB_HEXS        ; HEX$
003669  1  05 42                .BYTE   5,'B'           ;
00366B  1  6C 33                .WORD   LBB_BINS        ; BIN$
00366D  1  07 42                .BYTE   7,'B'           ;
00366F  1  7D 33                .WORD   LBB_BITTST      ; BITTST
003671  1  04 4D                .BYTE   4,'M'           ;
003673  1  1C 34                .WORD   LBB_MAX         ; MAX
003675  1  04 4D                .BYTE   4,'M'           ;
003677  1  25 34                .WORD   LBB_MIN         ; MIN
003679  1  02 50                .BYTE   2,'P'           ;
00367B  1  49 34                .WORD   LBB_PI          ; PI
00367D  1  05 54                .BYTE   5,'T'           ;
00367F  1  C1 34                .WORD   LBB_TWOPI       ; TWOPI
003681  1  07 56                .BYTE   7,'V'           ;
003683  1  DC 34                .WORD   LBB_VPTR        ; VARPTR
003685  1  06 4C                .BYTE   6,'L'           ;
003687  1  FE 33                .WORD   LBB_LEFTS       ; LEFT$
003689  1  07 52                .BYTE   7,'R'           ;
00368B  1  79 34                .WORD   LBB_RIGHTS      ; RIGHT$
00368D  1  05 4D                .BYTE   5,'M'           ;
00368F  1  20 34                .WORD   LBB_MIDS        ; MID$
003691  1               
003691  1               ; BASIC messages, mostly error messages
003691  1               
003691  1               LAB_BAER:
003691  1  B5 36                .WORD   ERR_NF          ;$00 NEXT without FOR
003693  1  C6 36                .WORD   ERR_SN          ;$02 syntax
003695  1  CD 36                .WORD   ERR_RG          ;$04 RETURN without GOSUB
003697  1  E2 36                .WORD   ERR_OD          ;$06 out of data
003699  1  EE 36                .WORD   ERR_FC          ;$08 function call
00369B  1  FC 36                .WORD   ERR_OV          ;$0A overflow
00369D  1  05 37                .WORD   ERR_OM          ;$0C out of memory
00369F  1  13 37                .WORD   ERR_US          ;$0E undefined statement
0036A1  1  27 37                .WORD   ERR_BS          ;$10 array bounds
0036A3  1  34 37                .WORD   ERR_DD          ;$12 double dimension array
0036A5  1  45 37                .WORD   ERR_D0          ;$14 divide by 0
0036A7  1  54 37                .WORD   ERR_ID          ;$16 illegal direct
0036A9  1  63 37                .WORD   ERR_TM          ;$18 type mismatch
0036AB  1  71 37                .WORD   ERR_LS          ;$1A long string
0036AD  1  81 37                .WORD   ERR_ST          ;$1C string too complex
0036AF  1  94 37                .WORD   ERR_CN          ;$1E continue error
0036B1  1  A3 37                .WORD   ERR_UF          ;$20 undefined function
0036B3  1  B6 37                .WORD   ERR_LD          ;$22 LOOP without DO
0036B5  1               
0036B5  1               ; I may implement these two errors to force definition of variables and
0036B5  1               ; dimensioning of arrays before use.
0036B5  1               
0036B5  1               ;	.word ERR_UV		;$24 undefined variable
0036B5  1               
0036B5  1               ; the above error has been tested and works (see code and comments below LAB_1D8B)
0036B5  1               
0036B5  1               ;	.word ERR_UA		;$26 undimensioned array
0036B5  1               
0036B5  1               ERR_NF:
0036B5  1  4E 45 58 54          .BYTE   "NEXT without FOR",$00
0036B9  1  20 77 69 74  
0036BD  1  68 6F 75 74  
0036C6  1               ERR_SN:
0036C6  1  53 79 6E 74          .BYTE   "Syntax",$00
0036CA  1  61 78 00     
0036CD  1               ERR_RG:
0036CD  1  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
0036D1  1  52 4E 20 77  
0036D5  1  69 74 68 6F  
0036E2  1               ERR_OD:
0036E2  1  4F 75 74 20          .BYTE   "Out of DATA",$00
0036E6  1  6F 66 20 44  
0036EA  1  41 54 41 00  
0036EE  1               ERR_FC:
0036EE  1  46 75 6E 63          .BYTE   "Function call",$00
0036F2  1  74 69 6F 6E  
0036F6  1  20 63 61 6C  
0036FC  1               ERR_OV:
0036FC  1  4F 76 65 72          .BYTE   "Overflow",$00
003700  1  66 6C 6F 77  
003704  1  00           
003705  1               ERR_OM:
003705  1  4F 75 74 20          .BYTE   "Out of memory",$00
003709  1  6F 66 20 6D  
00370D  1  65 6D 6F 72  
003713  1               ERR_US:
003713  1  55 6E 64 65          .BYTE   "Undefined statement",$00
003717  1  66 69 6E 65  
00371B  1  64 20 73 74  
003727  1               ERR_BS:
003727  1  41 72 72 61          .BYTE   "Array bounds",$00
00372B  1  79 20 62 6F  
00372F  1  75 6E 64 73  
003734  1               ERR_DD:
003734  1  44 6F 75 62          .BYTE   "Double dimension",$00
003738  1  6C 65 20 64  
00373C  1  69 6D 65 6E  
003745  1               ERR_D0:
003745  1  44 69 76 69          .BYTE   "Divide by zero",$00
003749  1  64 65 20 62  
00374D  1  79 20 7A 65  
003754  1               ERR_ID:
003754  1  49 6C 6C 65          .BYTE   "Illegal direct",$00
003758  1  67 61 6C 20  
00375C  1  64 69 72 65  
003763  1               ERR_TM:
003763  1  54 79 70 65          .BYTE   "Type mismatch",$00
003767  1  20 6D 69 73  
00376B  1  6D 61 74 63  
003771  1               ERR_LS:
003771  1  53 74 72 69          .BYTE   "String too long",$00
003775  1  6E 67 20 74  
003779  1  6F 6F 20 6C  
003781  1               ERR_ST:
003781  1  53 74 72 69          .BYTE   "String too complex",$00
003785  1  6E 67 20 74  
003789  1  6F 6F 20 63  
003794  1               ERR_CN:
003794  1  43 61 6E 27          .BYTE   "Can't continue",$00
003798  1  74 20 63 6F  
00379C  1  6E 74 69 6E  
0037A3  1               ERR_UF:
0037A3  1  55 6E 64 65          .BYTE   "Undefined function",$00
0037A7  1  66 69 6E 65  
0037AB  1  64 20 66 75  
0037B6  1               ERR_LD:
0037B6  1  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
0037BA  1  20 77 69 74  
0037BE  1  68 6F 75 74  
0037C6  1               
0037C6  1               ;ERR_UV	.byte	"Undefined variable",$00
0037C6  1               
0037C6  1               ; the above error has been tested and works (see code and comments below LAB_1D8B)
0037C6  1               
0037C6  1               ;ERR_UA	.byte	"Undimensioned array",$00
0037C6  1               
0037C6  1               LAB_BMSG:
0037C6  1  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
0037CA  1  65 61 6B 00  
0037CE  1               LAB_EMSG:
0037CE  1  20 45 72 72          .BYTE   " Error",$00
0037D2  1  6F 72 00     
0037D5  1               LAB_LMSG:
0037D5  1  20 69 6E 20          .BYTE   " in line ",$00
0037D9  1  6C 69 6E 65  
0037DD  1  20 00        
0037DF  1               LAB_RMSG:
0037DF  1  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
0037E3  1  61 64 79 0D  
0037E7  1  0A 00        
0037E9  1               
0037E9  1               LAB_IMSG:
0037E9  1  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
0037ED  1  72 61 20 69  
0037F1  1  67 6E 6F 72  
0037FA  1               LAB_REDO:
0037FA  1  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
0037FE  1  6F 20 66 72  
003802  1  6F 6D 20 73  
00380D  1               
00380D  1               AA_end_basic:
00380D  1               
00380D  1               
00380D  1               
00380D  1               ; system dependant i/o vectors
00380D  1               ; these are in RAM and are set by the monitor at start-up
00380D  1               
00380D  1               V_INPT: ; non halting scan input device
00380D  1               BYTEIN:
00380D  1  8C 4C 38             STY     DBGY            ;
003810  1  8E 4B 38             STX     DBGX            ;
003813  1  A2 0B                LDX     #11             ;
003815  1  20 4E 38             JSR     PEM             ;
003818  1  C9 00                CMP     #$00            ;
00381A  1  F0 0D                BEQ     LAB_nobyw       ; branch if no byte waiting
00381C  1  A2 06                LDX     #6              ;
00381E  1  20 4E 38             JSR     PEM             ;
003821  1  AC 4C 38             LDY     DBGY
003824  1  AE 4B 38             LDX     DBGX
003827  1  38                   SEC                     ; flag byte received
003828  1  60                   RTS
003829  1               LAB_nobyw:
003829  1  AC 4C 38             LDY     DBGY
00382C  1  AE 4B 38             LDX     DBGX
00382F  1  18                   CLC                     ; flag no byte received
003830  1  60                   RTS                     ;
003831  1               
003831  1               V_OUTP: ; send byte to output device
003831  1               BYTEOUT:
003831  1  8D 4D 38             STA     DBGA
003834  1  8C 4C 38             STY     DBGY
003837  1  8E 4B 38             STX     DBGX
00383A  1  A2 02                LDX     #2              ;
00383C  1  20 4E 38             JSR     PEM             ;
00383F  1  AD 4D 38             LDA     DBGA
003842  1  AC 4C 38             LDY     DBGY
003845  1  AE 4B 38             LDX     DBGX
003848  1  60                   RTS
003849  1               
003849  1               
003849  1               PEMVEC:
003849  1  00 00                .WORD   $0000
00384B  1               
00384B  1               DBGX:
00384B  1  00                   .BYTE   0
00384C  1               DBGY:
00384C  1  00                   .BYTE   0
00384D  1               DBGA:
00384D  1  00                   .BYTE   0
00384E  1               
00384E  1               
00384E  1               
00384E  1               PEM:
00384E  1                       .IFDEF  DUODYNE
00384E  1  4C 03 01             JMP     $0103
003851  1                       .ELSE
003851  1                       JMP     (PEMVEC)
003851  1                       .ENDIF
003851  1               
003851  1               LAB_KILL:
003851  1               RETURN_TO_OS:
003851  1  4C 00 01             JMP     $0100
003854  1               
003854  1               
003854  1               
003854  1               V_SAVE: ; save BASIC program
003854  1               DOS65SAVE:
003854  1  20 85 39             JSR     DOS65FCBPREP    ; parse parameters into FCB
003857  1  B0 29                BCS     DOS65SAVE_ERR1  ; Error?, if so abort
003859  1  A2 0D                LDX     #13             ;
00385B  1  20 4E 38             JSR     PEM             ;
00385E  1  A9 74                LDA     #<FCB           ; CREATE File
003860  1  A0 3A                LDY     #>FCB           ;
003862  1  A2 16                LDX     #22             ;
003864  1  20 4E 38             JSR     PEM             ;
003867  1  A9 00                LDA     #0              ; clear
003869  1  8D 94 3A             STA     FCB+32          ; record number
00386C  1  A9 74                LDA     #<FCB           ; Open File
00386E  1  A0 3A                LDY     #>FCB           ;
003870  1  A2 0F                LDX     #15             ;
003872  1  20 4E 38             JSR     PEM             ;
003875  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
003877  1  D0 0C                BNE     DOS65SAVE_1     ;
003879  1               DOS65SAVE_ERR:
003879  1  A9 4F                LDA     #<FILEERROR2    ; NO, ERROR OUT
00387B  1  A0 3A                LDY     #>FILEERROR2
00387D  1  A2 09                LDX     #9              ; Print error message
00387F  1  20 4E 38             JSR     PEM             ;
003882  1               DOS65SAVE_ERR1:
003882  1  4C F9 0F             JMP     LAB_REM         ; comment out the remainder of the line (if any)
003885  1               DOS65SAVE_1:
003885  1  A9 95                LDA     #<FCBBUFFER     ; SETUP BUFFER
003887  1  85 20                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
003889  1  A0 3A                LDY     #>FCBBUFFER     ;
00388B  1  84 21                STY     FCBPTR+1        ;
00388D  1  A2 1A                LDX     #26             ; Setup Buffer
00388F  1  20 4E 38             JSR     PEM             ;
003892  1               DOS65SAVE_2:
003892  1  A5 79                LDA     <Smeml          ; All is well, file opened and continue
003894  1  85 22                STA     FCBPTR+2        ; point to base of RAM
003896  1  A5 7A                LDA     <Smemh          ;
003898  1  85 23                STA     FCBPTR+3        ;
00389A  1  A2 00                LDX     #$00            ; x=0 (null counter)
00389C  1               DOS65SAVE_2A:
00389C  1  A0 00                LDY     #$00            ; y=0 (Loop Index)
00389E  1               DOS65SAVE_3:
00389E  1  B1 22                LDA     (FCBPTR+2),Y    ; load from RAM
0038A0  1  91 20                STA     (FCBPTR),Y      ; save to Buffer
0038A2  1  C9 00                CMP     #$00            ; is Zero?
0038A4  1  D0 17                BNE     DOS65SAVE_3A    ; No, continue
0038A6  1  E8                   INX                     ; yes, bump Null Counter
0038A7  1  E0 03                CPX     #$03            ; Three nulls in a row?
0038A9  1  D0 14                BNE     DOS65SAVE_3B    ; No, continue
0038AB  1  A9 74                LDA     #<FCB           ; Write record in buffer to disk file AND END
0038AD  1  A0 3A                LDY     #>FCB           ;
0038AF  1  A2 15                LDX     #21             ;
0038B1  1  20 4E 38             JSR     PEM             ;
0038B4  1  29 FE                AND     #$FE            ; strip out extension
0038B6  1  C9 00                CMP     #$00            ; is error
0038B8  1  D0 BF                BNE     DOS65SAVE_ERR   ; ERROR, do error handling
0038BA  1  4C EA 38             JMP     DOS65SAVE_4
0038BD  1               DOS65SAVE_3A:                   ;
0038BD  1  A2 00                LDX     #$00            ; prior char not null, reset null counter
0038BF  1               DOS65SAVE_3B:                   ;
0038BF  1  C8                   INY                     ; bump index
0038C0  1  C0 80                CPY     #$80            ; end of buffer?
0038C2  1  D0 DA                BNE     DOS65SAVE_3     ; no, loop
0038C4  1               DOS65SAVE_3C:
0038C4  1  A9 74                LDA     #<FCB           ; Write record in buffer to disk file
0038C6  1  A0 3A                LDY     #>FCB           ;
0038C8  1  A2 15                LDX     #21             ;
0038CA  1  20 4E 38             JSR     PEM             ;
0038CD  1  29 FE                AND     #$FE            ; strip out extension
0038CF  1  C9 00                CMP     #$00            ; is error
0038D1  1  D0 A6                BNE     DOS65SAVE_ERR   ; ERROR, do error handling
0038D3  1  18                   CLC                     ;
0038D4  1  A5 22                LDA     FCBPTR+2        ; add $80 to base counter
0038D6  1  69 80                ADC     #$80            ;
0038D8  1  85 22                STA     FCBPTR+2        ;
0038DA  1  90 C0                BCC     DOS65SAVE_2A    ; is carry?, no loop
0038DC  1  18                   CLC                     ; yes, carry, inc high byte
0038DD  1  A5 23                LDA     FCBPTR+3        ;
0038DF  1  69 01                ADC     #$01            ;
0038E1  1  85 23                STA     FCBPTR+3        ;
0038E3  1  C9 D0                CMP     #>Ram_top       ; are we at the end of RAM?
0038E5  1  F0 03                BEQ     DOS65SAVE_4
0038E7  1  4C 9C 38             JMP     DOS65SAVE_2A
0038EA  1               DOS65SAVE_4:
0038EA  1  A9 74                LDA     #<FCB           ;
0038EC  1  A0 3A                LDY     #>FCB           ;
0038EE  1  A2 10                LDX     #16             ;
0038F0  1  20 4E 38             JSR     PEM             ;
0038F3  1  C9 FF                CMP     #$FF            ;
0038F5  1  D0 03                BNE     DOS65SAVE_5     ;
0038F7  1  4C 79 38             JMP     DOS65SAVE_ERR   ; ERROR, DISPLAY IT
0038FA  1               DOS65SAVE_5:
0038FA  1  A9 DF                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0038FC  1  A0 37                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0038FE  1  20 98 12             JSR     LAB_18C3
003901  1  4C BF 0A             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
003904  1               
003904  1               
003904  1               V_LOAD: ; load BASIC program
003904  1               DOS65LOAD:
003904  1  20 85 39             JSR     DOS65FCBPREP    ; parse parameters into FCB
003907  1  B0 20                BCS     DOS65LOAD_ERR1  ; Error?, if so abort
003909  1  A2 0D                LDX     #13             ;
00390B  1  20 4E 38             JSR     PEM             ;
00390E  1  A9 00                LDA     #0              ; clear
003910  1  8D 94 3A             STA     FCB+32          ; record number
003913  1  A9 74                LDA     #<FCB           ; Open File
003915  1  A0 3A                LDY     #>FCB           ;
003917  1  A2 0F                LDX     #15             ;
003919  1  20 4E 38             JSR     PEM             ;
00391C  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
00391E  1  D0 0C                BNE     DOS65LOAD_1     ;
003920  1               DOS65LOAD_ERR:
003920  1  A9 4F                LDA     #<FILEERROR2    ; NO, ERROR OUT
003922  1  A0 3A                LDY     #>FILEERROR2
003924  1  A2 09                LDX     #9              ; Print error message
003926  1  20 4E 38             JSR     PEM             ;
003929  1               DOS65LOAD_ERR1:
003929  1  4C F9 0F             JMP     LAB_REM         ; comment out the remainder of the line (if any)
00392C  1               DOS65LOAD_1:
00392C  1  A5 79                LDA     <Smeml          ; All is well, file opened and continue
00392E  1  85 22                STA     FCBPTR+2        ; point to base of RAM
003930  1  A5 7A                LDA     <Smemh          ;
003932  1  85 23                STA     FCBPTR+3        ;
003934  1  A9 95                LDA     #<FCBBUFFER     ; SETUP BUFFER
003936  1  85 20                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
003938  1  A0 3A                LDY     #>FCBBUFFER     ;
00393A  1  84 21                STY     FCBPTR+1        ; STORE DEST BUFFER IN FCBPTR
00393C  1  A2 1A                LDX     #26             ; Setup Buffer
00393E  1  20 4E 38             JSR     PEM             ;
003941  1  4C 61 39             JMP     DOS65LOAD_3C
003944  1               DOS65LOAD_3:
003944  1  B1 20                LDA     (FCBPTR),Y      ; load from BUFFER
003946  1  91 22                STA     (FCBPTR+2),Y    ; save to RAM
003948  1  C8                   INY                     ; bump index
003949  1  C0 80                CPY     #$80            ; end of buffer?
00394B  1  D0 F7                BNE     DOS65LOAD_3     ; no, loop
00394D  1  18                   CLC                     ;
00394E  1  A5 22                LDA     FCBPTR+2        ; add $80 to base counter
003950  1  69 80                ADC     #$80            ;
003952  1  85 22                STA     FCBPTR+2        ;
003954  1  90 0B                BCC     DOS65LOAD_3C    ; is carry?, no SKIP
003956  1  18                   CLC                     ; yes, carry, inc high byte
003957  1  A5 23                LDA     FCBPTR+3        ;
003959  1  69 01                ADC     #$01            ;
00395B  1  85 23                STA     FCBPTR+3        ;
00395D  1  C9 D0                CMP     #>Ram_top       ; are we at the end of RAM?
00395F  1  F0 11                BEQ     DOS65LOAD_4
003961  1               
003961  1               DOS65LOAD_3C:
003961  1  A9 74                LDA     #<FCB           ; READ record buffer from disk file
003963  1  A0 3A                LDY     #>FCB           ;
003965  1  20 07 3A             JSR     RDERCR          ;
003968  1  A0 00                LDY     #$00            ; RESET INDEX
00396A  1  C9 00                CMP     #$00            ; is error or EOF
00396C  1  F0 D6                BEQ     DOS65LOAD_3     ;
00396E  1  C9 01                CMP     #$01            ; EOF?
003970  1  D0 AE                BNE     DOS65LOAD_ERR   ; ERROR, do error handling
003972  1               DOS65LOAD_4:
003972  1  A9 74                LDA     #<FCB           ;
003974  1  A0 3A                LDY     #>FCB           ;
003976  1  A2 10                LDX     #16             ;
003978  1  20 4E 38             JSR     PEM             ;
00397B  1  A9 DF                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
00397D  1  A0 37                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
00397F  1  20 98 12             JSR     LAB_18C3
003982  1  4C BF 0A             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
003985  1               
003985  1               
003985  1               
003985  1               DOS65FCBPREP:
003985  1                       .IFDEF  DUODYNE
003985  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003989  1                       .ELSE
003989  1                       JSR     LAB_GBYT        ; scan memory
003989  1                       .ENDIF
003989  1               
003989  1  38                   SEC                     ;
00398A  1  E9 40                SBC     #64             ; PARSE DRIVE NUMBER
00398C  1  8D 74 3A             STA     DOSDRIVE        ; STORE IT IN FCB
00398F  1                       .IFDEF  DUODYNE
00398F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003993  1                       .ELSE
003993  1                       JSR     LAB_IGBY        ; increment and scan memory
003993  1                       .ENDIF
003993  1               
003993  1  C9 3A                CMP     #':'            ;
003995  1  F0 0E                BEQ     DOS65FCBPREP_1  ; YES, IT WAS A DRIVE, CONTINUE
003997  1  A9 24                LDA     #<FILEERROR1    ; NO, ERROR OUT
003999  1  A0 3A                LDY     #>FILEERROR1
00399B  1  A2 09                LDX     #9
00399D  1  20 4E 38             JSR     PEM
0039A0  1  20 F9 0F             JSR     LAB_REM
0039A3  1  38                   SEC
0039A4  1  60                   RTS
0039A5  1               DOS65FCBPREP_1:
0039A5  1  A9 74                LDA     #<FCB           ; SETUP FCBPTR
0039A7  1  85 20                STA     FCBPTR          ;
0039A9  1  A9 3A                LDA     #>FCB           ;
0039AB  1  85 21                STA     FCBPTR+1        ;
0039AD  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
0039AF  1  A9 20                LDA     #$20            ; LOAD SPACE CHAR INTO A
0039B1  1               DOS65FCBPREP_1A:                ; BLANK OUT FCB
0039B1  1  8B DA 48 A2          STAINDIRECTY FCBPTR     ;
0039B5  1  01 B5 20 C9  
0039B9  1  00 D0 04 A2  
0039C7  1  C8                   INY                     ;
0039C8  1  C0 09                CPY     #$09            ; IS DONE
0039CA  1  D0 E5                BNE     DOS65FCBPREP_1A ; NO, LOOP
0039CC  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
0039CE  1               DOS65FCBPREP_2:                 ; COPY FILE NAME PARAMETER INTO FCB
0039CE  1                       .IFDEF  DUODYNE
0039CE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0039D2  1                       .ELSE
0039D2  1                       JSR     LAB_IGBY        ; increment and scan memory
0039D2  1                       .ENDIF
0039D2  1  F0 22                BEQ     DOS65FCBPREP_3  ;
0039D4  1  C9 2E                CMP     #'.'
0039D6  1  F0 1E                BEQ     DOS65FCBPREP_3  ;
0039D8  1  8B DA 48 A2          STAINDIRECTY FCBPTR     ;
0039DC  1  01 B5 20 C9  
0039E0  1  00 D0 04 A2  
0039EE  1  C8                   INY                     ;
0039EF  1  C0 09                CPY     #$09            ;
0039F1  1  F0 03                BEQ     DOS65FCBPREP_3  ;
0039F3  1  4C CE 39             JMP     DOS65FCBPREP_2  ;
0039F6  1               DOS65FCBPREP_3:                 ;
0039F6  1  18                   CLC
0039F7  1  60                   RTS                     ;
0039F8  1               
0039F8  1               ;SUBROUTINES
0039F8  1               ;OPEN FILE
0039F8  1               OPNFIL:
0039F8  1  A2 0F                LDX     #15
0039FA  1  4C 4E 38             JMP     PEM
0039FD  1               ;CLOSE FILE
0039FD  1               CLSFIL:
0039FD  1  A2 10                LDX     #16
0039FF  1  4C 4E 38             JMP     PEM
003A02  1               ;DELETE FILE
003A02  1               DLTFIL:
003A02  1  A2 13                LDX     #19
003A04  1  4C 4E 38             JMP     PEM
003A07  1               ;READ RECORD
003A07  1               RDERCR:
003A07  1  A2 14                LDX     #20
003A09  1  4C 4E 38             JMP     PEM
003A0C  1               ;WRITE RECORD
003A0C  1               WRTRCR:
003A0C  1  A2 15                LDX     #21
003A0E  1  4C 4E 38             JMP     PEM
003A11  1               ;CREATE FILE
003A11  1               CRTFIL:
003A11  1  A2 16                LDX     #22
003A13  1  4C 4E 38             JMP     PEM
003A16  1               ;RENAME FILE
003A16  1               RNMFIL:
003A16  1  A2 17                LDX     #23
003A18  1  4C 4E 38             JMP     PEM
003A1B  1               ;SET BUFFER
003A1B  1               SETBUF:
003A1B  1  A2 1A                LDX     #26
003A1D  1  4C 4E 38             JMP     PEM
003A20  1               
003A20  1               
003A20  1               VDOS65SAVE:
003A20  1  54 38                .WORD   DOS65SAVE
003A22  1               VDOS65LOAD:
003A22  1  04 39                .WORD   DOS65LOAD
003A24  1               FILEERROR1:
003A24  1  2A 2A 20 4E          .BYTE   "** NO DRIVE SPECIFIED, OPERATION ABORTED"
003A28  1  4F 20 44 52  
003A2C  1  49 56 45 20  
003A4C  1  0D 0A 24             .BYTE   $0D,$0A,'$'
003A4F  1               FILEERROR2:
003A4F  1  2A 2A 20 44          .BYTE   "** DOS/65 ERROR, OPERATION ABORTED"
003A53  1  4F 53 2F 36  
003A57  1  35 20 45 52  
003A71  1  0D 0A 24             .BYTE   $0D,$0A,'$'
003A74  1               FCB:
003A74  1               DOSDRIVE:
003A74  1  00                   .BYTE   0               ; DRIVE NUMBER
003A75  1               DOSFN:
003A75  1  20 20 20 20          .BYTE   "        "      ; FILE NAME
003A79  1  20 20 20 20  
003A7D  1               DOSEX:
003A7D  1  42 41 53             .BYTE   "BAS"           ; EXTENSION
003A80  1               DOSET:
003A80  1  00 00 00             .BYTE   0,0,0           ; EXTENT
003A83  1               DOSNR:
003A83  1  00                   .BYTE   0               ; NUMBER OF RECORDS IN FILE
003A84  1               DOSBL:
003A84  1  00 00 00 00          .BYTE   0,0,0,0,0,0,0,0 ; BLOCKS IN FILE
003A88  1  00 00 00 00  
003A8C  1  00 00 00 00          .BYTE   0,0,0,0,0,0,0,0 ;
003A90  1  00 00 00 00  
003A94  1               DOSNX:
003A94  1  00                   .BYTE   0               ; NEXT RECORD
003A95  1               FCBBUFFER:
003A95  1               ENDOFBASIC:
003A95  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
003A99  1  56 45 44 20  
003A9D  1  46 52 4F 4D  
003AA9  1               
003AA9  1               
003AA9  1               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
003AA9  1               
003AA9  1               Ibuffs          = (ENDOFBASIC & $FF00)+$181
003AA9  1               Ibuffe          = Ibuffs+$47    ; end of input buffer
003AA9  1               
003AA9  1               Ram_base        = (Ibuffe & $FF00)+$100; start of user RAM (set as needed, should be page aligned)
003AA9  1                       .IFDEF  DUODYNE
003AA9  1               Ram_top         = $D000         ; end of user RAM+1 (set as needed, should be page aligned)
003AA9  1                       .ELSE
003AA9  1               Ram_top         = $B800         ; end of user RAM+1 (set as needed, should be page aligned)
003AA9  1                       .ENDIF
003AA9  1               
003AA9  1               
003AA9  1               
003AA9  1                       .END
