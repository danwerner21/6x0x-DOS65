;
; File generated by cc65 v 2.19 - Git 128b15a71
;
	.fopt		compiler,"cc65 v 2.19 - Git 128b15a71"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_cputs
	.import		_cprintf
	.import		_strncmp
	.import		_strncpy
	.import		_strtok
	.import		_strtoul
	.export		_floppy35720dcb
	.export		_floppy35144dcb
	.export		_floppy525360dcb
	.export		_floppy52512dcb
	.export		_hdddcb
	.export		_prtusage
	.export		_prtdevice
	.export		_prttable
	.export		_parsecmd
	.export		_mapdrive
	.export		_updatedosmap
	.export		_toupper
	.export		_main

.segment	"DATA"

_floppy35720dcb:
	.byte	$5E
	.byte	$01
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
_floppy35144dcb:
	.byte	$5E
	.byte	$01
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
_floppy525360dcb:
	.byte	$5E
	.byte	$01
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
_floppy52512dcb:
	.byte	$5E
	.byte	$01
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
_hdddcb:
	.byte	$FF
	.byte	$07
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$FF
	.byte	$01

.segment	"RODATA"

S0010:
	.byte	$20,$20,$20,$20,$41,$53,$53,$49,$47,$4E,$20,$44,$3A,$3D,$5B,$7B
	.byte	$44,$3A,$7C,$3C,$64,$65,$76,$69,$63,$65,$3E,$5B,$3C,$75,$6E,$69
	.byte	$74,$6E,$75,$6D,$3E,$5D,$3A,$5B,$3C,$73,$6C,$69,$63,$65,$6E,$75
	.byte	$6D,$3E,$5D,$7D,$5D,$20,$7B,$2F,$66,$6C,$61,$67,$73,$7D,$20,$0A
	.byte	$0D,$00
S0014:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$41,$53,$53,$49,$47,$4E
	.byte	$20,$43,$3A,$3D,$49,$44,$45,$30,$3A,$31,$09,$28,$61,$73,$73,$69
	.byte	$67,$6E,$20,$43,$3A,$20,$74,$6F,$20,$49,$44,$45,$20,$75,$6E,$69
	.byte	$74,$30,$2C,$20,$73,$6C,$69,$63,$65,$20,$31,$29,$20,$0A,$0D,$00
S0011:
	.byte	$20,$20,$20,$20,$20,$20,$65,$78,$3A,$20,$41,$53,$53,$49,$47,$4E
	.byte	$09,$09,$28,$64,$69,$73,$70,$6C,$61,$79,$20,$61,$6C,$6C,$20,$61
	.byte	$63,$74,$69,$76,$65,$20,$64,$72,$69,$76,$65,$20,$61,$73,$73,$69
	.byte	$67,$6E,$6D,$65,$6E,$74,$73,$29,$20,$0A,$0D,$00
S0013:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$41,$53,$53,$49,$47,$4E
	.byte	$20,$43,$3A,$3D,$46,$44,$30,$3A,$09,$28,$61,$73,$73,$69,$67,$6E
	.byte	$20,$43,$3A,$20,$74,$6F,$20,$66,$6C,$6F,$70,$70,$79,$20,$75,$6E
	.byte	$69,$74,$20,$30,$29,$20,$0A,$0D,$00
S0012:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$41,$53,$53,$49,$47,$4E
	.byte	$20,$2F,$3F,$09,$09,$28,$64,$69,$73,$70,$6C,$61,$79,$20,$76,$65
	.byte	$72,$73,$69,$6F,$6E,$20,$61,$6E,$64,$20,$75,$73,$61,$67,$65,$29
	.byte	$20,$0A,$0D,$00
S001A:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$50,$49,$44,$45,$31
	.byte	$3A,$20,$53,$45,$43,$4F,$4E,$44,$41,$52,$59,$20,$50,$50,$49,$44
	.byte	$45,$20,$46,$49,$58,$45,$44,$20,$44,$49,$53,$4B,$0A,$0D,$00
S001E:
	.byte	$41,$73,$73,$69,$67,$6E,$65,$64,$20,$64,$72,$69,$76,$65,$20,$6D
	.byte	$75,$73,$74,$20,$62,$65,$20,$69,$6E,$20,$74,$68,$65,$20,$72,$61
	.byte	$6E,$67,$65,$20,$6F,$66,$20,$41,$2D,$48,$2E,$0A,$0D,$00
S001C:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2F,$33,$35,$20,$20,$20
	.byte	$20,$20,$33,$2E,$35,$20,$49,$4E,$43,$48,$20,$46,$4C,$4F,$50,$50
	.byte	$59,$20,$28,$44,$45,$46,$41,$55,$4C,$54,$29,$0A,$0D,$00
S0019:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$50,$49,$44,$45,$30
	.byte	$3A,$20,$50,$52,$49,$4D,$41,$52,$59,$20,$50,$50,$49,$44,$45,$20
	.byte	$46,$49,$58,$45,$44,$20,$44,$49,$53,$4B,$0A,$0D,$00
S0018:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$46,$44,$31,$3A,$20,$20
	.byte	$20,$20,$46,$4C,$4F,$50,$50,$59,$20,$44,$49,$53,$4B,$20,$55,$4E
	.byte	$49,$54,$20,$31,$0A,$0D,$00
S0017:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$46,$44,$30,$3A,$20,$20
	.byte	$20,$20,$46,$4C,$4F,$50,$50,$59,$20,$44,$49,$53,$4B,$20,$55,$4E
	.byte	$49,$54,$20,$30,$0A,$0D,$00
S001D:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2F,$35,$32,$35,$20,$20
	.byte	$20,$20,$35,$2E,$32,$35,$20,$49,$4E,$43,$48,$20,$46,$4C,$4F,$50
	.byte	$50,$59,$0A,$0D,$00
S0006:
	.byte	$0A,$0D,$20,$44,$4F,$53,$2F,$36,$35,$20,$44,$72,$69,$76,$65,$20
	.byte	$61,$73,$73,$69,$67,$6E,$6D,$65,$6E,$74,$3A,$0A,$0D,$00
S0028:
	.byte	$55,$6E,$6B,$6F,$77,$6E,$20,$64,$65,$76,$69,$63,$65,$20,$61,$73
	.byte	$73,$69,$67,$6E,$6D,$65,$6E,$74,$2E,$20,$0A,$0D,$00
S0016:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$53,$44,$30,$3A,$20,$20
	.byte	$20,$20,$53,$44,$20,$44,$49,$53,$4B,$0A,$0D,$00
S0015:
	.byte	$0A,$0D,$20,$50,$4F,$53,$53,$49,$42,$4C,$45,$20,$44,$45,$56,$49
	.byte	$43,$45,$53,$3A,$0A,$0D,$00
S001B:
	.byte	$0A,$0D,$20,$50,$4F,$53,$53,$49,$42,$4C,$45,$20,$46,$4C,$41,$47
	.byte	$53,$3A,$0A,$0D,$00
S002B:
	.byte	$43,$68,$61,$6E,$67,$65,$64,$20,$74,$6F,$3A,$20,$20,$25,$63,$3A
	.byte	$3D,$00
S001F:
	.byte	$43,$75,$72,$72,$65,$6E,$74,$6C,$79,$3A,$20,$20,$20,$25,$63,$3A
	.byte	$3D,$00
S000F:
	.byte	$20,$55,$73,$61,$67,$65,$3A,$20,$0A,$0D,$00
S000D:
	.byte	$55,$4E,$4B,$4E,$4F,$57,$4E,$00
S0027:
	.byte	$50,$50,$49,$44,$45,$31,$3A,$00
S0026:
	.byte	$50,$50,$49,$44,$45,$30,$3A,$00
S000A	:=	S000D+0
S002E:
	.byte	$28,$33,$36,$30,$4B,$29,$00
S0020:
	.byte	$3A,$25,$75,$20,$0A,$0D,$00
S0007	:=	S002B+11
S0008:
	.byte	$3A,$25,$69,$0A,$0D,$00
S000C:
	.byte	$50,$50,$49,$44,$45,$00
S0025:
	.byte	$2F,$35,$32,$35,$00
S002D	:=	S0025+0
S0021:
	.byte	$53,$44,$30,$3A,$00
S0022:
	.byte	$46,$44,$30,$3A,$00
S0023	:=	S0025+0
S0024:
	.byte	$46,$44,$31,$3A,$00
S002C:
	.byte	$3A,$25,$75,$20,$00
S0009:
	.byte	$53,$44,$00
S000B:
	.byte	$46,$44,$00
S002F	:=	S0010+63
S000E:
	.byte	$25,$69,$00
S002A	:=	S0027+6
S0005	:=	S002B+16
S0004	:=	S002B+16
S0003	:=	S002C+3
S0002	:=	S002C+3
S0001	:=	S002C+3
S0029	:=	S0027+6

; ---------------------------------------------------------------
; void __near__ prtusage (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prtusage: near

.segment	"CODE"

	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     _cputs
	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     _cputs
	lda     #<(S0011)
	ldx     #>(S0011)
	jsr     _cputs
	lda     #<(S0012)
	ldx     #>(S0012)
	jsr     _cputs
	lda     #<(S0013)
	ldx     #>(S0013)
	jsr     _cputs
	lda     #<(S0014)
	ldx     #>(S0014)
	jsr     _cputs
	lda     #<(S0015)
	ldx     #>(S0015)
	jsr     _cputs
	lda     #<(S0016)
	ldx     #>(S0016)
	jsr     _cputs
	lda     #<(S0017)
	ldx     #>(S0017)
	jsr     _cputs
	lda     #<(S0018)
	ldx     #>(S0018)
	jsr     _cputs
	lda     #<(S0019)
	ldx     #>(S0019)
	jsr     _cputs
	lda     #<(S001A)
	ldx     #>(S001A)
	jsr     _cputs
	lda     #<(S001B)
	ldx     #>(S001B)
	jsr     _cputs
	lda     #<(S001C)
	ldx     #>(S001C)
	jsr     _cputs
	lda     #<(S001D)
	ldx     #>(S001D)
	jmp     _cputs

.endproc

; ---------------------------------------------------------------
; void __near__ prtdevice (char dev)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prtdevice: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	and     #$F0
	beq     L0004
	cmp     #$10
	beq     L0005
	cmp     #$20
	beq     L0006
	cmp     #$30
	beq     L0007
	jmp     L0008
L0004:	lda     #<(S0009)
	ldx     #>(S0009)
	jsr     _cputs
	jmp     L0003
L0005:	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     _cputs
	jmp     incsp1
L0006:	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     _cputs
	jmp     L0003
L0007:	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     _cputs
	jmp     L0003
L0008:	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     _cputs
	jmp     incsp1
L0003:	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	and     #$0F
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ prttable (char *bytes)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prttable: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     _cputs
	ldx     #$00
	txa
	jsr     stax0sp
L0002:	jsr     ldax0sp
	cmp     #$10
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	lda     #<(S0007)
	ldx     #>(S0007)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	lda     #$02
	jsr     tosdiva0
	ldy     #$41
	jsr     incaxy
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	jsr     ldax0sp
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	pha
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	pla
	jsr     _prtdevice
	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jmp     L0002
L0003:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ parsecmd (char *cmdline, char *token1, char *token2, char *flags)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_parsecmd: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	ldy     #$09
	jsr     ldaxysp
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	jsr     decsp4
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$08
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$04
	lda     (sp),y
	cmp     #$80
	bcc     L0002
	lda     #$7F
	sta     (sp),y
L0002:	lda     (sp),y
	clc
	ldy     #$0D
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$10
	jsr     pushwysp
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     _strtok
	ldy     #$02
	jsr     staxysp
	jsr     push0
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _strtok
	ldy     #$02
	jsr     staxysp
	jsr     push0
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _strtok
	jsr     stax0sp
	cpx     #$00
	bne     L000B
	cmp     #$00
	beq     L0003
L000B:	ldy     #$0A
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldx     #$00
	lda     #$05
	jsr     _strncpy
L0003:	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0009
	ldy     #$05
	jsr     pushwysp
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _strtok
	ldy     #$02
	jsr     staxysp
	cpx     #$00
	bne     L000C
	cmp     #$00
	beq     L0009
L000C:	ldy     #$0E
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldx     #$00
	lda     #$1D
	jsr     _strncpy
	ldx     #$00
	lda     #$01
	ldy     #$05
	jsr     staxysp
	jsr     push0
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     _strtok
	ldy     #$02
	jsr     staxysp
	cpx     #$00
	bne     L000D
	cmp     #$00
	beq     L0009
L000D:	ldy     #$0C
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldx     #$00
	lda     #$1D
	jsr     _strncpy
	ldx     #$00
	lda     #$02
	ldy     #$05
	jsr     staxysp
L0009:	ldy     #$06
	jsr     ldaxysp
	ldy     #$0F
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ mapdrive (char *bytes, char *token1, char *token2, char *flags)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mapdrive: near

.segment	"CODE"

	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldx     #$00
	and     #$5F
	ldy     #$41
	jsr     decaxy
	jsr     pusha
	lda     #$FF
	jsr     pusha
	jsr     decsp4
	lda     #$00
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	cmp     #$08
	bcc     L0002
	lda     #<(S001E)
	ldx     #>(S001E)
	jmp     L0016
L0002:	lda     #<(S001F)
	ldx     #>(S001F)
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	ldy     #$41
	jsr     incaxy
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	ldx     #$00
	ldy     #$06
	lda     (sp),y
	asl     a
	bcc     L0017
	inx
	clc
L0017:	ldy     #$0D
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _prtdevice
	lda     #<(S0020)
	ldx     #>(S0020)
	jsr     pushax
	ldx     #$00
	ldy     #$08
	lda     (sp),y
	asl     a
	bcc     L0018
	inx
	clc
L0018:	ldy     #$0F
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
	ldy     #$0A
	jsr     ldaxysp
	jsr     _toupper
	ldy     #$0C
	jsr     pushwysp
	lda     #<(S0021)
	ldx     #>(S0021)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L0005
	ldy     #$05
	sta     (sp),y
	iny
	lda     (sp),y
	jsr     pusha
	lda     #<(_hdddcb)
	ldx     #>(_hdddcb)
	jsr     _updatedosmap
L0005:	ldy     #$0C
	jsr     pushwysp
	lda     #<(S0022)
	ldx     #>(S0022)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L0007
	lda     #$20
	ldy     #$05
	sta     (sp),y
	iny
	lda     (sp),y
	jsr     pusha
	lda     #<(_floppy35720dcb)
	ldx     #>(_floppy35720dcb)
	jsr     _updatedosmap
	ldy     #$0A
	jsr     pushwysp
	lda     #<(S0023)
	ldx     #>(S0023)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L0007
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	lda     #<(_floppy525360dcb)
	ldx     #>(_floppy525360dcb)
	jsr     _updatedosmap
L0007:	ldy     #$0C
	jsr     pushwysp
	lda     #<(S0024)
	ldx     #>(S0024)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L0009
	lda     #$21
	ldy     #$05
	sta     (sp),y
	iny
	lda     (sp),y
	jsr     pusha
	lda     #<(_floppy35720dcb)
	ldx     #>(_floppy35720dcb)
	jsr     _updatedosmap
	ldy     #$0A
	jsr     pushwysp
	lda     #<(S0025)
	ldx     #>(S0025)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L0009
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	lda     #<(_floppy525360dcb)
	ldx     #>(_floppy525360dcb)
	jsr     _updatedosmap
L0009:	ldy     #$0C
	jsr     pushwysp
	lda     #<(S0026)
	ldx     #>(S0026)
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L000A
	lda     #$30
	ldy     #$05
	sta     (sp),y
	iny
	lda     (sp),y
	jsr     pusha
	lda     #<(_hdddcb)
	ldx     #>(_hdddcb)
	jsr     _updatedosmap
L000A:	ldy     #$0C
	jsr     pushwysp
	lda     #<(S0027)
	ldx     #>(S0027)
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L000B
	lda     #$31
	ldy     #$05
	sta     (sp),y
	iny
	lda     (sp),y
	jsr     pusha
	lda     #<(_hdddcb)
	ldx     #>(_hdddcb)
	jsr     _updatedosmap
L000B:	ldy     #$05
	lda     (sp),y
	cmp     #$FF
	bne     L000C
	lda     #<(S0028)
	ldx     #>(S0028)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jmp     L0001
L000C:	ldy     #$0C
	jsr     pushwysp
	lda     #<(S0029)
	ldx     #>(S0029)
	jsr     _strtok
	ldy     #$03
	jsr     staxysp
	jsr     push0
	lda     #<(S002A)
	ldx     #>(S002A)
	jsr     _strtok
	ldy     #$03
	jsr     staxysp
	cpx     #$00
	bne     L001E
	cmp     #$00
	beq     L001F
L001E:	ldy     #$06
	jsr     pushwysp
	lda     #$03
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _strtoul
	ldy     #$00
	sta     (sp),y
	ldx     #$00
L001F:	ldy     #$06
	lda     (sp),y
	asl     a
	bcc     L0019
	inx
	clc
L0019:	ldy     #$0D
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	ldx     #$00
	ldy     #$06
	lda     (sp),y
	asl     a
	bcc     L001A
	inx
	clc
L001A:	ldy     #$0D
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	lda     #<(S002B)
	ldx     #>(S002B)
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	ldy     #$41
	jsr     incaxy
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	ldx     #$00
	ldy     #$06
	lda     (sp),y
	asl     a
	bcc     L001B
	inx
	clc
L001B:	ldy     #$0D
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _prtdevice
	lda     #<(S002C)
	ldx     #>(S002C)
	jsr     pushax
	ldx     #$00
	ldy     #$08
	lda     (sp),y
	asl     a
	bcc     L001C
	inx
	clc
L001C:	ldy     #$0F
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     #$04
	jsr     _cprintf
	ldy     #$0A
	jsr     pushwysp
	lda     #<(S002D)
	ldx     #>(S002D)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _strncmp
	stx     tmp1
	ora     tmp1
	bne     L000F
	lda     #<(S002E)
	ldx     #>(S002E)
	jsr     _cputs
L000F:	lda     #<(S002F)
	ldx     #>(S002F)
L0016:	jsr     _cputs
L0001:	ldy     #$0F
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ updatedosmap (char drive, char *dcb)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updatedosmap: near

.segment	"CODE"

	jsr     pushax
	lda     $002C
	ldx     $002C+1
	jsr     pushax
	jsr     pushw0sp
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     #$0E
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	jsr     decsp2
	ldx     #$00
	txa
	jsr     stax0sp
L0002:	jsr     ldax0sp
	cmp     #$09
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	jsr     ldax0sp
	clc
	ldy     #$02
	adc     (sp),y
	sta     sreg
	txa
	iny
	adc     (sp),y
	sta     sreg+1
	jsr     ldax0sp
	clc
	ldy     #$06
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     (sreg),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jmp     L0002
L0003:	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ toupper (char *name)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_toupper: near

.segment	"CODE"

	jsr     pushax
	jmp     L0004
L0002:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$61
	ldx     #$00
	bcc     L000D
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$7B
	bcs     L000E
	jsr     ldax0sp
	sta     sreg
	stx     sreg+1
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$5F
	sta     (sreg),y
L000E:	ldx     #$00
L000D:	lda     #$01
	jsr     addeq0sp
L0004:	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	bne     L0002
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     $002E
	ldx     $002E+1
	jsr     pushax
	lda     $0030
	ldx     $0030+1
	jsr     pushax
	ldy     #$5C
	jsr     subysp
	lda     $0030
	ldx     $0030+1
	jsr     pushax
	lda     #$3E
	jsr     leaa0sp
	jsr     pushax
	lda     #$22
	jsr     leaa0sp
	jsr     pushax
	lda     #$06
	jsr     leaa0sp
	jsr     _parsecmd
	ldy     #$5A
	jsr     staxysp
	cpx     #$00
	bne     L0003
	cmp     #$00
	beq     L0004
	cmp     #$01
	beq     L0005
	cmp     #$02
	beq     L0006
	jmp     L0007
L0004:	ldy     #$5F
	jsr     ldaxysp
	jsr     _prttable
	jmp     L0003
L0005:	jsr     _prtusage
	jmp     L0003
L0006:	ldy     #$61
	jsr     pushwysp
	lda     #$3E
	jsr     leaa0sp
	jsr     pushax
	lda     #$22
	jsr     leaa0sp
	jsr     pushax
	lda     #$06
	jsr     leaa0sp
	jsr     _mapdrive
L0003:	ldx     #$00
L0007:	txa
	ldy     #$60
	jmp     addysp

.endproc

