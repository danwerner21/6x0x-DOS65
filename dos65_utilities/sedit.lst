ca65 V2.18 - Ubuntu 2.19-1
Main file   : sedit.asm
Current file: sedit.asm

000000r 1               ;__SCREEN EDITOR_________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; 	DOS/65 SCREEN EDITOR (ANSI TERMINAL/CONSOLE)
000000r 1               ;	DAN WERNER 5/31/2014
000000r 1               ;
000000r 1               ;  DWERNER 2/17/23   ADD CODE TO ENSURE "SAVE AS" FILENAMES ARE PROPER DOS/65 FILENAMES
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               
000000r 1               DFLFCB          = $107          ;DEFAULT FCB
000000r 1               PEM             = $103          ;PEM ENTRY
000000r 1               BOOT            = $100          ;WARM BOOT
000000r 1               TEA             = $800          ;EXECUTION ORG
000000r 1               CCMLNG          = 2048          ;CCM LENGTH
000000r 1               CRSYM           = 32            ;CR SYMBOL
000000r 1               LASTROW         = 20
000000r 1               MAXCOL          = 80
000000r 1               
000000r 1               ;ZERO PAGE
000000r 1               NAMED           = $02           ;"TO" FILE NAMED IF <128
000000r 1               TOIND           = $03           ;"TO" FILE INDEX
000000r 1               FRMIND          = $05           ;"FROM" FILE INDEX
000000r 1               TEMP            = $08           ;
000000r 1               FCBPTR          = $09           ; POINTER TO FCB FOR FILE OPS
000000r 1               CSRPOSX         = $0B           ;
000000r 1               CSRPOSY         = $0C           ;
000000r 1               EDTPOS          = $0D           ;
000000r 1               TMPPOS          = $0F           ;
000000r 1               TEMP1           = $11           ;
000000r 1               CURRENTLEN      = $12           ;
000000r 1               MODE            = $14           ; 0= OVERWRITE MODE, 1= INSERT MODE
000000r 1               
000000r 1               ;MAIN PROGRAM
000000r 1                       .SEGMENT "TEA"
000000r 1                       .ORG    $0800
000800  1               
000800  1  20 68 11             JSR     CLEARBUFFER
000803  1  20 82 11             JSR     DOS65LOAD
000806  1  20 7C 0E             JSR     PAINTSCREEN
000809  1               
000809  1  A9 00                LDA     #$00
00080B  1  85 14                STA     MODE
00080D  1  85 0B                STA     CSRPOSX
00080F  1  85 0C                STA     CSRPOSY
000811  1  20 FE 0F             JSR     GOCSR
000814  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
000816  1  85 0D                STA     EDTPOS          ; STORE DEST BUFFER
000818  1  A9 18                LDA     #>BUFFER        ;
00081A  1  85 0E                STA     EDTPOS+1        ; STORE DEST BUFFER
00081C  1               
00081C  1               
00081C  1               
00081C  1               EDITLOOP:
00081C  1  20 96 10             JSR     READKB          ; GET USER INPUT
00081F  1               ;
00081F  1               
00081F  1  C0 01                CPY     #$01            ; IF IT IS A NORMAL KEYSTROKE
000821  1  D0 64                BNE     EDIT            ; GOTO EDIT
000823  1               
000823  1  C0 FF                CPY     #$FF            ; IF IT IS AN ERROR
000825  1  F0 F5                BEQ     EDITLOOP        ;  LOOP
000827  1               
000827  1  85 08                STA     TEMP            ; STORE COMMAND IN TEMP
000829  1  A0 00                LDY     #$00            ;
00082B  1               EDITLOOP1A:
00082B  1  B9 53 08             LDA     COMMANDTABLE,Y  ; CHECK TOKEN
00082E  1  C5 08                CMP     TEMP            ; COMPARE
000830  1  D0 14                BNE     EDITLOOP2A      ;
000832  1  C8                   INY
000833  1  B9 53 08             LDA     COMMANDTABLE,Y  ; CHECK TOKEN
000836  1  8D 41 08             STA     JMPTMP+1        ;
000839  1  C8                   INY
00083A  1  B9 53 08             LDA     COMMANDTABLE,Y  ; CHECK TOKEN
00083D  1  8D 42 08             STA     JMPTMP+2        ;
000840  1               JMPTMP:
000840  1  20 00 00             JSR     $0000
000843  1  4C 1C 08             JMP     EDITLOOP
000846  1               EDITLOOP2A:
000846  1  C9 FF                CMP     #$FF
000848  1  F0 06                BEQ     EDITLOOP3A
00084A  1  C8                   INY
00084B  1  C8                   INY
00084C  1  C8                   INY
00084D  1  4C 2B 08             JMP     EDITLOOP1A
000850  1               
000850  1               EDITLOOP3A:
000850  1  4C 1C 08             JMP     EDITLOOP
000853  1               
000853  1               COMMANDTABLE:
000853  1  00 06 0C             .BYTE   $00,<CRSRUP,>CRSRUP
000856  1  01 2B 0C             .BYTE   $01,<CRSRDN,>CRSRDN
000859  1  02 52 0C             .BYTE   $02,<CRSRLEFT,>CRSRLEFT
00085C  1  03 79 0C             .BYTE   $03,<CRSRRIGHT,>CRSRRIGHT
00085F  1  05 2D 0E             .BYTE   $05,<PAGEUP,>PAGEUP
000862  1  06 E0 0D             .BYTE   $06,<PAGEDOWN,>PAGEDOWN
000865  1  08 4C 0B             .BYTE   $08,<BACKSPACE,>BACKSPACE
000868  1  13 7E 08             .BYTE   $13,<RETURN_TO_OS,>RETURN_TO_OS
00086B  1  14 BA 0B             .BYTE   $14,<TOGGLEMODE,>TOGGLEMODE
00086E  1  30 F7 08             .BYTE   $30,<INSERTCR,>INSERTCR
000871  1  7F 52 0B             .BYTE   127,<DELETECHAR,>DELETECHAR
000874  1  18 7F 14             .BYTE   $18,<DOS65SAVE,>DOS65SAVE
000877  1  19 64 12             .BYTE   $19,<DOS65SAVEAS,>DOS65SAVEAS
00087A  1  24 8A 09             .BYTE   $24,<TRUNCATE,>TRUNCATE
00087D  1  FF                   .BYTE   $FF
00087E  1               
00087E  1               
00087E  1               
00087E  1               RETURN_TO_OS:
00087E  1  20 F0 0F             JSR     CLEARSCREEN
000881  1  20 58 11             JSR     READKB_XON
000884  1  4C 00 01             JMP     $0100
000887  1               
000887  1               
000887  1               ;__EDIT__________________________________________________________________________________________________________________________
000887  1               ;
000887  1               ; 	EDIT THE FILE
000887  1               ;
000887  1               ;________________________________________________________________________________________________________________________________
000887  1               ;
000887  1               EDIT:
000887  1  48                   PHA                     ; STORE KEYSTROKE
000888  1  A5 14                LDA     MODE            ; OVERWRITE OR INSERT?
00088A  1  C9 00                CMP     #$00            ;
00088C  1  F0 03                BEQ     EDIT_OM         ; OVERWRITE MODE
00088E  1  20 A3 0A             JSR     INSERTCHAR      ; INSERT CHAR SPACE
000891  1               EDIT_OM:
000891  1  A0 00                LDY     #$00            ;
000893  1  B1 0D                LDA     (EDTPOS),Y      ; IS CRSR OVER A CR?
000895  1  C9 0D                CMP     #13             ;
000897  1  D0 25                BNE     EDIT_OMB        ; NO, CONTINUE
000899  1  C8                   INY                     ;
00089A  1  B1 0D                LDA     (EDTPOS),Y      ; IS NEXT POS A NULL?
00089C  1  C9 00                CMP     #$00            ;
00089E  1  D0 2F                BNE     EDIT_OMC        ;
0008A0  1               EDIT_OMA:
0008A0  1  68                   PLA                     ;
0008A1  1  A0 00                LDY     #$00            ;
0008A3  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0008A5  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
0008A8  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
0008AB  1  A9 0D                LDA     #13             ;
0008AD  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0008AF  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
0008B2  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
0008B5  1  20 52 0C             JSR     CRSRLEFT        ; MOVE CSR BACK 1
0008B8  1  20 DE 08             JSR     EDITCHECK       ;
0008BB  1  4C 1C 08             JMP     EDITLOOP        ;
0008BE  1               
0008BE  1               EDIT_OMB:
0008BE  1  68                   PLA
0008BF  1  A0 00                LDY     #$00
0008C1  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0008C3  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
0008C6  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
0008C9  1  20 DE 08             JSR     EDITCHECK       ;
0008CC  1  4C 1C 08             JMP     EDITLOOP
0008CF  1               
0008CF  1               EDIT_OMC:
0008CF  1               
0008CF  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
0008D1  1  C9 13                CMP     #LASTROW-1      ;
0008D3  1  D0 03                BNE     *+5             ; NO
0008D5  1  20 2F 0D             JSR     SCROLLDOWN      ; SCROLL
0008D8  1               
0008D8  1  20 CA 09             JSR     INSERTLINE
0008DB  1  4C A0 08             JMP     EDIT_OMA
0008DE  1               
0008DE  1               ;__EDITCHECK_____________________________________________________________________________________________________________________
0008DE  1               ;
0008DE  1               ; 	IF EDTPOS > CURRENTLEN CHANGE CURRENTLEN
0008DE  1               ;
0008DE  1               ;________________________________________________________________________________________________________________________________
0008DE  1               ;
0008DE  1               EDITCHECK:
0008DE  1  48                   PHA
0008DF  1  A5 0E                LDA     EDTPOS+1
0008E1  1  C5 13                CMP     CURRENTLEN+1
0008E3  1  90 10                BCC     EDITCHECK_1
0008E5  1  A5 0D                LDA     EDTPOS
0008E7  1  C5 12                CMP     CURRENTLEN
0008E9  1  90 0A                BCC     EDITCHECK_1
0008EB  1               
0008EB  1  A5 0E                LDA     EDTPOS+1
0008ED  1  85 13                STA     CURRENTLEN+1
0008EF  1  A5 0D                LDA     EDTPOS
0008F1  1  85 12                STA     CURRENTLEN
0008F3  1  E6 12                INC     CURRENTLEN
0008F5  1               EDITCHECK_1:
0008F5  1  68                   PLA
0008F6  1  60                   RTS
0008F7  1               
0008F7  1               ;__INSERTCR______________________________________________________________________________________________________________________
0008F7  1               ;
0008F7  1               ; 	INSERT CR AT THE CURRENT POSITION
0008F7  1               ;
0008F7  1               ;________________________________________________________________________________________________________________________________
0008F7  1               ;
0008F7  1               INSERTCR:
0008F7  1  A5 0B                LDA     CSRPOSX         ; Store current cursor and edit position into stack
0008F9  1  48                   PHA                     ;
0008FA  1  A5 0C                LDA     CSRPOSY         ;
0008FC  1  48                   PHA                     ;
0008FD  1  A5 0D                LDA     EDTPOS          ;
0008FF  1  48                   PHA                     ;
000900  1  A5 0E                LDA     EDTPOS+1        ;
000902  1  48                   PHA                     ;
000903  1               
000903  1               
000903  1  A0 00                LDY     #$00            ; move editpos to the end of the screen and store count into INSERTCHTEMP
000905  1  8C 89 09             STY     INSERTCHTEMP    ; INSERTCHTEMP=0
000908  1  A6 0B                LDX     CSRPOSX         ; x=current x pos
00090A  1               INSERTCR1:
00090A  1  E8                   INX                     ; x++
00090B  1  EE 89 09             INC     INSERTCHTEMP    ; INSERTCHTEMP++
00090E  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000911  1  E0 50                CPX     #MAXCOL         ; are we at the end of the line?
000913  1  D0 F5                BNE     INSERTCR1       ; no, loop
000915  1               
000915  1               INSERTCR2:
000915  1  A9 00                LDA     #$00            ; INSERT A LINE
000917  1  85 0B                STA     CSRPOSX         ;
000919  1  E6 0C                INC     CSRPOSY         ;
00091B  1  20 FE 0F             JSR     GOCSR           ;
00091E  1  20 CA 09             JSR     INSERTLINE      ; INSERT A LINE
000921  1               
000921  1               
000921  1  68                   PLA                     ;
000922  1  85 0E                STA     EDTPOS+1        ;
000924  1  68                   PLA                     ;
000925  1  85 0D                STA     EDTPOS          ;
000927  1  68                   PLA                     ;
000928  1  85 0C                STA     CSRPOSY         ;
00092A  1  68                   PLA                     ;
00092B  1  85 0B                STA     CSRPOSX         ;
00092D  1               
00092D  1  A5 0B                LDA     CSRPOSX         ; Store current cursor and edit position into stack
00092F  1  48                   PHA                     ;
000930  1  A5 0C                LDA     CSRPOSY         ;
000932  1  48                   PHA                     ;
000933  1  A5 0D                LDA     EDTPOS          ;
000935  1  48                   PHA                     ;
000936  1  A5 0E                LDA     EDTPOS+1        ;
000938  1  48                   PHA                     ;
000939  1               
000939  1               
000939  1  AE 89 09             LDX     INSERTCHTEMP    ;
00093C  1               
00093C  1               INSERTCR3:
00093C  1  A0 00                LDY     #$00
00093E  1  B1 0D                LDA     (EDTPOS),Y      ;
000940  1  AC 89 09             LDY     INSERTCHTEMP    ;
000943  1  91 0D                STA     (EDTPOS),Y      ;
000945  1               
000945  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
000948  1  A9 00                LDA     #$00            ;
00094A  1  A8                   TAY                     ;
00094B  1  91 0D                STA     (EDTPOS),Y      ;
00094D  1               
00094D  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000950  1  CA                   DEX                     ;
000951  1  E0 00                CPX     #$00            ;
000953  1  D0 E7                BNE     INSERTCR3       ;
000955  1               
000955  1  68                   PLA                     ;
000956  1  85 0E                STA     EDTPOS+1        ;
000958  1  68                   PLA                     ;
000959  1  85 0D                STA     EDTPOS          ;
00095B  1  68                   PLA                     ;
00095C  1  85 0C                STA     CSRPOSY         ;
00095E  1  68                   PLA                     ;
00095F  1  85 0B                STA     CSRPOSX         ;
000961  1  20 FE 0F             JSR     GOCSR
000964  1               
000964  1  A0 00                LDY     #$00            ;
000966  1  A9 0D                LDA     #13             ;
000968  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
00096A  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
00096D  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000970  1               
000970  1               
000970  1  AE 89 09             LDX     INSERTCHTEMP    ;
000973  1  CA                   DEX                     ;
000974  1               INSERTCR4:
000974  1  8A                   TXA
000975  1  48                   PHA
000976  1  B1 0D                LDA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
000978  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
00097B  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
00097E  1  68                   PLA                     ;
00097F  1  AA                   TAX                     ;
000980  1  CA                   DEX                     ;
000981  1  E0 00                CPX     #$00            ;
000983  1  D0 EF                BNE     INSERTCR4       ;
000985  1               
000985  1  20 FE 0F             JSR     GOCSR
000988  1  60                   RTS
000989  1               
000989  1               INSERTCHTEMP:
000989  1  00                   .BYTE   0               ;
00098A  1               
00098A  1               ;__TRUNCATE______________________________________________________________________________________________________________________
00098A  1               ;
00098A  1               ; 	TRUNCATE FILE AT THE CURRENT POSITION
00098A  1               ;
00098A  1               ;________________________________________________________________________________________________________________________________
00098A  1               ;
00098A  1               TRUNCATE:
00098A  1  A5 0B                LDA     CSRPOSX         ; Store current cursor and edit position into stack
00098C  1  48                   PHA                     ;
00098D  1  A5 0C                LDA     CSRPOSY         ;
00098F  1  48                   PHA                     ;
000990  1  A5 0D                LDA     EDTPOS          ;
000992  1  48                   PHA                     ;
000993  1  A5 0E                LDA     EDTPOS+1        ;
000995  1  48                   PHA                     ;
000996  1               
000996  1  A0 00                LDY     #$00            ;
000998  1  A9 0D                LDA     #13             ;
00099A  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
00099C  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
00099F  1               
00099F  1               TRUNCATE_LOOP:
00099F  1  20 CE 0D             JSR     INCEDTPOS
0009A2  1  A9 00                LDA     #$00            ;
0009A4  1  A8                   TAY                     ;
0009A5  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0009A7  1               
0009A7  1  A5 0E                LDA     EDTPOS+1        ;
0009A9  1  C5 13                CMP     CURRENTLEN+1    ;
0009AB  1  D0 F2                BNE     TRUNCATE_LOOP   ;
0009AD  1  A5 0D                LDA     EDTPOS          ;
0009AF  1  C5 12                CMP     CURRENTLEN      ;
0009B1  1  D0 EC                BNE     TRUNCATE_LOOP   ;
0009B3  1               
0009B3  1  68                   PLA                     ;
0009B4  1  85 0E                STA     EDTPOS+1        ;
0009B6  1  85 13                STA     CURRENTLEN+1    ;
0009B8  1  68                   PLA                     ;
0009B9  1  85 0D                STA     EDTPOS          ;
0009BB  1  85 12                STA     CURRENTLEN      ;
0009BD  1  68                   PLA                     ;
0009BE  1  85 0C                STA     CSRPOSY         ;
0009C0  1  68                   PLA                     ;
0009C1  1  85 0B                STA     CSRPOSX         ;
0009C3  1               
0009C3  1  20 92 0D             JSR     CHKPOS          ;
0009C6  1  20 2D 0E             JSR     PAGEUP          ;
0009C9  1               
0009C9  1  60                   RTS
0009CA  1               
0009CA  1               
0009CA  1               ;__INSERTLINE____________________________________________________________________________________________________________________
0009CA  1               ;
0009CA  1               ; 	INSERT ONE LINE AT THE CURRENT POSITION
0009CA  1               ;
0009CA  1               ;________________________________________________________________________________________________________________________________
0009CA  1               ;
0009CA  1               INSERTLINE:
0009CA  1  20 DE 08             JSR     EDITCHECK       ; VERIFY WE ARE NOT PAST EOF
0009CD  1  A5 12                LDA     CURRENTLEN      ;
0009CF  1  85 0F                STA     TMPPOS          ;
0009D1  1  A5 13                LDA     CURRENTLEN+1    ;
0009D3  1  85 10                STA     TMPPOS+1        ; TMPPOS SHOULD BE BOTTOM OF COPY
0009D5  1               
0009D5  1  A5 12                LDA     CURRENTLEN      ; SET CURRENTLEN TO NEW TOP
0009D7  1  18                   CLC                     ; (+80)
0009D8  1  69 50                ADC     #$50            ;
0009DA  1  85 12                STA     CURRENTLEN      ;
0009DC  1  A5 13                LDA     CURRENTLEN+1    ;
0009DE  1  69 00                ADC     #$00            ;
0009E0  1  85 13                STA     CURRENTLEN+1    ;
0009E2  1  C9 B7                CMP     #>(Ram_top-1)   ; are we at the end of RAM?
0009E4  1  B0 57                BCS     INSERTLINE_ABORT; IF SO, ABORT
0009E6  1               ;
0009E6  1               INSERTLINE1:
0009E6  1  A0 00                LDY     #$00            ;
0009E8  1  B1 0F                LDA     (TMPPOS),Y      ;
0009EA  1  A0 50                LDY     #$50            ;
0009EC  1  91 0F                STA     (TMPPOS),Y      ;
0009EE  1  C6 0F                DEC     TMPPOS          ;
0009F0  1  A5 0F                LDA     TMPPOS          ;
0009F2  1  C9 FF                CMP     #$FF            ;
0009F4  1  D0 02                BNE     INSERTLINE1A    ;
0009F6  1  C6 10                DEC     TMPPOS+1        ;
0009F8  1               INSERTLINE1A:
0009F8  1  A5 10                LDA     TMPPOS+1        ;
0009FA  1  C5 0E                CMP     EDTPOS+1        ;
0009FC  1  D0 E8                BNE     INSERTLINE1     ;
0009FE  1  A5 0F                LDA     TMPPOS          ;
000A00  1  C5 0D                CMP     EDTPOS          ;
000A02  1  D0 E2                BNE     INSERTLINE1     ;
000A04  1  A2 50                LDX     #80             ;
000A06  1  A0 00                LDY     #$00            ;
000A08  1  A9 00                LDA     #$00            ;
000A0A  1               INSERTLINE2:
000A0A  1  91 0F                STA     (TMPPOS),Y      ;
000A0C  1  C8                   INY                     ;
000A0D  1  CA                   DEX                     ;
000A0E  1  E0 00                CPX     #$00            ;
000A10  1  D0 F8                BNE     INSERTLINE2     ;
000A12  1               
000A12  1  A5 0B                LDA     CSRPOSX         ;
000A14  1  48                   PHA                     ;
000A15  1  A5 0C                LDA     CSRPOSY         ;
000A17  1  48                   PHA                     ;
000A18  1  A5 0D                LDA     EDTPOS          ;
000A1A  1  48                   PHA                     ;
000A1B  1  A5 0E                LDA     EDTPOS+1        ;
000A1D  1  48                   PHA                     ;
000A1E  1  A0 00                LDY     #$00            ;
000A20  1               
000A20  1               INSERTLINE3:
000A20  1  B1 0D                LDA     (EDTPOS),Y      ;
000A22  1  20 53 10             JSR     TOCONSOLE       ;
000A25  1  20 CE 0D             JSR     INCEDTPOS       ;
000A28  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000A2A  1  C9 14                CMP     #LASTROW        ;
000A2C  1  D0 F2                BNE     INSERTLINE3     ; NO
000A2E  1  68                   PLA                     ;
000A2F  1  85 0E                STA     EDTPOS+1        ;
000A31  1  68                   PLA                     ;
000A32  1  85 0D                STA     EDTPOS          ;
000A34  1  68                   PLA                     ;
000A35  1  85 0C                STA     CSRPOSY         ;
000A37  1  68                   PLA                     ;
000A38  1  85 0B                STA     CSRPOSX         ;
000A3A  1  4C FE 0F             JMP     GOCSR           ;
000A3D  1               
000A3D  1               INSERTLINE_ABORT:
000A3D  1  60                   RTS
000A3E  1               
000A3E  1               
000A3E  1               
000A3E  1               ;__DELETELINE____________________________________________________________________________________________________________________
000A3E  1               ;
000A3E  1               ; 	DELETE ONE LINE AT THE CURRENT POSITION
000A3E  1               ;
000A3E  1               ;________________________________________________________________________________________________________________________________
000A3E  1               ;
000A3E  1               DELETELINE:
000A3E  1  A5 0D                LDA     EDTPOS          ;
000A40  1  85 0F                STA     TMPPOS          ;
000A42  1  A5 0E                LDA     EDTPOS+1        ;
000A44  1  85 10                STA     TMPPOS+1        ; TMPPOS SHOULD BE TOP OF COPY
000A46  1               
000A46  1  A5 12                LDA     CURRENTLEN      ; SET CURRENTLEN TO NEW TOP
000A48  1  38                   SEC                     ; (+80)
000A49  1  E9 50                SBC     #$50            ;
000A4B  1  85 12                STA     CURRENTLEN      ;
000A4D  1  A5 13                LDA     CURRENTLEN+1    ;
000A4F  1  E9 00                SBC     #$00            ;
000A51  1  85 13                STA     CURRENTLEN+1    ;
000A53  1               ;
000A53  1               DELETELINE1:
000A53  1  A0 50                LDY     #$50            ;
000A55  1  B1 0F                LDA     (TMPPOS),Y      ;
000A57  1  A0 00                LDY     #$00            ;
000A59  1  91 0F                STA     (TMPPOS),Y      ;
000A5B  1  E6 0F                INC     TMPPOS          ;
000A5D  1  A5 0F                LDA     TMPPOS          ;
000A5F  1  C9 00                CMP     #$00            ;
000A61  1  D0 02                BNE     DELETELINE1A    ;
000A63  1  E6 10                INC     TMPPOS+1        ;
000A65  1               DELETELINE1A:
000A65  1  A5 10                LDA     TMPPOS+1        ;
000A67  1  C5 13                CMP     CURRENTLEN+1    ;
000A69  1  D0 E8                BNE     DELETELINE1     ;
000A6B  1  A5 0F                LDA     TMPPOS          ;
000A6D  1  C5 12                CMP     CURRENTLEN      ;
000A6F  1  D0 E2                BNE     DELETELINE1     ;
000A71  1               
000A71  1  A5 0B                LDA     CSRPOSX         ;
000A73  1  48                   PHA                     ;
000A74  1  A5 0C                LDA     CSRPOSY         ;
000A76  1  48                   PHA                     ;
000A77  1  A5 0D                LDA     EDTPOS          ;
000A79  1  48                   PHA                     ;
000A7A  1  A5 0E                LDA     EDTPOS+1        ;
000A7C  1  48                   PHA                     ;
000A7D  1  A9 00                LDA     #$00            ;
000A7F  1  85 0B                STA     CSRPOSX         ;
000A81  1  20 FE 0F             JSR     GOCSR           ;
000A84  1  A0 00                LDY     #$00            ;
000A86  1               DELETELINE3:
000A86  1  B1 0D                LDA     (EDTPOS),Y      ;
000A88  1  20 53 10             JSR     TOCONSOLE       ;
000A8B  1  20 CE 0D             JSR     INCEDTPOS       ;
000A8E  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000A90  1  C9 14                CMP     #LASTROW        ;
000A92  1  D0 F2                BNE     DELETELINE3     ; NO
000A94  1  68                   PLA                     ;
000A95  1  85 0E                STA     EDTPOS+1        ;
000A97  1  68                   PLA                     ;
000A98  1  85 0D                STA     EDTPOS          ;
000A9A  1  68                   PLA                     ;
000A9B  1  85 0C                STA     CSRPOSY         ;
000A9D  1  68                   PLA                     ;
000A9E  1  85 0B                STA     CSRPOSX         ;
000AA0  1  4C FE 0F             JMP     GOCSR           ;
000AA3  1               
000AA3  1               
000AA3  1               ;__INSERTCHAR____________________________________________________________________________________________________________________
000AA3  1               ;
000AA3  1               ; 	INSERT ONE CHAR AT THE CURRENT POSITION
000AA3  1               ;
000AA3  1               ;________________________________________________________________________________________________________________________________
000AA3  1               ;
000AA3  1               INSERTCHAR:
000AA3  1  A5 0D                LDA     EDTPOS          ; STORE CURRENT POSITION
000AA5  1  85 0F                STA     TMPPOS          ;
000AA7  1  A5 0E                LDA     EDTPOS+1        ;
000AA9  1  85 10                STA     TMPPOS+1        ;
000AAB  1               
000AAB  1               ; FIND END OF LINE
000AAB  1  A0 00                LDY     #$00            ;
000AAD  1               INSERTCHAR1:
000AAD  1  B1 0F                LDA     (TMPPOS),Y      ;
000AAF  1               
000AAF  1  E6 0F                INC     TMPPOS          ; INC POINTER
000AB1  1  D0 02                BNE     *+4             ;
000AB3  1  E6 10                INC     TMPPOS+1        ;
000AB5  1  C9 0D                CMP     #13             ; AT END?
000AB7  1  F0 09                BEQ     INSERTCHAR2     ; FOUND END
000AB9  1               
000AB9  1  A5 10                LDA     TMPPOS+1
000ABB  1  C9 B7                CMP     #>(Ram_top-1)   ; are we at the end of RAM?
000ABD  1  B0 54                BCS     INSERTCHAR_ABORT; IF SO, ABORT
000ABF  1  4C AD 0A             JMP     INSERTCHAR1     ;
000AC2  1               
000AC2  1               INSERTCHAR2:
000AC2  1  B1 0F                LDA     (TMPPOS),Y      ; FREE SPACE AT END OF LINE?
000AC4  1  C9 00                CMP     #$00            ;
000AC6  1  F0 03                BEQ     INSERTCHAR3     ;
000AC8  1  20 14 0B             JSR     INSERTCHAR5     ; NO, INSERT A LINE
000ACB  1               
000ACB  1               INSERTCHAR3:
000ACB  1  C6 0F                DEC     TMPPOS          ; DEC TMPPOS
000ACD  1  A5 0F                LDA     TMPPOS          ;
000ACF  1  C9 FF                CMP     #$FF            ;
000AD1  1  D0 02                BNE     *+4             ;
000AD3  1  C6 10                DEC     TMPPOS+1        ;
000AD5  1               
000AD5  1  A0 00                LDY     #$00            ; MOVE EVERYTHING UP ONE POS
000AD7  1  B1 0F                LDA     (TMPPOS),Y      ;
000AD9  1  C8                   INY                     ;
000ADA  1  91 0F                STA     (TMPPOS),Y      ;
000ADC  1  A5 10                LDA     TMPPOS+1        ; AT CURRENT POSITION?
000ADE  1  C5 0E                CMP     EDTPOS+1        ;
000AE0  1  D0 E9                BNE     INSERTCHAR3     ; NO, LOOP
000AE2  1  A5 0F                LDA     TMPPOS          ;
000AE4  1  C5 0D                CMP     EDTPOS          ;
000AE6  1  D0 E3                BNE     INSERTCHAR3     ; NO, LOOP
000AE8  1               
000AE8  1  A5 0B                LDA     CSRPOSX         ;
000AEA  1  48                   PHA                     ;
000AEB  1  A5 0C                LDA     CSRPOSY         ;
000AED  1  48                   PHA                     ;
000AEE  1  A5 0D                LDA     EDTPOS          ;
000AF0  1  48                   PHA                     ;
000AF1  1  A5 0E                LDA     EDTPOS+1        ;
000AF3  1  48                   PHA                     ;
000AF4  1  A0 00                LDY     #$00            ;
000AF6  1               INSERTCHAR4:
000AF6  1  B1 0D                LDA     (EDTPOS),Y      ;
000AF8  1  48                   PHA                     ;
000AF9  1  20 53 10             JSR     TOCONSOLE       ;
000AFC  1  20 CE 0D             JSR     INCEDTPOS       ;
000AFF  1  68                   PLA                     ;
000B00  1  C9 0D                CMP     #13             ; HAVE WE REACHED THE END OF THE ROW?
000B02  1  D0 F2                BNE     INSERTCHAR4     ; NO
000B04  1  68                   PLA                     ;
000B05  1  85 0E                STA     EDTPOS+1        ;
000B07  1  68                   PLA                     ;
000B08  1  85 0D                STA     EDTPOS          ;
000B0A  1  68                   PLA                     ;
000B0B  1  85 0C                STA     CSRPOSY         ;
000B0D  1  68                   PLA                     ;
000B0E  1  85 0B                STA     CSRPOSX         ;
000B10  1  4C FE 0F             JMP     GOCSR           ;
000B13  1               INSERTCHAR_ABORT:
000B13  1  60                   RTS                     ;
000B14  1               INSERTCHAR5:
000B14  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000B16  1  C9 13                CMP     #LASTROW-1      ;
000B18  1  D0 03                BNE     *+5             ; NO
000B1A  1  20 2F 0D             JSR     SCROLLDOWN      ; SCROLL
000B1D  1               
000B1D  1  A5 0D                LDA     EDTPOS          ;
000B1F  1  48                   PHA                     ;
000B20  1  A5 0E                LDA     EDTPOS+1        ;
000B22  1  48                   PHA                     ;
000B23  1  A5 0B                LDA     CSRPOSX         ;
000B25  1  48                   PHA                     ;
000B26  1  A5 0C                LDA     CSRPOSY         ;
000B28  1  48                   PHA                     ;
000B29  1  A9 00                LDA     #$00            ;
000B2B  1  85 0B                STA     CSRPOSX         ;
000B2D  1  E6 0C                INC     CSRPOSY         ;
000B2F  1  20 FE 0F             JSR     GOCSR           ;
000B32  1               
000B32  1  A5 0F                LDA     TMPPOS          ;
000B34  1  85 0D                STA     EDTPOS          ;
000B36  1  A5 10                LDA     TMPPOS+1        ;
000B38  1  85 0E                STA     EDTPOS+1        ;
000B3A  1               
000B3A  1  20 CA 09             JSR     INSERTLINE      ;
000B3D  1  68                   PLA                     ;
000B3E  1  85 0C                STA     CSRPOSY         ;
000B40  1  68                   PLA                     ;
000B41  1  85 0B                STA     CSRPOSX         ;
000B43  1  68                   PLA                     ;
000B44  1  85 0E                STA     EDTPOS+1        ;
000B46  1  68                   PLA                     ;
000B47  1  85 0D                STA     EDTPOS          ;
000B49  1  4C FE 0F             JMP     GOCSR           ;
000B4C  1               
000B4C  1               
000B4C  1               
000B4C  1               
000B4C  1               ;__BACKSPACE_____________________________________________________________________________________________________________________
000B4C  1               ;
000B4C  1               ; 	PERFORM BACKSPACE FUNCTION AT THE CURRENT POSITION
000B4C  1               ;
000B4C  1               ;________________________________________________________________________________________________________________________________
000B4C  1               ;
000B4C  1               BACKSPACE:
000B4C  1  20 52 0C             JSR     CRSRLEFT
000B4F  1  4C 52 0B             JMP     DELETECHAR
000B52  1               
000B52  1               
000B52  1               ;__DELETECHAR____________________________________________________________________________________________________________________
000B52  1               ;
000B52  1               ; 	DELETE ONE CHAR AT THE CURRENT POSITION
000B52  1               ;
000B52  1               ;________________________________________________________________________________________________________________________________
000B52  1               ;
000B52  1               DELETECHAR:
000B52  1  A5 0D                LDA     EDTPOS          ; STORE CURRENT POSITION
000B54  1  85 0F                STA     TMPPOS          ;
000B56  1  A5 0E                LDA     EDTPOS+1        ;
000B58  1  85 10                STA     TMPPOS+1        ;
000B5A  1               
000B5A  1               ; FIND MOVE CHARS BACK ONE SPACE UNTIL THE END OF LINE
000B5A  1               DELETECHAR1:
000B5A  1  A0 01                LDY     #$01            ;
000B5C  1  B1 0F                LDA     (TMPPOS),Y      ;
000B5E  1  C9 00                CMP     #$00            ;
000B60  1  D0 02                BNE     DELETECHAR1A    ;
000B62  1  A9 20                LDA     #32             ; REPLACE NULLS WITH SPACES
000B64  1               DELETECHAR1A:
000B64  1  A0 00                LDY     #$00            ;
000B66  1  91 0F                STA     (TMPPOS),Y      ;
000B68  1               
000B68  1  E6 0F                INC     TMPPOS          ; INC POINTER
000B6A  1  D0 02                BNE     *+4             ;
000B6C  1  E6 10                INC     TMPPOS+1        ;
000B6E  1  C9 0D                CMP     #13             ; AT END?
000B70  1  F0 09                BEQ     DELETECHAR2     ; FOUND END
000B72  1               
000B72  1  A5 10                LDA     TMPPOS+1
000B74  1  C9 B7                CMP     #>(Ram_top-1)   ; are we at the end of RAM?
000B76  1  B0 40                BCS     DELETECHAR_ABORT; IF SO, ABORT
000B78  1  4C 5A 0B             JMP     DELETECHAR1     ;
000B7B  1               
000B7B  1               
000B7B  1               
000B7B  1               
000B7B  1               DELETECHAR2:
000B7B  1  A9 00                LDA     #$00
000B7D  1  91 0F                STA     (TMPPOS),Y      ;
000B7F  1               
000B7F  1  A5 0B                LDA     CSRPOSX         ;
000B81  1  48                   PHA                     ;
000B82  1  A5 0C                LDA     CSRPOSY         ;
000B84  1  48                   PHA                     ;
000B85  1  A5 0D                LDA     EDTPOS          ;
000B87  1  48                   PHA                     ;
000B88  1  A5 0E                LDA     EDTPOS+1        ;
000B8A  1  48                   PHA                     ;
000B8B  1  A0 00                LDY     #$00            ;
000B8D  1               DELETECHAR4:
000B8D  1  B1 0D                LDA     (EDTPOS),Y      ;
000B8F  1  48                   PHA                     ;
000B90  1  20 53 10             JSR     TOCONSOLE       ;
000B93  1  20 CE 0D             JSR     INCEDTPOS       ;
000B96  1  68                   PLA                     ;
000B97  1  C9 0D                CMP     #13             ; HAVE WE REACHED THE END OF THE ROW?
000B99  1  D0 F2                BNE     DELETECHAR4     ; NO
000B9B  1               
000B9B  1  A9 00                LDA     #$00            ; BLOT OUT THE OLD END OF LINE CHAR
000B9D  1  20 53 10             JSR     TOCONSOLE       ;
000BA0  1  A5 0B                LDA     CSRPOSX         ;
000BA2  1  C9 01                CMP     #01             ; IF WE STAYED ON THE SAME LINE, DO NOTHING
000BA4  1  D0 03                BNE     DELETECHAR5     ;
000BA6  1  20 3E 0A             JSR     DELETELINE      ;
000BA9  1               DELETECHAR5:
000BA9  1  68                   PLA                     ;
000BAA  1  85 0E                STA     EDTPOS+1        ;
000BAC  1  68                   PLA                     ;
000BAD  1  85 0D                STA     EDTPOS          ;
000BAF  1  68                   PLA                     ;
000BB0  1  85 0C                STA     CSRPOSY         ;
000BB2  1  68                   PLA                     ;
000BB3  1  85 0B                STA     CSRPOSX         ;
000BB5  1  4C FE 0F             JMP     GOCSR           ;
000BB8  1               DELETECHAR_ABORT:
000BB8  1  60                   RTS                     ;
000BB9  1               
000BB9  1               DELETECHARTMP:
000BB9  1  00                   .BYTE   0
000BBA  1               
000BBA  1               
000BBA  1               ;__TOGGLEMODE_____________________________________________________________________________________________________________________
000BBA  1               ;
000BBA  1               ; 	TOGGLE INSERT/OVERWRITE MODE
000BBA  1               ;
000BBA  1               ;________________________________________________________________________________________________________________________________
000BBA  1               ;
000BBA  1               TOGGLEMODE:
000BBA  1               
000BBA  1  A5 14                LDA     MODE            ;
000BBC  1  C9 00                CMP     #$00            ;
000BBE  1  D0 23                BNE     TOGGLEMODEOW    ;
000BC0  1               
000BC0  1               TOGGLEMODEIM:
000BC0  1  A9 01                LDA     #$01            ;
000BC2  1  85 14                STA     MODE            ;
000BC4  1  A9 D0                LDA     #<IMMODE        ;
000BC6  1  A0 0B                LDY     #>IMMODE        ;
000BC8  1  A2 09                LDX     #9              ;
000BCA  1  20 03 01             JSR     PEM             ;
000BCD  1  4C FE 0F             JMP     GOCSR           ;
000BD0  1               IMMODE:
000BD0  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','6','2','H'
000BD4  1  3B 36 32 48  
000BD8  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
000BDC  1  49 4D                .BYTE   "IM"
000BDE  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
000BE2  1  24           
000BE3  1               TOGGLEMODEOW:
000BE3  1  A9 00                LDA     #$00            ;
000BE5  1  85 14                STA     MODE            ;
000BE7  1  A9 F3                LDA     #<OWMODE        ;
000BE9  1  A0 0B                LDY     #>OWMODE        ;
000BEB  1  A2 09                LDX     #9              ;
000BED  1  20 03 01             JSR     PEM             ;
000BF0  1  4C FE 0F             JMP     GOCSR           ;
000BF3  1               
000BF3  1               OWMODE:
000BF3  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','6','2','H'
000BF7  1  3B 36 32 48  
000BFB  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
000BFF  1  4F 4D                .BYTE   "OM"
000C01  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
000C05  1  24           
000C06  1               
000C06  1               
000C06  1               
000C06  1               ;__CRSRUP________________________________________________________________________________________________________________________
000C06  1               ;
000C06  1               ; 	MOVE THE CURSOR UP ONE POSITION, DEC THE BUFFER POINTER AND SCROLL UP IF NECESSARY
000C06  1               ;
000C06  1               ;________________________________________________________________________________________________________________________________
000C06  1               ;
000C06  1               CRSRUP:
000C06  1  A5 0D                LDA     EDTPOS          ;
000C08  1  D0 07                BNE     CRSRUP1         ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000C0A  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.  IF IT IS, DO NOTHING.
000C0C  1  C9 18                CMP     #>BUFFER        ;
000C0E  1  D0 01                BNE     CRSRUP1         ;
000C10  1  60                   RTS                     ;
000C11  1               CRSRUP1:
000C11  1  A2 00                LDX     #$00            ;
000C13  1  A5 0C                LDA     CSRPOSY         ; FIRST LINE?
000C15  1  C9 00                CMP     #$00            ; THEN SCROLL UP
000C17  1  D0 04                BNE     CRSRUP2         ;
000C19  1  20 B0 0C             JSR     SCROLLUP        ;
000C1C  1  60                   RTS
000C1D  1               
000C1D  1               CRSRUP2:
000C1D  1  20 D5 0D             JSR     DECEDTPOS       ; MOVE POINTER BACK ONE
000C20  1  E8                   INX                     ; INC COUNTER
000C21  1  E0 50                CPX     #MAXCOL         ; HAVE WE GONE BACK MAXCOL POSITIONS?
000C23  1  D0 F8                BNE     CRSRUP2         ; YES, EXIT
000C25  1               
000C25  1  C6 0C                DEC     CSRPOSY         ;
000C27  1  20 92 0D             JSR     CHKPOS          ; WE ARE DONE! POSITION THE CURSOR AND EXIT
000C2A  1  60                   RTS                     ;
000C2B  1               
000C2B  1               
000C2B  1               ;__CRSRDN________________________________________________________________________________________________________________________
000C2B  1               ;
000C2B  1               ; 	MOVE THE CURSOR DOWN ONE POSITION, INC THE BUFFER POINTER AND SCROLL IF NECESSARY
000C2B  1               ;
000C2B  1               ;________________________________________________________________________________________________________________________________
000C2B  1               ;
000C2B  1               CRSRDN:
000C2B  1               
000C2B  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000C2D  1  C9 13                CMP     #LASTROW-1      ;
000C2F  1  D0 03                BNE     CRSRDN1         ; NO, JUST MOVE DOWN
000C31  1  20 2F 0D             JSR     SCROLLDOWN      ; SCROLL
000C34  1               
000C34  1               CRSRDN1:
000C34  1  A2 00                LDX     #$00
000C36  1               CRSRDN2:
000C36  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000C39  1  E8                   INX
000C3A  1  E0 50                CPX     #MAXCOL
000C3C  1  F0 0B                BEQ     CRSRDN3         ; YES, DONE
000C3E  1  A5 0E                LDA     EDTPOS+1        ; WILL NEXT MOVE SEND US PAST THE END OF RAM?
000C40  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
000C42  1  F0 0B                BEQ     CRSRDN4         ; YES, DONE THEN
000C44  1  A5 0E                LDA     EDTPOS+1        ;
000C46  1               
000C46  1               CRSRDN2A:
000C46  1  4C 36 0C             JMP     CRSRDN2         ; NO, KEEP GOING
000C49  1               CRSRDN3:
000C49  1  E6 0C                INC     CSRPOSY         ;
000C4B  1  20 92 0D             JSR     CHKPOS          ; WE ARE DONE! POSITION THE CURSOR AND EXIT
000C4E  1  60                   RTS                     ;
000C4F  1               CRSRDN4:
000C4F  1  4C 7F 0E             JMP     PAINTSCREEN0    ;
000C52  1               
000C52  1               
000C52  1               
000C52  1               ;__CRSRLEFT______________________________________________________________________________________________________________________
000C52  1               ;
000C52  1               ; 	MOVE THE CURSOR LEFT ONE POSITION, DEC THE BUFFER POINTER AND SCROLL UP IF NECESSARY
000C52  1               ;
000C52  1               ;________________________________________________________________________________________________________________________________
000C52  1               ;
000C52  1               CRSRLEFT:
000C52  1  A5 0D                LDA     EDTPOS          ;
000C54  1  D0 07                BNE     CRSRLEFT1       ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000C56  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.  IF IT IS, DO NOTHING.
000C58  1  C9 18                CMP     #>BUFFER        ;
000C5A  1  D0 01                BNE     CRSRLEFT1       ;
000C5C  1  60                   RTS                     ;
000C5D  1               CRSRLEFT1:
000C5D  1  C6 0B                DEC     CSRPOSX         ; DEC THE CURSOR POSITION
000C5F  1  A5 0B                LDA     CSRPOSX         ; CHECK TO SEE IF WE WERE AT THE LEFT MOST POSITION
000C61  1  C9 FF                CMP     #$FF            ;
000C63  1  F0 06                BEQ     CRSRLEFT2       ; IF WE WERE, DO SOME SPECIAL STUFF
000C65  1  20 D5 0D             JSR     DECEDTPOS       ; MOVE EDTPOS 1 TO THE LEFT
000C68  1  4C 92 0D             JMP     CHKPOS          ; POSITION THE CURSOR
000C6B  1               CRSRLEFT2:                      ; CURSOR IS AT THE LEFT MOST LINE
000C6B  1  A9 4F                LDA     #MAXCOL-1       ;
000C6D  1  85 0B                STA     CSRPOSX         ;
000C6F  1  AA                   TAX                     ;
000C70  1               CRSRLEFT2A:
000C70  1  20 CE 0D             JSR     INCEDTPOS       ;
000C73  1  CA                   DEX                     ;
000C74  1  D0 FA                BNE     CRSRLEFT2A      ;
000C76  1  4C 06 0C             JMP     CRSRUP          ; MOVE UP ONE LINE
000C79  1               
000C79  1               
000C79  1               ;__CRSRRIGHT_____________________________________________________________________________________________________________________
000C79  1               ;
000C79  1               ; 	MOVE THE CURSOR RIGHT ONE POSITION, INC THE BUFFER POINTER AND SCROLL IF NECESSARY
000C79  1               ;
000C79  1               ;________________________________________________________________________________________________________________________________
000C79  1               ;
000C79  1               CRSRRIGHT:
000C79  1  A5 0C                LDA     CSRPOSY         ; IS CURSOR ON LAST POSITION OF SCREEN?
000C7B  1  C9 13                CMP     #LASTROW-1      ; IF NOT, BRANCH TO CSRRIGHT1, OTHERWISE
000C7D  1  D0 09                BNE     CRSRRIGHT1      ; SCROLL SCREEN
000C7F  1  A5 0B                LDA     CSRPOSX         ;
000C81  1  C9 4F                CMP     #MAXCOL-1       ;
000C83  1  D0 03                BNE     CRSRRIGHT1      ;
000C85  1               ;
000C85  1  20 2F 0D             JSR     SCROLLDOWN      ;
000C88  1               ;
000C88  1               CRSRRIGHT1:                     ;
000C88  1  20 FE 0F             JSR     GOCSR           ; POSITION CURSOR
000C8B  1  A0 00                LDY     #$00            ;
000C8D  1  B1 0D                LDA     (EDTPOS),Y      ; GET CHAR FROM EDIT BUFFER
000C8F  1  20 53 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
000C92  1               ;
000C92  1  20 CE 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000C95  1               ;
000C95  1  A5 0E                LDA     EDTPOS+1        ;
000C97  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
000C99  1  D0 11                BNE     CRSRRIGHT2      ; NO, EXIT
000C9B  1  20 D5 0D             JSR     DECEDTPOS       ; OTHERWISE BACK POINTER OFF ONE
000C9E  1               ; AND PLACE CURSOR BACK ONE POSITION
000C9E  1  C6 0B                DEC     CSRPOSX         ;
000CA0  1  A5 0B                LDA     CSRPOSX         ;
000CA2  1  C9 FF                CMP     #$FF            ;
000CA4  1  D0 06                BNE     CRSRRIGHT2      ;
000CA6  1  C6 0C                DEC     CSRPOSY         ;
000CA8  1  A9 50                LDA     #MAXCOL         ;
000CAA  1  85 0B                STA     CSRPOSX         ; DDW 11/29/2014 (FROM Y)
000CAC  1               CRSRRIGHT2:
000CAC  1  20 92 0D             JSR     CHKPOS
000CAF  1  60                   RTS                     ;
000CB0  1               
000CB0  1               
000CB0  1               
000CB0  1               ;__SCROLLUP_____________________________________________________________________________________________________________________
000CB0  1               ;
000CB0  1               ; 	SCROLL UP ONE LINE
000CB0  1               ;
000CB0  1               ;
000CB0  1               ;
000CB0  1               ;
000CB0  1               ;________________________________________________________________________________________________________________________________
000CB0  1               ;
000CB0  1               SCROLLUP:
000CB0  1  A5 0E                LDA     EDTPOS+1        ; CHECK HIGH BYTE, IF NOT EQUAL
000CB2  1  C9 18                CMP     #>BUFFER        ; NO WAY WE ARE AT START OF BUFFER
000CB4  1  D0 07                BNE     SCROLLUPSTART   ; SO SCROLL
000CB6  1  A5 0D                LDA     EDTPOS          ; CHECK LOW BYTE
000CB8  1  C9 51                CMP     #MAXCOL+1       ; IF WE ARE NOT ON TOP LINE
000CBA  1  B0 01                BCS     SCROLLUPSTART   ; SCROLL
000CBC  1  60                   RTS                     ; IF NOT, DO NOTHING
000CBD  1               
000CBD  1               SCROLLUPSTART:
000CBD  1  A9 1C                LDA     #<SCROLLUPT     ;
000CBF  1  A0 0D                LDY     #>SCROLLUPT
000CC1  1  A2 09                LDX     #9              ;
000CC3  1  20 03 01             JSR     PEM             ;
000CC6  1               
000CC6  1  A5 0C                LDA     CSRPOSY
000CC8  1  48                   PHA
000CC9  1  A5 0B                LDA     CSRPOSX
000CCB  1  48                   PHA
000CCC  1               
000CCC  1  A9 50                LDA     #MAXCOL
000CCE  1  18                   CLC
000CCF  1  65 0B                ADC     CSRPOSX
000CD1  1  AA                   TAX
000CD2  1               SCROLLUP1:
000CD2  1  20 D5 0D             JSR     DECEDTPOS
000CD5  1  CA                   DEX
000CD6  1  E0 00                CPX     #$00
000CD8  1  D0 F8                BNE     SCROLLUP1
000CDA  1               
000CDA  1  A2 00                LDX     #$00
000CDC  1  86 0B                STX     CSRPOSX
000CDE  1  86 0C                STX     CSRPOSY
000CE0  1  20 FE 0F             JSR     GOCSR
000CE3  1               
000CE3  1  A5 0D                LDA     EDTPOS
000CE5  1  48                   PHA
000CE6  1  A5 0E                LDA     EDTPOS+1
000CE8  1  48                   PHA
000CE9  1               
000CE9  1  20 D5 0D             JSR     DECEDTPOS
000CEC  1  A0 00                LDY     #$00
000CEE  1  A2 50                LDX     #MAXCOL
000CF0  1               SCROLLUP2:
000CF0  1  20 CE 0D             JSR     INCEDTPOS
000CF3  1  B1 0D                LDA     (EDTPOS),Y
000CF5  1  20 53 10             JSR     TOCONSOLE
000CF8  1  CA                   DEX
000CF9  1  E0 00                CPX     #$00
000CFB  1  D0 F3                BNE     SCROLLUP2
000CFD  1               
000CFD  1  68                   PLA
000CFE  1  85 0E                STA     EDTPOS+1
000D00  1  68                   PLA
000D01  1  85 0D                STA     EDTPOS
000D03  1               
000D03  1  68                   PLA
000D04  1  85 0B                STA     CSRPOSX         ;
000D06  1  AA                   TAX
000D07  1  68                   PLA
000D08  1  85 0C                STA     CSRPOSY         ;
000D0A  1  20 FE 0F             JSR     GOCSR           ;
000D0D  1               
000D0D  1               SCROLLUP3:
000D0D  1  E0 00                CPX     #$00
000D0F  1  F0 07                BEQ     SCROLLUP4
000D11  1  20 CE 0D             JSR     INCEDTPOS
000D14  1  CA                   DEX
000D15  1  4C 0D 0D             JMP     SCROLLUP3
000D18  1               
000D18  1               SCROLLUP4:
000D18  1  20 92 0D             JSR     CHKPOS
000D1B  1  60                   RTS
000D1C  1               
000D1C  1               SCROLLUPT:
000D1C  1  1B 5B 33 3B          .BYTE   $1B,'[','3',';','2','2','r',$1B,'[','3',';','1','H',$1B,'M',$1B,'[','r','$'
000D20  1  32 32 72 1B  
000D24  1  5B 33 3B 31  
000D2F  1               
000D2F  1               ;__SCROLLDOWN___________________________________________________________________________________________________________________
000D2F  1               ;
000D2F  1               ; 	SCROLL DOWN ONE LINE
000D2F  1               ;
000D2F  1               ;
000D2F  1               ;
000D2F  1               ;________________________________________________________________________________________________________________________________
000D2F  1               ;
000D2F  1               SCROLLDOWN:
000D2F  1  A9 7E                LDA     #<SCROLLDOWNT
000D31  1  A0 0D                LDY     #>SCROLLDOWNT
000D33  1  A2 09                LDX     #9              ;
000D35  1  20 03 01             JSR     PEM             ;
000D38  1               
000D38  1               
000D38  1  A5 0B                LDA     CSRPOSX
000D3A  1  48                   PHA
000D3B  1  A5 0C                LDA     CSRPOSY
000D3D  1  48                   PHA
000D3E  1  A5 0D                LDA     EDTPOS
000D40  1  48                   PHA
000D41  1  A5 0E                LDA     EDTPOS+1
000D43  1  48                   PHA
000D44  1               
000D44  1               
000D44  1  A9 50                LDA     #MAXCOL
000D46  1  38                   SEC
000D47  1  E5 0B                SBC     CSRPOSX
000D49  1  AA                   TAX
000D4A  1  CA                   DEX
000D4B  1  F0 08                BEQ     SCROLLDOWN1A
000D4D  1               SCROLLDOWN1:
000D4D  1  20 CE 0D             JSR     INCEDTPOS
000D50  1  CA                   DEX
000D51  1  E0 00                CPX     #$00
000D53  1  D0 F8                BNE     SCROLLDOWN1
000D55  1               SCROLLDOWN1A:
000D55  1  A2 00                LDX     #$00
000D57  1  86 0B                STX     CSRPOSX
000D59  1  20 FE 0F             JSR     GOCSR
000D5C  1               
000D5C  1  A0 00                LDY     #$00
000D5E  1  A2 50                LDX     #MAXCOL
000D60  1               SCROLLDOWN2:
000D60  1  20 CE 0D             JSR     INCEDTPOS
000D63  1  B1 0D                LDA     (EDTPOS),Y
000D65  1  20 53 10             JSR     TOCONSOLE
000D68  1  CA                   DEX
000D69  1  E0 00                CPX     #$00
000D6B  1  D0 F3                BNE     SCROLLDOWN2
000D6D  1               
000D6D  1  68                   PLA
000D6E  1  85 0E                STA     EDTPOS+1
000D70  1  68                   PLA
000D71  1  85 0D                STA     EDTPOS
000D73  1  68                   PLA
000D74  1  85 0C                STA     CSRPOSY
000D76  1  68                   PLA
000D77  1  85 0B                STA     CSRPOSX
000D79  1  C6 0C                DEC     CSRPOSY
000D7B  1               
000D7B  1  4C 92 0D             JMP     CHKPOS
000D7E  1               
000D7E  1               SCROLLDOWNT:
000D7E  1  1B 5B 33 3B          .BYTE   $1B,'[','3',';','2','2','r',$1B,'[','2','2',';','1','H',$1B,'D',$1B,'[','r','$'
000D82  1  32 32 72 1B  
000D86  1  5B 32 32 3B  
000D92  1               
000D92  1               
000D92  1               
000D92  1               ;__CHKPOS________________________________________________________________________________________________________________________
000D92  1               ;
000D92  1               ; 	ENSURE THAT THE CURSOR IS ON A VALID EDITING POSITION
000D92  1               ;	IF NOT, FIND ONE!
000D92  1               ;
000D92  1               ;________________________________________________________________________________________________________________________________
000D92  1               ;
000D92  1               CHKPOS:
000D92  1  A0 00                LDY     #$00
000D94  1  B1 0D                LDA     (EDTPOS),Y
000D96  1  C9 00                CMP     #$00
000D98  1  D0 31                BNE     CHKPOS2
000D9A  1               
000D9A  1  A5 0E                LDA     EDTPOS+1        ; CHECK HIGH BYTE, IF NOT EQUAL
000D9C  1  C9 18                CMP     #>BUFFER        ; NO WAY WE ARE AT START OF BUFFER
000D9E  1  D0 07                BNE     CHKPOS1         ; SO GO ON
000DA0  1  A5 0D                LDA     EDTPOS          ; CHECK LOW BYTE
000DA2  1  C9 00                CMP     #$00            ; IF WE ARE NOT AT TOP
000DA4  1  B0 01                BCS     CHKPOS1         ; SCROLL
000DA6  1  60                   RTS                     ; IF NOT, DO NOTHING
000DA7  1               CHKPOS1:
000DA7  1  20 D5 0D             JSR     DECEDTPOS       ; DEC THE EDIT POSITION
000DAA  1  C6 0B                DEC     CSRPOSX         ; DEC THE CURSOR POSITION
000DAC  1  A5 0B                LDA     CSRPOSX         ; ARE WE PAST THE START OF THE ROW?
000DAE  1  C9 FF                CMP     #$FF
000DB0  1  F0 03                BEQ     CHKPOS1A        ; YES, GO UP ONE LINE
000DB2  1  4C 92 0D             JMP     CHKPOS          ; NO, LOOP
000DB5  1               
000DB5  1               CHKPOS1A:
000DB5  1  A9 4F                LDA     #MAXCOL-1       ; LOAD X AT MAXCOL
000DB7  1  85 0B                STA     CSRPOSX
000DB9  1  C6 0C                DEC     CSRPOSY
000DBB  1  A5 0C                LDA     CSRPOSY
000DBD  1  C9 FF                CMP     #$FF
000DBF  1  D0 07                BNE     CHKPOS1B
000DC1  1  A9 00                LDA     #$00
000DC3  1  85 0C                STA     CSRPOSY
000DC5  1  4C B0 0C             JMP     SCROLLUP
000DC8  1               
000DC8  1               CHKPOS1B:
000DC8  1  4C 92 0D             JMP     CHKPOS
000DCB  1               CHKPOS2:
000DCB  1  4C FE 0F             JMP     GOCSR
000DCE  1               
000DCE  1               
000DCE  1               
000DCE  1               ;__INCEDTPOS_____________________________________________________________________________________________________________________
000DCE  1               ;
000DCE  1               ; 	INCREMENT THE EDTPOS POINTER
000DCE  1               ;
000DCE  1               ;________________________________________________________________________________________________________________________________
000DCE  1               ;
000DCE  1               
000DCE  1               INCEDTPOS:
000DCE  1  E6 0D                INC     EDTPOS
000DD0  1  D0 02                BNE     INCEDTPOS1
000DD2  1  E6 0E                INC     EDTPOS+1
000DD4  1               INCEDTPOS1:
000DD4  1  60                   RTS
000DD5  1               
000DD5  1               ;__DECEDTPOS_____________________________________________________________________________________________________________________
000DD5  1               ;
000DD5  1               ; 	DECREMENT THE EDTPOS POINTER
000DD5  1               ;
000DD5  1               ;________________________________________________________________________________________________________________________________
000DD5  1               ;
000DD5  1               DECEDTPOS:
000DD5  1  C6 0D                DEC     EDTPOS
000DD7  1  A5 0D                LDA     EDTPOS
000DD9  1  C9 FF                CMP     #$FF
000DDB  1  D0 02                BNE     DECEDTPOS1
000DDD  1  C6 0E                DEC     EDTPOS+1
000DDF  1               DECEDTPOS1:
000DDF  1  60                   RTS
000DE0  1               
000DE0  1               
000DE0  1               
000DE0  1               
000DE0  1               ;__PAGEDOWN_______________________________________________________________________________________________________________________
000DE0  1               ;
000DE0  1               ; 	PERFORM PAGE DOWN FUNCTION
000DE0  1               ;
000DE0  1               ;
000DE0  1               ;________________________________________________________________________________________________________________________________
000DE0  1               ;
000DE0  1               PAGEDOWN:
000DE0  1  A5 0D                LDA     EDTPOS          ;
000DE2  1  D0 09                BNE     PAGEDOWNA       ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000DE4  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.
000DE6  1  C9 18                CMP     #>BUFFER        ;
000DE8  1  D0 03                BNE     PAGEDOWNA       ;
000DEA  1  4C FB 0D             JMP     PAGEDOWN1       ;
000DED  1               PAGEDOWNA:
000DED  1  A5 0B                LDA     CSRPOSX
000DEF  1  C9 00                CMP     #$00
000DF1  1  F0 08                BEQ     PAGEDOWN1
000DF3  1  20 D5 0D             JSR     DECEDTPOS
000DF6  1  C6 0B                DEC     CSRPOSX
000DF8  1  4C E0 0D             JMP     PAGEDOWN
000DFB  1               
000DFB  1               PAGEDOWN1:
000DFB  1  A2 64                LDX     #$64
000DFD  1               PAGEDOWN2:
000DFD  1  A0 10                LDY     #$10
000DFF  1               PAGEDOWN2A:
000DFF  1  20 CE 0D             JSR     INCEDTPOS
000E02  1               
000E02  1  A5 0E                LDA     EDTPOS+1        ; WILL NEXT MOVE SEND US PAST THE END OF RAM?
000E04  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
000E06  1  D0 03                BNE     PAGEDOWN2B      ;
000E08  1  4C 15 0E             JMP     PAGEDOWN2C      ;
000E0B  1               PAGEDOWN2B:
000E0B  1  88                   DEY
000E0C  1  C0 00                CPY     #$00
000E0E  1  D0 EF                BNE     PAGEDOWN2A
000E10  1  CA                   DEX
000E11  1  E0 00                CPX     #$00
000E13  1  D0 E8                BNE     PAGEDOWN2
000E15  1               PAGEDOWN2C:
000E15  1  A5 0D                LDA     EDTPOS
000E17  1  48                   PHA
000E18  1  A5 0E                LDA     EDTPOS+1
000E1A  1  48                   PHA
000E1B  1  20 87 0E             JSR     PAINTSCREEN1
000E1E  1  68                   PLA
000E1F  1  85 0E                STA     EDTPOS+1
000E21  1  68                   PLA
000E22  1  85 0D                STA     EDTPOS
000E24  1  A9 00                LDA     #$00
000E26  1  85 0B                STA     CSRPOSX
000E28  1  85 0C                STA     CSRPOSY
000E2A  1  4C FE 0F             JMP     GOCSR
000E2D  1               
000E2D  1               
000E2D  1               
000E2D  1               
000E2D  1               
000E2D  1               ;__PAGEUP________________________________________________________________________________________________________________________
000E2D  1               ;
000E2D  1               ; 	PERFORM PAGE UP FUNCTION
000E2D  1               ;
000E2D  1               ;
000E2D  1               ;________________________________________________________________________________________________________________________________
000E2D  1               ;
000E2D  1               PAGEUP:
000E2D  1  A5 0D                LDA     EDTPOS          ;
000E2F  1  D0 07                BNE     PAGEUPA         ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000E31  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.
000E33  1  C9 18                CMP     #>BUFFER        ;
000E35  1  D0 01                BNE     PAGEUPA         ;
000E37  1  60                   RTS
000E38  1               PAGEUPA:
000E38  1  A5 0B                LDA     CSRPOSX
000E3A  1  C9 00                CMP     #$00
000E3C  1  F0 08                BEQ     PAGEUP1
000E3E  1  20 D5 0D             JSR     DECEDTPOS
000E41  1  C6 0B                DEC     CSRPOSX
000E43  1  4C 2D 0E             JMP     PAGEUP
000E46  1               
000E46  1               PAGEUP1:
000E46  1  A2 64                LDX     #$64
000E48  1               PAGEUP2:
000E48  1  A0 10                LDY     #$10
000E4A  1               PAGEUP2A:
000E4A  1  20 D5 0D             JSR     DECEDTPOS
000E4D  1               
000E4D  1  A5 0D                LDA     EDTPOS          ;
000E4F  1  D0 09                BNE     PAGEUP2B        ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000E51  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.
000E53  1  C9 18                CMP     #>BUFFER        ;
000E55  1  D0 03                BNE     PAGEUP2B        ;
000E57  1  4C 64 0E             JMP     PAGEUP2C        ;
000E5A  1               PAGEUP2B:
000E5A  1  88                   DEY
000E5B  1  C0 00                CPY     #$00
000E5D  1  D0 EB                BNE     PAGEUP2A
000E5F  1  CA                   DEX
000E60  1  E0 00                CPX     #$00
000E62  1  D0 E4                BNE     PAGEUP2
000E64  1               PAGEUP2C:
000E64  1  A5 0D                LDA     EDTPOS
000E66  1  48                   PHA
000E67  1  A5 0E                LDA     EDTPOS+1
000E69  1  48                   PHA
000E6A  1  20 87 0E             JSR     PAINTSCREEN1
000E6D  1  68                   PLA
000E6E  1  85 0E                STA     EDTPOS+1
000E70  1  68                   PLA
000E71  1  85 0D                STA     EDTPOS
000E73  1  A9 00                LDA     #$00
000E75  1  85 0B                STA     CSRPOSX
000E77  1  85 0C                STA     CSRPOSY
000E79  1  4C FE 0F             JMP     GOCSR
000E7C  1               
000E7C  1               
000E7C  1               ;__PAINTSCREEN___________________________________________________________________________________________________________________
000E7C  1               ;
000E7C  1               ; 	PAINT THE INITIAL EDIT SCREEN
000E7C  1               ;
000E7C  1               ;
000E7C  1               ;
000E7C  1               ;________________________________________________________________________________________________________________________________
000E7C  1               ;
000E7C  1               PAINTSCREEN:
000E7C  1  20 F0 0F             JSR     CLEARSCREEN
000E7F  1               
000E7F  1               PAINTSCREEN0:
000E7F  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
000E81  1  85 0D                STA     EDTPOS          ; STORE DEST BUFFER
000E83  1  A9 18                LDA     #>BUFFER        ;
000E85  1  85 0E                STA     EDTPOS+1        ; STORE DEST BUFFER
000E87  1               
000E87  1               PAINTSCREEN1:
000E87  1  A9 00                LDA     #$00
000E89  1  85 0B                STA     CSRPOSX
000E8B  1  85 0C                STA     CSRPOSY
000E8D  1  20 FE 0F             JSR     GOCSR
000E90  1               
000E90  1               
000E90  1               PAINTSCREEN_LOOP:
000E90  1  A0 00                LDY     #$00
000E92  1  B1 0D                LDA     (EDTPOS),Y
000E94  1  20 53 10             JSR     TOCONSOLE
000E97  1               
000E97  1  E6 0D                INC     EDTPOS
000E99  1  D0 02                BNE     PAINTSCREEN_LOOPA
000E9B  1  E6 0E                INC     EDTPOS+1
000E9D  1               
000E9D  1               PAINTSCREEN_LOOPA:
000E9D  1  A5 0C                LDA     CSRPOSY
000E9F  1  C9 14                CMP     #LASTROW
000EA1  1  D0 ED                BNE     PAINTSCREEN_LOOP
000EA3  1               
000EA3  1  A9 00                LDA     #$00
000EA5  1  85 0B                STA     CSRPOSX
000EA7  1  85 0C                STA     CSRPOSY
000EA9  1  20 FE 0F             JSR     GOCSR
000EAC  1               
000EAC  1  A0 00                LDY     #$00
000EAE  1               
000EAE  1               PAINTSCREEN_LOOPB:
000EAE  1  B9 07 01             LDA     DFLFCB,Y
000EB1  1  99 2F 0F             STA     SCREENFORMAT1,Y
000EB4  1  C8                   INY
000EB5  1  C0 08                CPY     #8
000EB7  1  D0 F5                BNE     PAINTSCREEN_LOOPB
000EB9  1  A9 2E                LDA     #'.'
000EBB  1  C8                   INY
000EBC  1  99 2F 0F             STA     SCREENFORMAT1,Y
000EBF  1  B9 07 01             LDA     DFLFCB,Y
000EC2  1  C8                   INY
000EC3  1  99 2F 0F             STA     SCREENFORMAT1,Y
000EC6  1  B9 07 01             LDA     DFLFCB,Y
000EC9  1  C8                   INY
000ECA  1  99 2F 0F             STA     SCREENFORMAT1,Y
000ECD  1  B9 07 01             LDA     DFLFCB,Y
000ED0  1  C8                   INY
000ED1  1  99 2F 0F             STA     SCREENFORMAT1,Y
000ED4  1               
000ED4  1               
000ED4  1               
000ED4  1               
000ED4  1  A9 E6                LDA     #<SCREENFORMAT
000ED6  1  A0 0E                LDY     #>SCREENFORMAT
000ED8  1  A2 09                LDX     #9              ;
000EDA  1  20 03 01             JSR     PEM             ;
000EDD  1  A9 2F                LDA     #<SCREENFORMAT1
000EDF  1  A0 0F                LDY     #>SCREENFORMAT1
000EE1  1  A2 09                LDX     #9              ;
000EE3  1  4C 03 01             JMP     PEM             ;
000EE6  1               
000EE6  1               
000EE6  1               SCREENFORMAT:
000EE6  1  1B 5B 30 30          .BYTE   $1B,'[','0','0',';','0','0','H'
000EEA  1  3B 30 30 48  
000EEE  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
000EF2  1  44 4F 53 2F          .BYTE   "DOS/65 SCREEN EDITOR"
000EF6  1  36 35 20 53  
000EFA  1  43 52 45 45  
000F06  1  20 20 20 20          .BYTE   "                    "
000F0A  1  20 20 20 20  
000F0E  1  20 20 20 20  
000F1A  1  20 20 20 20          .BYTE   "                    ",'$'
000F1E  1  20 20 20 20  
000F22  1  20 20 20 20  
000F2F  1               SCREENFORMAT1:
000F2F  1  20 20 20 20          .BYTE   "                     "
000F33  1  20 20 20 20  
000F37  1  20 20 20 20  
000F44  1  5F 5F 5F 5F          .BYTE   "____________________"
000F48  1  5F 5F 5F 5F  
000F4C  1  5F 5F 5F 5F  
000F58  1  5F 5F 5F 5F          .BYTE   "____________________"
000F5C  1  5F 5F 5F 5F  
000F60  1  5F 5F 5F 5F  
000F6C  1  5F 5F 5F 5F          .BYTE   "____________________"
000F70  1  5F 5F 5F 5F  
000F74  1  5F 5F 5F 5F  
000F80  1  5F 5F 5F 5F          .BYTE   "____________________"
000F84  1  5F 5F 5F 5F  
000F88  1  5F 5F 5F 5F  
000F94  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','0','0','H'
000F98  1  3B 30 30 48  
000F9C  1  20 20 46 33          .BYTE   "  F3=QUIT  F4=MODE  F7=SAVE "
000FA0  1  3D 51 55 49  
000FA4  1  54 20 20 46  
000FB8  1  20 46 38 3D          .BYTE   " F8=SAVE AS  F12=TRUNC.     "
000FBC  1  53 41 56 45  
000FC0  1  20 41 53 20  
000FD4  1  20 20 20 20          .BYTE   "     OM                "
000FD8  1  20 4F 4D 20  
000FDC  1  20 20 20 20  
000FEB  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
000FEF  1  24           
000FF0  1               
000FF0  1               
000FF0  1               
000FF0  1               ;__CLEARSCREEN___________________________________________________________________________________________________________________
000FF0  1               ;
000FF0  1               ; 	CLEAR THE SCREEN
000FF0  1               ;
000FF0  1               ;
000FF0  1               ;
000FF0  1               ;________________________________________________________________________________________________________________________________
000FF0  1               ;
000FF0  1               CLEARSCREEN:
000FF0  1  A9 F9                LDA     #<CLEARSCREENT
000FF2  1  A0 0F                LDY     #>CLEARSCREENT
000FF4  1  A2 09                LDX     #9              ;
000FF6  1  4C 03 01             JMP     PEM             ;
000FF9  1               CLEARSCREENT:
000FF9  1  1B 5B 32 4A          .BYTE   $1B,'[','2','J','$'
000FFD  1  24           
000FFE  1               
000FFE  1               
000FFE  1               ;__GOCSR_________________________________________________________________________________________________________________________
000FFE  1               ;
000FFE  1               ; 	PLACE THE PHYSICAL CURSOR ON TO CSRPOSY AND CSRPOSX
000FFE  1               ;
000FFE  1               ;
000FFE  1               ;
000FFE  1               ;________________________________________________________________________________________________________________________________
000FFE  1               ;
000FFE  1               GOCSR:
000FFE  1  48                   PHA
000FFF  1  98                   TYA
001000  1  48                   PHA
001001  1  8A                   TXA
001002  1  48                   PHA
001003  1  A4 0C                LDY     CSRPOSY
001005  1  B9 2A 16             LDA     DECIMAL1+3,Y
001008  1  29 0F                AND     #$0F
00100A  1  18                   CLC
00100B  1  69 30                ADC     #'0'
00100D  1  8D 4D 10             STA     GOCSRT+3
001010  1  B9 2A 16             LDA     DECIMAL1+3,Y
001013  1  6A                   ROR     A
001014  1  6A                   ROR     A
001015  1  6A                   ROR     A
001016  1  6A                   ROR     A
001017  1  29 0F                AND     #$0F
001019  1  18                   CLC
00101A  1  69 30                ADC     #'0'
00101C  1  8D 4C 10             STA     GOCSRT+2
00101F  1               
00101F  1  A4 0B                LDY     CSRPOSX
001021  1  B9 28 16             LDA     DECIMAL1+1,Y
001024  1  29 0F                AND     #$0F
001026  1  18                   CLC
001027  1  69 30                ADC     #'0'
001029  1  8D 50 10             STA     GOCSRT+6
00102C  1  B9 28 16             LDA     DECIMAL1+1,Y
00102F  1  6A                   ROR     A
001030  1  6A                   ROR     A
001031  1  6A                   ROR     A
001032  1  6A                   ROR     A
001033  1  29 0F                AND     #$0F
001035  1  18                   CLC
001036  1  69 30                ADC     #'0'
001038  1  8D 4F 10             STA     GOCSRT+5
00103B  1  A9 4A                LDA     #<GOCSRT
00103D  1  A0 10                LDY     #>GOCSRT
00103F  1  A2 09                LDX     #9              ;
001041  1  20 03 01             JSR     PEM             ;
001044  1  68                   PLA
001045  1  AA                   TAX
001046  1  68                   PLA
001047  1  A8                   TAY
001048  1  68                   PLA
001049  1  60                   RTS
00104A  1               GOCSRT:
00104A  1  1B 5B 30 30          .BYTE   $1B,'[','0','0',';','0','0','H','$'
00104E  1  3B 30 30 48  
001052  1  24           
001053  1               
001053  1               ;__TOCONSOLE_____________________________________________________________________________________________________________________
001053  1               ;
001053  1               ; 	TRANSLATE BUFFER TO CONSOLE
001053  1               ;	A: CHAR TO OUTPUT
001053  1               ;
001053  1               ;
001053  1               ;________________________________________________________________________________________________________________________________
001053  1               ;
001053  1               TOCONSOLE:
001053  1  85 08                STA     TEMP
001055  1  8A                   TXA
001056  1  48                   PHA
001057  1  98                   TYA
001058  1  48                   PHA
001059  1  A5 08                LDA     TEMP
00105B  1  C9 0D                CMP     #$0D            ;  IS CHAR A <CR>?
00105D  1  D0 0C                BNE     TOCONSOLE1      ;  NO, CONTINUE
00105F  1  A9 8C                LDA     #<PRINTCR
001061  1  A0 10                LDY     #>PRINTCR
001063  1  A2 09                LDX     #9              ;
001065  1  20 03 01             JSR     PEM             ;
001068  1  4C 76 10             JMP     TOCONSOLE1B     ;
00106B  1               TOCONSOLE1:
00106B  1  C9 00                CMP     #$00            ; IS NULL?
00106D  1  D0 02                BNE     TOCONSOLE1A     ;  NO, CONTINUE
00106F  1  A9 20                LDA     #32             ; CHANGE NULL TO SPACE
001071  1               TOCONSOLE1A:
001071  1  A2 02                LDX     #2              ;  OUTPUT THE CHAR TO THE CONSOLE
001073  1  20 03 01             JSR     PEM             ;
001076  1               TOCONSOLE1B:
001076  1  E6 0B                INC     CSRPOSX         ;  MOVE THE CURSOR
001078  1  A5 0B                LDA     CSRPOSX         ;  ARE WE AT THE END OF THE LINE?
00107A  1  C9 50                CMP     #MAXCOL         ;
00107C  1  D0 09                BNE     TOCONSOLE2      ;  NO, EXIT
00107E  1               
00107E  1  A9 00                LDA     #$00            ; MOVE CRSR TO START OF LINE
001080  1  85 0B                STA     CSRPOSX         ;
001082  1  E6 0C                INC     CSRPOSY         ; ADVANCE TO NEXT ROW
001084  1  20 FE 0F             JSR     GOCSR           ; MOVE CRSR
001087  1               TOCONSOLE2:
001087  1  68                   PLA
001088  1  A8                   TAY
001089  1  68                   PLA
00108A  1  AA                   TAX
00108B  1  60                   RTS                     ; DONE
00108C  1               
00108C  1               PRINTCR:
00108C  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m','<',$1B,'[','0','m','$'
001090  1  3C 1B 5B 30  
001094  1  6D 24        
001096  1               
001096  1               
001096  1               ;__READKB________________________________________________________________________________________________________________________
001096  1               ;
001096  1               ; 	READ THE KEYBOARD
001096  1               ;	A: DATA
001096  1               ;	Y: COMMAND
001096  1               ;		0 IS REGULAR CHAR
001096  1               ;		1 IS FUNCTION KEY
001096  1               ;			00=CRSR UP
001096  1               ;			01=CRSR DN
001096  1               ;			02=CRSR LEFT
001096  1               ;			03=CRSR RIGHT
001096  1               ;			04=PG DN
001096  1               ;			05=PG UP
001096  1               ;			08=BACKSPACE
001096  1               ;			$30=CR
001096  1               ;			$11-$24= FUNCTION KEYS
001096  1               ;		$FF IS NULL OP
001096  1               ;________________________________________________________________________________________________________________________________
001096  1               ;
001096  1               READKB:
001096  1  20 58 11             JSR     READKB_XON
001099  1               
001099  1  A9 00                LDA     #$00            ;
00109B  1  A0 FF                LDY     #$FF            ;
00109D  1               
00109D  1  A2 06                LDX     #6              ;
00109F  1  20 03 01             JSR     PEM             ;
0010A2  1               
0010A2  1  C9 7F                CMP     #127            ;
0010A4  1  F0 29                BEQ     READKB_DEL      ;
0010A6  1               
0010A6  1  C9 20                CMP     #32             ;
0010A8  1  B0 17                BCS     READKB_CHAR     ;
0010AA  1               
0010AA  1  C9 1B                CMP     #$1B            ;
0010AC  1  F0 31                BEQ     READKB_ESC      ;
0010AE  1               
0010AE  1  C9 0D                CMP     #$0D            ;
0010B0  1  F0 07                BEQ     READKB_CR       ;
0010B2  1               
0010B2  1  C9 08                CMP     #$08            ;
0010B4  1  F0 11                BEQ     READKB_BS       ;
0010B6  1               
0010B6  1  4C D7 10             JMP     READKB_ERR      ;
0010B9  1               
0010B9  1               READKB_CR:
0010B9  1  20 5E 11             JSR     READKB_XOFF
0010BC  1  A0 01                LDY     #01
0010BE  1  A9 30                LDA     #$30
0010C0  1  60                   RTS
0010C1  1               
0010C1  1               READKB_CHAR:
0010C1  1  20 5E 11             JSR     READKB_XOFF
0010C4  1  A0 00                LDY     #00
0010C6  1  60                   RTS
0010C7  1               
0010C7  1               READKB_BS:
0010C7  1  20 5E 11             JSR     READKB_XOFF
0010CA  1  A0 01                LDY     #01
0010CC  1  A9 08                LDA     #08
0010CE  1  60                   RTS
0010CF  1               
0010CF  1               READKB_DEL:
0010CF  1  20 5E 11             JSR     READKB_XOFF
0010D2  1  A0 01                LDY     #01
0010D4  1  A9 7F                LDA     #127
0010D6  1  60                   RTS
0010D7  1               
0010D7  1               READKB_ERR:
0010D7  1  20 5E 11             JSR     READKB_XOFF
0010DA  1  A0 FF                LDY     #$FF
0010DC  1  A9 00                LDA     #$00
0010DE  1  60                   RTS
0010DF  1               
0010DF  1               READKB_ESC:
0010DF  1  A2 06                LDX     #6              ;
0010E1  1  20 03 01             JSR     PEM             ;
0010E4  1               
0010E4  1  C9 5B                CMP     #'['
0010E6  1  D0 EF                BNE     READKB_ERR
0010E8  1               
0010E8  1  A2 06                LDX     #6              ;
0010EA  1  20 03 01             JSR     PEM             ;
0010ED  1               
0010ED  1  48                   PHA
0010EE  1  29 F0                AND     #$F0
0010F0  1  AA                   TAX
0010F1  1  68                   PLA
0010F2  1  E0 30                CPX     #$30
0010F4  1  D0 2C                BNE     READKB_NOTFKEY
0010F6  1  29 0F                AND     #$0F
0010F8  1  85 08                STA     TEMP
0010FA  1  A2 06                LDX     #6              ;
0010FC  1  20 03 01             JSR     PEM             ;
0010FF  1  C9 7E                CMP     #'~'
001101  1  D0 05                BNE     READKB_FKEY1
001103  1  A9 00                LDA     #$00
001105  1  4C 19 11             JMP     READKB_FKEY2
001108  1               READKB_FKEY1:
001108  1  48                   PHA
001109  1               
001109  1  A2 06                LDX     #6              ;
00110B  1  20 03 01             JSR     PEM             ;
00110E  1  06 08                ASL     TEMP
001110  1  06 08                ASL     TEMP
001112  1  06 08                ASL     TEMP
001114  1  06 08                ASL     TEMP
001116  1               
001116  1  68                   PLA
001117  1  29 0F                AND     #$0F
001119  1               READKB_FKEY2:
001119  1  18                   CLC
00111A  1  65 08                ADC     TEMP
00111C  1  A0 01                LDY     #01
00111E  1  20 5E 11             JSR     READKB_XOFF
001121  1               
001121  1  60                   RTS
001122  1               
001122  1               
001122  1               READKB_NOTFKEY:
001122  1  C9 41                CMP     #'A'
001124  1  D0 08                BNE     READKB_NOTUP
001126  1  A0 01                LDY     #01
001128  1  A9 00                LDA     #00
00112A  1  20 5E 11             JSR     READKB_XOFF
00112D  1  60                   RTS
00112E  1               
00112E  1               READKB_NOTUP:
00112E  1  C9 42                CMP     #'B'
001130  1  D0 08                BNE     READKB_NOTDN
001132  1  A0 01                LDY     #01
001134  1  A9 01                LDA     #01
001136  1  20 5E 11             JSR     READKB_XOFF
001139  1  60                   RTS
00113A  1               READKB_NOTDN:
00113A  1  C9 44                CMP     #'D'
00113C  1  D0 08                BNE     READKB_NOTLEFT
00113E  1  A0 01                LDY     #01
001140  1  A9 02                LDA     #02
001142  1  20 5E 11             JSR     READKB_XOFF
001145  1  60                   RTS
001146  1               READKB_NOTLEFT:
001146  1  C9 43                CMP     #'C'
001148  1  D0 08                BNE     READKB_NOTRIGHT
00114A  1  A0 01                LDY     #01
00114C  1  A9 03                LDA     #03
00114E  1  20 5E 11             JSR     READKB_XOFF
001151  1  60                   RTS
001152  1               READKB_NOTRIGHT:
001152  1  20 5E 11             JSR     READKB_XOFF
001155  1  4C D7 10             JMP     READKB_ERR
001158  1               
001158  1               READKB_XON:
001158  1  48                   PHA
001159  1  A9 11                LDA     #17
00115B  1  4C 61 11             JMP     READKB_XOFF1
00115E  1               READKB_XOFF:
00115E  1  48                   PHA
00115F  1  A9 13                LDA     #19
001161  1               READKB_XOFF1:
001161  1  A2 02                LDX     #2              ;  OUTPUT THE CHAR TO THE CONSOLE
001163  1  20 03 01             JSR     PEM             ;
001166  1  68                   PLA
001167  1  60                   RTS
001168  1               
001168  1               ;__CLEARBUFFER___________________________________________________________________________________________________________________
001168  1               ;
001168  1               ; 	CLEAR THE EDIT BUFFER
001168  1               ;
001168  1               ;
001168  1               ;
001168  1               ;________________________________________________________________________________________________________________________________
001168  1               ;
001168  1               CLEARBUFFER:
001168  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
00116A  1  85 0D                STA     EDTPOS          ;
00116C  1  A9 18                LDA     #>BUFFER        ;
00116E  1  85 0E                STA     EDTPOS+1        ;
001170  1  A0 00                LDY     #$00            ;
001172  1               
001172  1               CLEARBUFFER1:
001172  1  A9 00                LDA     #00
001174  1  91 0D                STA     (EDTPOS),Y
001176  1  C8                   INY
001177  1  D0 F9                BNE     CLEARBUFFER1
001179  1  E6 0E                INC     EDTPOS+1
00117B  1  A5 0E                LDA     EDTPOS+1
00117D  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
00117F  1  D0 F1                BNE     CLEARBUFFER1
001181  1               
001181  1  60                   RTS
001182  1               
001182  1               
001182  1               ;__DOS65LOAD_____________________________________________________________________________________________________________________
001182  1               ;
001182  1               ; 	LOAD A DOS/65 FILE INTO THE EDIT BUFFER
001182  1               ;		FILE IS LOADED INTO 80 COLUMN LINES TO SIMPLIFY SCROLLING
001182  1               ;
001182  1               ;
001182  1               ;________________________________________________________________________________________________________________________________
001182  1               ;
001182  1               DOS65LOAD:
001182  1  A9 00                LDA     #0              ; clear
001184  1  8D 27 01             STA     DFLFCB+32       ; record number
001187  1  A9 07                LDA     #<DFLFCB        ; Open File
001189  1  A0 01                LDY     #>DFLFCB        ;
00118B  1  A2 0F                LDX     #15             ;
00118D  1  20 03 01             JSR     PEM             ;
001190  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
001192  1  D0 22                BNE     DOS65LOAD_1     ;
001194  1               
001194  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
001196  1  85 09                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
001198  1  A9 18                LDA     #>BUFFER        ;
00119A  1  85 0A                STA     FCBPTR+1        ; STORE DEST BUFFER IN FCBPTR
00119C  1  A5 09                LDA     FCBPTR          ;
00119E  1  85 12                STA     CURRENTLEN      ;
0011A0  1  A5 0A                LDA     FCBPTR+1        ;
0011A2  1  85 13                STA     CURRENTLEN+1    ;
0011A4  1  A9 0D                LDA     #13
0011A6  1  20 3A 12             JSR     DOS65LOAD_STOREBT
0011A9  1  60                   RTS                     ; OPEN EDITOR, BLANK FILE
0011AA  1               
0011AA  1               DOS65LOAD_ERR:
0011AA  1  A9 D7                LDA     #<FILEERROR2    ; NO, ERROR OUT
0011AC  1  A0 15                LDY     #>FILEERROR2
0011AE  1  A2 09                LDX     #9              ; Print error message
0011B0  1  20 03 01             JSR     PEM             ;
0011B3  1  4C 00 01             JMP     BOOT            ; WARM BOOT DOS/65
0011B6  1               DOS65LOAD_1:
0011B6  1  A9 00                LDA     #0              ; clear
0011B8  1  8D 27 01             STA     DFLFCB+32       ; record number
0011BB  1  85 12                STA     CURRENTLEN      ; LENGTH COUNTER
0011BD  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
0011BF  1  85 09                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
0011C1  1  A9 18                LDA     #>BUFFER        ;
0011C3  1  85 0A                STA     FCBPTR+1        ; STORE DEST BUFFER IN FCBPTR
0011C5  1               
0011C5  1  A9 8B                LDA     #<FCBBUFFER     ; SETUP BUFFER
0011C7  1  85 0F                STA     TMPPOS          ;
0011C9  1  A0 16                LDY     #>FCBBUFFER
0011CB  1  84 10                STY     TMPPOS+1        ;
0011CD  1  A2 1A                LDX     #26             ; Setup Buffer
0011CF  1  20 03 01             JSR     PEM
0011D2  1               
0011D2  1               DOS65LOAD_2:
0011D2  1  A9 07                LDA     #<DFLFCB        ; READ record buffer from disk file
0011D4  1  A0 01                LDY     #>DFLFCB        ;
0011D6  1  A2 14                LDX     #20             ;
0011D8  1  20 03 01             JSR     PEM             ;
0011DB  1  C9 00                CMP     #$00            ; is error or EOF
0011DD  1  F0 07                BEQ     DOS65LOAD_3     ;
0011DF  1  C9 01                CMP     #$01            ; EOF?
0011E1  1  F0 40                BEQ     DOS65LOAD_EOF   ; YES, END
0011E3  1  4C AA 11             JMP     DOS65LOAD_ERR   ; ERROR, do error handling
0011E6  1               DOS65LOAD_3:
0011E6  1  A2 00                LDX     #$00            ; CLEAR COUNTERS
0011E8  1  A0 00                LDY     #$00            ;
0011EA  1               DOS65LOAD_3A:
0011EA  1  B1 0F                LDA     (TMPPOS),Y      ; LOAD BYTE FROM BUFFER
0011EC  1  C8                   INY                     ; INC BUFFER COUNTER
0011ED  1  C9 1A                CMP     #$1A            ; IF EOF, SIGNAL END
0011EF  1  F0 37                BEQ     DOS65LOAD_4     ;
0011F1  1  C9 0D                CMP     #$0D            ; IF CR PLACE IT IN BUFFER AND PAD WITH SPACES TO MAXCOL
0011F3  1  F0 12                BEQ     DOS65LOAD_3D    ;
0011F5  1  C9 20                CMP     #32             ; IF UNPRINTABLE, DO NOT PLACE IN BUFFER
0011F7  1  90 07                BCC     DOS65LOAD_3C    ;
0011F9  1  C9 7F                CMP     #127            ;
0011FB  1  B0 03                BCS     DOS65LOAD_3C    ;
0011FD  1  20 3A 12             JSR     DOS65LOAD_STOREBT; STORE THE BYTE IN THE BUFFER
001200  1               DOS65LOAD_3C:
001200  1  C0 80                CPY     #$80            ; ARE WE AT THE END OF THE SOURCE BUFFER?
001202  1  D0 E6                BNE     DOS65LOAD_3A    ; NO, LOOP
001204  1               
001204  1  4C D2 11             JMP     DOS65LOAD_2     ; KEEP GOING!
001207  1               
001207  1               DOS65LOAD_3D:                   ; IN ORDER TO MAKE SCROLLING EASIER <CR> LINES NEED PADDED TO MAXCOL
001207  1  20 3A 12             JSR     DOS65LOAD_STOREBT; STORE THE <CR> BYTE
00120A  1               DOS65LOAD_3D1:
00120A  1  A5 12                LDA     CURRENTLEN      ;
00120C  1  C9 50                CMP     #MAXCOL         ;
00120E  1  F0 0C                BEQ     DOS65LOAD_3D2   ;
001210  1  A9 00                LDA     #$00            ;
001212  1  81 09                STA     (FCBPTR,X)      ; PLACE CHAR IN BUFFER
001214  1  E6 12                INC     CURRENTLEN      ; INC THE LENGTH COUNTER
001216  1  20 48 12             JSR     DOS65LOAD_STOREBT1; INC THE BUFFER POINTER
001219  1  4C 0A 12             JMP     DOS65LOAD_3D1   ;
00121C  1               DOS65LOAD_3D2:
00121C  1  A9 00                LDA     #$00            ;
00121E  1  85 12                STA     CURRENTLEN      ;
001220  1  4C 00 12             JMP     DOS65LOAD_3C    ;
001223  1               DOS65LOAD_EOF:
001223  1  A9 0D                LDA     #13
001225  1  20 3A 12             JSR     DOS65LOAD_STOREBT
001228  1               
001228  1               DOS65LOAD_4:
001228  1  A9 07                LDA     #<DFLFCB        ; CLOSE FILE
00122A  1  A0 01                LDY     #>DFLFCB        ;
00122C  1  A2 10                LDX     #16             ;
00122E  1  20 03 01             JSR     PEM             ;
001231  1  A5 09                LDA     FCBPTR          ;
001233  1  85 12                STA     CURRENTLEN      ;
001235  1  A5 0A                LDA     FCBPTR+1        ;
001237  1  85 13                STA     CURRENTLEN+1    ;
001239  1  60                   RTS
00123A  1               
00123A  1               
00123A  1               DOS65LOAD_STOREBT:
00123A  1  81 09                STA     (FCBPTR,X)      ; PLACE CHAR IN BUFFER
00123C  1  E6 12                INC     CURRENTLEN      ; INC THE LENGTH COUNTER
00123E  1  A5 12                LDA     CURRENTLEN      ;
001240  1  C9 50                CMP     #MAXCOL         ; WRAP THE COUNTER ON MAXCOL
001242  1  D0 04                BNE     DOS65LOAD_STOREBT1;
001244  1  A9 00                LDA     #$00            ;
001246  1  85 12                STA     CURRENTLEN      ;
001248  1               DOS65LOAD_STOREBT1:
001248  1  E6 09                INC     FCBPTR          ; add to base counter
00124A  1  D0 08                BNE     DOS65LOAD_STOREBT2
00124C  1  E6 0A                INC     FCBPTR+1        ; yes, carry, inc high byte
00124E  1  A5 0A                LDA     FCBPTR+1        ;
001250  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
001252  1  F0 01                BEQ     DOS65LOAD_STOREBTE; YES, STOP.
001254  1               DOS65LOAD_STOREBT2:
001254  1  60                   RTS
001255  1               DOS65LOAD_STOREBTE:
001255  1  20 28 12             JSR     DOS65LOAD_4     ; CLOSE FILE
001258  1  A9 00                LDA     #<FILEERROR3    ; NO, ERROR OUT
00125A  1  A0 16                LDY     #>FILEERROR3
00125C  1  A2 09                LDX     #9              ; Print error message
00125E  1  20 03 01             JSR     PEM             ;
001261  1  4C 00 01             JMP     BOOT            ; WARM BOOT DOS/65
001264  1               
001264  1               
001264  1               ;__DOS65SAVEAS_____________________________________________________________________________________________________________________
001264  1               ;
001264  1               ; 	SAVE A DOS/65 FILE FROM THE EDIT BUFFER TO A NEW FILE NAME
001264  1               ;
001264  1               ;
001264  1               ;
001264  1               ;________________________________________________________________________________________________________________________________
001264  1               ;
001264  1               DOS65SAVEAS:
001264  1  20 F0 0F             JSR     CLEARSCREEN
001267  1               
001267  1  A9 9E                LDA     #<SAVESCREENFORMAT
001269  1  A0 12                LDY     #>SAVESCREENFORMAT
00126B  1  A2 09                LDX     #9              ;
00126D  1  20 03 01             JSR     PEM             ;
001270  1  A9 E7                LDA     #<SAVESCREENFORMAT1
001272  1  A0 12                LDY     #>SAVESCREENFORMAT1
001274  1  A2 09                LDX     #9              ;
001276  1  20 03 01             JSR     PEM             ;
001279  1               DOS65SAVEAS1:
001279  1  A9 A7                LDA     #<SAVESCREENFORMAT2
00127B  1  A0 13                LDY     #>SAVESCREENFORMAT2
00127D  1  A2 09                LDX     #9              ;
00127F  1  20 03 01             JSR     PEM             ;
001282  1               
001282  1  A2 0D                LDX     #13
001284  1  A9 20                LDA     #' '
001286  1               DOS65SAVEAS2:
001286  1  8D EC 13             STA     FNBUFFER
001289  1  CA                   DEX
00128A  1  E0 00                CPX     #$00
00128C  1  D0 F8                BNE     DOS65SAVEAS2
00128E  1  20 FE 13             JSR     GETFILENAME
001291  1  20 50 15             JSR     DOS65FCBPREP
001294  1  C9 FF                CMP     #$FF
001296  1  F0 E1                BEQ     DOS65SAVEAS1
001298  1               
001298  1  20 7F 14             JSR     DOS65SAVE
00129B  1  4C 7C 0E             JMP     PAINTSCREEN
00129E  1               
00129E  1               SAVESCREENFORMAT:
00129E  1  1B 5B 30 30          .BYTE   $1B,'[','0','0',';','0','0','H'
0012A2  1  3B 30 30 48  
0012A6  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
0012AA  1  44 4F 53 2F          .BYTE   "DOS/65 SCREEN EDITOR"
0012AE  1  36 35 20 53  
0012B2  1  43 52 45 45  
0012BE  1  20 20 20 20          .BYTE   "                    "
0012C2  1  20 20 20 20  
0012C6  1  20 20 20 20  
0012D2  1  20 20 20 20          .BYTE   "                    ",'$'
0012D6  1  20 20 20 20  
0012DA  1  20 20 20 20  
0012E7  1               
0012E7  1               SAVESCREENFORMAT1:
0012E7  1  20 20 20 20          .BYTE   "                    "
0012EB  1  20 20 20 20  
0012EF  1  20 20 20 20  
0012FB  1  5F 5F 5F 5F          .BYTE   "____________________"
0012FF  1  5F 5F 5F 5F  
001303  1  5F 5F 5F 5F  
00130F  1  5F 5F 5F 5F          .BYTE   "____________________"
001313  1  5F 5F 5F 5F  
001317  1  5F 5F 5F 5F  
001323  1  5F 5F 5F 5F          .BYTE   "____________________"
001327  1  5F 5F 5F 5F  
00132B  1  5F 5F 5F 5F  
001337  1  5F 5F 5F 5F          .BYTE   "____________________"
00133B  1  5F 5F 5F 5F  
00133F  1  5F 5F 5F 5F  
00134B  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','0','0','H'
00134F  1  3B 30 30 48  
001353  1  20 20 20 20          .BYTE   "                            "
001357  1  20 20 20 20  
00135B  1  20 20 20 20  
00136F  1  20 20 20 20          .BYTE   "                            "
001373  1  20 20 20 20  
001377  1  20 20 20 20  
00138B  1  20 20 20 20          .BYTE   "     OM                "
00138F  1  20 4F 4D 20  
001393  1  20 20 20 20  
0013A2  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
0013A6  1  24           
0013A7  1               SAVESCREENFORMAT2:
0013A7  1  1B 5B 31 31          .BYTE   $1B,'[','1','1',';','1','0','H'
0013AB  1  3B 31 30 48  
0013AF  1  20 20 20 20          .BYTE   "                                   "
0013B3  1  20 20 20 20  
0013B7  1  20 20 20 20  
0013D2  1  1B 5B 31 30          .BYTE   $1B,'[','1','0',';','0','0','H'
0013D6  1  3B 30 30 48  
0013DA  1  20 20 4E 45          .BYTE   "  NEW FILE NAME: $"
0013DE  1  57 20 46 49  
0013E2  1  4C 45 20 4E  
0013EC  1               
0013EC  1               FNBUFFER:
0013EC  1  20 20 20 20          .BYTE   "                  "
0013F0  1  20 20 20 20  
0013F4  1  20 20 20 20  
0013FE  1               
0013FE  1               ;__GETFILENAME___________________________________________________________________________________________________________________
0013FE  1               ;
0013FE  1               ; POPULATE FNBUFFER WITH ONLY VALID FILENAME CHARACTERS
0013FE  1               ;________________________________________________________________________________________________________________________________
0013FE  1               ;
0013FE  1               GETFILENAME:
0013FE  1  A0 00                LDY     #$00
001400  1               GETFILENAME_LOOP:
001400  1  A2 06                LDX     #6
001402  1  20 03 01             JSR     PEM             ;
001405  1  C9 08                CMP     #8
001407  1  F0 52                BEQ     GETFILENAME_BACKSPACE
001409  1  C9 0D                CMP     #13
00140B  1  F0 40                BEQ     GETFILENAME_END
00140D  1  C9 21                CMP     #33
00140F  1  90 EF                BCC     GETFILENAME_LOOP
001411  1  C9 28                CMP     #40
001413  1  90 27                BCC     :+
001415  1  C9 2B                CMP     #43
001417  1  F0 23                BEQ     :+
001419  1  C9 2D                CMP     #45
00141B  1  F0 1F                BEQ     :+
00141D  1  C9 2E                CMP     #46
00141F  1  F0 1B                BEQ     :+
001421  1  C9 30                CMP     #48
001423  1  90 DB                BCC     GETFILENAME_LOOP
001425  1  C9 3B                CMP     #59
001427  1  90 13                BCC     :+
001429  1  C9 40                CMP     #64
00142B  1  90 D3                BCC     GETFILENAME_LOOP
00142D  1  C9 5B                CMP     #91
00142F  1  90 0B                BCC     :+
001431  1  C9 61                CMP     #97
001433  1  90 CB                BCC     GETFILENAME_LOOP
001435  1  C9 7B                CMP     #123
001437  1  90 1C                BCC     GETFILENAME_TOUPPER
001439  1  4C 00 14             JMP     GETFILENAME_LOOP
00143C  1               :
00143C  1  48                   PHA
00143D  1  A2 02                LDX     #2
00143F  1  20 03 01             JSR     PEM
001442  1  98                   TYA
001443  1  AA                   TAX
001444  1  68                   PLA
001445  1  9D EC 13             STA     FNBUFFER,X
001448  1  C8                   INY
001449  1  C0 0E                CPY     #14
00144B  1  D0 B3                BNE     GETFILENAME_LOOP
00144D  1               GETFILENAME_END:
00144D  1  98                   TYA
00144E  1  AA                   TAX
00144F  1  A9 00                LDA     #$00
001451  1  9D EC 13             STA     FNBUFFER,X
001454  1  60                   RTS
001455  1               GETFILENAME_TOUPPER:
001455  1  38                   SEC
001456  1  E9 20                SBC     #32
001458  1  4C 3C 14             JMP     :-
00145B  1               GETFILENAME_BACKSPACE:
00145B  1  C0 00                CPY     #00
00145D  1  F0 A1                BEQ     GETFILENAME_LOOP
00145F  1  A9 08                LDA     #8
001461  1  A2 02                LDX     #2
001463  1  20 03 01             JSR     PEM
001466  1  A9 20                LDA     #32
001468  1  A2 02                LDX     #2
00146A  1  20 03 01             JSR     PEM
00146D  1  A9 08                LDA     #8
00146F  1  A2 02                LDX     #2
001471  1  20 03 01             JSR     PEM
001474  1  88                   DEY
001475  1  98                   TYA
001476  1  AA                   TAX
001477  1  A9 20                LDA     #32
001479  1  9D EC 13             STA     FNBUFFER,X
00147C  1  4C 00 14             JMP     GETFILENAME_LOOP
00147F  1               
00147F  1               
00147F  1               
00147F  1               
00147F  1               
00147F  1               
00147F  1               ;__DOS65SAVE_____________________________________________________________________________________________________________________
00147F  1               ;
00147F  1               ; 	SAVE A DOS/65 FILE FROM THE EDIT BUFFER
00147F  1               ;
00147F  1               ;
00147F  1               ;
00147F  1               ;________________________________________________________________________________________________________________________________
00147F  1               ;
00147F  1               DOS65SAVE:
00147F  1  A9 00                LDA     #0              ; clear
001481  1  8D 27 01             STA     DFLFCB+32       ; record number
001484  1  A9 07                LDA     #<DFLFCB        ; Open File
001486  1  A0 01                LDY     #>DFLFCB        ;
001488  1  A2 13                LDX     #19             ;
00148A  1  20 03 01             JSR     PEM             ;
00148D  1               
00148D  1  A9 00                LDA     #0              ; clear
00148F  1  8D 27 01             STA     DFLFCB+32       ; record number
001492  1  A9 07                LDA     #<DFLFCB        ; ATTEMPT TO CREATE File
001494  1  A0 01                LDY     #>DFLFCB        ;
001496  1  A2 16                LDX     #22             ;
001498  1  20 03 01             JSR     PEM             ;
00149B  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
00149D  1  D0 0A                BNE     DOS65SAVE_1     ;
00149F  1               
00149F  1               DOS65SAVE_ERR:
00149F  1  A9 CB                LDA     #<FILEERROR2A   ; NO, ERROR OUT
0014A1  1  A0 15                LDY     #>FILEERROR2A
0014A3  1  A2 09                LDX     #9              ; Print error message
0014A5  1  20 03 01             JSR     PEM             ;
0014A8  1  60                   RTS                     ; RETURN
0014A9  1               DOS65SAVE_1:
0014A9  1  A9 00                LDA     #0              ; clear
0014AB  1  8D 27 01             STA     DFLFCB+32       ; record number
0014AE  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
0014B0  1  85 09                STA     FCBPTR          ; STORE SRC BUFFER IN FCBPTR
0014B2  1  A9 18                LDA     #>BUFFER        ;
0014B4  1  85 0A                STA     FCBPTR+1        ; STORE SRC BUFFER IN FCBPTR
0014B6  1               
0014B6  1  A9 8B                LDA     #<FCBBUFFER     ; SETUP BUFFER
0014B8  1  85 0F                STA     TMPPOS          ;
0014BA  1  A0 16                LDY     #>FCBBUFFER
0014BC  1  84 10                STY     TMPPOS+1        ;
0014BE  1  A2 1A                LDX     #26             ; Setup Buffer
0014C0  1  20 03 01             JSR     PEM
0014C3  1               
0014C3  1  A2 00                LDX     #$00            ;
0014C5  1  86 11                STX     TEMP1           ;
0014C7  1               DOS65SAVE_2:
0014C7  1  A5 13                LDA     CURRENTLEN+1    ; AT END PAGE?
0014C9  1  C5 0A                CMP     FCBPTR+1        ;
0014CB  1  D0 0D                BNE     DOS65SAVE_2B    ;
0014CD  1  A5 09                LDA     FCBPTR          ;
0014CF  1  C5 12                CMP     CURRENTLEN      ;
0014D1  1  90 07                BCC     DOS65SAVE_2B    ; IF WE ARE NOT PAST THE END, PROCEED AS USUAL
0014D3  1  F0 05                BEQ     DOS65SAVE_2B    ;
0014D5  1  A9 1A                LDA     #$1A            ; WE ARE AT END SO PAD WITH EOF
0014D7  1  4C EC 14             JMP     DOS65SAVE_2C    ;
0014DA  1               
0014DA  1               DOS65SAVE_2B:
0014DA  1  A0 00                LDY     #$00
0014DC  1  B1 09                LDA     (FCBPTR),Y      ; GET NEXT BUFFER BYTE
0014DE  1  E6 09                INC     FCBPTR          ; INC 16 BIT BUFFER POINTER
0014E0  1  D0 02                BNE     *+4             ;
0014E2  1  E6 0A                INC     FCBPTR+1        ;
0014E4  1  C9 00                CMP     #$00            ; IS NULL?
0014E6  1  F0 DF                BEQ     DOS65SAVE_2     ; YES SKIP
0014E8  1  C9 0A                CMP     #10             ; IS LF?
0014EA  1  F0 DB                BEQ     DOS65SAVE_2     ; YES SKIP
0014EC  1               
0014EC  1               DOS65SAVE_2C:
0014EC  1  A4 11                LDY     TEMP1           ;
0014EE  1  91 0F                STA     (TMPPOS),Y      ; NO STORE IN BUFFER
0014F0  1  E6 11                INC     TEMP1           ; INC BUFFER POINTER
0014F2  1  C9 0D                CMP     #13             ; IF NOT CR
0014F4  1  D0 03                BNE     *+5             ; CONTINUE
0014F6  1  20 29 15             JSR     DOS65SAVE_LF    ; OTHERWISE INSERT LF
0014F9  1               
0014F9  1  A6 11                LDX     TEMP1           ;
0014FB  1  E0 80                CPX     #$80            ; PAST END?
0014FD  1  D0 C8                BNE     DOS65SAVE_2     ; NO LOOP TILL BUFFER IS FULL
0014FF  1               
0014FF  1               DOS65SAVE_2D:
0014FF  1  A9 07                LDA     #<DFLFCB        ; WRITE record buffer from disk file
001501  1  A0 01                LDY     #>DFLFCB        ;
001503  1  A2 15                LDX     #21             ;
001505  1  20 03 01             JSR     PEM             ;
001508  1  C9 00                CMP     #$00            ; is SUCCESSFUL?
00150A  1  F0 03                BEQ     *+5             ;
00150C  1  4C 9F 14             JMP     DOS65SAVE_ERR   ; ERROR, do error handling
00150F  1               
00150F  1               
00150F  1  A5 0A                LDA     FCBPTR+1        ;
001511  1  C5 13                CMP     CURRENTLEN+1    ; AT END?
001513  1  90 03                BCC     DOS65SAVE_3     ;
001515  1  4C 1F 15             JMP     DOS65SAVE_4     ; CLOSE FILE
001518  1               
001518  1               DOS65SAVE_3:
001518  1  A2 00                LDX     #$00            ;
00151A  1  86 11                STX     TEMP1           ;
00151C  1  4C C7 14             JMP     DOS65SAVE_2     ; SAVE NEXT SECTOR
00151F  1               
00151F  1               DOS65SAVE_4:
00151F  1  A9 07                LDA     #<DFLFCB        ; CLOSE FILE
001521  1  A0 01                LDY     #>DFLFCB        ;
001523  1  A2 10                LDX     #16             ;
001525  1  20 03 01             JSR     PEM             ;
001528  1  60                   RTS
001529  1               
001529  1               
001529  1               DOS65SAVE_LF:
001529  1               
001529  1  A6 11                LDX     TEMP1           ;
00152B  1  E0 80                CPX     #$80            ; PAST END?
00152D  1  D0 03                BNE     *+5             ; NO
00152F  1  20 3B 15             JSR     DOS65SAVE_LF1   ;
001532  1               
001532  1  A4 11                LDY     TEMP1           ; WRITE LF
001534  1  A9 0A                LDA     #10             ;
001536  1  91 0F                STA     (TMPPOS),Y      ; NO STORE IN BUFFER
001538  1  E6 11                INC     TEMP1           ; INC BUFFER POINTER
00153A  1  60                   RTS
00153B  1               
00153B  1               DOS65SAVE_LF1:
00153B  1  A9 07                LDA     #<DFLFCB        ; WRITE record buffer from disk file
00153D  1  A0 01                LDY     #>DFLFCB        ;
00153F  1  A2 15                LDX     #21             ;
001541  1  20 03 01             JSR     PEM             ;
001544  1  C9 00                CMP     #$00            ; is SUCCESSFUL?
001546  1  F0 03                BEQ     *+5             ;
001548  1  4C 9F 14             JMP     DOS65SAVE_ERR   ; ERROR, do error handling
00154B  1  A2 00                LDX     #$00            ;
00154D  1  86 11                STX     TEMP1           ;
00154F  1  60                   RTS
001550  1               
001550  1               DOS65FCBPREP:
001550  1  AD ED 13             LDA     FNBUFFER+1      ; GET ":"
001553  1  C9 3A                CMP     #':'            ;
001555  1  F0 0C                BEQ     DOS65FCBPREP_1  ; YES, IT WAS A DRIVE, CONTINUE
001557  1  A9 A4                LDA     #<FILEERROR1    ; NO, ERROR OUT
001559  1  A0 15                LDY     #>FILEERROR1
00155B  1  A2 09                LDX     #9
00155D  1  20 03 01             JSR     PEM
001560  1  A9 FF                LDA     #$FF
001562  1  60                   RTS
001563  1               DOS65FCBPREP_1:
001563  1  AD EC 13             LDA     FNBUFFER        ; GET DRIVE LETTER
001566  1  38                   SEC                     ;
001567  1  E9 40                SBC     #64             ; PARSE DRIVE NUMBER
001569  1  8D 07 01             STA     DFLFCB+0        ; STORE IT IN FCB
00156C  1               
00156C  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
00156E  1  A9 20                LDA     #$20            ; LOAD SPACE CHAR INTO A
001570  1               DOS65FCBPREP_1A:                ; BLANK OUT FCB
001570  1  99 07 01             STA     DFLFCB,Y        ;
001573  1  C8                   INY                     ;
001574  1  C0 09                CPY     #$09            ; IS DONE
001576  1  D0 F8                BNE     DOS65FCBPREP_1A ; NO, LOOP
001578  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
00157A  1  A2 00                LDX     #$00            ;
00157C  1               DOS65FCBPREP_2:                 ; COPY FILE NAME PARAMETER INTO FCB
00157C  1  BD EE 13             LDA     FNBUFFER+2,X    ;
00157F  1  E8                   INX                     ;
001580  1  C9 2E                CMP     #'.'            ;
001582  1  F0 0B                BEQ     DOS65FCBPREP_3  ;
001584  1  99 07 01             STA     DFLFCB,Y        ;
001587  1  C8                   INY                     ;
001588  1  C0 09                CPY     #$09            ;
00158A  1  F0 03                BEQ     DOS65FCBPREP_3  ;
00158C  1  4C 7C 15             JMP     DOS65FCBPREP_2  ;
00158F  1               DOS65FCBPREP_3:                 ;
00158F  1  BD EE 13             LDA     FNBUFFER+2,X    ;
001592  1  8D 10 01             STA     DFLFCB+9        ;
001595  1  BD EF 13             LDA     FNBUFFER+3,X    ;
001598  1  8D 11 01             STA     DFLFCB+10       ;
00159B  1  BD F0 13             LDA     FNBUFFER+4,X    ;
00159E  1  8D 12 01             STA     DFLFCB+11       ;
0015A1  1  A9 00                LDA     #$00            ;
0015A3  1  60                   RTS                     ;
0015A4  1               
0015A4  1               
0015A4  1               FILEERROR1:
0015A4  1  0D 0A 0D 0A          .BYTE   $0D,$0A,$0D,$0A,"** NO DRIVE SPECIFIED, TRY AGAIN"
0015A8  1  2A 2A 20 4E  
0015AC  1  4F 20 44 52  
0015C8  1  0D 0A 24             .BYTE   $0D,$0A,'$'
0015CB  1               FILEERROR2A:
0015CB  1  1B 5B 30 31          .BYTE   $1B,'[','0','1',';','1','0','H'
0015CF  1  3B 31 30 48  
0015D3  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
0015D7  1               FILEERROR2:
0015D7  1  2A 2A 20 44          .BYTE   "** DOS/65 ERROR, OPERATION ABORTED"
0015DB  1  4F 53 2F 36  
0015DF  1  35 20 45 52  
0015F9  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m'
0015FD  1  0D 0A 24             .BYTE   $0D,$0A,'$'
001600  1               FILEERROR3:
001600  1  2A 2A 20 46          .BYTE   "** FILE TOO LARGE, OPERATION ABORTED"
001604  1  49 4C 45 20  
001608  1  54 4F 4F 20  
001624  1  0D 0A 24             .BYTE   $0D,$0A,'$'
001627  1               DECIMAL1:
001627  1  00 01 02 03          .BYTE   $00,$01,$02,$03,$04,$05,$06,$07,$08,$09
00162B  1  04 05 06 07  
00162F  1  08 09        
001631  1  10 11 12 13          .BYTE   $10,$11,$12,$13,$14,$15,$16,$17,$18,$19
001635  1  14 15 16 17  
001639  1  18 19        
00163B  1  20 21 22 23          .BYTE   $20,$21,$22,$23,$24,$25,$26,$27,$28,$29
00163F  1  24 25 26 27  
001643  1  28 29        
001645  1  30 31 32 33          .BYTE   $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
001649  1  34 35 36 37  
00164D  1  38 39        
00164F  1  40 41 42 43          .BYTE   $40,$41,$42,$43,$44,$45,$46,$47,$48,$49
001653  1  44 45 46 47  
001657  1  48 49        
001659  1  50 51 52 53          .BYTE   $50,$51,$52,$53,$54,$55,$56,$57,$58,$59
00165D  1  54 55 56 57  
001661  1  58 59        
001663  1  60 61 62 63          .BYTE   $60,$61,$62,$63,$64,$65,$66,$67,$68,$69
001667  1  64 65 66 67  
00166B  1  68 69        
00166D  1  70 71 72 73          .BYTE   $70,$71,$72,$73,$74,$75,$76,$77,$78,$79
001671  1  74 75 76 77  
001675  1  78 79        
001677  1  80 81 82 83          .BYTE   $80,$81,$82,$83,$84,$85,$86,$87,$88,$89
00167B  1  84 85 86 87  
00167F  1  88 89        
001681  1  90 91 92 93          .BYTE   $90,$91,$92,$93,$94,$95,$96,$97,$98,$99
001685  1  94 95 96 97  
001689  1  98 99        
00168B  1               FCBBUFFER:
00168B  1  xx xx xx xx          .RES    $80
00168F  1  xx xx xx xx  
001693  1  xx xx xx xx  
00170B  1  xx xx xx xx          .ALIGN  256
00170F  1  xx xx xx xx  
001713  1  xx xx xx xx  
001800  1               BUFFER:
001800  1  00                   .BYTE   00              ; start of user RAM (set as needed, should be page aligned)
001801  1               Ram_top         = $B800         ; end of user RAM+1 (set as needed, should be page aligned)
001801  1               
001801  1                       .END
