ca65 V2.18 - Ubuntu 2.19-1
Main file   : sedit.asm
Current file: sedit.asm

000000r 1               ;__SCREEN EDITOR_________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; 	DOS/65 SCREEN EDITOR (ANSI TERMINAL/CONSOLE)
000000r 1               ;	DAN WERNER 5/31/2014
000000r 1               ;
000000r 1               ;
000000r 1               ;________________________________________________________________________________________________________________________________
000000r 1               ;
000000r 1               
000000r 1               DFLFCB          = $107          ;DEFAULT FCB
000000r 1               PEM             = $103          ;PEM ENTRY
000000r 1               BOOT            = $100          ;WARM BOOT
000000r 1               TEA             = $800          ;EXECUTION ORG
000000r 1               CCMLNG          = 2048          ;CCM LENGTH
000000r 1               CRSYM           = 32            ;CR SYMBOL
000000r 1               LASTROW         = 20
000000r 1               MAXCOL          = 80
000000r 1               
000000r 1               ;ZERO PAGE
000000r 1               NAMED           = $02           ;"TO" FILE NAMED IF <128
000000r 1               TOIND           = $03           ;"TO" FILE INDEX
000000r 1               FRMIND          = $05           ;"FROM" FILE INDEX
000000r 1               TEMP            = $08           ;
000000r 1               FCBPTR          = $09           ; POINTER TO FCB FOR FILE OPS
000000r 1               CSRPOSX         = $0B           ;
000000r 1               CSRPOSY         = $0C           ;
000000r 1               EDTPOS          = $0D           ;
000000r 1               TMPPOS          = $0F           ;
000000r 1               TEMP1           = $11           ;
000000r 1               CURRENTLEN      = $12           ;
000000r 1               MODE            = $14           ; 0= OVERWRITE MODE, 1= INSERT MODE
000000r 1               
000000r 1               ;MAIN PROGRAM
000000r 1                       .SEGMENT "TEA"
000000r 1                       .ORG    $0800
000800  1               
000800  1  20 5E 11             JSR     CLEARBUFFER
000803  1  20 78 11             JSR     DOS65LOAD
000806  1  20 72 0E             JSR     PAINTSCREEN
000809  1               
000809  1  A9 00                LDA     #$00
00080B  1  85 14                STA     MODE
00080D  1  85 0B                STA     CSRPOSX
00080F  1  85 0C                STA     CSRPOSY
000811  1  20 F4 0F             JSR     GOCSR
000814  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
000816  1  85 0D                STA     EDTPOS          ; STORE DEST BUFFER
000818  1  A9 17                LDA     #>BUFFER        ;
00081A  1  85 0E                STA     EDTPOS+1        ; STORE DEST BUFFER
00081C  1               
00081C  1               
00081C  1               
00081C  1               EDITLOOP:
00081C  1  20 8C 10             JSR     READKB          ; GET USER INPUT
00081F  1               ;
00081F  1               
00081F  1  C0 01                CPY     #$01            ; IF IT IS A NORMAL KEYSTROKE
000821  1  D0 64                BNE     EDIT            ; GOTO EDIT
000823  1               
000823  1  C0 FF                CPY     #$FF            ; IF IT IS AN ERROR
000825  1  F0 F5                BEQ     EDITLOOP        ;  LOOP
000827  1               
000827  1  85 08                STA     TEMP            ; STORE COMMAND IN TEMP
000829  1  A0 00                LDY     #$00            ;
00082B  1               EDITLOOP1A:
00082B  1  B9 53 08             LDA     COMMANDTABLE,Y  ; CHECK TOKEN
00082E  1  C5 08                CMP     TEMP            ; COMPARE
000830  1  D0 14                BNE     EDITLOOP2A      ;
000832  1  C8                   INY
000833  1  B9 53 08             LDA     COMMANDTABLE,Y  ; CHECK TOKEN
000836  1  8D 41 08             STA     JMPTMP+1        ;
000839  1  C8                   INY
00083A  1  B9 53 08             LDA     COMMANDTABLE,Y  ; CHECK TOKEN
00083D  1  8D 42 08             STA     JMPTMP+2        ;
000840  1               JMPTMP:
000840  1  20 00 00             JSR     $0000
000843  1  4C 1C 08             JMP     EDITLOOP
000846  1               EDITLOOP2A:
000846  1  C9 FF                CMP     #$FF
000848  1  F0 06                BEQ     EDITLOOP3A
00084A  1  C8                   INY
00084B  1  C8                   INY
00084C  1  C8                   INY
00084D  1  4C 2B 08             JMP     EDITLOOP1A
000850  1               
000850  1               EDITLOOP3A:
000850  1  4C 1C 08             JMP     EDITLOOP
000853  1               
000853  1               COMMANDTABLE:
000853  1  00 FC 0B             .BYTE   $00,<CRSRUP,>CRSRUP
000856  1  01 21 0C             .BYTE   $01,<CRSRDN,>CRSRDN
000859  1  02 48 0C             .BYTE   $02,<CRSRLEFT,>CRSRLEFT
00085C  1  03 6F 0C             .BYTE   $03,<CRSRRIGHT,>CRSRRIGHT
00085F  1  05 23 0E             .BYTE   $05,<PAGEUP,>PAGEUP
000862  1  06 D6 0D             .BYTE   $06,<PAGEDOWN,>PAGEDOWN
000865  1  08 42 0B             .BYTE   $08,<BACKSPACE,>BACKSPACE
000868  1  13 7E 08             .BYTE   $13,<RETURN_TO_OS,>RETURN_TO_OS
00086B  1  14 B0 0B             .BYTE   $14,<TOGGLEMODE,>TOGGLEMODE
00086E  1  30 F7 08             .BYTE   $30,<INSERTCR,>INSERTCR
000871  1  7F 48 0B             .BYTE   127,<DELETECHAR,>DELETECHAR
000874  1  18 FB 13             .BYTE   $18,<DOS65SAVE,>DOS65SAVE
000877  1  19 5A 12             .BYTE   $19,<DOS65SAVEAS,>DOS65SAVEAS
00087A  1  24 80 09             .BYTE   $24,<TRUNCATE,>TRUNCATE
00087D  1  FF                   .BYTE   $FF
00087E  1               
00087E  1               
00087E  1               
00087E  1               RETURN_TO_OS:
00087E  1  20 E6 0F             JSR     CLEARSCREEN
000881  1  20 4E 11             JSR     READKB_XON
000884  1  4C 00 01             JMP     $0100
000887  1               
000887  1               
000887  1               ;__EDIT__________________________________________________________________________________________________________________________
000887  1               ;
000887  1               ; 	EDIT THE FILE
000887  1               ;
000887  1               ;________________________________________________________________________________________________________________________________
000887  1               ;
000887  1               EDIT:
000887  1  48                   PHA                     ; STORE KEYSTROKE
000888  1  A5 14                LDA     MODE            ; OVERWRITE OR INSERT?
00088A  1  C9 00                CMP     #$00            ;
00088C  1  F0 03                BEQ     EDIT_OM         ; OVERWRITE MODE
00088E  1  20 99 0A             JSR     INSERTCHAR      ; INSERT CHAR SPACE
000891  1               EDIT_OM:
000891  1  A0 00                LDY     #$00            ;
000893  1  B1 0D                LDA     (EDTPOS),Y      ; IS CRSR OVER A CR?
000895  1  C9 0D                CMP     #13             ;
000897  1  D0 25                BNE     EDIT_OMB        ; NO, CONTINUE
000899  1  C8                   INY                     ;
00089A  1  B1 0D                LDA     (EDTPOS),Y      ; IS NEXT POS A NULL?
00089C  1  C9 00                CMP     #$00            ;
00089E  1  D0 2F                BNE     EDIT_OMC        ;
0008A0  1               EDIT_OMA:
0008A0  1  68                   PLA                     ;
0008A1  1  A0 00                LDY     #$00            ;
0008A3  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0008A5  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
0008A8  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
0008AB  1  A9 0D                LDA     #13             ;
0008AD  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0008AF  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
0008B2  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
0008B5  1  20 48 0C             JSR     CRSRLEFT        ; MOVE CSR BACK 1
0008B8  1  20 DE 08             JSR     EDITCHECK       ;
0008BB  1  4C 1C 08             JMP     EDITLOOP        ;
0008BE  1               
0008BE  1               EDIT_OMB:
0008BE  1  68                   PLA
0008BF  1  A0 00                LDY     #$00
0008C1  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
0008C3  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
0008C6  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
0008C9  1  20 DE 08             JSR     EDITCHECK       ;
0008CC  1  4C 1C 08             JMP     EDITLOOP
0008CF  1               
0008CF  1               EDIT_OMC:
0008CF  1               
0008CF  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
0008D1  1  C9 13                CMP     #LASTROW-1      ;
0008D3  1  D0 03                BNE     *+5             ; NO
0008D5  1  20 25 0D             JSR     SCROLLDOWN      ; SCROLL
0008D8  1               
0008D8  1  20 C0 09             JSR     INSERTLINE
0008DB  1  4C A0 08             JMP     EDIT_OMA
0008DE  1               
0008DE  1               ;__EDITCHECK_____________________________________________________________________________________________________________________
0008DE  1               ;
0008DE  1               ; 	IF EDTPOS > CURRENTLEN CHANGE CURRENTLEN
0008DE  1               ;
0008DE  1               ;________________________________________________________________________________________________________________________________
0008DE  1               ;
0008DE  1               EDITCHECK:
0008DE  1  48                   PHA
0008DF  1  A5 0E                LDA     EDTPOS+1
0008E1  1  C5 13                CMP     CURRENTLEN+1
0008E3  1  90 10                BCC     EDITCHECK_1
0008E5  1  A5 0D                LDA     EDTPOS
0008E7  1  C5 12                CMP     CURRENTLEN
0008E9  1  90 0A                BCC     EDITCHECK_1
0008EB  1               
0008EB  1  A5 0E                LDA     EDTPOS+1
0008ED  1  85 13                STA     CURRENTLEN+1
0008EF  1  A5 0D                LDA     EDTPOS
0008F1  1  85 12                STA     CURRENTLEN
0008F3  1  E6 12                INC     CURRENTLEN
0008F5  1               EDITCHECK_1:
0008F5  1  68                   PLA
0008F6  1  60                   RTS
0008F7  1               
0008F7  1               ;__INSERTCR______________________________________________________________________________________________________________________
0008F7  1               ;
0008F7  1               ; 	INSERT CR AT THE CURRENT POSITION
0008F7  1               ;
0008F7  1               ;________________________________________________________________________________________________________________________________
0008F7  1               ;
0008F7  1               INSERTCR:
0008F7  1  A5 0B                LDA     CSRPOSX         ; Store current cursor and edit position into stack
0008F9  1  48                   PHA                     ;
0008FA  1  A5 0C                LDA     CSRPOSY         ;
0008FC  1  48                   PHA                     ;
0008FD  1  A5 0D                LDA     EDTPOS          ;
0008FF  1  48                   PHA                     ;
000900  1  A5 0E                LDA     EDTPOS+1        ;
000902  1  48                   PHA                     ;
000903  1               
000903  1               
000903  1  A0 00                LDY     #$00            ; move editpos to the end of the screen and store count into INSERTCHTEMP
000905  1  8C 7F 09             STY     INSERTCHTEMP    ; INSERTCHTEMP=0
000908  1  A6 0B                LDX     CSRPOSX         ; x=current x pos
00090A  1               INSERTCR1:
00090A  1  E8                   INX                     ; x++
00090B  1  EE 7F 09             INC     INSERTCHTEMP    ; INSERTCHTEMP++
00090E  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000911  1  E0 50                CPX     #MAXCOL         ; are we at the end of the line?
000913  1  D0 F5                BNE     INSERTCR1       ; no, loop
000915  1               
000915  1               INSERTCR2:
000915  1  A9 00                LDA     #$00            ; INSERT A LINE
000917  1  85 0B                STA     CSRPOSX         ;
000919  1  E6 0C                INC     CSRPOSY         ;
00091B  1  20 F4 0F             JSR     GOCSR           ;
00091E  1  20 C0 09             JSR     INSERTLINE      ; INSERT A LINE
000921  1               
000921  1               
000921  1  BA                   TSX                     ;
000922  1  68                   PLA                     ;
000923  1  85 0E                STA     EDTPOS+1        ;
000925  1  68                   PLA                     ;
000926  1  85 0D                STA     EDTPOS          ;
000928  1  68                   PLA                     ;
000929  1  85 0C                STA     CSRPOSY         ;
00092B  1  68                   PLA                     ;
00092C  1  85 0B                STA     CSRPOSX         ;
00092E  1  9A                   TXS                     ;
00092F  1               
00092F  1  AE 7F 09             LDX     INSERTCHTEMP    ;
000932  1               
000932  1               INSERTCR3:
000932  1  A0 00                LDY     #$00
000934  1  B1 0D                LDA     (EDTPOS),Y      ;
000936  1  AC 7F 09             LDY     INSERTCHTEMP    ;
000939  1  91 0D                STA     (EDTPOS),Y      ;
00093B  1               
00093B  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
00093E  1  A9 00                LDA     #$00            ;
000940  1  A8                   TAY                     ;
000941  1  91 0D                STA     (EDTPOS),Y      ;
000943  1               
000943  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000946  1  CA                   DEX                     ;
000947  1  E0 00                CPX     #$00            ;
000949  1  D0 E7                BNE     INSERTCR3       ;
00094B  1               
00094B  1  68                   PLA                     ;
00094C  1  85 0E                STA     EDTPOS+1        ;
00094E  1  68                   PLA                     ;
00094F  1  85 0D                STA     EDTPOS          ;
000951  1  68                   PLA                     ;
000952  1  85 0C                STA     CSRPOSY         ;
000954  1  68                   PLA                     ;
000955  1  85 0B                STA     CSRPOSX         ;
000957  1  20 F4 0F             JSR     GOCSR
00095A  1               
00095A  1  A0 00                LDY     #$00            ;
00095C  1  A9 0D                LDA     #13             ;
00095E  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
000960  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
000963  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000966  1               
000966  1               
000966  1  AE 7F 09             LDX     INSERTCHTEMP    ;
000969  1  CA                   DEX                     ;
00096A  1               INSERTCR4:
00096A  1  8A                   TXA
00096B  1  48                   PHA
00096C  1  B1 0D                LDA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
00096E  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
000971  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000974  1  68                   PLA                     ;
000975  1  AA                   TAX                     ;
000976  1  CA                   DEX                     ;
000977  1  E0 00                CPX     #$00            ;
000979  1  D0 EF                BNE     INSERTCR4       ;
00097B  1               
00097B  1  20 F4 0F             JSR     GOCSR
00097E  1  60                   RTS
00097F  1               
00097F  1               INSERTCHTEMP:
00097F  1  00                   .BYTE   0               ;
000980  1               
000980  1               ;__TRUNCATE______________________________________________________________________________________________________________________
000980  1               ;
000980  1               ; 	TRUNCATE FILE AT THE CURRENT POSITION
000980  1               ;
000980  1               ;________________________________________________________________________________________________________________________________
000980  1               ;
000980  1               TRUNCATE:
000980  1  A5 0B                LDA     CSRPOSX         ; Store current cursor and edit position into stack
000982  1  48                   PHA                     ;
000983  1  A5 0C                LDA     CSRPOSY         ;
000985  1  48                   PHA                     ;
000986  1  A5 0D                LDA     EDTPOS          ;
000988  1  48                   PHA                     ;
000989  1  A5 0E                LDA     EDTPOS+1        ;
00098B  1  48                   PHA                     ;
00098C  1               
00098C  1  A0 00                LDY     #$00            ;
00098E  1  A9 0D                LDA     #13             ;
000990  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
000992  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
000995  1               
000995  1               TRUNCATE_LOOP:
000995  1  20 C4 0D             JSR     INCEDTPOS
000998  1  A9 00                LDA     #$00            ;
00099A  1  A8                   TAY                     ;
00099B  1  91 0D                STA     (EDTPOS),Y      ; PUT CHAR IN EDIT BUFFER
00099D  1               
00099D  1  A5 0E                LDA     EDTPOS+1        ;
00099F  1  C5 13                CMP     CURRENTLEN+1    ;
0009A1  1  D0 F2                BNE     TRUNCATE_LOOP   ;
0009A3  1  A5 0D                LDA     EDTPOS          ;
0009A5  1  C5 12                CMP     CURRENTLEN      ;
0009A7  1  D0 EC                BNE     TRUNCATE_LOOP   ;
0009A9  1               
0009A9  1  68                   PLA                     ;
0009AA  1  85 0E                STA     EDTPOS+1        ;
0009AC  1  85 13                STA     CURRENTLEN+1    ;
0009AE  1  68                   PLA                     ;
0009AF  1  85 0D                STA     EDTPOS          ;
0009B1  1  85 12                STA     CURRENTLEN      ;
0009B3  1  68                   PLA                     ;
0009B4  1  85 0C                STA     CSRPOSY         ;
0009B6  1  68                   PLA                     ;
0009B7  1  85 0B                STA     CSRPOSX         ;
0009B9  1               
0009B9  1  20 88 0D             JSR     CHKPOS          ;
0009BC  1  20 23 0E             JSR     PAGEUP          ;
0009BF  1               
0009BF  1  60                   RTS
0009C0  1               
0009C0  1               
0009C0  1               ;__INSERTLINE____________________________________________________________________________________________________________________
0009C0  1               ;
0009C0  1               ; 	INSERT ONE LINE AT THE CURRENT POSITION
0009C0  1               ;
0009C0  1               ;________________________________________________________________________________________________________________________________
0009C0  1               ;
0009C0  1               INSERTLINE:
0009C0  1  20 DE 08             JSR     EDITCHECK       ; VERIFY WE ARE NOT PAST EOF
0009C3  1  A5 12                LDA     CURRENTLEN      ;
0009C5  1  85 0F                STA     TMPPOS          ;
0009C7  1  A5 13                LDA     CURRENTLEN+1    ;
0009C9  1  85 10                STA     TMPPOS+1        ; TMPPOS SHOULD BE BOTTOM OF COPY
0009CB  1               
0009CB  1  A5 12                LDA     CURRENTLEN      ; SET CURRENTLEN TO NEW TOP
0009CD  1  18                   CLC                     ; (+80)
0009CE  1  69 50                ADC     #$50            ;
0009D0  1  85 12                STA     CURRENTLEN      ;
0009D2  1  A5 13                LDA     CURRENTLEN+1    ;
0009D4  1  69 00                ADC     #$00            ;
0009D6  1  85 13                STA     CURRENTLEN+1    ;
0009D8  1  C9 B7                CMP     #>(Ram_top-1)   ; are we at the end of RAM?
0009DA  1  B0 57                BCS     INSERTLINE_ABORT; IF SO, ABORT
0009DC  1               ;
0009DC  1               INSERTLINE1:
0009DC  1  A0 00                LDY     #$00            ;
0009DE  1  B1 0F                LDA     (TMPPOS),Y      ;
0009E0  1  A0 50                LDY     #$50            ;
0009E2  1  91 0F                STA     (TMPPOS),Y      ;
0009E4  1  C6 0F                DEC     TMPPOS          ;
0009E6  1  A5 0F                LDA     TMPPOS          ;
0009E8  1  C9 FF                CMP     #$FF            ;
0009EA  1  D0 02                BNE     INSERTLINE1A    ;
0009EC  1  C6 10                DEC     TMPPOS+1        ;
0009EE  1               INSERTLINE1A:
0009EE  1  A5 10                LDA     TMPPOS+1        ;
0009F0  1  C5 0E                CMP     EDTPOS+1        ;
0009F2  1  D0 E8                BNE     INSERTLINE1     ;
0009F4  1  A5 0F                LDA     TMPPOS          ;
0009F6  1  C5 0D                CMP     EDTPOS          ;
0009F8  1  D0 E2                BNE     INSERTLINE1     ;
0009FA  1  A2 50                LDX     #80             ;
0009FC  1  A0 00                LDY     #$00            ;
0009FE  1  A9 00                LDA     #$00            ;
000A00  1               INSERTLINE2:
000A00  1  91 0F                STA     (TMPPOS),Y      ;
000A02  1  C8                   INY                     ;
000A03  1  CA                   DEX                     ;
000A04  1  E0 00                CPX     #$00            ;
000A06  1  D0 F8                BNE     INSERTLINE2     ;
000A08  1               
000A08  1  A5 0B                LDA     CSRPOSX         ;
000A0A  1  48                   PHA                     ;
000A0B  1  A5 0C                LDA     CSRPOSY         ;
000A0D  1  48                   PHA                     ;
000A0E  1  A5 0D                LDA     EDTPOS          ;
000A10  1  48                   PHA                     ;
000A11  1  A5 0E                LDA     EDTPOS+1        ;
000A13  1  48                   PHA                     ;
000A14  1  A0 00                LDY     #$00            ;
000A16  1               
000A16  1               INSERTLINE3:
000A16  1  B1 0D                LDA     (EDTPOS),Y      ;
000A18  1  20 49 10             JSR     TOCONSOLE       ;
000A1B  1  20 C4 0D             JSR     INCEDTPOS       ;
000A1E  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000A20  1  C9 14                CMP     #LASTROW        ;
000A22  1  D0 F2                BNE     INSERTLINE3     ; NO
000A24  1  68                   PLA                     ;
000A25  1  85 0E                STA     EDTPOS+1        ;
000A27  1  68                   PLA                     ;
000A28  1  85 0D                STA     EDTPOS          ;
000A2A  1  68                   PLA                     ;
000A2B  1  85 0C                STA     CSRPOSY         ;
000A2D  1  68                   PLA                     ;
000A2E  1  85 0B                STA     CSRPOSX         ;
000A30  1  4C F4 0F             JMP     GOCSR           ;
000A33  1               
000A33  1               INSERTLINE_ABORT:
000A33  1  60                   RTS
000A34  1               
000A34  1               
000A34  1               
000A34  1               ;__DELETELINE____________________________________________________________________________________________________________________
000A34  1               ;
000A34  1               ; 	DELETE ONE LINE AT THE CURRENT POSITION
000A34  1               ;
000A34  1               ;________________________________________________________________________________________________________________________________
000A34  1               ;
000A34  1               DELETELINE:
000A34  1  A5 0D                LDA     EDTPOS          ;
000A36  1  85 0F                STA     TMPPOS          ;
000A38  1  A5 0E                LDA     EDTPOS+1        ;
000A3A  1  85 10                STA     TMPPOS+1        ; TMPPOS SHOULD BE TOP OF COPY
000A3C  1               
000A3C  1  A5 12                LDA     CURRENTLEN      ; SET CURRENTLEN TO NEW TOP
000A3E  1  38                   SEC                     ; (+80)
000A3F  1  E9 50                SBC     #$50            ;
000A41  1  85 12                STA     CURRENTLEN      ;
000A43  1  A5 13                LDA     CURRENTLEN+1    ;
000A45  1  E9 00                SBC     #$00            ;
000A47  1  85 13                STA     CURRENTLEN+1    ;
000A49  1               ;
000A49  1               DELETELINE1:
000A49  1  A0 50                LDY     #$50            ;
000A4B  1  B1 0F                LDA     (TMPPOS),Y      ;
000A4D  1  A0 00                LDY     #$00            ;
000A4F  1  91 0F                STA     (TMPPOS),Y      ;
000A51  1  E6 0F                INC     TMPPOS          ;
000A53  1  A5 0F                LDA     TMPPOS          ;
000A55  1  C9 00                CMP     #$00            ;
000A57  1  D0 02                BNE     DELETELINE1A    ;
000A59  1  E6 10                INC     TMPPOS+1        ;
000A5B  1               DELETELINE1A:
000A5B  1  A5 10                LDA     TMPPOS+1        ;
000A5D  1  C5 13                CMP     CURRENTLEN+1    ;
000A5F  1  D0 E8                BNE     DELETELINE1     ;
000A61  1  A5 0F                LDA     TMPPOS          ;
000A63  1  C5 12                CMP     CURRENTLEN      ;
000A65  1  D0 E2                BNE     DELETELINE1     ;
000A67  1               
000A67  1  A5 0B                LDA     CSRPOSX         ;
000A69  1  48                   PHA                     ;
000A6A  1  A5 0C                LDA     CSRPOSY         ;
000A6C  1  48                   PHA                     ;
000A6D  1  A5 0D                LDA     EDTPOS          ;
000A6F  1  48                   PHA                     ;
000A70  1  A5 0E                LDA     EDTPOS+1        ;
000A72  1  48                   PHA                     ;
000A73  1  A9 00                LDA     #$00            ;
000A75  1  85 0B                STA     CSRPOSX         ;
000A77  1  20 F4 0F             JSR     GOCSR           ;
000A7A  1  A0 00                LDY     #$00            ;
000A7C  1               DELETELINE3:
000A7C  1  B1 0D                LDA     (EDTPOS),Y      ;
000A7E  1  20 49 10             JSR     TOCONSOLE       ;
000A81  1  20 C4 0D             JSR     INCEDTPOS       ;
000A84  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000A86  1  C9 14                CMP     #LASTROW        ;
000A88  1  D0 F2                BNE     DELETELINE3     ; NO
000A8A  1  68                   PLA                     ;
000A8B  1  85 0E                STA     EDTPOS+1        ;
000A8D  1  68                   PLA                     ;
000A8E  1  85 0D                STA     EDTPOS          ;
000A90  1  68                   PLA                     ;
000A91  1  85 0C                STA     CSRPOSY         ;
000A93  1  68                   PLA                     ;
000A94  1  85 0B                STA     CSRPOSX         ;
000A96  1  4C F4 0F             JMP     GOCSR           ;
000A99  1               
000A99  1               
000A99  1               ;__INSERTCHAR____________________________________________________________________________________________________________________
000A99  1               ;
000A99  1               ; 	INSERT ONE CHAR AT THE CURRENT POSITION
000A99  1               ;
000A99  1               ;________________________________________________________________________________________________________________________________
000A99  1               ;
000A99  1               INSERTCHAR:
000A99  1  A5 0D                LDA     EDTPOS          ; STORE CURRENT POSITION
000A9B  1  85 0F                STA     TMPPOS          ;
000A9D  1  A5 0E                LDA     EDTPOS+1        ;
000A9F  1  85 10                STA     TMPPOS+1        ;
000AA1  1               
000AA1  1               ; FIND END OF LINE
000AA1  1  A0 00                LDY     #$00            ;
000AA3  1               INSERTCHAR1:
000AA3  1  B1 0F                LDA     (TMPPOS),Y      ;
000AA5  1               
000AA5  1  E6 0F                INC     TMPPOS          ; INC POINTER
000AA7  1  D0 02                BNE     *+4             ;
000AA9  1  E6 10                INC     TMPPOS+1        ;
000AAB  1  C9 0D                CMP     #13             ; AT END?
000AAD  1  F0 09                BEQ     INSERTCHAR2     ; FOUND END
000AAF  1               
000AAF  1  A5 10                LDA     TMPPOS+1
000AB1  1  C9 B7                CMP     #>(Ram_top-1)   ; are we at the end of RAM?
000AB3  1  B0 54                BCS     INSERTCHAR_ABORT; IF SO, ABORT
000AB5  1  4C A3 0A             JMP     INSERTCHAR1     ;
000AB8  1               
000AB8  1               INSERTCHAR2:
000AB8  1  B1 0F                LDA     (TMPPOS),Y      ; FREE SPACE AT END OF LINE?
000ABA  1  C9 00                CMP     #$00            ;
000ABC  1  F0 03                BEQ     INSERTCHAR3     ;
000ABE  1  20 0A 0B             JSR     INSERTCHAR5     ; NO, INSERT A LINE
000AC1  1               
000AC1  1               INSERTCHAR3:
000AC1  1  C6 0F                DEC     TMPPOS          ; DEC TMPPOS
000AC3  1  A5 0F                LDA     TMPPOS          ;
000AC5  1  C9 FF                CMP     #$FF            ;
000AC7  1  D0 02                BNE     *+4             ;
000AC9  1  C6 10                DEC     TMPPOS+1        ;
000ACB  1               
000ACB  1  A0 00                LDY     #$00            ; MOVE EVERYTHING UP ONE POS
000ACD  1  B1 0F                LDA     (TMPPOS),Y      ;
000ACF  1  C8                   INY                     ;
000AD0  1  91 0F                STA     (TMPPOS),Y      ;
000AD2  1  A5 10                LDA     TMPPOS+1        ; AT CURRENT POSITION?
000AD4  1  C5 0E                CMP     EDTPOS+1        ;
000AD6  1  D0 E9                BNE     INSERTCHAR3     ; NO, LOOP
000AD8  1  A5 0F                LDA     TMPPOS          ;
000ADA  1  C5 0D                CMP     EDTPOS          ;
000ADC  1  D0 E3                BNE     INSERTCHAR3     ; NO, LOOP
000ADE  1               
000ADE  1  A5 0B                LDA     CSRPOSX         ;
000AE0  1  48                   PHA                     ;
000AE1  1  A5 0C                LDA     CSRPOSY         ;
000AE3  1  48                   PHA                     ;
000AE4  1  A5 0D                LDA     EDTPOS          ;
000AE6  1  48                   PHA                     ;
000AE7  1  A5 0E                LDA     EDTPOS+1        ;
000AE9  1  48                   PHA                     ;
000AEA  1  A0 00                LDY     #$00            ;
000AEC  1               INSERTCHAR4:
000AEC  1  B1 0D                LDA     (EDTPOS),Y      ;
000AEE  1  48                   PHA                     ;
000AEF  1  20 49 10             JSR     TOCONSOLE       ;
000AF2  1  20 C4 0D             JSR     INCEDTPOS       ;
000AF5  1  68                   PLA                     ;
000AF6  1  C9 0D                CMP     #13             ; HAVE WE REACHED THE END OF THE ROW?
000AF8  1  D0 F2                BNE     INSERTCHAR4     ; NO
000AFA  1  68                   PLA                     ;
000AFB  1  85 0E                STA     EDTPOS+1        ;
000AFD  1  68                   PLA                     ;
000AFE  1  85 0D                STA     EDTPOS          ;
000B00  1  68                   PLA                     ;
000B01  1  85 0C                STA     CSRPOSY         ;
000B03  1  68                   PLA                     ;
000B04  1  85 0B                STA     CSRPOSX         ;
000B06  1  4C F4 0F             JMP     GOCSR           ;
000B09  1               INSERTCHAR_ABORT:
000B09  1  60                   RTS                     ;
000B0A  1               INSERTCHAR5:
000B0A  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000B0C  1  C9 13                CMP     #LASTROW-1      ;
000B0E  1  D0 03                BNE     *+5             ; NO
000B10  1  20 25 0D             JSR     SCROLLDOWN      ; SCROLL
000B13  1               
000B13  1  A5 0D                LDA     EDTPOS          ;
000B15  1  48                   PHA                     ;
000B16  1  A5 0E                LDA     EDTPOS+1        ;
000B18  1  48                   PHA                     ;
000B19  1  A5 0B                LDA     CSRPOSX         ;
000B1B  1  48                   PHA                     ;
000B1C  1  A5 0C                LDA     CSRPOSY         ;
000B1E  1  48                   PHA                     ;
000B1F  1  A9 00                LDA     #$00            ;
000B21  1  85 0B                STA     CSRPOSX         ;
000B23  1  E6 0C                INC     CSRPOSY         ;
000B25  1  20 F4 0F             JSR     GOCSR           ;
000B28  1               
000B28  1  A5 0F                LDA     TMPPOS          ;
000B2A  1  85 0D                STA     EDTPOS          ;
000B2C  1  A5 10                LDA     TMPPOS+1        ;
000B2E  1  85 0E                STA     EDTPOS+1        ;
000B30  1               
000B30  1  20 C0 09             JSR     INSERTLINE      ;
000B33  1  68                   PLA                     ;
000B34  1  85 0C                STA     CSRPOSY         ;
000B36  1  68                   PLA                     ;
000B37  1  85 0B                STA     CSRPOSX         ;
000B39  1  68                   PLA                     ;
000B3A  1  85 0E                STA     EDTPOS+1        ;
000B3C  1  68                   PLA                     ;
000B3D  1  85 0D                STA     EDTPOS          ;
000B3F  1  4C F4 0F             JMP     GOCSR           ;
000B42  1               
000B42  1               
000B42  1               
000B42  1               
000B42  1               ;__BACKSPACE_____________________________________________________________________________________________________________________
000B42  1               ;
000B42  1               ; 	PERFORM BACKSPACE FUNCTION AT THE CURRENT POSITION
000B42  1               ;
000B42  1               ;________________________________________________________________________________________________________________________________
000B42  1               ;
000B42  1               BACKSPACE:
000B42  1  20 48 0C             JSR     CRSRLEFT
000B45  1  4C 48 0B             JMP     DELETECHAR
000B48  1               
000B48  1               
000B48  1               ;__DELETECHAR____________________________________________________________________________________________________________________
000B48  1               ;
000B48  1               ; 	DELETE ONE CHAR AT THE CURRENT POSITION
000B48  1               ;
000B48  1               ;________________________________________________________________________________________________________________________________
000B48  1               ;
000B48  1               DELETECHAR:
000B48  1  A5 0D                LDA     EDTPOS          ; STORE CURRENT POSITION
000B4A  1  85 0F                STA     TMPPOS          ;
000B4C  1  A5 0E                LDA     EDTPOS+1        ;
000B4E  1  85 10                STA     TMPPOS+1        ;
000B50  1               
000B50  1               ; FIND MOVE CHARS BACK ONE SPACE UNTIL THE END OF LINE
000B50  1               DELETECHAR1:
000B50  1  A0 01                LDY     #$01            ;
000B52  1  B1 0F                LDA     (TMPPOS),Y      ;
000B54  1  C9 00                CMP     #$00            ;
000B56  1  D0 02                BNE     DELETECHAR1A    ;
000B58  1  A9 20                LDA     #32             ; REPLACE NULLS WITH SPACES
000B5A  1               DELETECHAR1A:
000B5A  1  A0 00                LDY     #$00            ;
000B5C  1  91 0F                STA     (TMPPOS),Y      ;
000B5E  1               
000B5E  1  E6 0F                INC     TMPPOS          ; INC POINTER
000B60  1  D0 02                BNE     *+4             ;
000B62  1  E6 10                INC     TMPPOS+1        ;
000B64  1  C9 0D                CMP     #13             ; AT END?
000B66  1  F0 09                BEQ     DELETECHAR2     ; FOUND END
000B68  1               
000B68  1  A5 10                LDA     TMPPOS+1
000B6A  1  C9 B7                CMP     #>(Ram_top-1)   ; are we at the end of RAM?
000B6C  1  B0 40                BCS     DELETECHAR_ABORT; IF SO, ABORT
000B6E  1  4C 50 0B             JMP     DELETECHAR1     ;
000B71  1               
000B71  1               
000B71  1               
000B71  1               
000B71  1               DELETECHAR2:
000B71  1  A9 00                LDA     #$00
000B73  1  91 0F                STA     (TMPPOS),Y      ;
000B75  1               
000B75  1  A5 0B                LDA     CSRPOSX         ;
000B77  1  48                   PHA                     ;
000B78  1  A5 0C                LDA     CSRPOSY         ;
000B7A  1  48                   PHA                     ;
000B7B  1  A5 0D                LDA     EDTPOS          ;
000B7D  1  48                   PHA                     ;
000B7E  1  A5 0E                LDA     EDTPOS+1        ;
000B80  1  48                   PHA                     ;
000B81  1  A0 00                LDY     #$00            ;
000B83  1               DELETECHAR4:
000B83  1  B1 0D                LDA     (EDTPOS),Y      ;
000B85  1  48                   PHA                     ;
000B86  1  20 49 10             JSR     TOCONSOLE       ;
000B89  1  20 C4 0D             JSR     INCEDTPOS       ;
000B8C  1  68                   PLA                     ;
000B8D  1  C9 0D                CMP     #13             ; HAVE WE REACHED THE END OF THE ROW?
000B8F  1  D0 F2                BNE     DELETECHAR4     ; NO
000B91  1               
000B91  1  A9 00                LDA     #$00            ; BLOT OUT THE OLD END OF LINE CHAR
000B93  1  20 49 10             JSR     TOCONSOLE       ;
000B96  1  A5 0B                LDA     CSRPOSX         ;
000B98  1  C9 01                CMP     #01             ; IF WE STAYED ON THE SAME LINE, DO NOTHING
000B9A  1  D0 03                BNE     DELETECHAR5     ;
000B9C  1  20 34 0A             JSR     DELETELINE      ;
000B9F  1               DELETECHAR5:
000B9F  1  68                   PLA                     ;
000BA0  1  85 0E                STA     EDTPOS+1        ;
000BA2  1  68                   PLA                     ;
000BA3  1  85 0D                STA     EDTPOS          ;
000BA5  1  68                   PLA                     ;
000BA6  1  85 0C                STA     CSRPOSY         ;
000BA8  1  68                   PLA                     ;
000BA9  1  85 0B                STA     CSRPOSX         ;
000BAB  1  4C F4 0F             JMP     GOCSR           ;
000BAE  1               DELETECHAR_ABORT:
000BAE  1  60                   RTS                     ;
000BAF  1               
000BAF  1               DELETECHARTMP:
000BAF  1  00                   .BYTE   0
000BB0  1               
000BB0  1               
000BB0  1               ;__TOGGLEMODE_____________________________________________________________________________________________________________________
000BB0  1               ;
000BB0  1               ; 	TOGGLE INSERT/OVERWRITE MODE
000BB0  1               ;
000BB0  1               ;________________________________________________________________________________________________________________________________
000BB0  1               ;
000BB0  1               TOGGLEMODE:
000BB0  1               
000BB0  1  A5 14                LDA     MODE            ;
000BB2  1  C9 00                CMP     #$00            ;
000BB4  1  D0 23                BNE     TOGGLEMODEOW    ;
000BB6  1               
000BB6  1               TOGGLEMODEIM:
000BB6  1  A9 01                LDA     #$01            ;
000BB8  1  85 14                STA     MODE            ;
000BBA  1  A9 C6                LDA     #<IMMODE        ;
000BBC  1  A0 0B                LDY     #>IMMODE        ;
000BBE  1  A2 09                LDX     #9              ;
000BC0  1  20 03 01             JSR     PEM             ;
000BC3  1  4C F4 0F             JMP     GOCSR           ;
000BC6  1               IMMODE:
000BC6  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','6','2','H'
000BCA  1  3B 36 32 48  
000BCE  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
000BD2  1  49 4D                .BYTE   "IM"
000BD4  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
000BD8  1  24           
000BD9  1               TOGGLEMODEOW:
000BD9  1  A9 00                LDA     #$00            ;
000BDB  1  85 14                STA     MODE            ;
000BDD  1  A9 E9                LDA     #<OWMODE        ;
000BDF  1  A0 0B                LDY     #>OWMODE        ;
000BE1  1  A2 09                LDX     #9              ;
000BE3  1  20 03 01             JSR     PEM             ;
000BE6  1  4C F4 0F             JMP     GOCSR           ;
000BE9  1               
000BE9  1               OWMODE:
000BE9  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','6','2','H'
000BED  1  3B 36 32 48  
000BF1  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
000BF5  1  4F 4D                .BYTE   "OM"
000BF7  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
000BFB  1  24           
000BFC  1               
000BFC  1               
000BFC  1               
000BFC  1               ;__CRSRUP________________________________________________________________________________________________________________________
000BFC  1               ;
000BFC  1               ; 	MOVE THE CURSOR UP ONE POSITION, DEC THE BUFFER POINTER AND SCROLL UP IF NECESSARY
000BFC  1               ;
000BFC  1               ;________________________________________________________________________________________________________________________________
000BFC  1               ;
000BFC  1               CRSRUP:
000BFC  1  A5 0D                LDA     EDTPOS          ;
000BFE  1  D0 07                BNE     CRSRUP1         ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000C00  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.  IF IT IS, DO NOTHING.
000C02  1  C9 17                CMP     #>BUFFER        ;
000C04  1  D0 01                BNE     CRSRUP1         ;
000C06  1  60                   RTS                     ;
000C07  1               CRSRUP1:
000C07  1  A2 00                LDX     #$00            ;
000C09  1  A5 0C                LDA     CSRPOSY         ; FIRST LINE?
000C0B  1  C9 00                CMP     #$00            ; THEN SCROLL UP
000C0D  1  D0 04                BNE     CRSRUP2         ;
000C0F  1  20 A6 0C             JSR     SCROLLUP        ;
000C12  1  60                   RTS
000C13  1               
000C13  1               CRSRUP2:
000C13  1  20 CB 0D             JSR     DECEDTPOS       ; MOVE POINTER BACK ONE
000C16  1  E8                   INX                     ; INC COUNTER
000C17  1  E0 50                CPX     #MAXCOL         ; HAVE WE GONE BACK MAXCOL POSITIONS?
000C19  1  D0 F8                BNE     CRSRUP2         ; YES, EXIT
000C1B  1               
000C1B  1  C6 0C                DEC     CSRPOSY         ;
000C1D  1  20 88 0D             JSR     CHKPOS          ; WE ARE DONE! POSITION THE CURSOR AND EXIT
000C20  1  60                   RTS                     ;
000C21  1               
000C21  1               
000C21  1               ;__CRSRDN________________________________________________________________________________________________________________________
000C21  1               ;
000C21  1               ; 	MOVE THE CURSOR DOWN ONE POSITION, INC THE BUFFER POINTER AND SCROLL IF NECESSARY
000C21  1               ;
000C21  1               ;________________________________________________________________________________________________________________________________
000C21  1               ;
000C21  1               CRSRDN:
000C21  1               
000C21  1  A5 0C                LDA     CSRPOSY         ; HAVE WE REACHED THE END OF THE SCREEN?
000C23  1  C9 13                CMP     #LASTROW-1      ;
000C25  1  D0 03                BNE     CRSRDN1         ; NO, JUST MOVE DOWN
000C27  1  20 25 0D             JSR     SCROLLDOWN      ; SCROLL
000C2A  1               
000C2A  1               CRSRDN1:
000C2A  1  A2 00                LDX     #$00
000C2C  1               CRSRDN2:
000C2C  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000C2F  1  E8                   INX
000C30  1  E0 50                CPX     #MAXCOL
000C32  1  F0 0B                BEQ     CRSRDN3         ; YES, DONE
000C34  1  A5 0E                LDA     EDTPOS+1        ; WILL NEXT MOVE SEND US PAST THE END OF RAM?
000C36  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
000C38  1  F0 0B                BEQ     CRSRDN4         ; YES, DONE THEN
000C3A  1  A5 0E                LDA     EDTPOS+1        ;
000C3C  1               
000C3C  1               CRSRDN2A:
000C3C  1  4C 2C 0C             JMP     CRSRDN2         ; NO, KEEP GOING
000C3F  1               CRSRDN3:
000C3F  1  E6 0C                INC     CSRPOSY         ;
000C41  1  20 88 0D             JSR     CHKPOS          ; WE ARE DONE! POSITION THE CURSOR AND EXIT
000C44  1  60                   RTS                     ;
000C45  1               CRSRDN4:
000C45  1  4C 75 0E             JMP     PAINTSCREEN0    ;
000C48  1               
000C48  1               
000C48  1               
000C48  1               ;__CRSRLEFT______________________________________________________________________________________________________________________
000C48  1               ;
000C48  1               ; 	MOVE THE CURSOR LEFT ONE POSITION, DEC THE BUFFER POINTER AND SCROLL UP IF NECESSARY
000C48  1               ;
000C48  1               ;________________________________________________________________________________________________________________________________
000C48  1               ;
000C48  1               CRSRLEFT:
000C48  1  A5 0D                LDA     EDTPOS          ;
000C4A  1  D0 07                BNE     CRSRLEFT1       ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000C4C  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.  IF IT IS, DO NOTHING.
000C4E  1  C9 17                CMP     #>BUFFER        ;
000C50  1  D0 01                BNE     CRSRLEFT1       ;
000C52  1  60                   RTS                     ;
000C53  1               CRSRLEFT1:
000C53  1  C6 0B                DEC     CSRPOSX         ; DEC THE CURSOR POSITION
000C55  1  A5 0B                LDA     CSRPOSX         ; CHECK TO SEE IF WE WERE AT THE LEFT MOST POSITION
000C57  1  C9 FF                CMP     #$FF            ;
000C59  1  F0 06                BEQ     CRSRLEFT2       ; IF WE WERE, DO SOME SPECIAL STUFF
000C5B  1  20 CB 0D             JSR     DECEDTPOS       ; MOVE EDTPOS 1 TO THE LEFT
000C5E  1  4C 88 0D             JMP     CHKPOS          ; POSITION THE CURSOR
000C61  1               CRSRLEFT2:                      ; CURSOR IS AT THE LEFT MOST LINE
000C61  1  A9 4F                LDA     #MAXCOL-1       ;
000C63  1  85 0B                STA     CSRPOSX         ;
000C65  1  AA                   TAX                     ;
000C66  1               CRSRLEFT2A:
000C66  1  20 C4 0D             JSR     INCEDTPOS       ;
000C69  1  CA                   DEX                     ;
000C6A  1  D0 FA                BNE     CRSRLEFT2A      ;
000C6C  1  4C FC 0B             JMP     CRSRUP          ; MOVE UP ONE LINE
000C6F  1               
000C6F  1               
000C6F  1               ;__CRSRRIGHT_____________________________________________________________________________________________________________________
000C6F  1               ;
000C6F  1               ; 	MOVE THE CURSOR RIGHT ONE POSITION, INC THE BUFFER POINTER AND SCROLL IF NECESSARY
000C6F  1               ;
000C6F  1               ;________________________________________________________________________________________________________________________________
000C6F  1               ;
000C6F  1               CRSRRIGHT:
000C6F  1  A5 0C                LDA     CSRPOSY         ; IS CURSOR ON LAST POSITION OF SCREEN?
000C71  1  C9 13                CMP     #LASTROW-1      ; IF NOT, BRANCH TO CSRRIGHT1, OTHERWISE
000C73  1  D0 09                BNE     CRSRRIGHT1      ; SCROLL SCREEN
000C75  1  A5 0B                LDA     CSRPOSX         ;
000C77  1  C9 4F                CMP     #MAXCOL-1       ;
000C79  1  D0 03                BNE     CRSRRIGHT1      ;
000C7B  1               ;
000C7B  1  20 25 0D             JSR     SCROLLDOWN      ;
000C7E  1               ;
000C7E  1               CRSRRIGHT1:                     ;
000C7E  1  20 F4 0F             JSR     GOCSR           ; POSITION CURSOR
000C81  1  A0 00                LDY     #$00            ;
000C83  1  B1 0D                LDA     (EDTPOS),Y      ; GET CHAR FROM EDIT BUFFER
000C85  1  20 49 10             JSR     TOCONSOLE       ; PLACE CHAR ON SCREEN
000C88  1               ;
000C88  1  20 C4 0D             JSR     INCEDTPOS       ; MOVE EDTPOS 1 TO THE RIGHT
000C8B  1               ;
000C8B  1  A5 0E                LDA     EDTPOS+1        ;
000C8D  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
000C8F  1  D0 11                BNE     CRSRRIGHT2      ; NO, EXIT
000C91  1  20 CB 0D             JSR     DECEDTPOS       ; OTHERWISE BACK POINTER OFF ONE
000C94  1               ; AND PLACE CURSOR BACK ONE POSITION
000C94  1  C6 0B                DEC     CSRPOSX         ;
000C96  1  A5 0B                LDA     CSRPOSX         ;
000C98  1  C9 FF                CMP     #$FF            ;
000C9A  1  D0 06                BNE     CRSRRIGHT2      ;
000C9C  1  C6 0C                DEC     CSRPOSY         ;
000C9E  1  A9 50                LDA     #MAXCOL         ;
000CA0  1  85 0B                STA     CSRPOSX         ; DDW 11/29/2014 (FROM Y)
000CA2  1               CRSRRIGHT2:
000CA2  1  20 88 0D             JSR     CHKPOS
000CA5  1  60                   RTS                     ;
000CA6  1               
000CA6  1               
000CA6  1               
000CA6  1               ;__SCROLLUP_____________________________________________________________________________________________________________________
000CA6  1               ;
000CA6  1               ; 	SCROLL UP ONE LINE
000CA6  1               ;
000CA6  1               ;
000CA6  1               ;
000CA6  1               ;
000CA6  1               ;________________________________________________________________________________________________________________________________
000CA6  1               ;
000CA6  1               SCROLLUP:
000CA6  1  A5 0E                LDA     EDTPOS+1        ; CHECK HIGH BYTE, IF NOT EQUAL
000CA8  1  C9 17                CMP     #>BUFFER        ; NO WAY WE ARE AT START OF BUFFER
000CAA  1  D0 07                BNE     SCROLLUPSTART   ; SO SCROLL
000CAC  1  A5 0D                LDA     EDTPOS          ; CHECK LOW BYTE
000CAE  1  C9 51                CMP     #MAXCOL+1       ; IF WE ARE NOT ON TOP LINE
000CB0  1  B0 01                BCS     SCROLLUPSTART   ; SCROLL
000CB2  1  60                   RTS                     ; IF NOT, DO NOTHING
000CB3  1               
000CB3  1               SCROLLUPSTART:
000CB3  1  A9 12                LDA     #<SCROLLUPT     ;
000CB5  1  A0 0D                LDY     #>SCROLLUPT
000CB7  1  A2 09                LDX     #9              ;
000CB9  1  20 03 01             JSR     PEM             ;
000CBC  1               
000CBC  1  A5 0C                LDA     CSRPOSY
000CBE  1  48                   PHA
000CBF  1  A5 0B                LDA     CSRPOSX
000CC1  1  48                   PHA
000CC2  1               
000CC2  1  A9 50                LDA     #MAXCOL
000CC4  1  18                   CLC
000CC5  1  65 0B                ADC     CSRPOSX
000CC7  1  AA                   TAX
000CC8  1               SCROLLUP1:
000CC8  1  20 CB 0D             JSR     DECEDTPOS
000CCB  1  CA                   DEX
000CCC  1  E0 00                CPX     #$00
000CCE  1  D0 F8                BNE     SCROLLUP1
000CD0  1               
000CD0  1  A2 00                LDX     #$00
000CD2  1  86 0B                STX     CSRPOSX
000CD4  1  86 0C                STX     CSRPOSY
000CD6  1  20 F4 0F             JSR     GOCSR
000CD9  1               
000CD9  1  A5 0D                LDA     EDTPOS
000CDB  1  48                   PHA
000CDC  1  A5 0E                LDA     EDTPOS+1
000CDE  1  48                   PHA
000CDF  1               
000CDF  1  20 CB 0D             JSR     DECEDTPOS
000CE2  1  A0 00                LDY     #$00
000CE4  1  A2 50                LDX     #MAXCOL
000CE6  1               SCROLLUP2:
000CE6  1  20 C4 0D             JSR     INCEDTPOS
000CE9  1  B1 0D                LDA     (EDTPOS),Y
000CEB  1  20 49 10             JSR     TOCONSOLE
000CEE  1  CA                   DEX
000CEF  1  E0 00                CPX     #$00
000CF1  1  D0 F3                BNE     SCROLLUP2
000CF3  1               
000CF3  1  68                   PLA
000CF4  1  85 0E                STA     EDTPOS+1
000CF6  1  68                   PLA
000CF7  1  85 0D                STA     EDTPOS
000CF9  1               
000CF9  1  68                   PLA
000CFA  1  85 0B                STA     CSRPOSX         ;
000CFC  1  AA                   TAX
000CFD  1  68                   PLA
000CFE  1  85 0C                STA     CSRPOSY         ;
000D00  1  20 F4 0F             JSR     GOCSR           ;
000D03  1               
000D03  1               SCROLLUP3:
000D03  1  E0 00                CPX     #$00
000D05  1  F0 07                BEQ     SCROLLUP4
000D07  1  20 C4 0D             JSR     INCEDTPOS
000D0A  1  CA                   DEX
000D0B  1  4C 03 0D             JMP     SCROLLUP3
000D0E  1               
000D0E  1               SCROLLUP4:
000D0E  1  20 88 0D             JSR     CHKPOS
000D11  1  60                   RTS
000D12  1               
000D12  1               SCROLLUPT:
000D12  1  1B 5B 33 3B          .BYTE   $1B,'[','3',';','2','2','r',$1B,'[','3',';','1','H',$1B,'M',$1B,'[','r','$'
000D16  1  32 32 72 1B  
000D1A  1  5B 33 3B 31  
000D25  1               
000D25  1               ;__SCROLLDOWN___________________________________________________________________________________________________________________
000D25  1               ;
000D25  1               ; 	SCROLL DOWN ONE LINE
000D25  1               ;
000D25  1               ;
000D25  1               ;
000D25  1               ;________________________________________________________________________________________________________________________________
000D25  1               ;
000D25  1               SCROLLDOWN:
000D25  1  A9 74                LDA     #<SCROLLDOWNT
000D27  1  A0 0D                LDY     #>SCROLLDOWNT
000D29  1  A2 09                LDX     #9              ;
000D2B  1  20 03 01             JSR     PEM             ;
000D2E  1               
000D2E  1               
000D2E  1  A5 0B                LDA     CSRPOSX
000D30  1  48                   PHA
000D31  1  A5 0C                LDA     CSRPOSY
000D33  1  48                   PHA
000D34  1  A5 0D                LDA     EDTPOS
000D36  1  48                   PHA
000D37  1  A5 0E                LDA     EDTPOS+1
000D39  1  48                   PHA
000D3A  1               
000D3A  1               
000D3A  1  A9 50                LDA     #MAXCOL
000D3C  1  38                   SEC
000D3D  1  E5 0B                SBC     CSRPOSX
000D3F  1  AA                   TAX
000D40  1  CA                   DEX
000D41  1  F0 08                BEQ     SCROLLDOWN1A
000D43  1               SCROLLDOWN1:
000D43  1  20 C4 0D             JSR     INCEDTPOS
000D46  1  CA                   DEX
000D47  1  E0 00                CPX     #$00
000D49  1  D0 F8                BNE     SCROLLDOWN1
000D4B  1               SCROLLDOWN1A:
000D4B  1  A2 00                LDX     #$00
000D4D  1  86 0B                STX     CSRPOSX
000D4F  1  20 F4 0F             JSR     GOCSR
000D52  1               
000D52  1  A0 00                LDY     #$00
000D54  1  A2 50                LDX     #MAXCOL
000D56  1               SCROLLDOWN2:
000D56  1  20 C4 0D             JSR     INCEDTPOS
000D59  1  B1 0D                LDA     (EDTPOS),Y
000D5B  1  20 49 10             JSR     TOCONSOLE
000D5E  1  CA                   DEX
000D5F  1  E0 00                CPX     #$00
000D61  1  D0 F3                BNE     SCROLLDOWN2
000D63  1               
000D63  1  68                   PLA
000D64  1  85 0E                STA     EDTPOS+1
000D66  1  68                   PLA
000D67  1  85 0D                STA     EDTPOS
000D69  1  68                   PLA
000D6A  1  85 0C                STA     CSRPOSY
000D6C  1  68                   PLA
000D6D  1  85 0B                STA     CSRPOSX
000D6F  1  C6 0C                DEC     CSRPOSY
000D71  1               
000D71  1  4C 88 0D             JMP     CHKPOS
000D74  1               
000D74  1               SCROLLDOWNT:
000D74  1  1B 5B 33 3B          .BYTE   $1B,'[','3',';','2','2','r',$1B,'[','2','2',';','1','H',$1B,'D',$1B,'[','r','$'
000D78  1  32 32 72 1B  
000D7C  1  5B 32 32 3B  
000D88  1               
000D88  1               
000D88  1               
000D88  1               ;__CHKPOS________________________________________________________________________________________________________________________
000D88  1               ;
000D88  1               ; 	ENSURE THAT THE CURSOR IS ON A VALID EDITING POSITION
000D88  1               ;	IF NOT, FIND ONE!
000D88  1               ;
000D88  1               ;________________________________________________________________________________________________________________________________
000D88  1               ;
000D88  1               CHKPOS:
000D88  1  A0 00                LDY     #$00
000D8A  1  B1 0D                LDA     (EDTPOS),Y
000D8C  1  C9 00                CMP     #$00
000D8E  1  D0 31                BNE     CHKPOS2
000D90  1               
000D90  1  A5 0E                LDA     EDTPOS+1        ; CHECK HIGH BYTE, IF NOT EQUAL
000D92  1  C9 17                CMP     #>BUFFER        ; NO WAY WE ARE AT START OF BUFFER
000D94  1  D0 07                BNE     CHKPOS1         ; SO GO ON
000D96  1  A5 0D                LDA     EDTPOS          ; CHECK LOW BYTE
000D98  1  C9 00                CMP     #$00            ; IF WE ARE NOT AT TOP
000D9A  1  B0 01                BCS     CHKPOS1         ; SCROLL
000D9C  1  60                   RTS                     ; IF NOT, DO NOTHING
000D9D  1               CHKPOS1:
000D9D  1  20 CB 0D             JSR     DECEDTPOS       ; DEC THE EDIT POSITION
000DA0  1  C6 0B                DEC     CSRPOSX         ; DEC THE CURSOR POSITION
000DA2  1  A5 0B                LDA     CSRPOSX         ; ARE WE PAST THE START OF THE ROW?
000DA4  1  C9 FF                CMP     #$FF
000DA6  1  F0 03                BEQ     CHKPOS1A        ; YES, GO UP ONE LINE
000DA8  1  4C 88 0D             JMP     CHKPOS          ; NO, LOOP
000DAB  1               
000DAB  1               CHKPOS1A:
000DAB  1  A9 4F                LDA     #MAXCOL-1       ; LOAD X AT MAXCOL
000DAD  1  85 0B                STA     CSRPOSX
000DAF  1  C6 0C                DEC     CSRPOSY
000DB1  1  A5 0C                LDA     CSRPOSY
000DB3  1  C9 FF                CMP     #$FF
000DB5  1  D0 07                BNE     CHKPOS1B
000DB7  1  A9 00                LDA     #$00
000DB9  1  85 0C                STA     CSRPOSY
000DBB  1  4C A6 0C             JMP     SCROLLUP
000DBE  1               
000DBE  1               CHKPOS1B:
000DBE  1  4C 88 0D             JMP     CHKPOS
000DC1  1               CHKPOS2:
000DC1  1  4C F4 0F             JMP     GOCSR
000DC4  1               
000DC4  1               
000DC4  1               
000DC4  1               ;__INCEDTPOS_____________________________________________________________________________________________________________________
000DC4  1               ;
000DC4  1               ; 	INCREMENT THE EDTPOS POINTER
000DC4  1               ;
000DC4  1               ;________________________________________________________________________________________________________________________________
000DC4  1               ;
000DC4  1               
000DC4  1               INCEDTPOS:
000DC4  1  E6 0D                INC     EDTPOS
000DC6  1  D0 02                BNE     INCEDTPOS1
000DC8  1  E6 0E                INC     EDTPOS+1
000DCA  1               INCEDTPOS1:
000DCA  1  60                   RTS
000DCB  1               
000DCB  1               ;__DECEDTPOS_____________________________________________________________________________________________________________________
000DCB  1               ;
000DCB  1               ; 	DECREMENT THE EDTPOS POINTER
000DCB  1               ;
000DCB  1               ;________________________________________________________________________________________________________________________________
000DCB  1               ;
000DCB  1               DECEDTPOS:
000DCB  1  C6 0D                DEC     EDTPOS
000DCD  1  A5 0D                LDA     EDTPOS
000DCF  1  C9 FF                CMP     #$FF
000DD1  1  D0 02                BNE     DECEDTPOS1
000DD3  1  C6 0E                DEC     EDTPOS+1
000DD5  1               DECEDTPOS1:
000DD5  1  60                   RTS
000DD6  1               
000DD6  1               
000DD6  1               
000DD6  1               
000DD6  1               ;__PAGEDOWN_______________________________________________________________________________________________________________________
000DD6  1               ;
000DD6  1               ; 	PERFORM PAGE DOWN FUNCTION
000DD6  1               ;
000DD6  1               ;
000DD6  1               ;________________________________________________________________________________________________________________________________
000DD6  1               ;
000DD6  1               PAGEDOWN:
000DD6  1  A5 0D                LDA     EDTPOS          ;
000DD8  1  D0 09                BNE     PAGEDOWNA       ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000DDA  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.
000DDC  1  C9 17                CMP     #>BUFFER        ;
000DDE  1  D0 03                BNE     PAGEDOWNA       ;
000DE0  1  4C F1 0D             JMP     PAGEDOWN1       ;
000DE3  1               PAGEDOWNA:
000DE3  1  A5 0B                LDA     CSRPOSX
000DE5  1  C9 00                CMP     #$00
000DE7  1  F0 08                BEQ     PAGEDOWN1
000DE9  1  20 CB 0D             JSR     DECEDTPOS
000DEC  1  C6 0B                DEC     CSRPOSX
000DEE  1  4C D6 0D             JMP     PAGEDOWN
000DF1  1               
000DF1  1               PAGEDOWN1:
000DF1  1  A2 64                LDX     #$64
000DF3  1               PAGEDOWN2:
000DF3  1  A0 10                LDY     #$10
000DF5  1               PAGEDOWN2A:
000DF5  1  20 C4 0D             JSR     INCEDTPOS
000DF8  1               
000DF8  1  A5 0E                LDA     EDTPOS+1        ; WILL NEXT MOVE SEND US PAST THE END OF RAM?
000DFA  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
000DFC  1  D0 03                BNE     PAGEDOWN2B      ;
000DFE  1  4C 0B 0E             JMP     PAGEDOWN2C      ;
000E01  1               PAGEDOWN2B:
000E01  1  88                   DEY
000E02  1  C0 00                CPY     #$00
000E04  1  D0 EF                BNE     PAGEDOWN2A
000E06  1  CA                   DEX
000E07  1  E0 00                CPX     #$00
000E09  1  D0 E8                BNE     PAGEDOWN2
000E0B  1               PAGEDOWN2C:
000E0B  1  A5 0D                LDA     EDTPOS
000E0D  1  48                   PHA
000E0E  1  A5 0E                LDA     EDTPOS+1
000E10  1  48                   PHA
000E11  1  20 7D 0E             JSR     PAINTSCREEN1
000E14  1  68                   PLA
000E15  1  85 0E                STA     EDTPOS+1
000E17  1  68                   PLA
000E18  1  85 0D                STA     EDTPOS
000E1A  1  A9 00                LDA     #$00
000E1C  1  85 0B                STA     CSRPOSX
000E1E  1  85 0C                STA     CSRPOSY
000E20  1  4C F4 0F             JMP     GOCSR
000E23  1               
000E23  1               
000E23  1               
000E23  1               
000E23  1               
000E23  1               ;__PAGEUP________________________________________________________________________________________________________________________
000E23  1               ;
000E23  1               ; 	PERFORM PAGE UP FUNCTION
000E23  1               ;
000E23  1               ;
000E23  1               ;________________________________________________________________________________________________________________________________
000E23  1               ;
000E23  1               PAGEUP:
000E23  1  A5 0D                LDA     EDTPOS          ;
000E25  1  D0 07                BNE     PAGEUPA         ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000E27  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.
000E29  1  C9 17                CMP     #>BUFFER        ;
000E2B  1  D0 01                BNE     PAGEUPA         ;
000E2D  1  60                   RTS
000E2E  1               PAGEUPA:
000E2E  1  A5 0B                LDA     CSRPOSX
000E30  1  C9 00                CMP     #$00
000E32  1  F0 08                BEQ     PAGEUP1
000E34  1  20 CB 0D             JSR     DECEDTPOS
000E37  1  C6 0B                DEC     CSRPOSX
000E39  1  4C 23 0E             JMP     PAGEUP
000E3C  1               
000E3C  1               PAGEUP1:
000E3C  1  A2 64                LDX     #$64
000E3E  1               PAGEUP2:
000E3E  1  A0 10                LDY     #$10
000E40  1               PAGEUP2A:
000E40  1  20 CB 0D             JSR     DECEDTPOS
000E43  1               
000E43  1  A5 0D                LDA     EDTPOS          ;
000E45  1  D0 09                BNE     PAGEUP2B        ; CHECK TO SEE IF POINTER IS AT THE VERY TOP OF THE
000E47  1  A5 0E                LDA     EDTPOS+1        ; BUFFER.
000E49  1  C9 17                CMP     #>BUFFER        ;
000E4B  1  D0 03                BNE     PAGEUP2B        ;
000E4D  1  4C 5A 0E             JMP     PAGEUP2C        ;
000E50  1               PAGEUP2B:
000E50  1  88                   DEY
000E51  1  C0 00                CPY     #$00
000E53  1  D0 EB                BNE     PAGEUP2A
000E55  1  CA                   DEX
000E56  1  E0 00                CPX     #$00
000E58  1  D0 E4                BNE     PAGEUP2
000E5A  1               PAGEUP2C:
000E5A  1  A5 0D                LDA     EDTPOS
000E5C  1  48                   PHA
000E5D  1  A5 0E                LDA     EDTPOS+1
000E5F  1  48                   PHA
000E60  1  20 7D 0E             JSR     PAINTSCREEN1
000E63  1  68                   PLA
000E64  1  85 0E                STA     EDTPOS+1
000E66  1  68                   PLA
000E67  1  85 0D                STA     EDTPOS
000E69  1  A9 00                LDA     #$00
000E6B  1  85 0B                STA     CSRPOSX
000E6D  1  85 0C                STA     CSRPOSY
000E6F  1  4C F4 0F             JMP     GOCSR
000E72  1               
000E72  1               
000E72  1               ;__PAINTSCREEN___________________________________________________________________________________________________________________
000E72  1               ;
000E72  1               ; 	PAINT THE INITIAL EDIT SCREEN
000E72  1               ;
000E72  1               ;
000E72  1               ;
000E72  1               ;________________________________________________________________________________________________________________________________
000E72  1               ;
000E72  1               PAINTSCREEN:
000E72  1  20 E6 0F             JSR     CLEARSCREEN
000E75  1               
000E75  1               PAINTSCREEN0:
000E75  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
000E77  1  85 0D                STA     EDTPOS          ; STORE DEST BUFFER
000E79  1  A9 17                LDA     #>BUFFER        ;
000E7B  1  85 0E                STA     EDTPOS+1        ; STORE DEST BUFFER
000E7D  1               
000E7D  1               PAINTSCREEN1:
000E7D  1  A9 00                LDA     #$00
000E7F  1  85 0B                STA     CSRPOSX
000E81  1  85 0C                STA     CSRPOSY
000E83  1  20 F4 0F             JSR     GOCSR
000E86  1               
000E86  1               
000E86  1               PAINTSCREEN_LOOP:
000E86  1  A0 00                LDY     #$00
000E88  1  B1 0D                LDA     (EDTPOS),Y
000E8A  1  20 49 10             JSR     TOCONSOLE
000E8D  1               
000E8D  1  E6 0D                INC     EDTPOS
000E8F  1  D0 02                BNE     PAINTSCREEN_LOOPA
000E91  1  E6 0E                INC     EDTPOS+1
000E93  1               
000E93  1               PAINTSCREEN_LOOPA:
000E93  1  A5 0C                LDA     CSRPOSY
000E95  1  C9 14                CMP     #LASTROW
000E97  1  D0 ED                BNE     PAINTSCREEN_LOOP
000E99  1               
000E99  1  A9 00                LDA     #$00
000E9B  1  85 0B                STA     CSRPOSX
000E9D  1  85 0C                STA     CSRPOSY
000E9F  1  20 F4 0F             JSR     GOCSR
000EA2  1               
000EA2  1  A0 00                LDY     #$00
000EA4  1               
000EA4  1               PAINTSCREEN_LOOPB:
000EA4  1  B9 07 01             LDA     DFLFCB,Y
000EA7  1  99 25 0F             STA     SCREENFORMAT1,Y
000EAA  1  C8                   INY
000EAB  1  C0 08                CPY     #8
000EAD  1  D0 F5                BNE     PAINTSCREEN_LOOPB
000EAF  1  A9 2E                LDA     #'.'
000EB1  1  C8                   INY
000EB2  1  99 25 0F             STA     SCREENFORMAT1,Y
000EB5  1  B9 07 01             LDA     DFLFCB,Y
000EB8  1  C8                   INY
000EB9  1  99 25 0F             STA     SCREENFORMAT1,Y
000EBC  1  B9 07 01             LDA     DFLFCB,Y
000EBF  1  C8                   INY
000EC0  1  99 25 0F             STA     SCREENFORMAT1,Y
000EC3  1  B9 07 01             LDA     DFLFCB,Y
000EC6  1  C8                   INY
000EC7  1  99 25 0F             STA     SCREENFORMAT1,Y
000ECA  1               
000ECA  1               
000ECA  1               
000ECA  1               
000ECA  1  A9 DC                LDA     #<SCREENFORMAT
000ECC  1  A0 0E                LDY     #>SCREENFORMAT
000ECE  1  A2 09                LDX     #9              ;
000ED0  1  20 03 01             JSR     PEM             ;
000ED3  1  A9 25                LDA     #<SCREENFORMAT1
000ED5  1  A0 0F                LDY     #>SCREENFORMAT1
000ED7  1  A2 09                LDX     #9              ;
000ED9  1  4C 03 01             JMP     PEM             ;
000EDC  1               
000EDC  1               
000EDC  1               SCREENFORMAT:
000EDC  1  1B 5B 30 30          .BYTE   $1B,'[','0','0',';','0','0','H'
000EE0  1  3B 30 30 48  
000EE4  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
000EE8  1  44 4F 53 2F          .BYTE   "DOS/65 SCREEN EDITOR"
000EEC  1  36 35 20 53  
000EF0  1  43 52 45 45  
000EFC  1  20 20 20 20          .BYTE   "                    "
000F00  1  20 20 20 20  
000F04  1  20 20 20 20  
000F10  1  20 20 20 20          .BYTE   "                    ",'$'
000F14  1  20 20 20 20  
000F18  1  20 20 20 20  
000F25  1               SCREENFORMAT1:
000F25  1  20 20 20 20          .BYTE   "                     "
000F29  1  20 20 20 20  
000F2D  1  20 20 20 20  
000F3A  1  5F 5F 5F 5F          .BYTE   "____________________"
000F3E  1  5F 5F 5F 5F  
000F42  1  5F 5F 5F 5F  
000F4E  1  5F 5F 5F 5F          .BYTE   "____________________"
000F52  1  5F 5F 5F 5F  
000F56  1  5F 5F 5F 5F  
000F62  1  5F 5F 5F 5F          .BYTE   "____________________"
000F66  1  5F 5F 5F 5F  
000F6A  1  5F 5F 5F 5F  
000F76  1  5F 5F 5F 5F          .BYTE   "____________________"
000F7A  1  5F 5F 5F 5F  
000F7E  1  5F 5F 5F 5F  
000F8A  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','0','0','H'
000F8E  1  3B 30 30 48  
000F92  1  20 20 46 33          .BYTE   "  F3=QUIT  F4=MODE  F7=SAVE "
000F96  1  3D 51 55 49  
000F9A  1  54 20 20 46  
000FAE  1  20 46 38 3D          .BYTE   " F8=SAVE AS  F12=TRUNC.     "
000FB2  1  53 41 56 45  
000FB6  1  20 41 53 20  
000FCA  1  20 20 20 20          .BYTE   "     OM                "
000FCE  1  20 4F 4D 20  
000FD2  1  20 20 20 20  
000FE1  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
000FE5  1  24           
000FE6  1               
000FE6  1               
000FE6  1               
000FE6  1               ;__CLEARSCREEN___________________________________________________________________________________________________________________
000FE6  1               ;
000FE6  1               ; 	CLEAR THE SCREEN
000FE6  1               ;
000FE6  1               ;
000FE6  1               ;
000FE6  1               ;________________________________________________________________________________________________________________________________
000FE6  1               ;
000FE6  1               CLEARSCREEN:
000FE6  1  A9 EF                LDA     #<CLEARSCREENT
000FE8  1  A0 0F                LDY     #>CLEARSCREENT
000FEA  1  A2 09                LDX     #9              ;
000FEC  1  4C 03 01             JMP     PEM             ;
000FEF  1               CLEARSCREENT:
000FEF  1  1B 5B 32 4A          .BYTE   $1B,'[','2','J','$'
000FF3  1  24           
000FF4  1               
000FF4  1               
000FF4  1               ;__GOCSR_________________________________________________________________________________________________________________________
000FF4  1               ;
000FF4  1               ; 	PLACE THE PHYSICAL CURSOR ON TO CSRPOSY AND CSRPOSX
000FF4  1               ;
000FF4  1               ;
000FF4  1               ;
000FF4  1               ;________________________________________________________________________________________________________________________________
000FF4  1               ;
000FF4  1               GOCSR:
000FF4  1  48                   PHA
000FF5  1  98                   TYA
000FF6  1  48                   PHA
000FF7  1  8A                   TXA
000FF8  1  48                   PHA
000FF9  1  A4 0C                LDY     CSRPOSY
000FFB  1  B9 AA 15             LDA     DECIMAL1+3,Y
000FFE  1  29 0F                AND     #$0F
001000  1  18                   CLC
001001  1  69 30                ADC     #'0'
001003  1  8D 43 10             STA     GOCSRT+3
001006  1  B9 AA 15             LDA     DECIMAL1+3,Y
001009  1  6A                   ROR     A
00100A  1  6A                   ROR     A
00100B  1  6A                   ROR     A
00100C  1  6A                   ROR     A
00100D  1  29 0F                AND     #$0F
00100F  1  18                   CLC
001010  1  69 30                ADC     #'0'
001012  1  8D 42 10             STA     GOCSRT+2
001015  1               
001015  1  A4 0B                LDY     CSRPOSX
001017  1  B9 A8 15             LDA     DECIMAL1+1,Y
00101A  1  29 0F                AND     #$0F
00101C  1  18                   CLC
00101D  1  69 30                ADC     #'0'
00101F  1  8D 46 10             STA     GOCSRT+6
001022  1  B9 A8 15             LDA     DECIMAL1+1,Y
001025  1  6A                   ROR     A
001026  1  6A                   ROR     A
001027  1  6A                   ROR     A
001028  1  6A                   ROR     A
001029  1  29 0F                AND     #$0F
00102B  1  18                   CLC
00102C  1  69 30                ADC     #'0'
00102E  1  8D 45 10             STA     GOCSRT+5
001031  1  A9 40                LDA     #<GOCSRT
001033  1  A0 10                LDY     #>GOCSRT
001035  1  A2 09                LDX     #9              ;
001037  1  20 03 01             JSR     PEM             ;
00103A  1  68                   PLA
00103B  1  AA                   TAX
00103C  1  68                   PLA
00103D  1  A8                   TAY
00103E  1  68                   PLA
00103F  1  60                   RTS
001040  1               GOCSRT:
001040  1  1B 5B 30 30          .BYTE   $1B,'[','0','0',';','0','0','H','$'
001044  1  3B 30 30 48  
001048  1  24           
001049  1               
001049  1               ;__TOCONSOLE_____________________________________________________________________________________________________________________
001049  1               ;
001049  1               ; 	TRANSLATE BUFFER TO CONSOLE
001049  1               ;	A: CHAR TO OUTPUT
001049  1               ;
001049  1               ;
001049  1               ;________________________________________________________________________________________________________________________________
001049  1               ;
001049  1               TOCONSOLE:
001049  1  85 08                STA     TEMP
00104B  1  8A                   TXA
00104C  1  48                   PHA
00104D  1  98                   TYA
00104E  1  48                   PHA
00104F  1  A5 08                LDA     TEMP
001051  1  C9 0D                CMP     #$0D            ;  IS CHAR A <CR>?
001053  1  D0 0C                BNE     TOCONSOLE1      ;  NO, CONTINUE
001055  1  A9 82                LDA     #<PRINTCR
001057  1  A0 10                LDY     #>PRINTCR
001059  1  A2 09                LDX     #9              ;
00105B  1  20 03 01             JSR     PEM             ;
00105E  1  4C 6C 10             JMP     TOCONSOLE1B     ;
001061  1               TOCONSOLE1:
001061  1  C9 00                CMP     #$00            ; IS NULL?
001063  1  D0 02                BNE     TOCONSOLE1A     ;  NO, CONTINUE
001065  1  A9 20                LDA     #32             ; CHANGE NULL TO SPACE
001067  1               TOCONSOLE1A:
001067  1  A2 02                LDX     #2              ;  OUTPUT THE CHAR TO THE CONSOLE
001069  1  20 03 01             JSR     PEM             ;
00106C  1               TOCONSOLE1B:
00106C  1  E6 0B                INC     CSRPOSX         ;  MOVE THE CURSOR
00106E  1  A5 0B                LDA     CSRPOSX         ;  ARE WE AT THE END OF THE LINE?
001070  1  C9 50                CMP     #MAXCOL         ;
001072  1  D0 09                BNE     TOCONSOLE2      ;  NO, EXIT
001074  1               
001074  1  A9 00                LDA     #$00            ; MOVE CRSR TO START OF LINE
001076  1  85 0B                STA     CSRPOSX         ;
001078  1  E6 0C                INC     CSRPOSY         ; ADVANCE TO NEXT ROW
00107A  1  20 F4 0F             JSR     GOCSR           ; MOVE CRSR
00107D  1               TOCONSOLE2:
00107D  1  68                   PLA
00107E  1  A8                   TAY
00107F  1  68                   PLA
001080  1  AA                   TAX
001081  1  60                   RTS                     ; DONE
001082  1               
001082  1               PRINTCR:
001082  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m','<',$1B,'[','0','m','$'
001086  1  3C 1B 5B 30  
00108A  1  6D 24        
00108C  1               
00108C  1               
00108C  1               ;__READKB________________________________________________________________________________________________________________________
00108C  1               ;
00108C  1               ; 	READ THE KEYBOARD
00108C  1               ;	A: DATA
00108C  1               ;	Y: COMMAND
00108C  1               ;		0 IS REGULAR CHAR
00108C  1               ;		1 IS FUNCTION KEY
00108C  1               ;			00=CRSR UP
00108C  1               ;			01=CRSR DN
00108C  1               ;			02=CRSR LEFT
00108C  1               ;			03=CRSR RIGHT
00108C  1               ;			04=PG DN
00108C  1               ;			05=PG UP
00108C  1               ;			08=BACKSPACE
00108C  1               ;			$30=CR
00108C  1               ;			$11-$24= FUNCTION KEYS
00108C  1               ;		$FF IS NULL OP
00108C  1               ;________________________________________________________________________________________________________________________________
00108C  1               ;
00108C  1               READKB:
00108C  1  20 4E 11             JSR     READKB_XON
00108F  1               
00108F  1  A9 00                LDA     #$00            ;
001091  1  A0 FF                LDY     #$FF            ;
001093  1               
001093  1  A2 06                LDX     #6              ;
001095  1  20 03 01             JSR     PEM             ;
001098  1               
001098  1  C9 7F                CMP     #127            ;
00109A  1  F0 29                BEQ     READKB_DEL      ;
00109C  1               
00109C  1  C9 20                CMP     #32             ;
00109E  1  B0 17                BCS     READKB_CHAR     ;
0010A0  1               
0010A0  1  C9 1B                CMP     #$1B            ;
0010A2  1  F0 31                BEQ     READKB_ESC      ;
0010A4  1               
0010A4  1  C9 0D                CMP     #$0D            ;
0010A6  1  F0 07                BEQ     READKB_CR       ;
0010A8  1               
0010A8  1  C9 08                CMP     #$08            ;
0010AA  1  F0 11                BEQ     READKB_BS       ;
0010AC  1               
0010AC  1  4C CD 10             JMP     READKB_ERR      ;
0010AF  1               
0010AF  1               READKB_CR:
0010AF  1  20 54 11             JSR     READKB_XOFF
0010B2  1  A0 01                LDY     #01
0010B4  1  A9 30                LDA     #$30
0010B6  1  60                   RTS
0010B7  1               
0010B7  1               READKB_CHAR:
0010B7  1  20 54 11             JSR     READKB_XOFF
0010BA  1  A0 00                LDY     #00
0010BC  1  60                   RTS
0010BD  1               
0010BD  1               READKB_BS:
0010BD  1  20 54 11             JSR     READKB_XOFF
0010C0  1  A0 01                LDY     #01
0010C2  1  A9 08                LDA     #08
0010C4  1  60                   RTS
0010C5  1               
0010C5  1               READKB_DEL:
0010C5  1  20 54 11             JSR     READKB_XOFF
0010C8  1  A0 01                LDY     #01
0010CA  1  A9 7F                LDA     #127
0010CC  1  60                   RTS
0010CD  1               
0010CD  1               READKB_ERR:
0010CD  1  20 54 11             JSR     READKB_XOFF
0010D0  1  A0 FF                LDY     #$FF
0010D2  1  A9 00                LDA     #$00
0010D4  1  60                   RTS
0010D5  1               
0010D5  1               READKB_ESC:
0010D5  1  A2 06                LDX     #6              ;
0010D7  1  20 03 01             JSR     PEM             ;
0010DA  1               
0010DA  1  C9 5B                CMP     #'['
0010DC  1  D0 EF                BNE     READKB_ERR
0010DE  1               
0010DE  1  A2 06                LDX     #6              ;
0010E0  1  20 03 01             JSR     PEM             ;
0010E3  1               
0010E3  1  48                   PHA
0010E4  1  29 F0                AND     #$F0
0010E6  1  AA                   TAX
0010E7  1  68                   PLA
0010E8  1  E0 30                CPX     #$30
0010EA  1  D0 2C                BNE     READKB_NOTFKEY
0010EC  1  29 0F                AND     #$0F
0010EE  1  85 08                STA     TEMP
0010F0  1  A2 06                LDX     #6              ;
0010F2  1  20 03 01             JSR     PEM             ;
0010F5  1  C9 7E                CMP     #'~'
0010F7  1  D0 05                BNE     READKB_FKEY1
0010F9  1  A9 00                LDA     #$00
0010FB  1  4C 0F 11             JMP     READKB_FKEY2
0010FE  1               READKB_FKEY1:
0010FE  1  48                   PHA
0010FF  1               
0010FF  1  A2 06                LDX     #6              ;
001101  1  20 03 01             JSR     PEM             ;
001104  1  06 08                ASL     TEMP
001106  1  06 08                ASL     TEMP
001108  1  06 08                ASL     TEMP
00110A  1  06 08                ASL     TEMP
00110C  1               
00110C  1  68                   PLA
00110D  1  29 0F                AND     #$0F
00110F  1               READKB_FKEY2:
00110F  1  18                   CLC
001110  1  65 08                ADC     TEMP
001112  1  A0 01                LDY     #01
001114  1  20 54 11             JSR     READKB_XOFF
001117  1               
001117  1  60                   RTS
001118  1               
001118  1               
001118  1               READKB_NOTFKEY:
001118  1  C9 41                CMP     #'A'
00111A  1  D0 08                BNE     READKB_NOTUP
00111C  1  A0 01                LDY     #01
00111E  1  A9 00                LDA     #00
001120  1  20 54 11             JSR     READKB_XOFF
001123  1  60                   RTS
001124  1               
001124  1               READKB_NOTUP:
001124  1  C9 42                CMP     #'B'
001126  1  D0 08                BNE     READKB_NOTDN
001128  1  A0 01                LDY     #01
00112A  1  A9 01                LDA     #01
00112C  1  20 54 11             JSR     READKB_XOFF
00112F  1  60                   RTS
001130  1               READKB_NOTDN:
001130  1  C9 44                CMP     #'D'
001132  1  D0 08                BNE     READKB_NOTLEFT
001134  1  A0 01                LDY     #01
001136  1  A9 02                LDA     #02
001138  1  20 54 11             JSR     READKB_XOFF
00113B  1  60                   RTS
00113C  1               READKB_NOTLEFT:
00113C  1  C9 43                CMP     #'C'
00113E  1  D0 08                BNE     READKB_NOTRIGHT
001140  1  A0 01                LDY     #01
001142  1  A9 03                LDA     #03
001144  1  20 54 11             JSR     READKB_XOFF
001147  1  60                   RTS
001148  1               READKB_NOTRIGHT:
001148  1  20 54 11             JSR     READKB_XOFF
00114B  1  4C CD 10             JMP     READKB_ERR
00114E  1               
00114E  1               READKB_XON:
00114E  1  48                   PHA
00114F  1  A9 11                LDA     #17
001151  1  4C 57 11             JMP     READKB_XOFF1
001154  1               READKB_XOFF:
001154  1  48                   PHA
001155  1  A9 13                LDA     #19
001157  1               READKB_XOFF1:
001157  1  A2 02                LDX     #2              ;  OUTPUT THE CHAR TO THE CONSOLE
001159  1  20 03 01             JSR     PEM             ;
00115C  1  68                   PLA
00115D  1  60                   RTS
00115E  1               
00115E  1               ;__CLEARBUFFER___________________________________________________________________________________________________________________
00115E  1               ;
00115E  1               ; 	CLEAR THE EDIT BUFFER
00115E  1               ;
00115E  1               ;
00115E  1               ;
00115E  1               ;________________________________________________________________________________________________________________________________
00115E  1               ;
00115E  1               CLEARBUFFER:
00115E  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
001160  1  85 0D                STA     EDTPOS          ;
001162  1  A9 17                LDA     #>BUFFER        ;
001164  1  85 0E                STA     EDTPOS+1        ;
001166  1  A0 00                LDY     #$00            ;
001168  1               
001168  1               CLEARBUFFER1:
001168  1  A9 00                LDA     #00
00116A  1  91 0D                STA     (EDTPOS),Y
00116C  1  C8                   INY
00116D  1  D0 F9                BNE     CLEARBUFFER1
00116F  1  E6 0E                INC     EDTPOS+1
001171  1  A5 0E                LDA     EDTPOS+1
001173  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
001175  1  D0 F1                BNE     CLEARBUFFER1
001177  1               
001177  1  60                   RTS
001178  1               
001178  1               
001178  1               ;__DOS65LOAD_____________________________________________________________________________________________________________________
001178  1               ;
001178  1               ; 	LOAD A DOS/65 FILE INTO THE EDIT BUFFER
001178  1               ;		FILE IS LOADED INTO 80 COLUMN LINES TO SIMPLIFY SCROLLING
001178  1               ;
001178  1               ;
001178  1               ;________________________________________________________________________________________________________________________________
001178  1               ;
001178  1               DOS65LOAD:
001178  1  A9 00                LDA     #0              ; clear
00117A  1  8D 27 01             STA     DFLFCB+32       ; record number
00117D  1  A9 07                LDA     #<DFLFCB        ; Open File
00117F  1  A0 01                LDY     #>DFLFCB        ;
001181  1  A2 0F                LDX     #15             ;
001183  1  20 03 01             JSR     PEM             ;
001186  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
001188  1  D0 22                BNE     DOS65LOAD_1     ;
00118A  1               
00118A  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
00118C  1  85 09                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
00118E  1  A9 17                LDA     #>BUFFER        ;
001190  1  85 0A                STA     FCBPTR+1        ; STORE DEST BUFFER IN FCBPTR
001192  1  A5 09                LDA     FCBPTR          ;
001194  1  85 12                STA     CURRENTLEN      ;
001196  1  A5 0A                LDA     FCBPTR+1        ;
001198  1  85 13                STA     CURRENTLEN+1    ;
00119A  1  A9 0D                LDA     #13
00119C  1  20 30 12             JSR     DOS65LOAD_STOREBT
00119F  1  60                   RTS                     ; OPEN EDITOR, BLANK FILE
0011A0  1               
0011A0  1               DOS65LOAD_ERR:
0011A0  1  A9 57                LDA     #<FILEERROR2    ; NO, ERROR OUT
0011A2  1  A0 15                LDY     #>FILEERROR2
0011A4  1  A2 09                LDX     #9              ; Print error message
0011A6  1  20 03 01             JSR     PEM             ;
0011A9  1  4C 00 01             JMP     BOOT            ; WARM BOOT DOS/65
0011AC  1               DOS65LOAD_1:
0011AC  1  A9 00                LDA     #0              ; clear
0011AE  1  8D 27 01             STA     DFLFCB+32       ; record number
0011B1  1  85 12                STA     CURRENTLEN      ; LENGTH COUNTER
0011B3  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
0011B5  1  85 09                STA     FCBPTR          ; STORE DEST BUFFER IN FCBPTR
0011B7  1  A9 17                LDA     #>BUFFER        ;
0011B9  1  85 0A                STA     FCBPTR+1        ; STORE DEST BUFFER IN FCBPTR
0011BB  1               
0011BB  1  A9 0B                LDA     #<FCBBUFFER     ; SETUP BUFFER
0011BD  1  85 0F                STA     TMPPOS          ;
0011BF  1  A0 16                LDY     #>FCBBUFFER
0011C1  1  84 10                STY     TMPPOS+1        ;
0011C3  1  A2 1A                LDX     #26             ; Setup Buffer
0011C5  1  20 03 01             JSR     PEM
0011C8  1               
0011C8  1               DOS65LOAD_2:
0011C8  1  A9 07                LDA     #<DFLFCB        ; READ record buffer from disk file
0011CA  1  A0 01                LDY     #>DFLFCB        ;
0011CC  1  A2 14                LDX     #20             ;
0011CE  1  20 03 01             JSR     PEM             ;
0011D1  1  C9 00                CMP     #$00            ; is error or EOF
0011D3  1  F0 07                BEQ     DOS65LOAD_3     ;
0011D5  1  C9 01                CMP     #$01            ; EOF?
0011D7  1  F0 40                BEQ     DOS65LOAD_EOF   ; YES, END
0011D9  1  4C A0 11             JMP     DOS65LOAD_ERR   ; ERROR, do error handling
0011DC  1               DOS65LOAD_3:
0011DC  1  A2 00                LDX     #$00            ; CLEAR COUNTERS
0011DE  1  A0 00                LDY     #$00            ;
0011E0  1               DOS65LOAD_3A:
0011E0  1  B1 0F                LDA     (TMPPOS),Y      ; LOAD BYTE FROM BUFFER
0011E2  1  C8                   INY                     ; INC BUFFER COUNTER
0011E3  1  C9 1A                CMP     #$1A            ; IF EOF, SIGNAL END
0011E5  1  F0 37                BEQ     DOS65LOAD_4     ;
0011E7  1  C9 0D                CMP     #$0D            ; IF CR PLACE IT IN BUFFER AND PAD WITH SPACES TO MAXCOL
0011E9  1  F0 12                BEQ     DOS65LOAD_3D    ;
0011EB  1  C9 20                CMP     #32             ; IF UNPRINTABLE, DO NOT PLACE IN BUFFER
0011ED  1  90 07                BCC     DOS65LOAD_3C    ;
0011EF  1  C9 7F                CMP     #127            ;
0011F1  1  B0 03                BCS     DOS65LOAD_3C    ;
0011F3  1  20 30 12             JSR     DOS65LOAD_STOREBT; STORE THE BYTE IN THE BUFFER
0011F6  1               DOS65LOAD_3C:
0011F6  1  C0 80                CPY     #$80            ; ARE WE AT THE END OF THE SOURCE BUFFER?
0011F8  1  D0 E6                BNE     DOS65LOAD_3A    ; NO, LOOP
0011FA  1               
0011FA  1  4C C8 11             JMP     DOS65LOAD_2     ; KEEP GOING!
0011FD  1               
0011FD  1               DOS65LOAD_3D:                   ; IN ORDER TO MAKE SCROLLING EASIER <CR> LINES NEED PADDED TO MAXCOL
0011FD  1  20 30 12             JSR     DOS65LOAD_STOREBT; STORE THE <CR> BYTE
001200  1               DOS65LOAD_3D1:
001200  1  A5 12                LDA     CURRENTLEN      ;
001202  1  C9 50                CMP     #MAXCOL         ;
001204  1  F0 0C                BEQ     DOS65LOAD_3D2   ;
001206  1  A9 00                LDA     #$00            ;
001208  1  81 09                STA     (FCBPTR,X)      ; PLACE CHAR IN BUFFER
00120A  1  E6 12                INC     CURRENTLEN      ; INC THE LENGTH COUNTER
00120C  1  20 3E 12             JSR     DOS65LOAD_STOREBT1; INC THE BUFFER POINTER
00120F  1  4C 00 12             JMP     DOS65LOAD_3D1   ;
001212  1               DOS65LOAD_3D2:
001212  1  A9 00                LDA     #$00            ;
001214  1  85 12                STA     CURRENTLEN      ;
001216  1  4C F6 11             JMP     DOS65LOAD_3C    ;
001219  1               DOS65LOAD_EOF:
001219  1  A9 0D                LDA     #13
00121B  1  20 30 12             JSR     DOS65LOAD_STOREBT
00121E  1               
00121E  1               DOS65LOAD_4:
00121E  1  A9 07                LDA     #<DFLFCB        ; CLOSE FILE
001220  1  A0 01                LDY     #>DFLFCB        ;
001222  1  A2 10                LDX     #16             ;
001224  1  20 03 01             JSR     PEM             ;
001227  1  A5 09                LDA     FCBPTR          ;
001229  1  85 12                STA     CURRENTLEN      ;
00122B  1  A5 0A                LDA     FCBPTR+1        ;
00122D  1  85 13                STA     CURRENTLEN+1    ;
00122F  1  60                   RTS
001230  1               
001230  1               
001230  1               DOS65LOAD_STOREBT:
001230  1  81 09                STA     (FCBPTR,X)      ; PLACE CHAR IN BUFFER
001232  1  E6 12                INC     CURRENTLEN      ; INC THE LENGTH COUNTER
001234  1  A5 12                LDA     CURRENTLEN      ;
001236  1  C9 50                CMP     #MAXCOL         ; WRAP THE COUNTER ON MAXCOL
001238  1  D0 04                BNE     DOS65LOAD_STOREBT1;
00123A  1  A9 00                LDA     #$00            ;
00123C  1  85 12                STA     CURRENTLEN      ;
00123E  1               DOS65LOAD_STOREBT1:
00123E  1  E6 09                INC     FCBPTR          ; add to base counter
001240  1  D0 08                BNE     DOS65LOAD_STOREBT2
001242  1  E6 0A                INC     FCBPTR+1        ; yes, carry, inc high byte
001244  1  A5 0A                LDA     FCBPTR+1        ;
001246  1  C9 B8                CMP     #>Ram_top       ; are we at the end of RAM?
001248  1  F0 01                BEQ     DOS65LOAD_STOREBTE; YES, STOP.
00124A  1               DOS65LOAD_STOREBT2:
00124A  1  60                   RTS
00124B  1               DOS65LOAD_STOREBTE:
00124B  1  20 1E 12             JSR     DOS65LOAD_4     ; CLOSE FILE
00124E  1  A9 80                LDA     #<FILEERROR3    ; NO, ERROR OUT
001250  1  A0 15                LDY     #>FILEERROR3
001252  1  A2 09                LDX     #9              ; Print error message
001254  1  20 03 01             JSR     PEM             ;
001257  1  4C 00 01             JMP     BOOT            ; WARM BOOT DOS/65
00125A  1               
00125A  1               
00125A  1               ;__DOS65SAVEAS_____________________________________________________________________________________________________________________
00125A  1               ;
00125A  1               ; 	SAVE A DOS/65 FILE FROM THE EDIT BUFFER TO A NEW FILE NAME
00125A  1               ;
00125A  1               ;
00125A  1               ;
00125A  1               ;________________________________________________________________________________________________________________________________
00125A  1               ;
00125A  1               DOS65SAVEAS:
00125A  1  20 E6 0F             JSR     CLEARSCREEN
00125D  1               
00125D  1  A9 9A                LDA     #<SAVESCREENFORMAT
00125F  1  A0 12                LDY     #>SAVESCREENFORMAT
001261  1  A2 09                LDX     #9              ;
001263  1  20 03 01             JSR     PEM             ;
001266  1  A9 E3                LDA     #<SAVESCREENFORMAT1
001268  1  A0 12                LDY     #>SAVESCREENFORMAT1
00126A  1  A2 09                LDX     #9              ;
00126C  1  20 03 01             JSR     PEM             ;
00126F  1               DOS65SAVEAS1:
00126F  1  A9 A3                LDA     #<SAVESCREENFORMAT2
001271  1  A0 13                LDY     #>SAVESCREENFORMAT2
001273  1  A2 09                LDX     #9              ;
001275  1  20 03 01             JSR     PEM             ;
001278  1               
001278  1  A2 0D                LDX     #13
00127A  1  A9 20                LDA     #' '
00127C  1               DOS65SAVEAS2:
00127C  1  8D E8 13             STA     FNBUFFER
00127F  1  CA                   DEX
001280  1  E0 00                CPX     #$00
001282  1  D0 F8                BNE     DOS65SAVEAS2
001284  1  A9 E8                LDA     #<FNBUFFER
001286  1  A0 13                LDY     #>FNBUFFER
001288  1  A2 0A                LDX     #10             ;
00128A  1  20 03 01             JSR     PEM             ;
00128D  1               
00128D  1  20 CC 14             JSR     DOS65FCBPREP
001290  1  C9 FF                CMP     #$FF
001292  1  F0 DB                BEQ     DOS65SAVEAS1
001294  1               
001294  1  20 FB 13             JSR     DOS65SAVE
001297  1  4C 72 0E             JMP     PAINTSCREEN
00129A  1               
00129A  1               SAVESCREENFORMAT:
00129A  1  1B 5B 30 30          .BYTE   $1B,'[','0','0',';','0','0','H'
00129E  1  3B 30 30 48  
0012A2  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
0012A6  1  44 4F 53 2F          .BYTE   "DOS/65 SCREEN EDITOR"
0012AA  1  36 35 20 53  
0012AE  1  43 52 45 45  
0012BA  1  20 20 20 20          .BYTE   "                    "
0012BE  1  20 20 20 20  
0012C2  1  20 20 20 20  
0012CE  1  20 20 20 20          .BYTE   "                    ",'$'
0012D2  1  20 20 20 20  
0012D6  1  20 20 20 20  
0012E3  1               
0012E3  1               SAVESCREENFORMAT1:
0012E3  1  20 20 20 20          .BYTE   "                    "
0012E7  1  20 20 20 20  
0012EB  1  20 20 20 20  
0012F7  1  5F 5F 5F 5F          .BYTE   "____________________"
0012FB  1  5F 5F 5F 5F  
0012FF  1  5F 5F 5F 5F  
00130B  1  5F 5F 5F 5F          .BYTE   "____________________"
00130F  1  5F 5F 5F 5F  
001313  1  5F 5F 5F 5F  
00131F  1  5F 5F 5F 5F          .BYTE   "____________________"
001323  1  5F 5F 5F 5F  
001327  1  5F 5F 5F 5F  
001333  1  5F 5F 5F 5F          .BYTE   "____________________"
001337  1  5F 5F 5F 5F  
00133B  1  5F 5F 5F 5F  
001347  1  1B 5B 32 33          .BYTE   $1B,'[','2','3',';','0','0','H'
00134B  1  3B 30 30 48  
00134F  1  20 20 20 20          .BYTE   "                            "
001353  1  20 20 20 20  
001357  1  20 20 20 20  
00136B  1  20 20 20 20          .BYTE   "                            "
00136F  1  20 20 20 20  
001373  1  20 20 20 20  
001387  1  20 20 20 20          .BYTE   "     OM                "
00138B  1  20 4F 4D 20  
00138F  1  20 20 20 20  
00139E  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m','$'
0013A2  1  24           
0013A3  1               SAVESCREENFORMAT2:
0013A3  1  1B 5B 31 31          .BYTE   $1B,'[','1','1',';','1','0','H'
0013A7  1  3B 31 30 48  
0013AB  1  20 20 20 20          .BYTE   "                                   "
0013AF  1  20 20 20 20  
0013B3  1  20 20 20 20  
0013CE  1  1B 5B 31 30          .BYTE   $1B,'[','1','0',';','0','0','H'
0013D2  1  3B 30 30 48  
0013D6  1  20 20 4E 45          .BYTE   "  NEW FILE NAME: $"
0013DA  1  57 20 46 49  
0013DE  1  4C 45 20 4E  
0013E8  1               
0013E8  1               FNBUFFER:
0013E8  1  0F 20 20 20          .BYTE   15,"                  "
0013EC  1  20 20 20 20  
0013F0  1  20 20 20 20  
0013FB  1               
0013FB  1               
0013FB  1               ;__DOS65SAVE_____________________________________________________________________________________________________________________
0013FB  1               ;
0013FB  1               ; 	SAVE A DOS/65 FILE FROM THE EDIT BUFFER
0013FB  1               ;
0013FB  1               ;
0013FB  1               ;
0013FB  1               ;________________________________________________________________________________________________________________________________
0013FB  1               ;
0013FB  1               DOS65SAVE:
0013FB  1  A9 00                LDA     #0              ; clear
0013FD  1  8D 27 01             STA     DFLFCB+32       ; record number
001400  1  A9 07                LDA     #<DFLFCB        ; Open File
001402  1  A0 01                LDY     #>DFLFCB        ;
001404  1  A2 13                LDX     #19             ;
001406  1  20 03 01             JSR     PEM             ;
001409  1               
001409  1  A9 00                LDA     #0              ; clear
00140B  1  8D 27 01             STA     DFLFCB+32       ; record number
00140E  1  A9 07                LDA     #<DFLFCB        ; ATTEMPT TO CREATE File
001410  1  A0 01                LDY     #>DFLFCB        ;
001412  1  A2 16                LDX     #22             ;
001414  1  20 03 01             JSR     PEM             ;
001417  1  C9 FF                CMP     #$FF            ; error?, if NOT, continue
001419  1  D0 0A                BNE     DOS65SAVE_1     ;
00141B  1               
00141B  1               DOS65SAVE_ERR:
00141B  1  A9 4B                LDA     #<FILEERROR2A   ; NO, ERROR OUT
00141D  1  A0 15                LDY     #>FILEERROR2A
00141F  1  A2 09                LDX     #9              ; Print error message
001421  1  20 03 01             JSR     PEM             ;
001424  1  60                   RTS                     ; RETURN
001425  1               DOS65SAVE_1:
001425  1  A9 00                LDA     #0              ; clear
001427  1  8D 27 01             STA     DFLFCB+32       ; record number
00142A  1  A9 00                LDA     #<BUFFER        ; SETUP BUFFER
00142C  1  85 09                STA     FCBPTR          ; STORE SRC BUFFER IN FCBPTR
00142E  1  A9 17                LDA     #>BUFFER        ;
001430  1  85 0A                STA     FCBPTR+1        ; STORE SRC BUFFER IN FCBPTR
001432  1               
001432  1  A9 0B                LDA     #<FCBBUFFER     ; SETUP BUFFER
001434  1  85 0F                STA     TMPPOS          ;
001436  1  A0 16                LDY     #>FCBBUFFER
001438  1  84 10                STY     TMPPOS+1        ;
00143A  1  A2 1A                LDX     #26             ; Setup Buffer
00143C  1  20 03 01             JSR     PEM
00143F  1               
00143F  1  A2 00                LDX     #$00            ;
001441  1  86 11                STX     TEMP1           ;
001443  1               DOS65SAVE_2:
001443  1  A5 13                LDA     CURRENTLEN+1    ; AT END PAGE?
001445  1  C5 0A                CMP     FCBPTR+1        ;
001447  1  D0 0D                BNE     DOS65SAVE_2B    ;
001449  1  A5 09                LDA     FCBPTR          ;
00144B  1  C5 12                CMP     CURRENTLEN      ;
00144D  1  90 07                BCC     DOS65SAVE_2B    ; IF WE ARE NOT PAST THE END, PROCEED AS USUAL
00144F  1  F0 05                BEQ     DOS65SAVE_2B    ;
001451  1  A9 1A                LDA     #$1A            ; WE ARE AT END SO PAD WITH EOF
001453  1  4C 68 14             JMP     DOS65SAVE_2C    ;
001456  1               
001456  1               DOS65SAVE_2B:
001456  1  A0 00                LDY     #$00
001458  1  B1 09                LDA     (FCBPTR),Y      ; GET NEXT BUFFER BYTE
00145A  1  E6 09                INC     FCBPTR          ; INC 16 BIT BUFFER POINTER
00145C  1  D0 02                BNE     *+4             ;
00145E  1  E6 0A                INC     FCBPTR+1        ;
001460  1  C9 00                CMP     #$00            ; IS NULL?
001462  1  F0 DF                BEQ     DOS65SAVE_2     ; YES SKIP
001464  1  C9 0A                CMP     #10             ; IS LF?
001466  1  F0 DB                BEQ     DOS65SAVE_2     ; YES SKIP
001468  1               
001468  1               DOS65SAVE_2C:
001468  1  A4 11                LDY     TEMP1           ;
00146A  1  91 0F                STA     (TMPPOS),Y      ; NO STORE IN BUFFER
00146C  1  E6 11                INC     TEMP1           ; INC BUFFER POINTER
00146E  1  C9 0D                CMP     #13             ; IF NOT CR
001470  1  D0 03                BNE     *+5             ; CONTINUE
001472  1  20 A5 14             JSR     DOS65SAVE_LF    ; OTHERWISE INSERT LF
001475  1               
001475  1  A6 11                LDX     TEMP1           ;
001477  1  E0 80                CPX     #$80            ; PAST END?
001479  1  D0 C8                BNE     DOS65SAVE_2     ; NO LOOP TILL BUFFER IS FULL
00147B  1               
00147B  1               DOS65SAVE_2D:
00147B  1  A9 07                LDA     #<DFLFCB        ; WRITE record buffer from disk file
00147D  1  A0 01                LDY     #>DFLFCB        ;
00147F  1  A2 15                LDX     #21             ;
001481  1  20 03 01             JSR     PEM             ;
001484  1  C9 00                CMP     #$00            ; is SUCCESSFUL?
001486  1  F0 03                BEQ     *+5             ;
001488  1  4C 1B 14             JMP     DOS65SAVE_ERR   ; ERROR, do error handling
00148B  1               
00148B  1               
00148B  1  A5 0A                LDA     FCBPTR+1        ;
00148D  1  C5 13                CMP     CURRENTLEN+1    ; AT END?
00148F  1  90 03                BCC     DOS65SAVE_3     ;
001491  1  4C 9B 14             JMP     DOS65SAVE_4     ; CLOSE FILE
001494  1               
001494  1               DOS65SAVE_3:
001494  1  A2 00                LDX     #$00            ;
001496  1  86 11                STX     TEMP1           ;
001498  1  4C 43 14             JMP     DOS65SAVE_2     ; SAVE NEXT SECTOR
00149B  1               
00149B  1               DOS65SAVE_4:
00149B  1  A9 07                LDA     #<DFLFCB        ; CLOSE FILE
00149D  1  A0 01                LDY     #>DFLFCB        ;
00149F  1  A2 10                LDX     #16             ;
0014A1  1  20 03 01             JSR     PEM             ;
0014A4  1  60                   RTS
0014A5  1               
0014A5  1               
0014A5  1               DOS65SAVE_LF:
0014A5  1               
0014A5  1  A6 11                LDX     TEMP1           ;
0014A7  1  E0 80                CPX     #$80            ; PAST END?
0014A9  1  D0 03                BNE     *+5             ; NO
0014AB  1  20 B7 14             JSR     DOS65SAVE_LF1   ;
0014AE  1               
0014AE  1  A4 11                LDY     TEMP1           ; WRITE LF
0014B0  1  A9 0A                LDA     #10             ;
0014B2  1  91 0F                STA     (TMPPOS),Y      ; NO STORE IN BUFFER
0014B4  1  E6 11                INC     TEMP1           ; INC BUFFER POINTER
0014B6  1  60                   RTS
0014B7  1               
0014B7  1               DOS65SAVE_LF1:
0014B7  1  A9 07                LDA     #<DFLFCB        ; WRITE record buffer from disk file
0014B9  1  A0 01                LDY     #>DFLFCB        ;
0014BB  1  A2 15                LDX     #21             ;
0014BD  1  20 03 01             JSR     PEM             ;
0014C0  1  C9 00                CMP     #$00            ; is SUCCESSFUL?
0014C2  1  F0 03                BEQ     *+5             ;
0014C4  1  4C 1B 14             JMP     DOS65SAVE_ERR   ; ERROR, do error handling
0014C7  1  A2 00                LDX     #$00            ;
0014C9  1  86 11                STX     TEMP1           ;
0014CB  1  60                   RTS
0014CC  1               
0014CC  1               DOS65FCBPREP:
0014CC  1  AD EB 13             LDA     FNBUFFER+3      ; GET ":"
0014CF  1  C9 3A                CMP     #':'            ;
0014D1  1  F0 0C                BEQ     DOS65FCBPREP_1  ; YES, IT WAS A DRIVE, CONTINUE
0014D3  1  A9 20                LDA     #<FILEERROR1    ; NO, ERROR OUT
0014D5  1  A0 15                LDY     #>FILEERROR1
0014D7  1  A2 09                LDX     #9
0014D9  1  20 03 01             JSR     PEM
0014DC  1  A9 FF                LDA     #$FF
0014DE  1  60                   RTS
0014DF  1               DOS65FCBPREP_1:
0014DF  1  AD EA 13             LDA     FNBUFFER+2      ; GET DRIVE LETTER
0014E2  1  38                   SEC                     ;
0014E3  1  E9 40                SBC     #64             ; PARSE DRIVE NUMBER
0014E5  1  8D 07 01             STA     DFLFCB+0        ; STORE IT IN FCB
0014E8  1               
0014E8  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
0014EA  1  A9 20                LDA     #$20            ; LOAD SPACE CHAR INTO A
0014EC  1               DOS65FCBPREP_1A:                ; BLANK OUT FCB
0014EC  1  99 07 01             STA     DFLFCB,Y        ;
0014EF  1  C8                   INY                     ;
0014F0  1  C0 09                CPY     #$09            ; IS DONE
0014F2  1  D0 F8                BNE     DOS65FCBPREP_1A ; NO, LOOP
0014F4  1  A0 01                LDY     #$01            ; POINT Y TO FCB FILE NAME
0014F6  1  A2 00                LDX     #$00            ;
0014F8  1               DOS65FCBPREP_2:                 ; COPY FILE NAME PARAMETER INTO FCB
0014F8  1  BD EC 13             LDA     FNBUFFER+4,X    ;
0014FB  1  E8                   INX                     ;
0014FC  1  C9 2E                CMP     #'.'            ;
0014FE  1  F0 0B                BEQ     DOS65FCBPREP_3  ;
001500  1  99 07 01             STA     DFLFCB,Y        ;
001503  1  C8                   INY                     ;
001504  1  C0 09                CPY     #$09            ;
001506  1  F0 03                BEQ     DOS65FCBPREP_3  ;
001508  1  4C F8 14             JMP     DOS65FCBPREP_2  ;
00150B  1               DOS65FCBPREP_3:                 ;
00150B  1  BD EC 13             LDA     FNBUFFER+4,X    ;
00150E  1  8D 10 01             STA     DFLFCB+9        ;
001511  1  BD ED 13             LDA     FNBUFFER+5,X    ;
001514  1  8D 11 01             STA     DFLFCB+10       ;
001517  1  BD EE 13             LDA     FNBUFFER+6,X    ;
00151A  1  8D 12 01             STA     DFLFCB+11       ;
00151D  1  A9 00                LDA     #$00            ;
00151F  1  60                   RTS                     ;
001520  1               
001520  1               
001520  1               FILEERROR1:
001520  1  1B 5B 31 31          .BYTE   $1B,'[','1','1',';','1','0','H'
001524  1  3B 31 30 48  
001528  1  2A 2A 20 4E          .BYTE   "** NO DRIVE SPECIFIED, TRY AGAIN"
00152C  1  4F 20 44 52  
001530  1  49 56 45 20  
001548  1  0D 0A 24             .BYTE   $0D,$0A,'$'
00154B  1               FILEERROR2A:
00154B  1  1B 5B 30 31          .BYTE   $1B,'[','0','1',';','1','0','H'
00154F  1  3B 31 30 48  
001553  1  1B 5B 37 6D          .BYTE   $1B,'[','7','m'
001557  1               FILEERROR2:
001557  1  2A 2A 20 44          .BYTE   "** DOS/65 ERROR, OPERATION ABORTED"
00155B  1  4F 53 2F 36  
00155F  1  35 20 45 52  
001579  1  1B 5B 30 6D          .BYTE   $1B,'[','0','m'
00157D  1  0D 0A 24             .BYTE   $0D,$0A,'$'
001580  1               FILEERROR3:
001580  1  2A 2A 20 46          .BYTE   "** FILE TOO LARGE, OPERATION ABORTED"
001584  1  49 4C 45 20  
001588  1  54 4F 4F 20  
0015A4  1  0D 0A 24             .BYTE   $0D,$0A,'$'
0015A7  1               DECIMAL1:
0015A7  1  00 01 02 03          .BYTE   $00,$01,$02,$03,$04,$05,$06,$07,$08,$09
0015AB  1  04 05 06 07  
0015AF  1  08 09        
0015B1  1  10 11 12 13          .BYTE   $10,$11,$12,$13,$14,$15,$16,$17,$18,$19
0015B5  1  14 15 16 17  
0015B9  1  18 19        
0015BB  1  20 21 22 23          .BYTE   $20,$21,$22,$23,$24,$25,$26,$27,$28,$29
0015BF  1  24 25 26 27  
0015C3  1  28 29        
0015C5  1  30 31 32 33          .BYTE   $30,$31,$32,$33,$34,$35,$36,$37,$38,$39
0015C9  1  34 35 36 37  
0015CD  1  38 39        
0015CF  1  40 41 42 43          .BYTE   $40,$41,$42,$43,$44,$45,$46,$47,$48,$49
0015D3  1  44 45 46 47  
0015D7  1  48 49        
0015D9  1  50 51 52 53          .BYTE   $50,$51,$52,$53,$54,$55,$56,$57,$58,$59
0015DD  1  54 55 56 57  
0015E1  1  58 59        
0015E3  1  60 61 62 63          .BYTE   $60,$61,$62,$63,$64,$65,$66,$67,$68,$69
0015E7  1  64 65 66 67  
0015EB  1  68 69        
0015ED  1  70 71 72 73          .BYTE   $70,$71,$72,$73,$74,$75,$76,$77,$78,$79
0015F1  1  74 75 76 77  
0015F5  1  78 79        
0015F7  1  80 81 82 83          .BYTE   $80,$81,$82,$83,$84,$85,$86,$87,$88,$89
0015FB  1  84 85 86 87  
0015FF  1  88 89        
001601  1  90 91 92 93          .BYTE   $90,$91,$92,$93,$94,$95,$96,$97,$98,$99
001605  1  94 95 96 97  
001609  1  98 99        
00160B  1               FCBBUFFER:
00160B  1  xx xx xx xx          .RES    $80
00160F  1  xx xx xx xx  
001613  1  xx xx xx xx  
00168B  1  xx xx xx xx          .ALIGN  256
00168F  1  xx xx xx xx  
001693  1  xx xx xx xx  
001700  1               BUFFER:
001700  1  00                   .BYTE   00              ; start of user RAM (set as needed, should be page aligned)
001701  1               Ram_top         = $B800         ; end of user RAM+1 (set as needed, should be page aligned)
001701  1               
001701  1                       .END
