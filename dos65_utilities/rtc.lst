ca65 V2.18 - Ubuntu 2.19-1
Main file   : rtc.asm
Current file: rtc.asm

000000r 1               
000000r 1               ;
000000r 1               ; Program:	rtc.asm
000000r 1               ; Author:		Andrew Lynch
000000r 1               ; Date:		22 Feb 2007
000000r 1               ; Enviroment:	TASM MS-DOS Z80 Cross Assembler source for CP/M
000000r 1               ;
000000r 1               
000000r 1               ; constants
000000r 1               
000000r 1               RTC_WRITE       = $FD3F
000000r 1               RTC_READ        = $FD42
000000r 1               RTC_RESET       = $FD45
000000r 1               
000000r 1               TEMPWORD        = $40
000000r 1               TEMP            = $42
000000r 1               TEMP1           = $43
000000r 1               TEMPPAUSE       = $44
000000r 1               
000000r 1               PEM             = $103          ;PEM ENTRY
000000r 1               DFLFCB          = $107          ;DEFAULT FCB
000000r 1               TEA             = $800          ;TEA START
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "TEA"
000000r 1                       .ORG    TEA
000800  1               ; print message 16 times
000800  1               Print:
000800  1               
000800  1               
000800  1  A9 A1                LDA     #<MSG           ;SEND
000802  1  A0 0B                LDY     #>MSG
000804  1  A2 09                LDX     #9              ;MESSAGE
000806  1  20 03 01             JSR     PEM
000809  1               
000809  1               
000809  1  20 15 0A             JSR     RTC_TOP_LOOP
00080C  1               
00080C  1               
00080C  1  A2 0E                LDX     #14             ;DEFAULT
00080E  1  4C 03 01             JMP     PEM             ;AND RETURN
000811  1               
000811  1  00                   BRK                     ; This code is never reached
000812  1               
000812  1               
000812  1               
000812  1               ; function RTC_WR_PROTECT
000812  1               ; input x (address) $07
000812  1               ; input y (value) $80
000812  1               ; uses A
000812  1               ;
000812  1               ; based on following algorithm
000812  1               ;
000812  1               ;  PROCEDURE rtc_wr_protect;
000812  1               ;  BEGIN
000812  1               ;    rtc_write(7,128);
000812  1               ;  END;
000812  1               
000812  1               RTC_WR_PROTECT:
000812  1  A2 07                LDX     #%00000111
000814  1  A0 80                LDY     #%10000000
000816  1  20 3F FD             JSR     RTC_WRITE
000819  1  60                   RTS
00081A  1               
00081A  1               
00081A  1               ; function RTC_WR_UNPROTECT
00081A  1               ; input D (address) $07
00081A  1               ; input E (value) $00
00081A  1               ; uses A
00081A  1               ;
00081A  1               ; based on following algorithm
00081A  1               ;
00081A  1               ;  PROCEDURE rtc_wr_unprotect;
00081A  1               ;  BEGIN
00081A  1               ;    rtc_write(7,0);
00081A  1               ;  END;
00081A  1               
00081A  1               RTC_WR_UNPROTECT:
00081A  1  A2 07                LDX     #%00000111
00081C  1  A0 00                LDY     #%00000000
00081E  1  20 3F FD             JSR     RTC_WRITE
000821  1  60                   RTS
000822  1               
000822  1               
000822  1               ; function RTC_GET_TIME
000822  1               ; input HL (memory address of buffer)
000822  1               ; uses A,C,D,E
000822  1               ;
000822  1               ; based on following algorithm
000822  1               ;
000822  1               ;  PROCEDURE rtc_get_time(var buf: string);
000822  1               ;   var
000822  1               ;     n  : int;
000822  1               ;  BEGIN
000822  1               ;    lock();
000822  1               ;    rtc_reset_off();
000822  1               ;    { Write command, burst read }
000822  1               ;    rtc_wr(255 - 64);
000822  1               ;    { Read seconds }
000822  1               ;    n := rtc_rd(); 0
000822  1               ;    buf[16] := char(((n / 16) and $07)) + '0';
000822  1               ;    buf[17] := char((n and $0f)) + '0';
000822  1               ;    { Read minutes }
000822  1               ;    n := rtc_rd(); 1
000822  1               ;    buf[13] := char(((n / 16) and $07)) + '0';
000822  1               ;    buf[14] := char((n and $0f)) + '0';
000822  1               ;    buf[15] := ':';
000822  1               ;    { Read hours }
000822  1               ;    n := rtc_rd(); 2
000822  1               ;    buf[10] := char(((n / 16) and $03)) + '0';
000822  1               ;    buf[11] := char((n and $0f)) + '0';
000822  1               ;    buf[12] := ':';
000822  1               ;    { Read date }
000822  1               ;    n := rtc_rd(); 3
000822  1               ;    buf[7] := char(((n / 16) and $03)) + '0';
000822  1               ;    buf[8] := char((n and $0f)) + '0';
000822  1               ;    buf[9] := ' ';
000822  1               ;    { Read month }
000822  1               ;    n := rtc_rd(); 4
000822  1               ;    buf[4] := char(((n / 16) and $03)) + '0';
000822  1               ;    buf[5] := char((n and $0f)) + '0';
000822  1               ;    buf[6] := '-';
000822  1               ;    { Read day }
000822  1               ;    n := rtc_rd(); 5
000822  1               ;    {
000822  1               ;    buf[4] := char(((n / 16) and $03)) + '0';
000822  1               ;    buf[4] := char((n and $0f)) + '0';
000822  1               ;    }
000822  1               ;    { Read year }
000822  1               ;    n := rtc_rd(); 6
000822  1               ;    buf[1] := char(((n / 16) and $0f)) + '0';
000822  1               ;    buf[2] := char((n and $0f)) + '0';
000822  1               ;    buf[3] := '-';
000822  1               ;    length(buf) := 17;
000822  1               ;    rtc_reset_on();
000822  1               ;    unlock();
000822  1               ;  END rtc_get_time;
000822  1               
000822  1               RTC_GET_TIME:
000822  1               ;    { Read seconds }
000822  1               
000822  1  A2 00                LDX     #$00
000824  1  20 42 FD             JSR     RTC_READ
000827  1  98                   TYA
000828  1  48                   PHA
000829  1               ; digit 16
000829  1  18                   CLC
00082A  1  4A                   LSR     A
00082B  1  4A                   LSR     A
00082C  1  4A                   LSR     A
00082D  1  4A                   LSR     A
00082E  1  29 07                AND     #$07
000830  1  18                   CLC
000831  1  69 30                ADC     #'0'
000833  1  8D 30 0E             STA     RTC_PRINT_BUFFER+15
000836  1               
000836  1               ; digit 17
000836  1  68                   PLA
000837  1  29 0F                AND     #$0F
000839  1  18                   CLC
00083A  1  69 30                ADC     #'0'
00083C  1  8D 31 0E             STA     RTC_PRINT_BUFFER+16
00083F  1               
00083F  1               ;    { Read minutes }
00083F  1               
00083F  1  A2 01                LDX     #$01
000841  1  20 42 FD             JSR     RTC_READ
000844  1  98                   TYA
000845  1  48                   PHA
000846  1               ; digit 13
000846  1  18                   CLC
000847  1  4A                   LSR     A
000848  1  4A                   LSR     A
000849  1  4A                   LSR     A
00084A  1  4A                   LSR     A
00084B  1  29 07                AND     #$07
00084D  1  18                   CLC
00084E  1  69 30                ADC     #'0'
000850  1  8D 2D 0E             STA     RTC_PRINT_BUFFER+12
000853  1               
000853  1               ; digit 14
000853  1  68                   PLA
000854  1  29 0F                AND     #$0F
000856  1  18                   CLC
000857  1  69 30                ADC     #'0'
000859  1  8D 2E 0E             STA     RTC_PRINT_BUFFER+13
00085C  1               
00085C  1               ; digit 15
00085C  1  A9 3A                LDA     #':'
00085E  1  8D 2F 0E             STA     RTC_PRINT_BUFFER+14
000861  1               
000861  1               ;    { Read hours }
000861  1  A2 02                LDX     #$02
000863  1  20 42 FD             JSR     RTC_READ
000866  1  98                   TYA
000867  1               
000867  1  48                   PHA
000868  1               ; digit 10
000868  1  18                   CLC
000869  1  4A                   LSR     A
00086A  1  4A                   LSR     A
00086B  1  4A                   LSR     A
00086C  1  4A                   LSR     A
00086D  1  29 03                AND     #$03
00086F  1  18                   CLC
000870  1  69 30                ADC     #'0'
000872  1  8D 2A 0E             STA     RTC_PRINT_BUFFER+09
000875  1               
000875  1               ; digit 11
000875  1  68                   PLA
000876  1  29 0F                AND     #$0F
000878  1  18                   CLC
000879  1  69 30                ADC     #'0'
00087B  1  8D 2B 0E             STA     RTC_PRINT_BUFFER+10
00087E  1               
00087E  1               ; digit 12
00087E  1  A9 3A                LDA     #':'
000880  1  8D 2C 0E             STA     RTC_PRINT_BUFFER+11
000883  1               
000883  1               ;    { Read date }
000883  1  A2 03                LDX     #$03
000885  1  20 42 FD             JSR     RTC_READ
000888  1  98                   TYA
000889  1               
000889  1  48                   PHA
00088A  1               ; digit 07
00088A  1  18                   CLC
00088B  1  4A                   LSR     A
00088C  1  4A                   LSR     A
00088D  1  4A                   LSR     A
00088E  1  4A                   LSR     A
00088F  1  29 03                AND     #$03
000891  1  18                   CLC
000892  1  69 30                ADC     #'0'
000894  1  8D 27 0E             STA     RTC_PRINT_BUFFER+06
000897  1               
000897  1               ; digit 08
000897  1  68                   PLA
000898  1  29 0F                AND     #$0F
00089A  1  18                   CLC
00089B  1  69 30                ADC     #'0'
00089D  1  8D 28 0E             STA     RTC_PRINT_BUFFER+07
0008A0  1               
0008A0  1               ; digit 09
0008A0  1  A9 20                LDA     #' '
0008A2  1  8D 29 0E             STA     RTC_PRINT_BUFFER+08
0008A5  1               
0008A5  1               ;    { Read month }
0008A5  1  A2 04                LDX     #$04
0008A7  1  20 42 FD             JSR     RTC_READ
0008AA  1  98                   TYA
0008AB  1               
0008AB  1  48                   PHA
0008AC  1               ; digit 04
0008AC  1  18                   CLC
0008AD  1  4A                   LSR     A
0008AE  1  4A                   LSR     A
0008AF  1  4A                   LSR     A
0008B0  1  4A                   LSR     A
0008B1  1  29 03                AND     #$03
0008B3  1  18                   CLC
0008B4  1  69 30                ADC     #'0'
0008B6  1  8D 24 0E             STA     RTC_PRINT_BUFFER+03
0008B9  1               
0008B9  1               ; digit 05
0008B9  1  68                   PLA
0008BA  1  29 0F                AND     #$0F
0008BC  1  18                   CLC
0008BD  1  69 30                ADC     #'0'
0008BF  1  8D 25 0E             STA     RTC_PRINT_BUFFER+04
0008C2  1               
0008C2  1               ; digit 06
0008C2  1  A9 2D                LDA     #'-'
0008C4  1  8D 26 0E             STA     RTC_PRINT_BUFFER+05
0008C7  1               
0008C7  1               
0008C7  1               ;    { Read year }
0008C7  1  A2 06                LDX     #$06
0008C9  1  20 42 FD             JSR     RTC_READ
0008CC  1  98                   TYA
0008CD  1               
0008CD  1  48                   PHA
0008CE  1               ; digit 01
0008CE  1  18                   CLC
0008CF  1  4A                   LSR     A
0008D0  1  4A                   LSR     A
0008D1  1  4A                   LSR     A
0008D2  1  4A                   LSR     A
0008D3  1  29 0F                AND     #$0F
0008D5  1  18                   CLC
0008D6  1  69 30                ADC     #'0'
0008D8  1  8D 21 0E             STA     RTC_PRINT_BUFFER+00
0008DB  1               
0008DB  1               ; digit 02
0008DB  1  68                   PLA
0008DC  1  29 0F                AND     #$0F
0008DE  1  18                   CLC
0008DF  1  69 30                ADC     #'0'
0008E1  1  8D 22 0E             STA     RTC_PRINT_BUFFER+01
0008E4  1               
0008E4  1               ; digit 03
0008E4  1  A9 2D                LDA     #'-'
0008E6  1  8D 23 0E             STA     RTC_PRINT_BUFFER+02
0008E9  1               
0008E9  1  60                   RTS                     ; Yes, end function and return
0008EA  1               
0008EA  1               
0008EA  1               ; function RTC_SET
0008EA  1               ; uses A, D, E
0008EA  1               ;
0008EA  1               ; based on following algorithm
0008EA  1               ;
0008EA  1               ;  { Set time to 96-02-18 19:43:00 }
0008EA  1               ;  PROCEDURE rtc_set_now;
0008EA  1               ;  BEGIN
0008EA  1               ;    rtc_wr_unprotect();
0008EA  1               ;    { Set seconds }
0008EA  1               ;    rtc_write(0,0);
0008EA  1               ;    { Set minutes }
0008EA  1               ;    rtc_write(1,$43);
0008EA  1               ;    { Set hours }
0008EA  1               ;    rtc_write(2,$19);
0008EA  1               ;    { Set date }
0008EA  1               ;    rtc_write(3,$18);
0008EA  1               ;    { Set month }
0008EA  1               ;    rtc_write(4,$02);
0008EA  1               ;    { Set day }
0008EA  1               ;    rtc_write(5,$07);
0008EA  1               ;    { Set year }
0008EA  1               ;    rtc_write(6,$96);
0008EA  1               ;    rtc_wr_protect();
0008EA  1               ;  END;
0008EA  1               
0008EA  1               RTC_SET:
0008EA  1               
0008EA  1  20 1A 08             JSR     RTC_WR_UNPROTECT
0008ED  1  A9 14                LDA     #20
0008EF  1  8D 21 0E             STA     RTC_PRINT_BUFFER
0008F2  1               
0008F2  1               ; seconds
0008F2  1  A2 00                LDX     #$00
0008F4  1  A0 00                LDY     #$00
0008F6  1  20 3F FD             JSR     RTC_WRITE
0008F9  1               
0008F9  1               
0008F9  1  A9 ED                LDA     #<RTC_TOP_LOOP1_SET_TIME
0008FB  1  A0 0D                LDY     #>RTC_TOP_LOOP1_SET_TIME
0008FD  1  A2 09                LDX     #9              ;MESSAGE
0008FF  1  20 03 01             JSR     PEM
000902  1               
000902  1  A9 21                LDA     #<RTC_PRINT_BUFFER
000904  1  A0 0E                LDY     #>RTC_PRINT_BUFFER
000906  1  A2 0A                LDX     #10             ;MESSAGE
000908  1  20 03 01             JSR     PEM
00090B  1               
00090B  1  AD 27 0E             LDA     RTC_PRINT_BUFFER+6
00090E  1  29 0F                AND     #$0F
000910  1  85 42                STA     TEMP
000912  1  AD 26 0E             LDA     RTC_PRINT_BUFFER+5
000915  1  29 0F                AND     #$0F
000917  1  18                   CLC
000918  1  0A                   ASL     A
000919  1  0A                   ASL     A
00091A  1  0A                   ASL     A
00091B  1  0A                   ASL     A
00091C  1  18                   CLC
00091D  1  65 42                ADC     TEMP
00091F  1  A8                   TAY
000920  1               
000920  1  20 28 F5             JSR     $F528
000923  1               
000923  1               ; minutes
000923  1  A2 01                LDX     #$01
000925  1  20 3F FD             JSR     RTC_WRITE
000928  1               
000928  1  AD 24 0E             LDA     RTC_PRINT_BUFFER+3
00092B  1  29 0F                AND     #$0F
00092D  1  85 42                STA     TEMP
00092F  1  AD 23 0E             LDA     RTC_PRINT_BUFFER+2
000932  1  29 0F                AND     #$0F
000934  1  18                   CLC
000935  1  0A                   ASL     A
000936  1  0A                   ASL     A
000937  1  0A                   ASL     A
000938  1  0A                   ASL     A
000939  1  18                   CLC
00093A  1  65 42                ADC     TEMP
00093C  1  A8                   TAY
00093D  1               
00093D  1               ; hours
00093D  1  A2 02                LDX     #$02
00093F  1  20 3F FD             JSR     RTC_WRITE
000942  1               
000942  1               
000942  1               
000942  1               
000942  1  A9 1E                LDA     #<RTC_TOP_LOOP1_OTHER2
000944  1  A0 0E                LDY     #>RTC_TOP_LOOP1_OTHER2
000946  1  A2 09                LDX     #9              ;MESSAGE
000948  1  20 03 01             JSR     PEM
00094B  1               
00094B  1  A9 FD                LDA     #<RTC_TOP_LOOP1_SET_DATE
00094D  1  A0 0D                LDY     #>RTC_TOP_LOOP1_SET_DATE
00094F  1  A2 09                LDX     #9              ;MESSAGE
000951  1  20 03 01             JSR     PEM
000954  1               
000954  1  A9 21                LDA     #<RTC_PRINT_BUFFER
000956  1  A0 0E                LDY     #>RTC_PRINT_BUFFER
000958  1  A2 0A                LDX     #10             ;MESSAGE
00095A  1  20 03 01             JSR     PEM
00095D  1               
00095D  1               
00095D  1  A9 1E                LDA     #<RTC_TOP_LOOP1_OTHER2
00095F  1  A0 0E                LDY     #>RTC_TOP_LOOP1_OTHER2
000961  1  A2 09                LDX     #9              ;MESSAGE
000963  1  20 03 01             JSR     PEM
000966  1               
000966  1               
000966  1  AD 27 0E             LDA     RTC_PRINT_BUFFER+6
000969  1  29 0F                AND     #$0F
00096B  1  85 42                STA     TEMP
00096D  1  AD 26 0E             LDA     RTC_PRINT_BUFFER+5
000970  1  29 0F                AND     #$0F
000972  1  18                   CLC
000973  1  0A                   ASL     A
000974  1  0A                   ASL     A
000975  1  0A                   ASL     A
000976  1  0A                   ASL     A
000977  1  18                   CLC
000978  1  65 42                ADC     TEMP
00097A  1  A8                   TAY
00097B  1               
00097B  1               
00097B  1               ; date
00097B  1  A2 03                LDX     #$03
00097D  1  20 3F FD             JSR     RTC_WRITE
000980  1               
000980  1  AD 24 0E             LDA     RTC_PRINT_BUFFER+3
000983  1  29 0F                AND     #$0F
000985  1  85 42                STA     TEMP
000987  1  AD 23 0E             LDA     RTC_PRINT_BUFFER+2
00098A  1  29 0F                AND     #$0F
00098C  1  18                   CLC
00098D  1  0A                   ASL     A
00098E  1  0A                   ASL     A
00098F  1  0A                   ASL     A
000990  1  0A                   ASL     A
000991  1  18                   CLC
000992  1  65 42                ADC     TEMP
000994  1  A8                   TAY
000995  1               
000995  1               
000995  1               ; month
000995  1  A2 04                LDX     #$04
000997  1  A0 02                LDY     #$02
000999  1  20 3F FD             JSR     RTC_WRITE
00099C  1               
00099C  1               ; day
00099C  1  A2 05                LDX     #$05
00099E  1  A0 00                LDY     #$00
0009A0  1  20 3F FD             JSR     RTC_WRITE
0009A3  1               
0009A3  1  AD 2A 0E             LDA     RTC_PRINT_BUFFER+9
0009A6  1  29 0F                AND     #$0F
0009A8  1  85 42                STA     TEMP
0009AA  1  AD 29 0E             LDA     RTC_PRINT_BUFFER+8
0009AD  1  29 0F                AND     #$0F
0009AF  1  18                   CLC
0009B0  1  0A                   ASL     A
0009B1  1  0A                   ASL     A
0009B2  1  0A                   ASL     A
0009B3  1  0A                   ASL     A
0009B4  1  18                   CLC
0009B5  1  65 42                ADC     TEMP
0009B7  1  A8                   TAY
0009B8  1               
0009B8  1               
0009B8  1               ; year
0009B8  1  A2 06                LDX     #$06
0009BA  1  20 3F FD             JSR     RTC_WRITE
0009BD  1               
0009BD  1  20 12 08             JSR     RTC_WR_PROTECT
0009C0  1  60                   RTS
0009C1  1               
0009C1  1               
0009C1  1               ; function RTC_RESTART
0009C1  1               ;
0009C1  1               ; uses A, D, E,
0009C1  1               ;
0009C1  1               ; based on the following algorithm
0009C1  1               ;
0009C1  1               ;  { Restart clock, set seconds to 00 }
0009C1  1               ;  PROCEDURE rtc_restart;
0009C1  1               ;  BEGIN
0009C1  1               ;    rtc_wr_unprotect();
0009C1  1               ;    { Set seconds }
0009C1  1               ;    rtc_write(0,0);
0009C1  1               ;    rtc_wr_protect();
0009C1  1               ;  END;
0009C1  1               
0009C1  1               RTC_RESTART:
0009C1  1  20 1A 08             JSR     RTC_WR_UNPROTECT
0009C4  1  A2 00                LDX     #$00
0009C6  1  A0 00                LDY     #$00
0009C8  1  20 3F FD             JSR     RTC_WRITE
0009CB  1  20 12 08             JSR     RTC_WR_PROTECT
0009CE  1  60                   RTS
0009CF  1               
0009CF  1               
0009CF  1               ; function RTC_CHARGE_ENABLE
0009CF  1               ;
0009CF  1               ; uses A, D, E
0009CF  1               ;
0009CF  1               ; based on following algorithm
0009CF  1               ;
0009CF  1               ;  PROCEDURE rtc_charge_enable;
0009CF  1               ;  BEGIN
0009CF  1               ;    rtc_wr_unprotect();
0009CF  1               ;    { Enable trickle charger, 2kohm, 1 diode }
0009CF  1               ;    rtc_write(8,$a5);
0009CF  1               ;    rtc_wr_protect();
0009CF  1               ;  END;
0009CF  1               
0009CF  1               RTC_CHARGE_ENABLE:
0009CF  1  20 1A 08             JSR     RTC_WR_UNPROTECT
0009D2  1  A2 08                LDX     #$08
0009D4  1  A0 A5                LDY     #$A5
0009D6  1  20 3F FD             JSR     RTC_WRITE
0009D9  1  20 12 08             JSR     RTC_WR_PROTECT
0009DC  1  60                   RTS
0009DD  1               
0009DD  1               
0009DD  1               ; function RTC_CHARGE_DISABLE
0009DD  1               ;
0009DD  1               ; uses A, D, E
0009DD  1               ;
0009DD  1               ; based on following algorithm
0009DD  1               ;
0009DD  1               ;  PROCEDURE rtc_charge_disable;
0009DD  1               ;  BEGIN
0009DD  1               ;    rtc_wr_unprotect();
0009DD  1               ;    { Disable trickle charger}
0009DD  1               ;    rtc_write(8,$00);
0009DD  1               ;    rtc_wr_protect();
0009DD  1               ;  END;
0009DD  1               
0009DD  1               RTC_CHARGE_DISABLE:
0009DD  1  20 1A 08             JSR     RTC_WR_UNPROTECT
0009E0  1  A2 08                LDX     #$08
0009E2  1  A0 00                LDY     #$00
0009E4  1  20 3F FD             JSR     RTC_WRITE
0009E7  1  20 12 08             JSR     RTC_WR_PROTECT
0009EA  1  60                   RTS
0009EB  1               
0009EB  1               
0009EB  1               ; function TEST_BIT_DELAY
0009EB  1               ;
0009EB  1               ; based on the following algorithm
0009EB  1               ;
0009EB  1               ;
0009EB  1               ;  PROCEDURE test_bit_delay();
0009EB  1               ;   var
0009EB  1               ;     i,t0,t1 : int;
0009EB  1               ;  BEGIN
0009EB  1               ;    putln("Testing bit delay...");
0009EB  1               ;    t0 := sys_time();
0009EB  1               ;    for i := 0 while i < 1000 do inc(i) loop
0009EB  1               ;      rtc_bit_delay();
0009EB  1               ;    end loop;
0009EB  1               ;    t1 := sys_time();
0009EB  1               ;    putln(i," rtc_bit_delay calls took ",t1-t0," ms.");
0009EB  1               ;  END;
0009EB  1               
0009EB  1               RTC_TEST_BIT_DELAY:
0009EB  1  A9 C4                LDA     #<TESTING_BIT_DELAY_MSG
0009ED  1  A0 0B                LDY     #>TESTING_BIT_DELAY_MSG
0009EF  1  A2 09                LDX     #9              ;MESSAGE
0009F1  1  20 03 01             JSR     PEM
0009F4  1               
0009F4  1               ; test should take approximately 43 seconds based on the following code analysis
0009F4  1               ; of Z80 T-states on a 4 MHz processor
0009F4  1               ; =(4+15*(7+255*(7+255*(17+144+4+10)+4+10)+10)+7)/4/1000000
0009F4  1               
0009F4  1  A0 FF                LDY     #$FF
0009F6  1               PAUSE1:
0009F6  1  A9 FF                LDA     #$FF            ; ADJUST THE TIME 13h IS FOR 4 MHZ
0009F8  1  85 44                STA     TEMPPAUSE
0009FA  1               PAUSE2:
0009FA  1               
0009FA  1  C6 44                DEC     TEMPPAUSE       ; DEC COUNTER.
0009FC  1  D0 FC                BNE     PAUSE2          ; JUMP TO PAUSE2 IF A <> 0.
0009FE  1  88                   DEY                     ; DEC COUNTER
0009FF  1  D0 F5                BNE     PAUSE1          ; JUMP TO PAUSE1 IF C <> 0.
000A01  1               
000A01  1               
000A01  1  A9 37                LDA     #<TESTING_BIT_DELAY_OVER
000A03  1  A0 0C                LDY     #>TESTING_BIT_DELAY_OVER
000A05  1  A2 09                LDX     #9              ;MESSAGE
000A07  1  20 03 01             JSR     PEM
000A0A  1  60                   RTS
000A0B  1               
000A0B  1               
000A0B  1               ; function RTC_HELP
000A0B  1               ;
000A0B  1               ; based on following algorithm
000A0B  1               ;
000A0B  1               ;  PROCEDURE help();
000A0B  1               ;  BEGIN
000A0B  1               ;    putln();
000A0B  1               ;    putln("rtc: ",version);
000A0B  1               ;    putln("rtc: Commands: (E)xit (T)ime st(A)rt (S)et (R)aw (L)oop (C)harge (N)ocharge (H)elp");
000A0B  1               ;  END;
000A0B  1               
000A0B  1               RTC_HELP:
000A0B  1  A9 57                LDA     #<RTC_HELP_MSG
000A0D  1  A0 0C                LDY     #>RTC_HELP_MSG
000A0F  1  A2 09                LDX     #9              ;MESSAGE
000A11  1  20 03 01             JSR     PEM
000A14  1  60                   RTS
000A15  1               
000A15  1               
000A15  1               ; function RTC_TOP_LOOP
000A15  1               ;
000A15  1               ; based on following algorithm
000A15  1               ;
000A15  1               ;  PROCEDURE toploop();
000A15  1               ;   var
000A15  1               ;     err,i,n,fd  : int;
000A15  1               ;  BEGIN
000A15  1               ;    putln();
000A15  1               ;    help();
000A15  1               ;    rtc_reset_on();
000A15  1               ;    hold(100);
000A15  1               ;    test_bit_delay();
000A15  1               ;    rtc_charge_disable();
000A15  1               ;    putln("rtc: trickle charger disabled.");
000A15  1               ;    loop
000A15  1               ;       put("rtc>");
000A15  1               ;       gets(line);
000A15  1               ;       if line = "exit" then
000A15  1               ;          putln("Bye.");
000A15  1               ;          exit(0);
000A15  1               ;       elsif line = "charge" then
000A15  1               ;          putln("Trickle charger enabled.");
000A15  1               ;          rtc_charge_enable();
000A15  1               ;       elsif line = "nocharge" then
000A15  1               ;          putln("Trickle charger disabled.");
000A15  1               ;          rtc_charge_disable();
000A15  1               ;       elsif line = "start" then
000A15  1               ;          rtc_restart();
000A15  1               ;          putln("Restarting RTC");
000A15  1               ;       elsif line = "t" then
000A15  1               ;          rtc_get_time(line);
000A15  1               ;          putln("Current time: ",line);
000A15  1               ;       elsif line = "raw" then
000A15  1               ;          putln();
000A15  1               ;          putln("Raw read loop, hit any key to stop...");
000A15  1               ;          while read(0,@n,1 + RD_NOWAIT) = 0 loop
000A15  1               ;             put(#13,"sec=",hexstr(rtc_read(0))^);
000A15  1               ;             put(" min=",hexstr(rtc_read(1))^);
000A15  1               ;             hold(500);
000A15  1               ;          end loop;
000A15  1               ;       elsif line = "loop" then
000A15  1               ;          putln();
000A15  1               ;          putln("Clock loop, hit any key to stop...");
000A15  1               ;          while read(0,@n,1 + RD_NOWAIT) = 0 loop
000A15  1               ;             rtc_get_time(line);
000A15  1               ;             put(#13,line);
000A15  1               ;             hold(200);
000A15  1               ;          end loop;
000A15  1               ;       elsif line = "set" then
000A15  1               ;          putln("Setting RTC time to 96-02-18 19:43:00");
000A15  1               ;          rtc_set_now();
000A15  1               ;       elsif (line = "help") or (line = "?") then
000A15  1               ;          help();
000A15  1               ;       elsif length(line) <> 0 then
000A15  1               ;          putln("You typed: """,line,"""");
000A15  1               ;       end;
000A15  1               ;    end loop;
000A15  1               ;  END toploop;
000A15  1               
000A15  1               RTC_TOP_LOOP:
000A15  1  A9 C1                LDA     #<CRLF_MSG
000A17  1  A0 0B                LDY     #>CRLF_MSG
000A19  1  A2 09                LDX     #9              ;MESSAGE
000A1B  1  20 03 01             JSR     PEM
000A1E  1               
000A1E  1  20 0B 0A             JSR     RTC_HELP
000A21  1               
000A21  1  A9 D8                LDA     #<RTC_TOP_LOOP1_MSG
000A23  1  A0 0C                LDY     #>RTC_TOP_LOOP1_MSG
000A25  1  A2 09                LDX     #9              ;MESSAGE
000A27  1  20 03 01             JSR     PEM
000A2A  1               
000A2A  1               
000A2A  1               RTC_TOP_LOOP_1:
000A2A  1  A9 FB                LDA     #<RTC_TOP_LOOP1_PROMPT
000A2C  1  A0 0C                LDY     #>RTC_TOP_LOOP1_PROMPT
000A2E  1  A2 09                LDX     #9              ;MESSAGE
000A30  1  20 03 01             JSR     PEM
000A33  1               
000A33  1               
000A33  1  A2 01                LDX     #01             ; CP/M console input call
000A35  1  20 03 01             JSR     PEM
000A38  1               
000A38  1  29 5F                AND     #%01011111      ; handle lower case responses to menu
000A3A  1               
000A3A  1  C9 45                CMP     #'E'
000A3C  1  F0 40                BEQ     JRTC_TOP_LOOP_EXIT
000A3E  1               
000A3E  1  C9 43                CMP     #'C'
000A40  1  F0 3F                BEQ     JRTC_TOP_LOOP_CHARGE
000A42  1               
000A42  1  C9 4E                CMP     #'N'
000A44  1  F0 3E                BEQ     JRTC_TOP_LOOP_NOCHARGE
000A46  1               
000A46  1  C9 41                CMP     #'A'
000A48  1  F0 3D                BEQ     JRTC_TOP_LOOP_START
000A4A  1               
000A4A  1  C9 54                CMP     #'T'
000A4C  1  F0 3C                BEQ     JRTC_TOP_LOOP_TIME
000A4E  1               
000A4E  1  C9 52                CMP     #'R'
000A50  1  F0 3B                BEQ     JRTC_TOP_LOOP_RAW
000A52  1               
000A52  1  C9 4C                CMP     #'L'
000A54  1  F0 3A                BEQ     JRTC_TOP_LOOP_LOOP
000A56  1               
000A56  1  C9 48                CMP     #'H'
000A58  1  F0 39                BEQ     JRTC_TOP_LOOP_HELP
000A5A  1               
000A5A  1  C9 44                CMP     #'D'
000A5C  1  F0 38                BEQ     JRTC_TOP_LOOP_DELAY
000A5E  1               
000A5E  1  C9 53                CMP     #'S'
000A60  1  F0 37                BEQ     JRTC_TOP_LOOP_SET
000A62  1               
000A62  1  48                   PHA
000A63  1  A9 10                LDA     #<RTC_TOP_LOOP1_OTHER1
000A65  1  A0 0E                LDY     #>RTC_TOP_LOOP1_OTHER1
000A67  1  A2 09                LDX     #9              ;MESSAGE
000A69  1  20 03 01             JSR     PEM
000A6C  1               
000A6C  1  68                   PLA
000A6D  1  A2 02                LDX     #02             ; CP/M Console output call
000A6F  1  20 03 01             JSR     PEM
000A72  1               
000A72  1  A9 1E                LDA     #<RTC_TOP_LOOP1_OTHER2
000A74  1  A0 0E                LDY     #>RTC_TOP_LOOP1_OTHER2
000A76  1  A2 09                LDX     #9              ;MESSAGE
000A78  1  20 03 01             JSR     PEM
000A7B  1               
000A7B  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000A7E  1               
000A7E  1               
000A7E  1               JRTC_TOP_LOOP_EXIT:
000A7E  1  4C 00 01             JMP     $0100
000A81  1               JRTC_TOP_LOOP_CHARGE:
000A81  1  4C 9C 0A             JMP     RTC_TOP_LOOP_CHARGE
000A84  1               JRTC_TOP_LOOP_NOCHARGE:
000A84  1  4C AB 0A             JMP     RTC_TOP_LOOP_NOCHARGE
000A87  1               JRTC_TOP_LOOP_START:
000A87  1  4C BA 0A             JMP     RTC_TOP_LOOP_START
000A8A  1               JRTC_TOP_LOOP_TIME:
000A8A  1  4C C9 0A             JMP     RTC_TOP_LOOP_TIME
000A8D  1               JRTC_TOP_LOOP_RAW:
000A8D  1  4C E1 0A             JMP     RTC_TOP_LOOP_RAW
000A90  1               JRTC_TOP_LOOP_LOOP:
000A90  1  4C 6D 0B             JMP     RTC_TOP_LOOP_LOOP
000A93  1               JRTC_TOP_LOOP_HELP:
000A93  1  4C 9B 0B             JMP     RTC_TOP_LOOP_HELP
000A96  1               JRTC_TOP_LOOP_DELAY:
000A96  1  4C 95 0B             JMP     RTC_TOP_LOOP_DELAY
000A99  1               JRTC_TOP_LOOP_SET:
000A99  1  4C 8F 0B             JMP     RTC_TOP_LOOP_SET
000A9C  1               
000A9C  1               
000A9C  1               
000A9C  1               RTC_TOP_LOOP_CHARGE:
000A9C  1  A9 02                LDA     #<RTC_TOP_LOOP1_CHARGE
000A9E  1  A0 0D                LDY     #>RTC_TOP_LOOP1_CHARGE
000AA0  1  A2 09                LDX     #9              ;MESSAGE
000AA2  1  20 03 01             JSR     PEM
000AA5  1  20 CF 09             JSR     RTC_CHARGE_ENABLE
000AA8  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000AAB  1               
000AAB  1               RTC_TOP_LOOP_NOCHARGE:
000AAB  1  A9 0D                LDA     #>RTC_TOP_LOOP1_NOCHARGE
000AAD  1  A0 1F                LDY     #<RTC_TOP_LOOP1_NOCHARGE
000AAF  1  A2 09                LDX     #9              ;MESSAGE
000AB1  1  20 03 01             JSR     PEM
000AB4  1  20 DD 09             JSR     RTC_CHARGE_DISABLE
000AB7  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000ABA  1               
000ABA  1               RTC_TOP_LOOP_START:
000ABA  1  A9 3D                LDA     #<RTC_TOP_LOOP1_START
000ABC  1  A0 0D                LDY     #>RTC_TOP_LOOP1_START
000ABE  1  A2 09                LDX     #9              ;MESSAGE
000AC0  1  20 03 01             JSR     PEM
000AC3  1  20 C1 09             JSR     RTC_RESTART
000AC6  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000AC9  1               
000AC9  1               RTC_TOP_LOOP_TIME:
000AC9  1  A9 51                LDA     #<RTC_TOP_LOOP1_TIME
000ACB  1  A0 0D                LDY     #>RTC_TOP_LOOP1_TIME
000ACD  1  A2 09                LDX     #9              ;MESSAGE
000ACF  1  20 03 01             JSR     PEM
000AD2  1  20 22 08             JSR     RTC_GET_TIME
000AD5  1  A9 21                LDA     #<RTC_PRINT_BUFFER
000AD7  1  A0 0E                LDY     #>RTC_PRINT_BUFFER
000AD9  1  A2 09                LDX     #9              ;MESSAGE
000ADB  1  20 03 01             JSR     PEM
000ADE  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000AE1  1               
000AE1  1               RTC_TOP_LOOP_RAW:
000AE1  1  A9 62                LDA     #<RTC_TOP_LOOP1_RAW
000AE3  1  A0 0D                LDY     #>RTC_TOP_LOOP1_RAW
000AE5  1  A2 09                LDX     #9              ;MESSAGE
000AE7  1  20 03 01             JSR     PEM
000AEA  1               
000AEA  1               RTC_TOP_LOOP_RAW1:
000AEA  1               
000AEA  1               ;	{ Read seconds }
000AEA  1  A2 00                LDX     #$00            ; seconds register in DS1302
000AEC  1  20 42 FD             JSR     RTC_READ        ; read value from DS1302, value is in Reg C
000AEF  1  98                   TYA
000AF0  1  48                   PHA
000AF1  1               ; digit 16
000AF1  1  18                   CLC
000AF2  1  4A                   LSR     A
000AF3  1  4A                   LSR     A
000AF4  1  4A                   LSR     A
000AF5  1  4A                   LSR     A
000AF6  1  29 07                AND     #$07
000AF8  1  18                   CLC
000AF9  1  69 30                ADC     #'0'
000AFB  1  8D 30 0E             STA     RTC_PRINT_BUFFER+15
000AFE  1               
000AFE  1               ; digit 17
000AFE  1  68                   PLA
000AFF  1  29 0F                AND     #$0F
000B01  1  18                   CLC
000B02  1  69 30                ADC     #'0'
000B04  1  8D 31 0E             STA     RTC_PRINT_BUFFER+16
000B07  1               
000B07  1               ;	{ Read minutes }
000B07  1               
000B07  1  A2 01                LDX     #$01            ; minutes register in DS1302
000B09  1  20 42 FD             JSR     RTC_READ        ; read value from DS1302, value is in Reg C
000B0C  1  98                   TYA
000B0D  1  48                   PHA
000B0E  1               ; digit 13
000B0E  1  18                   CLC
000B0F  1  4A                   LSR     A
000B10  1  4A                   LSR     A
000B11  1  4A                   LSR     A
000B12  1  4A                   LSR     A
000B13  1  29 07                AND     #$07
000B15  1  18                   CLC
000B16  1  69 30                ADC     #'0'
000B18  1  8D 2D 0E             STA     RTC_PRINT_BUFFER+12
000B1B  1               
000B1B  1               ; digit 14
000B1B  1  68                   PLA
000B1C  1  29 0F                AND     #$0F
000B1E  1  18                   CLC
000B1F  1  69 30                ADC     #'0'
000B21  1  8D 2E 0E             STA     RTC_PRINT_BUFFER+13
000B24  1               
000B24  1               ; digit 15
000B24  1  A9 3A                LDA     #':'
000B26  1  8D 2F 0E             STA     RTC_PRINT_BUFFER+14
000B29  1               
000B29  1               ; digits 1-12 and 18-20 are spaces
000B29  1  A9 20                LDA     #' '            ; space
000B2B  1  8D 34 0E             STA     RTC_PRINT_BUFFER+19
000B2E  1  8D 33 0E             STA     RTC_PRINT_BUFFER+18
000B31  1  8D 32 0E             STA     RTC_PRINT_BUFFER+17
000B34  1  8D 2C 0E             STA     RTC_PRINT_BUFFER+11
000B37  1  8D 2B 0E             STA     RTC_PRINT_BUFFER+10
000B3A  1  8D 2A 0E             STA     RTC_PRINT_BUFFER+09
000B3D  1  8D 29 0E             STA     RTC_PRINT_BUFFER+08
000B40  1  8D 28 0E             STA     RTC_PRINT_BUFFER+07
000B43  1  8D 27 0E             STA     RTC_PRINT_BUFFER+06
000B46  1  8D 26 0E             STA     RTC_PRINT_BUFFER+05
000B49  1  8D 25 0E             STA     RTC_PRINT_BUFFER+04
000B4C  1  8D 24 0E             STA     RTC_PRINT_BUFFER+03
000B4F  1  8D 23 0E             STA     RTC_PRINT_BUFFER+02
000B52  1  8D 22 0E             STA     RTC_PRINT_BUFFER+01
000B55  1  8D 21 0E             STA     RTC_PRINT_BUFFER+00
000B58  1               
000B58  1  A9 21                LDA     #<RTC_PRINT_BUFFER
000B5A  1  A0 0E                LDY     #>RTC_PRINT_BUFFER
000B5C  1  A2 09                LDX     #9              ;MESSAGE
000B5E  1  20 03 01             JSR     PEM
000B61  1               
000B61  1  A2 01                LDX     #01             ; CP/M console input call
000B63  1  20 03 01             JSR     PEM
000B66  1               
000B66  1  C9 20                CMP     #' '            ; space
000B68  1  F0 80                BEQ     RTC_TOP_LOOP_RAW1
000B6A  1               
000B6A  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000B6D  1               
000B6D  1               RTC_TOP_LOOP_LOOP:
000B6D  1  A9 A9                LDA     #<RTC_TOP_LOOP1_LOOP
000B6F  1  A0 0D                LDY     #>RTC_TOP_LOOP1_LOOP
000B71  1  A2 09                LDX     #9              ;MESSAGE
000B73  1  20 03 01             JSR     PEM
000B76  1               
000B76  1               
000B76  1               RTC_TOP_LOOP_LOOP1:
000B76  1  20 22 08             JSR     RTC_GET_TIME
000B79  1               
000B79  1  A9 21                LDA     #<RTC_PRINT_BUFFER;SEND
000B7B  1  A0 0E                LDY     #>RTC_PRINT_BUFFER
000B7D  1  A2 09                LDX     #9              ;MESSAGE
000B7F  1  20 03 01             JSR     PEM
000B82  1               
000B82  1  A2 01                LDX     #01             ; CP/M console input call
000B84  1  20 03 01             JSR     PEM
000B87  1               
000B87  1  C9 20                CMP     #' '
000B89  1  4C 76 0B             JMP     RTC_TOP_LOOP_LOOP1
000B8C  1               
000B8C  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000B8F  1               
000B8F  1               RTC_TOP_LOOP_SET:
000B8F  1  20 EA 08             JSR     RTC_SET
000B92  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000B95  1               
000B95  1               RTC_TOP_LOOP_DELAY:
000B95  1  20 EB 09             JSR     RTC_TEST_BIT_DELAY
000B98  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000B9B  1               
000B9B  1               RTC_TOP_LOOP_HELP:
000B9B  1  20 0B 0A             JSR     RTC_HELP
000B9E  1  4C 2A 0A             JMP     RTC_TOP_LOOP_1
000BA1  1               
000BA1  1               ;
000BA1  1               ; Text Strings
000BA1  1               ;
000BA1  1               MSG:
000BA1  1  53 74 61 72          .BYTE   "Start Real Time Clock Program"
000BA5  1  74 20 52 65  
000BA9  1  61 6C 20 54  
000BBE  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000BC0  1  24                   .BYTE   "$"             ; Line terminator
000BC1  1               
000BC1  1               CRLF_MSG:
000BC1  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000BC3  1  24                   .BYTE   "$"             ; Line terminator
000BC4  1               
000BC4  1               TESTING_BIT_DELAY_MSG:
000BC4  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000BC6  1  54 65 73 74          .BYTE   "Testing bit delay.  Successful test is approximately xx seconds."
000BCA  1  69 6E 67 20  
000BCE  1  62 69 74 20  
000C06  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000C08  1  53 74 61 72          .BYTE   "Start clock and press space bar to continue."
000C0C  1  74 20 63 6C  
000C10  1  6F 63 6B 20  
000C34  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000C36  1  24                   .BYTE   "$"             ; Line terminator
000C37  1               
000C37  1               TESTING_BIT_DELAY_OVER:
000C37  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000C39  1  54 65 73 74          .BYTE   "Test complete.  Stop clock."
000C3D  1  20 63 6F 6D  
000C41  1  70 6C 65 74  
000C54  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000C56  1  24                   .BYTE   "$"             ; Line terminator
000C57  1               
000C57  1               RTC_HELP_MSG:
000C57  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000C59  1  52 54 43 3A          .BYTE   "RTC: Version 1.0"
000C5D  1  20 56 65 72  
000C61  1  73 69 6F 6E  
000C69  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000C6B  1  52 54 43 3A          .BYTE   "RTC: Commands: (E)xit (T)ime st(A)rt (S)et (R)aw (L)oop (C)harge"
000C6F  1  20 43 6F 6D  
000C73  1  6D 61 6E 64  
000CAB  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000CAD  1  20 20 20 20          .BYTE   "               (N)ocharge (D)elay (H)elp"
000CB1  1  20 20 20 20  
000CB5  1  20 20 20 20  
000CD5  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000CD7  1  24                   .BYTE   "$"             ; Line terminator
000CD8  1               
000CD8  1               RTC_TOP_LOOP1_MSG:
000CD8  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000CDA  1  52 54 43 3A          .BYTE   "RTC: trickle charger disabled."
000CDE  1  20 74 72 69  
000CE2  1  63 6B 6C 65  
000CF8  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000CFA  1  24                   .BYTE   "$"             ; Line terminator
000CFB  1               
000CFB  1               RTC_TOP_LOOP1_PROMPT:
000CFB  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000CFD  1  52 54 43 3E          .BYTE   "RTC>"
000D01  1  24                   .BYTE   "$"             ; Line terminator
000D02  1               
000D02  1               RTC_TOP_LOOP1_CHARGE:
000D02  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D04  1  54 72 69 63          .BYTE   "Trickle charger enabled."
000D08  1  6B 6C 65 20  
000D0C  1  63 68 61 72  
000D1C  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D1E  1  24                   .BYTE   "$"             ; Line terminator
000D1F  1               
000D1F  1               RTC_TOP_LOOP1_NOCHARGE:
000D1F  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D21  1  54 72 69 63          .BYTE   "Trickle charger disabled."
000D25  1  6B 6C 65 20  
000D29  1  63 68 61 72  
000D3A  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D3C  1  24                   .BYTE   "$"             ; Line terminator
000D3D  1               
000D3D  1               RTC_TOP_LOOP1_START:
000D3D  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D3F  1  52 65 73 74          .BYTE   "Restarting RTC."
000D43  1  61 72 74 69  
000D47  1  6E 67 20 52  
000D4E  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D50  1  24                   .BYTE   "$"             ; Line terminator
000D51  1               
000D51  1               RTC_TOP_LOOP1_TIME:
000D51  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D53  1  43 75 72 72          .BYTE   "Current time: "
000D57  1  65 6E 74 20  
000D5B  1  74 69 6D 65  
000D61  1  24                   .BYTE   "$"             ; Line terminator
000D62  1               
000D62  1               RTC_TOP_LOOP1_RAW:
000D62  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000D64  1  52 61 77 20          .BYTE   "Raw read Loop.  Press SPACE BAR for next or any other key to stop."
000D68  1  72 65 61 64  
000D6C  1  20 4C 6F 6F  
000DA6  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000DA8  1  24                   .BYTE   "$"             ; Line terminator
000DA9  1               
000DA9  1               RTC_TOP_LOOP1_LOOP:
000DA9  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000DAB  1  43 6C 6F 63          .BYTE   "Clock Loop.  Press SPACE BAR for next or any other key to stop."
000DAF  1  6B 20 4C 6F  
000DB3  1  6F 70 2E 20  
000DEA  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000DEC  1  24                   .BYTE   "$"             ; Line terminator
000DED  1               
000DED  1               RTC_TOP_LOOP1_SET_TIME:
000DED  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000DEF  1  54 49 4D 45          .BYTE   "TIME (HH:MM)>"
000DF3  1  20 28 48 48  
000DF7  1  3A 4D 4D 29  
000DFC  1  24                   .BYTE   "$"             ; Line terminator
000DFD  1               
000DFD  1               RTC_TOP_LOOP1_SET_DATE:
000DFD  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000DFF  1  44 41 54 45          .BYTE   "DATE (MM/DD/YY)>"
000E03  1  20 28 4D 4D  
000E07  1  2F 44 44 2F  
000E0F  1  24                   .BYTE   "$"             ; Line terminator
000E10  1               
000E10  1               
000E10  1               RTC_TOP_LOOP1_OTHER1:
000E10  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000E12  1  59 4F 55 20          .BYTE   "YOU TYPED: "
000E16  1  54 59 50 45  
000E1A  1  44 3A 20     
000E1D  1  24                   .BYTE   "$"             ; Line terminator
000E1E  1               
000E1E  1               RTC_TOP_LOOP1_OTHER2:
000E1E  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000E20  1  24                   .BYTE   "$"             ; Line terminator
000E21  1               
000E21  1               RTC_PRINT_BUFFER:
000E21  1  20 20 20 20          .BYTE   "                     "; Buffer for formatted date & time to print
000E25  1  20 20 20 20  
000E29  1  20 20 20 20  
000E36  1  0A 0D                .BYTE   $0A, $0D        ; line feed and carriage return
000E38  1  24                   .BYTE   "$"             ; line terminator
000E39  1               
000E39  1               
000E39  1               .end
